{"pageProps":{"post":{"title":"백준 알고리즘 A1004 어린 왕자","excerpt":"어린 왕자는 소혹성 B-664에서 자신이 사랑하는 한 송이 장미를 위해 살아간다. 어느 날 장미가 위험에 빠지게 된 것을 알게 된 어린 왕자는, 장미를 구하기 위해 은하수를 따라 긴 여행을 하기 시작했다.","coverImage":"http://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/images/boj-og-1200.png","date":"2021-04-22 21:42:23","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA"],"group":"백준 알고리즘","comment":true,"publish":true,"slug":"A1004","content":"<h1>어린 왕자</h1>\n<p><img src=\"https://shields.io/badge/java-JDK%2014-lightgray?logo=java&#x26;style=plastic&#x26;logoColor=white&#x26;labelColor=orange\" alt=\"JAVA\"></p>\n<p>🔗 <a href=\"https://www.acmicpc.net/problem/1004\">전체 1004번 문제</a></p>\n<br />\n<h2>조건</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">시간제한</th>\n<th align=\"center\">메모리 제한</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">2초</td>\n<td align=\"center\">128MB</td>\n</tr>\n</tbody>\n</table>\n<br />\n<h2>문제</h2>\n<p>어린 왕자는 소혹성 B-664에서 자신이 사랑하는 한 송이 장미를 위해 살아간다. 어느 날 장미가 위험에 빠지게 된 것을 알게 된 어린 왕자는, 장미를 구하기 위해 은하수를 따라 긴 여행을 하기 시작했다. 하지만 어린 왕자의 우주선은 그렇게 좋지 않아서 행성계 간의 이동을 최대한 피해서 여행해야 한다. 아래의 그림은 어린 왕자가 펼쳐본 은하수 지도의 일부이다.</p>\n<p align=\"center\">\r\n\t<img src=\"https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/upload/201003/dfcmhrjj_113gw6bcng2_b.gif\" width=\"512px\" />\r\n</p>\n<p>빨간 실선은 어린 왕자가 출발점에서 도착점까지 도달하는데 있어서 필요한 행성계 진입/이탈 횟수를 최소화하는 경로이며, 원은 행성계의 경계를 의미한다. 이러한 경로는 여러 개 존재할 수 있지만 적어도 3번의 행성계 진입/이탈이 필요하다는 것을 알 수 있다.</p>\n<p>위와 같은 은하수 지도, 출발점, 도착점이 주어졌을 때 어린 왕자에게 필요한 최소의 행성계 진입/이탈 횟수를 구하는 프로그램을 작성해 보자. (행성계의 경계가 맞닿거나 서로 교차하는 경우는 없다고 가정한다. 또한, 출발점이나 도착점이 행성계 경계에 걸쳐진 경우 역시 입력으로 주어지지 않는다.)</p>\n<br />\n<h2>입력</h2>\n<p>입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 그 다음 줄부터 각각의 테스트케이스에 대해 첫째 줄에 출발점 (x<sub>1</sub>, y<sub>1</sub>)과 도착점 `(x<sub>2</sub>, y<sub>2</sub>)이 주어진다. 두 번째 줄에는 행성계의 개수 n이 주어지며, 세 번째 줄부터 n줄에 걸쳐 행성계의 중점과 반지름 (c<sub>x</sub>, c<sub>y</sub>, r)이 주어진다. 입력제한은 다음과 같다. (-1000 ≤ x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub>, c<sub>x</sub>, c<sub>y</sub> ≤ 1000, 1 ≤ r ≤ 1000, 1 ≤ n ≤ 50)</p>\n<p>좌표와 반지름은 모두 정수이다.</p>\n<br />\n<h2>출력</h2>\n<p>각 테스트 케이스에 대해 어린 왕자가 거쳐야 할 최소의 행성계 진입/이탈 횟수를 출력한다.</p>\n<br />\n<h2>케이스</h2>\n<ul>\n<li>\n<p>입력</p>\n<p>2<br>\n-5 1 12 1<br>\n7<br>\n1 1 8<br>\n-3 -1 1<br>\n2 2 2<br>\n5 5 1<br>\n-4 5 1<br>\n12 1 1<br>\n12 1 2<br>\n-5 1 5 1<br>\n1<br>\n0 0 2</p>\n</li>\n<li>\n<p>출력</p>\n<p>3<br>\n0</p>\n</li>\n</ul>\n<br />\n<h2>풀이</h2>\n<p>1002번째 알고리즘의 내용을 응용하면 쉽게 풀 수 있는 문제인 것 같다. 실제로 별다른 레퍼런스를 찾지도 않고 풀 수 있었으니.</p>\n<p>문제를 풀기 전에 몇 가지 집고 넘아갈 게 있다.<br>\n숫자들 때문에 입력의 한 세트를 착각하기 쉽다.</p>\n<p>위 예제를 기준으로 설명하면, 첫 번째 숫자는 세트의 갯수. 본문에서는 <code>2</code>이므로, 두 세트를 테스트하므로 결과는 두 줄이 출력된다.<br>\n이후 테스트에 필요한 데이터가 출력된다.</p>\n<p>-5 1 12 1 &#x3C;= x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub><br>\n7 &#x3C;= 행성 갯수<br>\n1 1 8 &#x3C;= c<sub>x1</sub>, c<sub>y1</sub>, r<sub>1</sub><br>\n-3 -1 1<br>\n2 2 2<br>\n5 5 1<br>\n-4 5 1<br>\n12 1 1<br>\n12 1 2 &#x3C;= 행성 갯수만큼 출력됨</p>\n<p>또한, 결과는 행성계의 진입/이탈 횟수를 통틀어서 출력하므로 굳이 진입/이탈을 구분하여 저장할 필요는 없다.</p>\n<p>문제에서 <strong>출발점에서 도착점까지 가는데 통과해야하는 행성계(이하 원, circle)의 최소</strong>를 목적으로 두기 때문에, 반드시 통과해야하는 원만 계산하면 된다.<br>\n출발/도착점이 임의의 원 안에 포함될 경우 반드시 진입/이탈이 일어난다. 따라서, 출발/도착점을 온전히 포함하는 원의 갯수를 계산하면 진입/이탈의 횟수를 구할 수 있다.<br>\n주의할 점이 있는데, <strong>한 원이 출발/도착점을 모두 포함할 경우 계산에서 제외</strong>시켜야 한다.<br>\n하나의 원이 출발/도착점을 전부 포함할 경우, 원 안에서 이동하기 때문에 진입/이탈이 일어나지 않기 때문.</p>\n<p>-그림-</p>\n<p>원리는 간단하다. 원점과 점의 거리를 계산한다. 계산한 거리가 원의 반지름보다 짧을 경우, 해당 원은 점을 포함하는 셈이다.<br>\n이를 식으로 정리하면 아래와 같다.</p>\n<br />\n<h3>완성....?</h3>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * 백준 전체 1003 문제 알고리즘 클래스\n *\n * <span class=\"token keyword\">@author</span> RWB\n * <span class=\"token keyword\">@since</span> 2021.04.21 Wed 23:29:03\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token number\">41</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * 메인 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">args</span>: [String[]] 매개변수\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// N = 0일 때, 0이 호출되는 횟수</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// N = 0일 때, 1이 호출되는 횟수</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// N = 1일 때, 0이 호출되는 횟수</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// N = 1일 때, 1이 호출되는 횟수</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">int</span> f0 <span class=\"token operator\">=</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> f1 <span class=\"token operator\">=</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f0 <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * 피보나치 값 반환 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">n</span>: [int] 인덱스\n\t *\n\t * <span class=\"token keyword\">@return</span> [int] 피보나치 값\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 인덱스가 0일 경우</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 인덱스가 1일 경우</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 인덱스가 2 이상일 경우 (연산 가능)</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br />\n<p>위 코드는 크게 두 가지 문제가 있는데, 우선 <code>n = 0, 1</code>일 때의 처리가 정상적으로 이루어지지 않고 있다.<br>\n<code>f(1) = f(0) + f(-1)</code><br>\nN이 문제되기 이전에 이 코드는 런타임 시간 초과로 실패한다. 왜일까?</p>\n<p>위 코드는 <strong>불필요한 연산을 너무 많이 수행한다.</strong> 피보나치 수열의 특성 상 <code>f(N)</code>을 계산할 경우, <code>f(N - 1)</code>, <code>f(N - 2)</code> ... 등과 같이 N 이하의 피보나치 값까지 전부 계산하게 된다.<br>\n다시 말하면, <code>f(6)</code>을 연산할 경우 계산 과정에서 자연스레 <code>f(4)</code>, <code>f(2)</code> 등의 피보나치 값을 구할 수 있다.</p>\n<p>위 이론을 알고리즘에 적용하면 아래와 같이 응용할 수 있다.<br>\nN을 총 3번 입력한다고 가정하면 N<sub>1</sub>, N<sub>2</sub>, N<sub>3</sub>으로 구분할 수 있다.</p>\n<p>N<sub>2</sub> = 8 -> <code>f(8)</code> 부터 <code>f(0)</code>까지의 값을 구할 수 있음.<br>\nN<sub>3</sub> = 4 -> <code>f(4)</code> 부터 <code>f(0)</code>까지의 값을 구할 수 있음.</p>\n<p>피보나치 연산값을 저장하면 N<sub>n</sub> > N<sub>n+1</sub>일 경우 굳이 <strong>추가적인 연산을 진행하지 않고 이미 저장된 값을 출력</strong>만 함으로써, 런타임 리소스를 줄일 수 있다.</p>\n<p>클래스의 멤버변수로 <strong>Integer 배열을 선언</strong>하여 피보나치 수열값을 저장하고, 알고리즘 연산에 이를 활용하면 될 것 같다.</p>\n<blockquote>\n<p>int는 Primitive(자료형) 데이터고, Integer는 Wrapper 클래스다. Wrapper 클래스는 null 입력이 가능하다는 특징이 있으므로, Integer 역시 숫자 이외에 null값을 입력할 수 있다.</p>\n</blockquote>\n<p>Integer 배열의 초기값은 null로 지정되므로, 배열의 값이 null인 인덱스는 아직 피보나치 수열 계산이 이루어지지 않은 인덱스라고 판단할 수 있다.</p>\n<p>다행히 문제에서 주어진 <code>N</code>의 조건은 <code>0 &#x3C;= N &#x3C;= 40</code>이므로, 배열의 인덱스는 최대 41을 넘지 않음을 알 수 있다.<br>\n(배열은 0부터 시작하므로 40개가 아닌 0을 포함한 41개임에 유의하자)</p>\n<p>이후 피보나치 연산에서 각 과정의 값을 배열에 저장하는 로직을 추가한다.<br>\n배열의 값이 null일 경우, 아직 연산이 진행되지 않았으므로 피보나치 연산을 수행하고 배열에 저장한다.<br>\n반대로, 배열이 특정 숫자값을 가질 경우, 이미 연산이 진행된 인덱스이므로 별도의 연산을 거치지 않고 해당 값을 바로 출력한다.</p>\n<br />\n<h2>전체 소스</h2>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">all<span class=\"token punctuation\">.</span>a1003</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * 백준 전체 1003 문제 알고리즘 클래스\n *\n * <span class=\"token keyword\">@author</span> RWB\n * <span class=\"token keyword\">@since</span> 2021.04.22 Thu 21:42:23\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token number\">41</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * 메인 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">args</span>: [String[]] 매개변수\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 피보나치 수열 초기값 (N = 0)</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 피보나치 수열 초기값 (N = 1)</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// n이 0일 경우</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// n이 1일 경우</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// 초기값이 아닐 경우</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tscanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * 피보나치 값 반환 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">n</span>: [int] 인덱스\n\t *\n\t * <span class=\"token keyword\">@return</span> [int] 피보나치 값\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 해당 인덱스의 피보나치가 아직 연산되지 않았을 경우</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tarr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n"}},"__N_SSG":true}