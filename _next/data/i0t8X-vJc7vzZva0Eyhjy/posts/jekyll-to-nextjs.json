{"pageProps":{"page":{"type":"posts","prev":{"title":"도메인이란?","excerpt":"Jekyll에서 Next.js로의 블로그 이동기","coverImage":"https://media.vlpt.us/images/hanblueblue/post/0261303c-2557-4673-9d91-24b08c6dde16/Tomcat-logo.png","date":"2021-05-22 12:52:51","type":"posts","category":"WEB","tag":["WEB(웹)"],"comment":true,"publish":true,"slug":"about-domain","content":"\r\n# Domain(도메인)이란?\r\n\r\n도메인을 이해하기 위해선, IP에 대해 짚고 넘어가야 한다.  \r\n인터넷에 연결된 모든 디바이스(컴퓨터, 스마트폰, 공유기 등)는 <span class=\"blue-500\">고유한 12자리 숫자로 구성된 IP주소</span>를 가진다.  \r\nIP를 유동성으로 나누면 크게 유동 IP, 고정 IP로 분류할 수 있다.\r\n\r\n* <span class=\"primary\">유동 IP</span>: 임의의 시점마다 IP주소가 갱신되는 IP. 갱신 주기는 일정하지 않음. 대부분의 인터넷 회선에 적용됨.\r\n* <span class=\"primary\">고정 IP</span>: 회선에 고정된 IP를 부여하며, 해당 회선의 IP는 갱신되지 않음. 부가서비스 형태로 제공되며, 쇼핑몰이나 회사 등 지속적으로 시스템을 운영해야 할 경우 적합함.\r\n\r\n우리가 원하는 장소에 방문하기 위해 주소를 찾듯이, <span class=\"green-500\">특정 서버에서 운영하는 웹 사이트를 방문하기 위해선 해당 서버의 주소인 IP가 필요</span>하다.  \r\n불행히도, IP는 불규칙적인 숫자로 이루어져있어, 사람이 쉽게 기억하기 다소 어렵다. 이러한 불편함을 해소하기 위한 것이 Domain(도메인)이다.\r\n\r\n# 그래서 도메인을 왜 쓰는데?\r\n\r\n우리가 흔히 <span class=\"green-A700\">네이버</span>라고 부르는 사이트의 실제 IP는 [125.209.222.141](http://125.209.222.141)이다. 하지만 우리들 중 그 누구도 저런 IP로 <span class=\"green-A700\">네이버</span>에 접속하지 않는다. 대신 우리는 [https://www.naver.com](https://www.naver.com)이라는 도메인으로 접속한다. 이유는 간단하다. 주소 자체에 <span class=\"green-A700\">naver</span>라는 키워드가 포함되어 있으므로 기억하기 쉽기 때문이다.\r\n\r\n<span class=\"pink-400\">도메인</span>은 숫자가 아닌, 문자 형태로 이루어진 주소다. 문자이므로, 주소에 의미를 부여하기 용이하다. 사용자가 주소를 기억하기 쉬워 주소에 대한 접근성을 높여준다.  \r\n생성한 <span class=\"pink-400\">도메인</span>에 원하는 IP를 연결하면 <span class=\"pink-400\">도메인</span> 주소를 통해서도 해당 IP에 접근할 수 있다.\r\n<span class=\"pink-400\">도메인</span> 제공 업체에 따라, 영숫자 뿐만 아니라 한글과 같은 유니코드 문자도 지원하므로, 딱딱한 IP 대신 개성있는 주소를 사용할 수 있는 것이다.\r\n\r\n# 도메인의 구조 <- URL로 뺄 것\r\n\r\n도메인은 아래와 같은 구조로 이루어진다.\r\n\r\n<p class=\"large\" align=\"center\"><span class=\"lightBlue-400\">https</span>://<span class=\"green-400\">rwb0104</span>.<span class=\"yellow-400\">github</span>.<span class=\"pink-400\">com</span>:<span class=\"amber-400\">443</span></p>\r\n\r\n* <span class=\"lightBlue-400\">Protocol(프로토콜)</span>: 도메인의 프로토콜. 웹 페이지는 `http` 혹은 `https` 중 하나를 선택한다. 이 중 `https`는 <span class=\"deepPurple-400\">SSL</span>이 적용되어 <span class=\"red-400\">서버와 클라이언트 간의 통신이 암호화</span>됨을 의미한다.\r\n\r\n* <span class=\"green-400\">SLD(Second Level Domain; 서브도메인, 호스트)</span>: <span class=\"pink-400\">도메인</span>의 확장자. 같은 <span class=\"pink-400\">도메인</span>에 <span class=\"pink-400\">서브도메인</span>을 여러개 추가할 수 있으며, 이를 통해 각 <span class=\"pink-400\">서브도메인</span>별로 다른 서비스를 제공할 수 있다. `www`, `admin`, `dev` 등 다양한 문자열로 지정할 수 있다.\r\n  * [naver.com](https://naver.com): 기본 네이버 홈페이지. 각 플랫폼(데스크탑, 모바일 등)에 가장 적합한 사이트로 리다이렉트\r\n  * [www.naver.com](https://www.naver.com): 데스크탑용 네이버 홈페이지\r\n  * [m.naver.com](https://m.naver.com): 모바일용 네이버 홈페이지\r\n  * [map.naver.com](https://map.naver.com): 네이버 지도\r\n\r\n* <span class=\"yellow-400\">Domain(도메인)</span>: 도메인의 이름. 대부분 해당 도메인이 제공하는 서비스의 아이덴티티를 위해 제공하는 서비스의 이름을 사용한다. `naver`, `github`, `steam`, `instagram` 등이 있다.\r\n\r\n* <span class=\"pink-400\">TLD(Top Level Domain; 최상위도메인)</span>: 해당 도메인을 관리하는 국가, 업체, 기관 등을 나타낸다. <span class=\"pink-400\">서브도메인</span> 및 <span class=\"pink-400\">도메인</span>과 달리 사용자가 임의로 지정할 수 없으며, 반드시 존재하는 최상위 도메인 중 하나를 선택해야 한다. 최상위 도메인의 예시와 의미는 아래와 같으며, 대부분의 최상위 도메인은 사이트의 용도와 일치하지 않아도 무관하다.\r\n  * <span class=\"primary\">.kr</span>: 대한민국 국가코드 도메인\r\n  * <span class=\"primary\">.us</span>: 미국 국가코드 도메인\r\n  * <span class=\"primary\">.com</span>: 영리 기업, 단체 도메인\r\n  * <span class=\"primary\">.net</span>: 네트워크 기관\r\n  * <span class=\"primary\">.org</span>: 비영리 기관\r\n\r\n* <span class=\"amber-400\">포트</span>: 해당 사이트를 서비스하는 포트. http의 경우 `80`, https의 경우 `443` 포트를 기본으로 사용한다. 기본 포트를 사용할 경우 URL에 표시되지 않는다.\r\n\r\n해당 URL을 기준으로 하위 디렉토리나 쿼리 등이 붙게 된다.\r\n\r\n# 도메인의 원리\r\n\r\n여기서 의문점이 한 가지 생긴다. IP [125.209.222.141](http://125.209.222.141)와 <span class=\"pink-400\">도메인</span> [https://www.naver.com](https://www.naver.com)가 <span class=\"green-A700\">네이버</span>를 가리키는 주소인건 알겠는데, 인터넷은 과연 두 주소의 연결고리를 어떻게 아는 걸까?\r\n\r\n이는 <span class=\"pink-400\">도메인</span>의 동작 원리를 보면 알 수 있다.\r\n\r\n-- 사진 --\r\n\r\n1. 사용자가 <span class=\"pink-400\">도메인</span>에 접근을 요청한다.\r\n2. 사용자의 네트워트에 지정된 로컬<span class=\"pink-400\">DNS(Domain Name System)</span>에 <span class=\"pink-400\">도메인</span>의 정보를 요청한다.\r\n3. 로컬<span class=\"pink-400\">DNS(Domain Name System)</span>에 해당 정보가 있을 경우, 정보를 즉시 반환한다.\r\n4. 전 세계에 구축된 Root <span class=\"pink-400\">DNS(Domain Name System)</span> 중 근접한 Root <span class=\"pink-400\">DNS</span>에 <span class=\"pink-400\">도메인</span>의 정보를 요청한다.\r\n5. Root <span class=\"pink-400\">DNS</span>가 해당 도메인의 정보를 보유 중인 <span class=\"pink-400\">DNS</span>의 정보를 전달한다.\r\n   * ex) `.com`, `.net`, `.kr`, `.io` 등 해당"},"next":{"title":"Tomcat(톰캣) 현재 콘솔창에서 구동하기","excerpt":"Jekyll에서 Next.js로의 블로그 이동기","coverImage":"https://media.vlpt.us/images/hanblueblue/post/0261303c-2557-4673-9d91-24b08c6dde16/Tomcat-logo.png","date":"2021-05-26 16:32:16","type":"posts","category":"WAS","tag":["WAS","WEB(웹)"],"comment":true,"publish":true,"slug":"tomcat-current-window","content":"\r\n# 왜 자꾸 꺼지는거야!\r\n\r\n오늘도 어느때와 다름없이 톰캣을 구동하는 A씨. 어제까지만 해도 잘 되던 톰캣이 무슨 오류가 있는지 구동 중에 바로 꺼져버린다. 꺼지기 직전의 순간 무슨 오류가 뜬 거 같은데..... 너무 빨라서 도통 확인할 수가 없다. 할 수 없이 일일이 로그를 찾아보며 오류를 수정하는 A씨. 건드린 것도 없는데, 왜 이러는 걸까?\r\n\r\n# 왜?\r\n\r\n톰캣이 콘솔 형태로 실행되는 것은 맞지만, 실행되는 프로세스를 보면 살짝 다르다. `startup.bat`을 실행하면 cmd창이 뜬 뒤 꺼지면서 곧바로 Tomcat 창이 표시된다. <span class=\"primary\">톰캣을 구동하면 항상 새로운 창이 뜨기 때문에, 톰캣이 오류로 인해 동작이 중지되면 창이 곧바로 닫히게 된다.</span>\r\n\r\n# 해결책?\r\n\r\n그렇다고 해결책이 없는 건 아니고, `startup.bat`의 간단한 수정을 통해 톰캣이 <span class=\"primary\">현재 창에서 동작</span>하도록 수정할 수 있다. \r\n\r\n`startup.bat`을 메모장으로 열면, 맨 아래에 `call \"%EXECUTABLE%\" run %CMD_LINE_ARGS%` 구문이 존재한다. 여기서 가운데 `run`을 `start`로 변경한다.\r\n\r\n즉 `call \"%EXECUTABLE%\" start %CMD_LINE_ARGS%`로 구문을 변경하고 저장하면 된다.\r\n\r\n이후 `startup.bat`을 클릭하여 실행하지 말고, `cmd`창 하나를 킨 다음에, 해당 콘솔에서 `startup.bat`을 호출하면 새 창이 뜨지 않고 호출한 콘솔에서 톰캣이 구동된다.  \r\n톰캣이 종료돼도 콘솔창이 꺼지지 않으므로, 편하게 메시지를 확인할 수 있다."}},"group":[],"post":{"title":"Jekyll에서 Next.js로","excerpt":"Jekyll에서 Next.js로의 블로그 이동기","coverImage":"https://user-images.githubusercontent.com/50317129/119211732-cf6de280-baee-11eb-8539-f2f5344fecb1.png","date":"2021-05-21 15:09:33","type":"posts","category":"잡담","tag":["React(리액트)","Next.js","개발 블로그","Jekyll","Next.js"],"comment":true,"publish":true,"slug":"jekyll-to-nextjs","content":"<h1>Bye, Jekyll!</h1>\n<div>\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/119211743-e44a7600-baee-11eb-85d0-f21c1f68debc.png\" />\r\n</div>\n<p>기존에 <a href=\"http://jekyllrb-ko.github.io/\" target=\"_blank\" class=\"pink-500\">Jekyll</a>로 운영하던 블로그를 버리고 React 기반의 <span class=\"blue-500\">Next.js</span>를 통해 블로그를 새로 개발했다.</p>\n<p>Github Pages를 처음 접했을 때, 호스팅을 반드시 <span class=\"pink-500\">Jekyll</span> 기반으로 해야한다고 착각하고있었다. 사실 조금만 생각해보면 상관 없던건데.</p>\n<p>최근에 React를 접했는데, 생각보다 꽤나 매력적인 프레임워크라 소소하게나마 뭔가 만들어보고 싶었다.<br>\n블로그가 적절한 프로젝트(?)가 될 것 같았다. 명색이 개발자인데 블로그 하나 정도는 직접 개발해야 할 것 같기도 하고....</p>\n<h1>굳이 멀쩡한 블로그 놔두고?</h1>\n<p>한동안 안 하긴 했지만, 지금까진 <span class=\"pink-500\">Jekyll</span> 블로그를 운영하고 있었다. <a href=\"http://taylantatli.github.io/Moon/\">Moon Theme</a>를 적용해서 사용했었는데, 크고작은 불편함이 있었다.</p>\n<br />\n<ol>\n<li>\n<p><b class=\"green-500\">Jekyll이라는 생소한 환경</b></p>\n<p>Github의 개발언어는 <span class=\"red-500\">Ruby</span>다. 그래서일까, Github Pages의 기본 배포는 <span class=\"red-500\">Ruby</span> 기반 프레임워크인 <span class=\"pink-500\">Jekyll</span>을 따라간다.<br>\n문제는 한국엔 <span class=\"pink-500\">Jekyll</span>은 물론, <span class=\"red-500\">Ruby</span>라는 언어 자체의 수요가 많지 않다. 단순 블로그 하나 운영하기 위해 생판 모르는 언어를 접해야 한다는 점은 무시할 수 없는 디메리트.</p>\n<p>물론 <span class=\"red-500\">Ruby</span>를 직접적으로 개발하진 않지만 <span class=\"pink-500\">Jekyll</span> 생태계 또한 그리 친숙한 형태는 아니였다.</p>\n</li>\n<li>\n<p><b class=\"green-500\">타인이 개발한 소스의 이해</b></p>\n<p>1번과 같은 문제로, 밑바닥부터 <span class=\"pink-500\">Jekyll</span>을 개발할 수 없었다.<br>\n특정 기능에 대한 소요가 발생할 경우, 현재 테마에 어울리도록 \"<strong>잘 디자인</strong>\"하는 것이 중요하다. 하지만 사용자의 입장에서 테마 개발자의 디자인 철학을 이해하는 것은 단순 디자인과는 또 다른 문제. 구조 파악은 덤<br>\n더군다나 내 경우 모자란 실력에 이상한 강박증까지 있어서, 내 스타일로 작성되지 않은 코드의 리딩을 못 한다. 또한, 프로젝트의 블랙박스를 싫어한다. 실력은 없는 주제에 프로젝트 내에 내가 모르는 코드 덩어리가 있는 걸 굉장히 싫어한다. 디자인 감각이 좋지도 못 해서 결과물도 기존 테마와 이질적인 무언가가 나온다.</p>\n</li>\n<li>\n<p><b class=\"green-500\">편리한 사용자 확장성, 불편한 개발자 확장성</b></p>\n<p>블로그나, 웹 페이지, PPT 같은 환경에서 <span class=\"grenn-500\">테마</span>를 사용하는 이유는 뭘까? 귀찮지만 중요한 디자인에 대한 투자를 과감히 패스하면서도 준수한 디자인 퍼포먼스를 내기 위함이다. 물론 취지는 좋다. 어디까지나 <strong>단순히 해당 테마가 의도한 방향에 맞을 때만.</strong></p>\n<p>다들 비슷한 경험이 있었을 것이다. 테마 혹은 템플릿을 사용하면서 필요에 따라 커스터마이징이 필요할 경우가 그렇다.<br>\n대부분의 테마는 결과물이 테마가 추구하는 디자인 철학과 상통할 때 그 빛을 발한다. 다시 말해, 그 의도가 손상될 경우 결과물의 퀄리티는 급락한다.<br>\n이 뿐만 아니라, <span class=\"red-500\">필요에 따라 기존의 요소(소스코드, 플러그인 등)을 제거할 경우 그 의존성을 파악하기 힘들어 리스크</span>가 크다.</p>\n<p>일례로, 위에서 언급한 <span class=\"lightBlue-500\">Moon Theme</span>의 경우, JQuery에 의존성을 갖고 있다.<br>\n근래 웹 개발의 JQuery에 대한 비관적인 평을 생각한다면, 이는 큰 디메리트로 다가온다. 제거 작업으로 인한 공수 또한 무시할 수 없을 것이고.<br>\n물론 당시의 개발 트렌드를 무시할 수 없으며, <strong>개발</strong>은 그 중에서도 트렌드의 주기가 매우 빠른 편이다. 이로 미루어 볼 때, 결과론적인 얘기다. 그럼에도 불구하고, <strong>사용자가 의도하지 않은 결함</strong>이라는 사실은 불변하다.</p>\n</li>\n<li>\n<p><b class=\"green-500\">개발 욕구</b></p>\n<p>정적 블로그의 경우 백엔드 영역이 거의 전무한데다, 복잡한 비즈니스 로직도 필요 없기 때문에 개발 난이도가 상대적으로 낮다고 판단했다. 즉, 원한다면 내가 직접 개발한 블로그를 사용하는게 그리 어렵지 않다.<br>\n위에서 언급했듯이, 직접 개발한 블로그를 사용하는 것이 좀 더 개발자스럽다. 난이도 또한 공부 중인 React를 적용하기도 적합하고.</p>\n</li>\n</ol>\n<h1>Hello, Next.js!</h1>\n<p>React로 블로그를 만들 땐 주로 <a href=\"https://nextjs.org/\" target=\"_blank\" class=\"blue-500\">Next.js</a> 혹은 <a href=\"https://www.gatsbyjs.com/\" target=\"_blank\" class=\"deepPurple-400\">Gatsby.js</a>를 사용한다. 이번에 개발한 블로그는 <span class=\"blue-500\">Next.js</span>를 활용했다.</p>\n<p><span class=\"blue-500\">Next.js</span>는 <span class=\"red-500\">Ruby</span>의 <span class=\"pink-500\">Jekyll</span> 프레임워크와 그 결이 비슷하다. <span class=\"pink-500\">Jekyll</span>는 <strong>프레임워크 자체에 구조 스키마를 정함으로써 React의 Component와 유사하게 동작</strong>한다. 그 당시의 난 React라는 걸 접하지도 않은 상황에서, React의 Component 방식으로 블로그를 구성했던 것이다. 말 그대로 낫 놓고 기역자도 모른 셈.</p>\n<p><span class=\"blue-500\">Next.js</span> 역시 라이브러리 자체에 정적 웹을 구성하고 빌드할 수 있는 환경이 구축되어 있어, 쉽게 사용이 가능하다. 여러 사용자들이 개발한 다수의 플러그인은 덤.<br>\n덕분에 정적 블로그를 밑바닥에서부터 개발할 수 있었다. 나름대로 디자인 한다고 하긴 했는데, 역시 디자인은 어렵다.<br>\n<span class=\"blue-500\">Next.js</span>와 <span class=\"deepPurple-500\">Gatsby.js</span>에 대한 내용은 나중에 따로 다룰 예정이다.</p>\n<p>아직 해야할 것들이 남아있다. sitemap 생성기도 붙여야 하고, 연관 게시물 기능도 필요하다. 아직 다듬어지지 않은 자잘한 요소들도 있고. 역시 규모에 상관없이 무언가를 퍼블리싱하는건 정말 힘든 것 같다.<br>\n적어도 이번 블로그는 내 노력으로 내가 개발한 거니, 꾸준히 운영할 수 있었음 한다.</p>\n"}},"__N_SSG":true}