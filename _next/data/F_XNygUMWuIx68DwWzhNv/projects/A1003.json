{"pageProps":{"post":{"title":"백준 알고리즘 A1003 피보나치 함수","date":"2021-04-21 23:29:03","slug":"A1003","content":"<h1>피보나치 함수</h1>\n<p><img src=\"https://shields.io/badge/java-JDK%2014-lightgray?logo=java&#x26;style=plastic&#x26;logoColor=white&#x26;labelColor=orange\" alt=\"JAVA\"></p>\n<p>🔗 <a href=\"https://www.acmicpc.net/problem/1003\">전체 1003번 문제</a></p>\n<br />\n<h2>조건</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">시간제한</th>\n<th align=\"center\">메모리 제한</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">0.25초 (추가 시간 없음)</td>\n<td align=\"center\">128MB</td>\n</tr>\n</tbody>\n</table>\n<br />\n<h2>문제</h2>\n<p>다음 소스는 N번째 피보나치 수를 구하는 C++ 함수이다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-C\"><code class=\"language-C\">int fibonacci(int n) {\r\n    if (n == 0) {\r\n        printf(&#x26;quot;0&#x26;quot;);\r\n        return 0;\r\n    } else if (n == 1) {\r\n        printf(&#x26;quot;1&#x26;quot;);\r\n        return 1;\r\n    } else {\r\n        return fibonacci(n‐1) + fibonacci(n‐2);\r\n    }\r\n}</code></pre></div>\n<p><code>fibonacci(3)</code>을 호출하면 다음과 같은 일이 일어난다.</p>\n<ul>\n<li><code>fibonacci(3)</code>은 <code>fibonacci(2)</code>와 <code>fibonacci(1)</code> (첫 번째 호출)을 호출한다.</li>\n<li><code>fibonacci(2)</code>는 <code>fibonacci(1)</code> (두 번째 호출)과 <code>fibonacci(0)</code>을 호출한다.</li>\n<li>두 번째 호출한 <code>fibonacci(1)</code>은 1을 출력하고 1을 리턴한다.</li>\n<li><code>fibonacci(0)</code>은 0을 출력하고 0을 리턴한다.</li>\n<li><code>fibonacci(2)</code>는 <code>fibonacci(1)</code>과 <code>fibonacci(0)</code>의 결과를 얻고, 1을 리턴한다.</li>\n<li>첫 번째 호출한 <code>fibonacci(1)</code>은 1을 출력하고, 1을 리턴한다.</li>\n<li><code>fibonacci(3)</code>은 <code>fibonacci(2)</code>와 <code>fibonacci(1)</code>의 결과를 얻고, 2를 리턴한다.</li>\n</ul>\n<p>1은 2번 출력되고, 0은 1번 출력된다. N이 주어졌을 때, <code>fibonacci(N)</code>을 호출했을 때, 0과 1이 각각 몇 번 출력되는지 구하는 프로그램을 적성하시오.</p>\n<br />\n<h2>입력</h2>\n<p>첫째 줄에 테스트 케이스의 개수 T가 주어진다.\r\n각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. N은 40보다 작거나 같은 자연수 또는 0이다.</p>\n<br />\n<h2>출력</h2>\n<p>각 테스트 케이스마다 0이 출력되는 횟수와 1이 출력되는 횟수를 공백으로 구분해서 출력한다.</p>\n<br />\n<h2>케이스</h2>\n<ul>\n<li>\n<p>입력</p>\n<p>3<br>\n0<br>\n1<br>\n3</p>\n</li>\n<li>\n<p>출력</p>\n<p>1 0<br>\n0 1<br>\n1 2</p>\n</li>\n</ul>\n<br />\n<h2>풀이</h2>\n<p>알고리즘 풀면서 느끼는 거지만, 문제가 뭘 말하는 지 이해가 안 되는 경우가 많은 것 같다. 내가 멍청해서 그런건가.</p>\n<p>이 문제를 풀기 위해선, 피보나치 수열에 대한 식을 이해하고 있어야 한다.<br>\n피보나치 수열이 <code>f()</code>일 때, <code>n</code>번째 피보나치 수열의 식은 <code>f(n) = f(n - 1) + f(n - 2)</code>로 정의할 수 있다.</p>\n<p><code>n = 0, 1</code>일 때의 초기값이 정해져있다. (식의 특성 상 초기값이 없으면 계산할 수가 없다.)<br>\n<code>f(0) = 0</code><br>\n<code>f(1) = 1</code><br>\n초기값은 위와 같으며, 실질적으로 <code>n >= 2</code> 부터 의미있는 연산이 수행된다.</p>\n<p>다시 문제로 돌아가서, 임의의 수 N이 주어질 경우 <code>f(N)</code>을 수행하면서 <code>f(0)</code>, <code>f(1)</code>이 몇 번 호출되는지를 구하면 된다.<br>\n예를 들어, <code>N = 4</code>라고 가정하고 식을 전개하면 아래와 같다.<br>\n<code>f(4) = f(3) + f(2)</code><br>\n위 식에서 <code>f(3)</code>은 <code>f(2) + f(1)</code>로 치환할 수 있으며, 같은 이유로 <code>f(2)</code> 역시 <code>f(1) + f(0)</code>으로 치환 가능하다.<br>\n<code>f(4) = f(2) + f(1) + f(1) + f(0)</code><br>\n<code>= f(1) + f(0) + f(1) + f(1) + f(0)</code></p>\n<p>결과적으로 <code>f(4) = 2(f0) + 3f(1)</code>로 정리할 수 있다.<br>\n따라서 이 문제의 알고리즘은 <code>N = 4</code>일 경우 <code>2 3</code>이 출력되어야 한다.</p>\n<p>우선 식을 정리하여 한 눈에 보면 문제 해결에 도움이 될 것 같다.<br>\n피보나치 수열을 쭉 정리하면 아래와 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">n</th>\n<th align=\"center\">f(0)의 갯수</th>\n<th align=\"center\">f(1)의 갯수</th>\n<th align=\"center\">f(n)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">5</td>\n<td align=\"center\">8</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">13</td>\n<td align=\"center\">13</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">13</td>\n<td align=\"center\">21</td>\n<td align=\"center\">21</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">21</td>\n<td align=\"center\">34</td>\n<td align=\"center\">34</td>\n</tr>\n</tbody>\n</table>\n<p>표로 정리하니 어느정도 규칙성이 눈에 보이기 시작한다.</p>\n<ul>\n<li>N의 <code>f(1)</code> 출력 갯수는 <code>f(N)</code>과 동일하다.</li>\n<li>N의 <code>f(0)</code> 출력 갯수는 <code>f(N - 1)</code>과 동일하다.</li>\n</ul>\n<p>즉, <code>N = 4</code>일 경우 알고리즘은 <code>f(3) f(4)</code>가 출력되면 된다.</p>\n<p>여기서 단순하게 생각하면 아래와 같이 코드를 짤 수 있다.</p>\n<br />\n<h3>완성....?</h3>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * 백준 전체 1003 문제 알고리즘 클래스\n *\n * <span class=\"token keyword\">@author</span> RWB\n * <span class=\"token keyword\">@since</span> 2021.04.21 Wed 23:29:03\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token number\">41</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * 메인 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">args</span>: [String[]] 매개변수\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// N = 0일 때, 0이 호출되는 횟수</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// N = 0일 때, 1이 호출되는 횟수</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// N = 1일 때, 0이 호출되는 횟수</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// N = 1일 때, 1이 호출되는 횟수</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">int</span> f0 <span class=\"token operator\">=</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> f1 <span class=\"token operator\">=</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f0 <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * 피보나치 값 반환 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">n</span>: [int] 인덱스\n\t *\n\t * <span class=\"token keyword\">@return</span> [int] 피보나치 값\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 인덱스가 0일 경우</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 인덱스가 1일 경우</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 인덱스가 2 이상일 경우 (연산 가능)</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br />\n<p>위 코드는 크게 두 가지 문제가 있는데, 우선 <code>n = 0, 1</code>일 때의 처리가 정상적으로 이루어지지 않고 있다.<br>\n<code>f(1) = f(0) + f(-1)</code><br>\nN이 문제되기 이전에 이 코드는 런타임 시간 초과로 실패한다. 왜일까?</p>\n<p>위 코드는 <strong>불필요한 연산을 너무 많이 수행한다.</strong> 피보나치 수열의 특성 상 <code>f(N)</code>을 계산할 경우, <code>f(N - 1)</code>, <code>f(N - 2)</code> ... 등과 같이 N 이하의 피보나치 값까지 전부 계산하게 된다.<br>\n다시 말하면, <code>f(6)</code>을 연산할 경우 계산 과정에서 자연스레 <code>f(4)</code>, <code>f(2)</code> 등의 피보나치 값을 구할 수 있다.</p>\n<p>위 이론을 알고리즘에 적용하면 아래와 같이 응용할 수 있다.<br>\nN을 총 3번 입력한다고 가정하면 N<sub>1</sub>, N<sub>2</sub>, N<sub>3</sub>으로 구분할 수 있다.</p>\n<p>N<sub>2</sub> = 8 -> <code>f(8)</code> 부터 <code>f(0)</code>까지의 값을 구할 수 있음.<br>\nN<sub>3</sub> = 4 -> <code>f(4)</code> 부터 <code>f(0)</code>까지의 값을 구할 수 있음.</p>\n<p>피보나치 연산값을 저장하면 N<sub>n</sub> > N<sub>n+1</sub>일 경우 굳이 <strong>추가적인 연산을 진행하지 않고 이미 저장된 값을 출력</strong>만 함으로써, 런타임 리소스를 줄일 수 있다.</p>\n<p>클래스의 멤버변수로 <strong>Integer 배열을 선언</strong>하여 피보나치 수열값을 저장하고, 알고리즘 연산에 이를 활용하면 될 것 같다.</p>\n<blockquote>\n<p>int는 Primitive(자료형) 데이터고, Integer는 Wrapper 클래스다. Wrapper 클래스는 null 입력이 가능하다는 특징이 있으므로, Integer 역시 숫자 이외에 null값을 입력할 수 있다.</p>\n</blockquote>\n<p>Integer 배열의 초기값은 null로 지정되므로, 배열의 값이 null인 인덱스는 아직 피보나치 수열 계산이 이루어지지 않은 인덱스라고 판단할 수 있다.</p>\n<p>다행히 문제에서 주어진 <code>N</code>의 조건은 <code>0 &#x3C;= N &#x3C;= 40</code>이므로, 배열의 인덱스는 최대 41을 넘지 않음을 알 수 있다.<br>\n(배열은 0부터 시작하므로 40개가 아닌 0을 포함한 41개임에 유의하자)</p>\n<p>이후 피보나치 연산에서 각 과정의 값을 배열에 저장하는 로직을 추가한다.<br>\n배열의 값이 null일 경우, 아직 연산이 진행되지 않았으므로 피보나치 연산을 수행하고 배열에 저장한다.<br>\n반대로, 배열이 특정 숫자값을 가질 경우, 이미 연산이 진행된 인덱스이므로 별도의 연산을 거치지 않고 해당 값을 바로 출력한다.</p>\n<br />\n<h2>전체 소스</h2>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">all<span class=\"token punctuation\">.</span>a1003</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * 백준 전체 1003 문제 알고리즘 클래스\n *\n * <span class=\"token keyword\">@author</span> RWB\n * <span class=\"token keyword\">@since</span> 2021.04.21 Wed 23:29:03\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token number\">41</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * 메인 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">args</span>: [String[]] 매개변수\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 피보나치 수열 초기값 (N = 0)</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 피보나치 수열 초기값 (N = 1)</span>\n\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// n이 0일 경우</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// n이 1일 경우</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// 초기값이 아닐 경우</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tscanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * 피보나치 값 반환 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">n</span>: [int] 인덱스\n\t *\n\t * <span class=\"token keyword\">@return</span> [int] 피보나치 값\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 해당 인덱스의 피보나치가 아직 연산되지 않았을 경우</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tarr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n","coverImage":"http://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/images/boj-og-1200.png","category":"알고리즘"}},"__N_SSG":true}