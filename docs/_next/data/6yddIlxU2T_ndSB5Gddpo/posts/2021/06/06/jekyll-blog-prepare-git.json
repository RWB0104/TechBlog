{"pageProps":{"page":{"type":"posts","prev":{"header":{"title":"[Jekyll] GitHub Pages를 이용해 나만의 블로그 만들기 - 2. GitHub와 친해지기","excerpt":"Jekyll은 GitHub를 통해 호스팅한다. 즉, Jekyll로 블로그를 만들기 위해선 GitHub를 조금이나마 알고 있어야 한다. 본문에서는 GitHub의 여러 기능은 제쳐두고, Jekyll 호스팅을 목적을 기준으로 설명한다.","coverImage":"https://user-images.githubusercontent.com/50317129/90983201-582f1080-e5a7-11ea-970b-8d7d82cb2084.png","date":"2021-06-06T23:29:32","type":"posts","category":"Jekyll","tag":["GitHub Pages(깃허브 페이지)","Jekyll(지킬)","Blog(블로그)","GitHub(깃허브)"],"group":"Jekyll Blog","comment":true,"publish":true},"name":"2021-06-06-jekyll-blog-github.md","content":"\r\n<p class=\"red-A400 center\">※ 본 게시물은 Jekyll 시절의 게시글을 토대로 복원한 게시물입니다.</p>\r\n\r\n# 개요\r\n\r\n<span class=\"primary\">Jekyll</span>은 <span class=\"primary\">GitHub</span>를 통해 호스팅한다. 즉, <span class=\"primary\">Jekyll</span>로 블로그를 만들기 위해선 <span class=\"primary\">GitHub</span>를 조금이나마 알고 있어야 한다. 본문에서는 <span class=\"primary\">GitHub</span>의 여러 기능은 제쳐두고, <span class=\"primary\">Jekyll</span> 호스팅을 목적을 기준으로 설명한다.\r\n\r\n# GitHub 속으로!\r\n\r\n<span class=\"primary\">GitHub</span>는 개발자들을 위한 소스코드 형상관리 서비스를 제공해준다. Git을 저장하고 관리하는 대표적인 저장소로, 수 많은 오픈, 개인 소스가 존재한다. Git과 <span class=\"primary\">GitHub</span>는 그 자체만으로도 커다란 주제가 여러개 튀어나오니, 일단은 우리의 목표인 호스팅만을 알아보자.\r\n\r\n<a href=\"https://github.com/\">GitHub 바로가기</a>\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90389062-d2512800-e0c3-11ea-8a59-f4980afab7b5.png\" width=\"820px\" />\r\n</p>\r\n\r\n접속하면 위와 같은 화면을 볼 수 있는데, 상단 우측의 <span class=\"lightBlue-A400\">Sign Up</span>을 클릭하여 회원가입을 진행한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90411265-777cf800-e0e6-11ea-95d5-372388b32bd2.png\" width=\"820px\" />\r\n</p>\r\n\r\n* username: 닉네임\r\n* Email address: 이메일 주소\r\n* Password: 비밀번호\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90412061-96c85500-e0e7-11ea-9a7b-8f71fa52f776.png\" width=\"820px\" />\r\n</p>\r\n\r\n계정을 생성하면 나오는 설문조사. 무시해도 무방하다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90412232-d42ce280-e0e7-11ea-92e9-dc637cb2c8a9.png\" width=\"820px\" />\r\n</p>\r\n\r\n계정 생성이 완료되면 회원가입 시 작성한 이메일로 인증 코드를 전송하니 메일을 확인한다.\r\n\r\n만약, 이메일이 제대로 오지 않는다면, <span class=\"lightBlue-A400\">Resend verification email</span>을 통해 메일을 재발송할 수 있다. 혹은 이메일 주소를 잘못 입력했다면, <span class=\"lightBlue-A400\">Change your email settings</span>를 클릭하여 인증할 이메일 주소를 변경한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90412375-fde60980-e0e7-11ea-805b-7d4c58ab0b4d.png\" width=\"820px\" />\r\n</p>\r\n\r\n인증 이메일을 확인하고 <span class=\"lightBlue-A400\">Verify email address</span>를 클릭하여 인증을 완료한다. 계정 생성 과정이 끝난다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90412420-0b9b8f00-e0e8-11ea-80a5-d28ff329a020.png\" width=\"820px\" />\r\n</p>\r\n\r\n<span class=\"primary\">GitHub</span>에 접속하여 로그인을한다. 회원가입시 입력한 username이나 email 둘 중 아무거나 사용해도 상관없다. 위 화면이 뜨면 회원가입이 완료된 것이다.","url":["2021-06-06-jekyll-blog-github","2021","06","06","jekyll-blog-github"]},"next":{"header":{"title":"[Jekyll] GitHub Pages를 이용해 나만의 블로그 만들기 - 4. Jekyll 쇼핑하기","excerpt":"GitHub는 각 프로젝트를 하나의 Repository로 관리한다. 생성한 Repository는 Git을 이용하여 관리할 수 있다. GitHub 페이지 자체로도 Repository 내부의 파일 생성, 수정, 삭제가 가능하지만 매우 번거로우므로 대부분 Git을 활용하는 것이 권장된다.","coverImage":"https://user-images.githubusercontent.com/50317129/90983201-582f1080-e5a7-11ea-970b-8d7d82cb2084.png","date":"2021-06-07T23:42:11","type":"posts","category":"Jekyll","tag":["GitHub Pages(깃허브 페이지)","Jekyll(지킬)","Blog(블로그)"],"group":"Jekyll Blog","comment":true,"publish":true},"name":"2021-06-07-jekyll-blog-jekyll-shopping.md","content":"\r\n<p class=\"red-A400 center\">※ 본 게시물은 Jekyll 시절의 게시글을 토대로 복원한 게시물입니다.</p>\r\n\r\n# 개요\r\n\r\n<span class=\"primary\">GitHub Pages</span>는 꼭 <span class=\"primary\">Jekyll</span>로만 호스팅해야하는 것은 아니다. 해당 Repository에 전통적인 HTML, CSS, JavaScript 파일을 저장해도 호스팅엔 무리가 없다. 하지만 이 경우, 자신이 직접 모든 페이지를 디자인해야하고, 코딩 이상의 깊은 미적 감각이 요구된다. 디자인은 상황에 따라 코딩보다도 더욱 고난이도의 지식과 정교한 작업을 요구하기 때문.\r\n\r\n다행히 <span class=\"primary\">Jekyll</span> 기반 테마를 사용하면 이러한 문제를 해소할 수 있다.\r\n\r\n# Jekyll 쇼핑\r\n\r\n아래의 사이트들에서 <span class=\"primary\">Jekyll</span> 테마를 다운로드 받거나 데모 페이지를 확인해볼 수 있다. 기본적으로 무료이며, 테마에 따라 일부는 비용 청구를 통해 더욱 향상된 테마를 제공해주기도 한다.\r\n\r\n* [Jekyll Themes](http://jekyllthemes.org/)\r\n* [Free Jekyll Themes](https://jekyllthemes.io/free)\r\n* [Jekyllrc](http://themes.jekyllrc.org/)\r\n\r\n찾아보면 이 밖에도 여러 사이트가 존재한다. [Jekyll Themes](http://jekyllthemes.org/)를 예시로 확인해보자.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90974202-ec778400-e563-11ea-83c6-b3456a678e27.png\" width=\"820px\" />\r\n</p>\r\n\r\n이렇게 수 많은 테마들이 준비되어있다. 테마별로 적합한 용도가 있기 때문에, 제공하는 기능을 잘 확인해야한다. 오로지 디자이너 개인의 의도와 가치관이 담겨있기 때문에, 내가 원하는 블로그와 테마의 방향이 일치한지 확인하자.\r\n\r\n> 어떤 테마는 블로그에 적합하고, 어떤 테마는 포트폴리오에 적합하다.\r\n\r\n내가 <span class=\"primary\">Jekyll</span> 시절 사용했던 테마는 [Moon Theme](http://taylantatli.github.io/Moon/)다. 깔끔하면서도 편안한 느낌이라 마음에 들었다. 대부분의 테마는 위와 같이 직접 체험이 가능한 데모 페이지를 제공하고 있으므로, 이를 활용하면 테마 선택에 도움이 된다.\r\n\r\n원하는 테마를 선택했다면, `clone` 작업을 진행하자. 거의 모든 테마는 해당하는 Repository URL을 제공한다. `cline` 작업을 위해 테마 Repository의 URL를 알아야 한다. URL은 아래와 같이 확인할 수 있다.\r\n\r\n> clone은 공개된 GitHub Repository를 내 로컬 PC에 복사하는 작업이다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90974184-b4704100-e563-11ea-8463-54495387cd70.png\" width=\"820px\" />\r\n</p>\r\n\r\n해당 Repository의 주소나 사진처럼 <span class=\"primary\">Code</span> 버튼을 클릭하여 URL을 확인할 수 있다.\r\n\r\n프로젝트를 복사할 폴더에서 Git Bash를 띄우자. 콘솔에 아래의 명령어를 입력한다.\r\n\r\n`git clone {Theme URL} {username}.github.io`\r\n\r\n위 명령어는 입력한 URL의 소스를 대상 경로의 {username}.github.io 폴더로 복사하는 명령어다. 명령어가 정상적으로 실행되면 대상 경로에 {username}.github.io 폴더가 생기고, 소스를 직접 확인할 수 있다.\r\n\r\n하지만 아직 소스를 받았을 뿐, 내가 만든 Repository와 연동하지 못 했다. 아래의 작업을 통해 연동을 진행하자.\r\n\r\n1. clone된 프로젝트 폴더로 들어가서 Git Bash를 띄운다.\r\n2. `git remote set-url origin https://github.com:{username}/{username}.github.io.git` 명령어를 실행한다.\r\n3. `git push`를 통해 변경사항을 기록한다.\r\n\r\n이 과정을 끝마치고 <span class=\"primary\">GitHub</span>의 Repository를 보면, 텅 비어있던 예전과 달리 테마 소스들이 들어가있음을 확인할 수 있다.\r\n\r\n빌드에 약간의 시간이 걸리므로(~ 1분) 조금 기다렸다가 **https://{username}.github.io** 주소로 접속해보자. 테마가 적용되어있다면 성공이다. 물론 아직 어떠한 커스터마이징도 이루어지지 않았으므로, 데모 페이지와 큰 차이는 없다. 앞으로 여기다가 게시글을 작성하고 블로그를 꾸미면 된다.","url":["2021-06-07-jekyll-blog-jekyll-shopping","2021","06","07","jekyll-blog-jekyll-shopping"]}},"group":[{"header":{"title":"[Jekyll] GitHub Pages를 이용해 나만의 블로그 만들기 - 4. Jekyll 쇼핑하기","excerpt":"GitHub는 각 프로젝트를 하나의 Repository로 관리한다. 생성한 Repository는 Git을 이용하여 관리할 수 있다. GitHub 페이지 자체로도 Repository 내부의 파일 생성, 수정, 삭제가 가능하지만 매우 번거로우므로 대부분 Git을 활용하는 것이 권장된다.","coverImage":"https://user-images.githubusercontent.com/50317129/90983201-582f1080-e5a7-11ea-970b-8d7d82cb2084.png","date":"2021-06-07T23:42:11","type":"posts","category":"Jekyll","tag":["GitHub Pages(깃허브 페이지)","Jekyll(지킬)","Blog(블로그)"],"group":"Jekyll Blog","comment":true,"publish":true},"name":"2021-06-07-jekyll-blog-jekyll-shopping.md","content":"\r\n<p class=\"red-A400 center\">※ 본 게시물은 Jekyll 시절의 게시글을 토대로 복원한 게시물입니다.</p>\r\n\r\n# 개요\r\n\r\n<span class=\"primary\">GitHub Pages</span>는 꼭 <span class=\"primary\">Jekyll</span>로만 호스팅해야하는 것은 아니다. 해당 Repository에 전통적인 HTML, CSS, JavaScript 파일을 저장해도 호스팅엔 무리가 없다. 하지만 이 경우, 자신이 직접 모든 페이지를 디자인해야하고, 코딩 이상의 깊은 미적 감각이 요구된다. 디자인은 상황에 따라 코딩보다도 더욱 고난이도의 지식과 정교한 작업을 요구하기 때문.\r\n\r\n다행히 <span class=\"primary\">Jekyll</span> 기반 테마를 사용하면 이러한 문제를 해소할 수 있다.\r\n\r\n# Jekyll 쇼핑\r\n\r\n아래의 사이트들에서 <span class=\"primary\">Jekyll</span> 테마를 다운로드 받거나 데모 페이지를 확인해볼 수 있다. 기본적으로 무료이며, 테마에 따라 일부는 비용 청구를 통해 더욱 향상된 테마를 제공해주기도 한다.\r\n\r\n* [Jekyll Themes](http://jekyllthemes.org/)\r\n* [Free Jekyll Themes](https://jekyllthemes.io/free)\r\n* [Jekyllrc](http://themes.jekyllrc.org/)\r\n\r\n찾아보면 이 밖에도 여러 사이트가 존재한다. [Jekyll Themes](http://jekyllthemes.org/)를 예시로 확인해보자.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90974202-ec778400-e563-11ea-83c6-b3456a678e27.png\" width=\"820px\" />\r\n</p>\r\n\r\n이렇게 수 많은 테마들이 준비되어있다. 테마별로 적합한 용도가 있기 때문에, 제공하는 기능을 잘 확인해야한다. 오로지 디자이너 개인의 의도와 가치관이 담겨있기 때문에, 내가 원하는 블로그와 테마의 방향이 일치한지 확인하자.\r\n\r\n> 어떤 테마는 블로그에 적합하고, 어떤 테마는 포트폴리오에 적합하다.\r\n\r\n내가 <span class=\"primary\">Jekyll</span> 시절 사용했던 테마는 [Moon Theme](http://taylantatli.github.io/Moon/)다. 깔끔하면서도 편안한 느낌이라 마음에 들었다. 대부분의 테마는 위와 같이 직접 체험이 가능한 데모 페이지를 제공하고 있으므로, 이를 활용하면 테마 선택에 도움이 된다.\r\n\r\n원하는 테마를 선택했다면, `clone` 작업을 진행하자. 거의 모든 테마는 해당하는 Repository URL을 제공한다. `cline` 작업을 위해 테마 Repository의 URL를 알아야 한다. URL은 아래와 같이 확인할 수 있다.\r\n\r\n> clone은 공개된 GitHub Repository를 내 로컬 PC에 복사하는 작업이다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90974184-b4704100-e563-11ea-8463-54495387cd70.png\" width=\"820px\" />\r\n</p>\r\n\r\n해당 Repository의 주소나 사진처럼 <span class=\"primary\">Code</span> 버튼을 클릭하여 URL을 확인할 수 있다.\r\n\r\n프로젝트를 복사할 폴더에서 Git Bash를 띄우자. 콘솔에 아래의 명령어를 입력한다.\r\n\r\n`git clone {Theme URL} {username}.github.io`\r\n\r\n위 명령어는 입력한 URL의 소스를 대상 경로의 {username}.github.io 폴더로 복사하는 명령어다. 명령어가 정상적으로 실행되면 대상 경로에 {username}.github.io 폴더가 생기고, 소스를 직접 확인할 수 있다.\r\n\r\n하지만 아직 소스를 받았을 뿐, 내가 만든 Repository와 연동하지 못 했다. 아래의 작업을 통해 연동을 진행하자.\r\n\r\n1. clone된 프로젝트 폴더로 들어가서 Git Bash를 띄운다.\r\n2. `git remote set-url origin https://github.com:{username}/{username}.github.io.git` 명령어를 실행한다.\r\n3. `git push`를 통해 변경사항을 기록한다.\r\n\r\n이 과정을 끝마치고 <span class=\"primary\">GitHub</span>의 Repository를 보면, 텅 비어있던 예전과 달리 테마 소스들이 들어가있음을 확인할 수 있다.\r\n\r\n빌드에 약간의 시간이 걸리므로(~ 1분) 조금 기다렸다가 **https://{username}.github.io** 주소로 접속해보자. 테마가 적용되어있다면 성공이다. 물론 아직 어떠한 커스터마이징도 이루어지지 않았으므로, 데모 페이지와 큰 차이는 없다. 앞으로 여기다가 게시글을 작성하고 블로그를 꾸미면 된다.","url":["2021-06-07-jekyll-blog-jekyll-shopping","2021","06","07","jekyll-blog-jekyll-shopping"]},{"header":{"title":"[Jekyll] GitHub Pages를 이용해 나만의 블로그 만들기 - 2. GitHub와 친해지기","excerpt":"Jekyll은 GitHub를 통해 호스팅한다. 즉, Jekyll로 블로그를 만들기 위해선 GitHub를 조금이나마 알고 있어야 한다. 본문에서는 GitHub의 여러 기능은 제쳐두고, Jekyll 호스팅을 목적을 기준으로 설명한다.","coverImage":"https://user-images.githubusercontent.com/50317129/90983201-582f1080-e5a7-11ea-970b-8d7d82cb2084.png","date":"2021-06-06T23:29:32","type":"posts","category":"Jekyll","tag":["GitHub Pages(깃허브 페이지)","Jekyll(지킬)","Blog(블로그)","GitHub(깃허브)"],"group":"Jekyll Blog","comment":true,"publish":true},"name":"2021-06-06-jekyll-blog-github.md","content":"\r\n<p class=\"red-A400 center\">※ 본 게시물은 Jekyll 시절의 게시글을 토대로 복원한 게시물입니다.</p>\r\n\r\n# 개요\r\n\r\n<span class=\"primary\">Jekyll</span>은 <span class=\"primary\">GitHub</span>를 통해 호스팅한다. 즉, <span class=\"primary\">Jekyll</span>로 블로그를 만들기 위해선 <span class=\"primary\">GitHub</span>를 조금이나마 알고 있어야 한다. 본문에서는 <span class=\"primary\">GitHub</span>의 여러 기능은 제쳐두고, <span class=\"primary\">Jekyll</span> 호스팅을 목적을 기준으로 설명한다.\r\n\r\n# GitHub 속으로!\r\n\r\n<span class=\"primary\">GitHub</span>는 개발자들을 위한 소스코드 형상관리 서비스를 제공해준다. Git을 저장하고 관리하는 대표적인 저장소로, 수 많은 오픈, 개인 소스가 존재한다. Git과 <span class=\"primary\">GitHub</span>는 그 자체만으로도 커다란 주제가 여러개 튀어나오니, 일단은 우리의 목표인 호스팅만을 알아보자.\r\n\r\n<a href=\"https://github.com/\">GitHub 바로가기</a>\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90389062-d2512800-e0c3-11ea-8a59-f4980afab7b5.png\" width=\"820px\" />\r\n</p>\r\n\r\n접속하면 위와 같은 화면을 볼 수 있는데, 상단 우측의 <span class=\"lightBlue-A400\">Sign Up</span>을 클릭하여 회원가입을 진행한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90411265-777cf800-e0e6-11ea-95d5-372388b32bd2.png\" width=\"820px\" />\r\n</p>\r\n\r\n* username: 닉네임\r\n* Email address: 이메일 주소\r\n* Password: 비밀번호\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90412061-96c85500-e0e7-11ea-9a7b-8f71fa52f776.png\" width=\"820px\" />\r\n</p>\r\n\r\n계정을 생성하면 나오는 설문조사. 무시해도 무방하다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90412232-d42ce280-e0e7-11ea-92e9-dc637cb2c8a9.png\" width=\"820px\" />\r\n</p>\r\n\r\n계정 생성이 완료되면 회원가입 시 작성한 이메일로 인증 코드를 전송하니 메일을 확인한다.\r\n\r\n만약, 이메일이 제대로 오지 않는다면, <span class=\"lightBlue-A400\">Resend verification email</span>을 통해 메일을 재발송할 수 있다. 혹은 이메일 주소를 잘못 입력했다면, <span class=\"lightBlue-A400\">Change your email settings</span>를 클릭하여 인증할 이메일 주소를 변경한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90412375-fde60980-e0e7-11ea-805b-7d4c58ab0b4d.png\" width=\"820px\" />\r\n</p>\r\n\r\n인증 이메일을 확인하고 <span class=\"lightBlue-A400\">Verify email address</span>를 클릭하여 인증을 완료한다. 계정 생성 과정이 끝난다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90412420-0b9b8f00-e0e8-11ea-80a5-d28ff329a020.png\" width=\"820px\" />\r\n</p>\r\n\r\n<span class=\"primary\">GitHub</span>에 접속하여 로그인을한다. 회원가입시 입력한 username이나 email 둘 중 아무거나 사용해도 상관없다. 위 화면이 뜨면 회원가입이 완료된 것이다.","url":["2021-06-06-jekyll-blog-github","2021","06","06","jekyll-blog-github"]},{"header":{"title":"[Jekyll] GitHub Pages를 이용해 나만의 블로그 만들기 - 1. Jekyll이란?","excerpt":"대형 포탈이나 크고 작은 플랫폼을 통해 자신만의 블로그를 만들 수 있다. 이러한 플랫폼을 통한 블로그는 연동된 계정과 버튼 클릭 몇 번으로 만들 수 있을 정도로 쉽고 간편하다. 하지만 이와 같은 블로그는 페이지의 기본 프레임이 정해져있고, 자유로운 커스터마이징이 제한된 편이다. 자신만의 색이나 가치관을 담은 블로그를 만들기 위해선 소위 \"기성품\"이 아닌 방법을 찾아야하는데, 이는 곧 자신이 직접 웹 페이지를 제작하고 퍼블리싱, 호스팅까지 전반적인 웹 서비스 자체를 구축해야하는 큰 작업으로 이어진다. 어찌어찌 페이지를 제작한다 하더라도, CSS를 통한 디자인이나 JavaScript같은 부가기능은 프레임 제작 이상으로 어렵다. 여기까지는 어떻게 자력으로 했다고 하더라도, 호스팅은 돈이 든다. DB까지 연동한다면 금액은 더욱 커지게 된다. 내가 원한건 단순한 블로그였는데.","coverImage":"https://user-images.githubusercontent.com/50317129/90983201-582f1080-e5a7-11ea-970b-8d7d82cb2084.png","date":"2021-06-06T23:18:25","type":"posts","category":"Jekyll","tag":["GitHub Pages(깃허브 페이지)","Jekyll(지킬)","Blog(블로그)"],"group":"Jekyll Blog","comment":true,"publish":true},"name":"2021-06-06-jekyll-blog-start.md","content":"\r\n<p class=\"red-A400 center\">※ 본 게시물은 Jekyll 시절의 게시글을 토대로 복원한 게시물입니다.</p>\r\n\r\n# 개요\r\n\r\n대형 포탈이나 크고 작은 플랫폼을 통해 자신만의 블로그를 만들 수 있다. 이러한 플랫폼을 통한 블로그는 연동된 계정과 버튼 클릭 몇 번으로 만들 수 있을 정도로 쉽고 간편하다. 하지만 이와 같은 블로그는 페이지의 기본 프레임이 정해져있고, 자유로운 커스터마이징이 제한된 편이다. 자신만의 색이나 가치관을 담은 블로그를 만들기 위해선 소위 \"기성품\"이 아닌 방법을 찾아야하는데, 이는 곧 자신이 직접 <span class=\"green-A400\">웹 페이지를 제작하고 퍼블리싱, 호스팅까지 전반적인 웹 서비스 자체를 구축해야하는 큰 작업</span>으로 이어진다. 어찌어찌 페이지를 제작한다 하더라도, <span class=\"purple-A400\">CSS</span>를 통한 디자인이나 <span class=\"orange-A400\">JavaScript</span>같은 부가기능은 프레임 제작 이상으로 어렵다. 여기까지는 어떻게 자력으로 했다고 하더라도, 호스팅은 돈이 든다. DB까지 연동한다면 금액은 더욱 커지게 된다. 내가 원한건 단순한 블로그였는데.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90330531-5d5cf000-dfe8-11ea-8a25-c5c89fa05a42.png\" width=\"820px\" />\r\n</p>\r\n\r\n<span class=\"primary\">GitHub Pages</span>를 활용하면 위와같은 문제의 대부분을 해결할 수 있다. <span class=\"primary\">GitHub</span>는 <span class=\"primary\">GitHub Pages</span> 프로젝트를 통해 특정한 이름을 가진 Repository 내부의 파일들을 <span class=\"primary\">github.io</span> 도메인으로 퍼블리싱해준다. 즉, 무료로 웹 호스팅을 제공받을 수 있는 셈이다. <span class=\"primary\">GitHub Pages</span>가 제시하는 방법에 따라 Repository를 만드는 것만으로도 유일하게 비용이 필요한 호스팅이라는 큰 산이 하나 사라진다.\r\n\r\n> Repository: GitHub에서 관리하는 프로젝트의 단위로, 각 계정마다 여러개의 Repository를 마음대로 생성, 수정, 삭제할 수 있다.\r\n\r\n안타깝게도 이는 호스팅과정을 라이트하게 만들어준 것일 뿐, 실제 페이지를 퍼블리싱하기 위해선 어쩔수 없이 웹 코딩 지식이 필요하다. 이를 위해 <span class=\"primary\">GitHub</span>는 <b class=\"primary\">Jekyll(지킬)</b>이라는 프레임워크를 통해 사용자들이 블로그 테마를 쉽게 만들고 이를 활용할 수 있는 환경을 제공하고 있다.\r\n\r\n필자는 어느정도 웹 관련 지식이 있음에도 불구하고 <span class=\"red-A400\">Ruby</span>와 <span class=\"primary\">Jekyll</span>이라는 다소 생소한 환경때문에 이를 이해하는데 다소 시간이 소요됐다. 이번 주제를 통해 웹에 있어서 나와 비슷하거나, 전무한 지식을 가진 사람들에게 내 블로그 구축기를 공유하고자 한다. 이 글은 <span class=\"primary\">Jekyll</span>이라는 개념을 처음 접하는 이들이 가급적 쉽게 이해함에 초점을 맞춘다.\r\n\r\n# Jekyll(지킬)이란?\r\n\r\n지킬 앤 하이드의 그 지킬 맞다. <span class=\"primary\">Jekyll</span>은 <span class=\"primary\">GitHub</span>의 설립자 중 하나인 Tom Preston-Werner가 <span class=\"red-A400\">Ruby</span>언어를 통해 개발한 프레임워크다. <span class=\"primary\">GitHub</span> 자체적으로 <span class=\"primary\">Jekyll</span> CMS(Contents Management System)을 내장하고 있어서 <span class=\"primary\">Jekyll</span> 호스팅에 매우 적합하다.(물론 굳이 Jekyll 기반이 아니여도 호스팅엔 문제가 없다.)\r\n\r\n웹을 나누는 구분 중에 정적(Static) 웹과 동적(Dynamic) 웹이 있다. <span class=\"primary\">Jekyll</span> 정적(Static) 웹 환경을 위한 프레임워크다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90335406-cdcb3780-e00f-11ea-87e2-b8c8ba8f576c.png\" width=\"820px\" />\r\n</p>\r\n\r\n**정적 웹**\r\n\r\n* 요청에 따라 미리 저장된 페이지를 응답\r\n* 웹 서버가 필요하지 않으므로, 서버 사양에 대한 영향이 적음\r\n* Back-end 코드가 없어 제작이 간편함\r\n* 속도가 빠름\r\n* 복잡한 로직이 필요 없는 소규모 사이트(블로그 등)에 적합함\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/90335405-cb68dd80-e00f-11ea-9b08-7a9ec21c5eee.png\" width=\"820px\" />\r\n</p>\r\n\r\n**동적 웹**\r\n\r\n* 요청에 따라 웹 서버가 데이터를 가공하여 전달\r\n* DB연동을 통한 데이터 CRUD가 가능\r\n* 동일한 페이지도 요청에 따라 다양한 내용을 응답\r\n* 웹 서버 사양에 따라 속도 저하의 우려 있음\r\n* 복잡한 로직이 필요한 비즈니스 사이트(쇼핑몰 등)에 적합함\r\n\r\n우리가 사용하는 대부분의 사이트는 동적 웹의 형태가 대부분이다. 자체적인 회원가입 시스템, 간단한 게시판 등이 존재한다면 대부분 동적 웹으로 봐도 무방하다. 회원가입이나 게시판에는 반드시 DB가 필요하고, 이는 곧 DB와 사이트 간의 동작을 제어할 서버가 필요하다는 의미이기 때문. DB의 존재로 인해 실시간 데이터 CRUD가 가능하다. <span class=\"green-A400\">사용자가 페이지에서 무언가 의미있는 컨텐츠 활동을 할 수 있다면 동적 웹</span>이다.\r\n\r\n반대로, 정적 웹은 단순히 저장된 파일을 요청에 맞게 보여만 주므로, 사용자는 단순 사이트 관광객 그 이상 그 이하도 아니다. 블로그의 경우 로그인 같은 사용자 인증이 전혀 필요 없으며, 소유자외의 작성자가 필요하지 않기 때문에 정적 웹 형태로도 얼마든지 서비스를 제공할 수 있다. <span class=\"primary\">Jekyll</span>은 사용자가 작성한 코드를 하나의 웹 프로젝트 형태로 빌드한다. <span class=\"primary\">Jekyll</span>은 이러한 정적 웹 방식을 채택함으로써 빠른 속도를 확보하고 백엔드 코드에 대한 부담감을 없앴다.\r\n\r\n사용하기에 앞서, <span class=\"primary\">Jekyll</span>은 <span class=\"red-A400\">블로그 퍼블리싱의 주체가 자기 자신</span>에게 있다. 즉, 페이지 하나하나를 세세하게 컨트롤 할 수 있으며, 그래야만 한다. 이러한 자유도는 누군가에겐 강력한 장점이지만, 누군가에겐 없는게 나은 단점이 되기도 한다.\r\n\r\n<span class=\"green-A400\">Jekyll은 이런 분들께 적합해요!</span>\r\n\r\n* 판에 찍힌 블로그보다 자신만의 감각이 들어간 블로그를 만들고 싶은 사람\r\n* 웹에 대한 기초적인 지식이나 그에 준하는 센스를 가진 사람\r\n* 다양한 기능을 구현하고 싶은 사람\r\n* 위의 모든 사항을 재미로 느낄 수 있는 사람\r\n\r\n<span class=\"red-A400\">Jekyll은 이런 분들께 나빠요...</span>\r\n\r\n* 어찌됐든 안정적인 블로그를 얻고싶은 사람\r\n* 이런저런 난잡한 일에 시간을 투자하기 어려운 사람\r\n* 지금 당장 블로그를 시작하고 싶은 사람\r\n* 복잡한 것을 지양하는 사람\r\n\r\n<span class=\"primary\">Jekyll</span>은 하나부터 열까지 본인이 직접 구성해야한다. 그 흔한 댓글 기능조차 플러그인을 사용해서 구성해야한다. 즉, 통상 사이트 혹은 블로그라면 응당 존재해야할 기능조차 본인이 스스로 구성하지 않으면 안 된다. 원한다면 내 블로그에 무엇이든 구현할 수 있지만, 반대로 아무것도 구현하지 않은 단순한 페이지조각에 그친다. 기타 카테고리나 태그를 만들 때도 마찬가지. 이런걸 하면서 재미를 느끼지 못 한다면 개인적으로 별로 권하고 싶지 않다.\r\n\r\n물론 아름다운 테마를 적용할 수 있는건 독보적인 강점이지만, 이미 Tistory 정도만 가도 플랫폼 형태이면서 강력한 커스터마이징을 제공하기도 한다. 그럼에도 불구하고 <span class=\"primary\">Jekyll</span>을 선택한다면, <span class=\"primary\">Jekyll</span>은 당신에게 그 어떤 블로그에서도 접해보지 못한 색다른 경험을 제공해줄 것이다.","url":["2021-06-06-jekyll-blog-start","2021","06","06","jekyll-blog-start"]}],"data":{"header":{"title":"[Jekyll] GitHub Pages를 이용해 나만의 블로그 만들기 - 3. Git 설치하기","excerpt":"GitHub는 각 프로젝트를 하나의 Repository로 관리한다. 생성한 Repository는 Git을 이용하여 관리할 수 있다. GitHub 페이지 자체로도 Repository 내부의 파일 생성, 수정, 삭제가 가능하지만 매우 번거로우므로 대부분 Git을 활용하는 것이 권장된다.","coverImage":"https://user-images.githubusercontent.com/50317129/90983201-582f1080-e5a7-11ea-970b-8d7d82cb2084.png","date":"2021-06-06T23:42:11","type":"posts","category":"Jekyll","tag":["GitHub Pages(깃허브 페이지)","Jekyll(지킬)","Blog(블로그)","Git"],"group":"Jekyll Blog","comment":true,"publish":true},"name":"2021-06-06-jekyll-blog-prepare-git.md","content":"<p class=\"red-A400 center\">※ 본 게시물은 Jekyll 시절의 게시글을 토대로 복원한 게시물입니다.</p>\n\n<h1 id=\"개요\">개요 <a href=\"#개요\">🔗</a></h1><p><span class=\"primary\">GitHub</span>는 각 프로젝트를 하나의 Repository로 관리한다. 생성한 Repository는 <span class=\"orange-A400\">Git</span>을 이용하여 관리할 수 있다. <span class=\"primary\">GitHub</span> 페이지 자체로도 Repository 내부의 파일 생성, 수정, 삭제가 가능하지만 매우 번거로우므로 대부분 <span class=\"orange-A400\">Git</span>을 활용하는 것이 권장된다.</p>\n<h1 id=\"GitHub-Repository 생성하기\">GitHub Repository 생성하기 <a href=\"#GitHub-Repository 생성하기\">🔗</a></h1><p>이전 장에서 <span class=\"primary\">GitHub</span> 계정을 만들었다. <a href=\"https://github.com\">GitHub 홈페이지</a>로 이동하여 로그인을 해보자.</p>\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90412420-0b9b8f00-e0e8-11ea-80a5-d28ff329a020.png\" width=\"820px\" />\n</p>\n\n<p>해당 계정에서 관리하는 Repository의 전체 리스트를 보여준다. 아직 별다른 활동을 하지 않았다면 위 사진처럼 심플하게 보여준다. <span class=\"lightBlue-A400\">Create Repository</span> 버튼을 눌러 새로운 Repository를 생성하자.</p>\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90422505-eada3600-e0f5-11ea-92f1-695a58f7f783.png\" width=\"820px\" />\n</p>\n\n<ul>\n<li>Owner: 소유주. 본인이 기본으로 지정되어 있다.</li>\n<li>Repository name: Repository 이름. 블로그 호스팅을 위해 <strong>{username}.github.io로 설정</strong>하자.</li>\n<li>Public / Private: Repository의 공개여부. 호스팅용 Repository는 반드시 <strong>Public</strong>이어야 한다.</li>\n</ul>\n<p>이 때, 주의할 점이 한가지 있는데, <span class=\"red-A400\">Repository의 이름을 {username}.github.io</span>으로 지정한다. 만약, username이 <span class=\"teal-A400\">test</span>라면, Repository의 이름은 <span class=\"teal-A400\">test</span>.github.io이 된다. 아이디가 아닌 username임에 주의하자. username은 프로필에서 확인할 수 있다.</p>\n<blockquote>\n<p>GitHub Pages는 {username}.github.io 형식의 Repository를 Root(/)로 호스팅해준다. 즉, https://{username}.github.io가 된다. 만약 이와 같은 형식이 아닌 일반적인 Repository의 경우 https://{username}.github.io/{Repository Name}과 같이 하위 경로로 호스팅한다.</p>\n</blockquote>\n<p>한 계정이 관리하는 Repository의 이름은 중복될 수 없으므로, Root 경로의 호스팅은 계정 당 하나만 가능하다. 계정을 많이 만들어서 운용하면 어느정도 해소할 수 있긴 하다.</p>\n<p>나머지 옵션은 호스팅에 영향을 미치지 않으므로 무시하고 넘어가도 된다. 입력한 내용을 확인한 뒤 <span class=\"lightBlue-A400\">Create Repository</span>를 클릭하여 생성한다. Repository 목록에 생성한 Repository가 추가됐음을 확인할 수 있다.</p>\n<p>앞으로 이 Repository에 Jekyll 블로그 소스를 올릴 것이다.</p>\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90917728-6bfb3b00-e41e-11ea-8313-0251fba0659f.png\" width=\"820px\" />\n</p>\n\n<p>생성된 저장소로 접근하면 위와 같은 화면이 나온다. 위 내용은 <span class=\"orange-A400\">Git</span> 명령어를 이용하여 사용자의 PC에 저장소를 생성하고, 이를 <span class=\"primary\">GitHub</span>의 원격 저장소와 연결하여 소스관리를 하는 절차를 안내하는 내용이다.</p>\n<h1 id=\"Git-설치하기\">Git 설치하기 <a href=\"#Git-설치하기\">🔗</a></h1><p>이제 생성한 Repository를 관리할 <span class=\"orange-A400\">Git</span>을 설치해보자. <span class=\"orange-A400\">Git</span>은 소스코드를 효율적으로 관리할 수 있는 강력한 형상관리 툴로, Linux의 아버지 리누스 토르발스(Linus Benedict Torvalds)가 개발했다. 넓은 의미로 우리가 흔히 하는 복사 및 백업과 동일하지만, <span class=\"orange-A400\">Git</span>은 그것 보다는 더욱 강력하다.</p>\n<ul>\n<li>명령어 입력만으로 소스코드 백업이 가능하다.</li>\n<li><span class=\"orange-A400\">Git</span> 저장소와 통신이 가능한 환경이면 어디서나 저장된 소스코드를 받아오거나, 수정, 반영할 수 있다.</li>\n<li>커밋 시 해당 내역이 관리되며, 원할 경우 해당 커밋 이전으로 되돌릴 수 있다.</li>\n<li>커밋 별로 변경점을 비교할 수 있다.</li>\n</ul>\n<blockquote>\n<p>Commit(커밋): Git의 변경사항(파일 생성, 수정, 삭제)을 저장소에 기록하는 작업</p>\n</blockquote>\n<p>Jekyll 블로그는 <span class=\"primary\">GitHub</span>를 통해 관리하므로, 이와 연계된 <span class=\"orange-A400\">Git</span>의 사용은 필수다. 물론 <span class=\"orange-A400\">Git</span>을 사용하지 않고 <span class=\"primary\">GitHub</span>의 Repository에서 파일 추가, 삭제, 수정이 가능하다. 그러나 이 방법은 다수의 파일을 관리하는데 매우 비효율적이며, 파일 갱신 즉시 블로그에 내용이 반영되므로 오류가 있을 경우에도 블로그에 그대로 반영된다. 또한, 어찌됐든 Jekyll 사용하면서 코드를 만지게 될텐데, VSCode같은 에디터라도 쓰는게 개발환경에 여러모로 도움이 된다.</p>\n<h2 id=\"설치파일-다운로드\">설치파일 다운로드 <a href=\"#설치파일-다운로드\">🔗</a></h2><p><a href=\"https://git-scm.com/\">Git 홈페이지</a>에서 Git를 설치하자.</p>\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90918409-90a3e280-e41f-11ea-846f-68332ffecdbe.png\" width=\"820px\" />\n</p>\n\n<p><span class=\"orange-A400\">Git</span> 홈페이지는 위와 같다. 놀랍게도 홈페이지에서 자체적으로 <strong>접속한 OS의 정보를 확인하고 해당 OS에 가장 적합한 Git을 추천</strong>한다. 페이지 우측 상단의 모니터 그림에서 적합한 버전을 제공받을 수 있다.</p>\n<h2 id=\"라이센스-동의\">라이센스 동의 <a href=\"#라이센스-동의\">🔗</a></h2><p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90949816-b0222600-e486-11ea-95d7-7ee7150d4f4f.png\" width=\"820px\" />\n</p>\n\n<p><span class=\"orange-A400\">Git</span> 사용 라이센스에 동의한다. 당연하게도 동의 안 하면 설치가 불가능하다.</p>\n<h2 id=\"설치경로-선택\">설치경로 선택 <a href=\"#설치경로-선택\">🔗</a></h2><p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90949836-f6778500-e486-11ea-8568-94fd7e13f358.png\" width=\"820px\" />\n</p>\n\n<p>특별한 문제가 없다면 설치경로는 기본값으로 지정한다.</p>\n<h2 id=\"설치-옵션\">설치 옵션 <a href=\"#설치-옵션\">🔗</a></h2><p>설치 시 적용할 옵션을 선택한다.</p>\n<ul>\n<li>On the Desktop: 바탕화면 바로가기 생성</li>\n<li><span class=\"primary\">Git Bash Here</span>: 바탕화면에서 오른쪽 마우스 클릭 시 Git Bash 실행 메뉴 추가</li>\n<li>Git GUI Here: 바탕화면에서 오른쪽 마우스 클릭 시 Git GUI 실행 메뉴 추가</li>\n<li>Git LFS: 대용량 파일 지원</li>\n<li>Associate .git* configuration files with the default text editor: git 설정파일을 기본 텍스트 편집기와 연결</li>\n<li>Associate .sh files to be run with Bash: [.sh] 파일을 Bash로 실행함.</li>\n<li>Use a TrueType font in console windows: 콘솔창의 폰트를 TrueType으로 사용</li>\n<li>Check daily for Git for Windows updates: 매일 Git 업데이트 확인</li>\n</ul>\n<p>원하는 옵션을 추가/제외하고 다음으로 넘어간다. 파란색으로 하이라이팅된 옵션은 반드시 추가하는 것이 좋다.</p>\n<h2 id=\"시작-프로그램 추가\">시작 프로그램 추가 <a href=\"#시작-프로그램 추가\">🔗</a></h2><p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90952465-b6240100-e49e-11ea-9784-cb5a1695ffeb.png\" width=\"820px\" />\n</p>\n\n<p>시작 프로그램에 추가할 이름을 지정한다.</p>\n<ul>\n<li>Don't create a Start Menu folder: 시작 메뉴를 생성하지 않는다.</li>\n</ul>\n<h2 id=\"Git-편집기 선택(Choosing the default editor used by Git)\">Git 편집기 선택(Choosing the default editor used by Git) <a href=\"#Git-편집기 선택(Choosing the default editor used by Git)\">🔗</a></h2><p class=\"red-A400 center small\">※ Git을 처음 접하시는 분들은 해당 설정을 기본값으로 지정하시길 권장합니다.</p>\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90952499-f97e6f80-e49e-11ea-95a0-818471fd3417.png\" width=\"820px\" />\n</p>\n\n<p><span class=\"orange-A400\">Git</span>을 사용하기 위한 기본 편집기를 선택한다. 기본 권장옵션은 Vim이며, 원하는 편집기로 변경이 가능하다. 지원하는 편집기는 아래와 같다.</p>\n<ul>\n<li>Nano Editor</li>\n<li><span class=\"primary\">Vim</span></li>\n<li>Notepad++</li>\n<li>Visual Studio Code</li>\n<li>Visual Studio Code Insider</li>\n<li>Sublime</li>\n<li>Atom</li>\n<li>other</li>\n</ul>\n<h2 id=\"환경변수-지정(Adjusting your PATH environment)\">환경변수 지정(Adjusting your PATH environment) <a href=\"#환경변수-지정(Adjusting your PATH environment)\">🔗</a></h2><p class=\"red-A400 center small\">※ Git을 처음 접하시는 분들은 해당 설정을 기본값으로 지정하시길 권장합니다.</p>\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90952606-f6d04a00-e49f-11ea-85d0-204d305f8f9b.png\" width=\"820px\" />\n</p>\n\n<p>환경변수를 지정하는 옵션을 선택한다.</p>\n<ul>\n<li>Use Git from Git Bash Only: Bash 환경에서만 Git 사용 가능 (환경변수 미변경)</li>\n<li><span class=\"primary\">Use Git from Windows Command Prompt</span>: 윈도우 프롬프트에서 Git 사용 가능</li>\n<li>Use Git abnd optional Unix tools from the Windows Command Prompt: 윈도우 프롬프트에 Git 및 Linux 명령어 사용 가능</li>\n</ul>\n<h2 id=\"HTTPS-전송 방법 설정(Choosing HTTPS tranport backend)\">HTTPS 전송 방법 설정(Choosing HTTPS tranport backend) <a href=\"#HTTPS-전송 방법 설정(Choosing HTTPS tranport backend)\">🔗</a></h2><p class=\"red-A400 center small\">※ Git을 처음 접하시는 분들은 해당 설정을 기본값으로 지정하시길 권장합니다.</p>\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90952734-0e5c0280-e4a1-11ea-8a9f-08a164f05b5e.png\" width=\"820px\" />\n</p>\n\n<p><span class=\"orange-A400\">Git</span> 사용 시 HTTPS 전송 방법을 선택한다.</p>\n<ul>\n<li><span class=\"primary\">Use The OpenSSH library</span>: OpenSSH 라이브러리 사용</li>\n<li>Use The native Windows Secure Channel library: Windows 인증서 저장소 사용</li>\n</ul>\n<h2 id=\"개행문자-처리방식 지정(Configuring the line ending conversions)\">개행문자 처리방식 지정(Configuring the line ending conversions) <a href=\"#개행문자-처리방식 지정(Configuring the line ending conversions)\">🔗</a></h2><p class=\"red-A400 center small\">※ Git을 처음 접하시는 분들은 해당 설정을 기본값으로 지정하시길 권장합니다.</p>\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90953593-a4932700-e4a7-11ea-95dd-5c6cb50662ea.png\" width=\"820px\" />\n</p>\n\n<p>Checkout, Commit 작업 시 파일의 개행문자 처리 방식을 선택한다.</p>\n<ul>\n<li><span class=\"primary\">Checkout Windows-style, commit Unix-style line endings</span>: Checkout 시엔 Windows방식(CRLF), commit 시엔 Unix방식(LF)로 지정</li>\n<li>Checkout as-is, commit Unix-style line endings: Checkout 시엔 변환 없음, commit시엔 Unix방식(LF)로 지정</li>\n<li>Checkout as-is, commit as-is: Checkout, commit 둘 다 변환 없음</li>\n</ul>\n<h2 id=\"Git-Bash 선택(Configuring the terminal emulator to use with Git Bash)\">Git Bash 선택(Configuring the terminal emulator to use with Git Bash) <a href=\"#Git-Bash 선택(Configuring the terminal emulator to use with Git Bash)\">🔗</a></h2><p class=\"red-A400 center small\">※ Git을 처음 접하시는 분들은 해당 설정을 기본값으로 지정하시길 권장합니다.</p>\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90953681-ba551c00-e4a8-11ea-9fc4-fe1c43e2ef28.png\" width=\"820px\" />\n</p>\n\n<p>Git Bash 실행 시 사용할 터미널을 선택한다.</p>\n<ul>\n<li><span class=\"primary\">Use MinTTY</span>: MinTTY 터미널 사용</li>\n<li>Use Windows default console window: Windows 기본 터미널 사용</li>\n</ul>\n<h2 id=\"Pull-기본동작 지정 (Choose the default behavior of 'git pull')\">Pull 기본동작 지정 (Choose the default behavior of 'git pull') <a href=\"#Pull-기본동작 지정 (Choose the default behavior of 'git pull')\">🔗</a></h2><p class=\"red-A400 center small\">※ Git을 처음 접하시는 분들은 해당 설정을 기본값으로 지정하시길 권장합니다.</p>\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90953682-bc1edf80-e4a8-11ea-9d0c-d9c0d71afbaf.png\" width=\"820px\" />\n</p>\n\n<p><code class=\"inline-code\">git pull</code> 명령어 실행 시 수행할 동작을 지정한다.</p>\n<ul>\n<li><span class=\"primary\">Default (fast-forward or merge)</span>: fast-forward 혹은 merge를 이용한 병합</li>\n<li>Rebase: rebase를 이용항 병합</li>\n<li>Only ever fast-forward: fast-forward를 이용한 병합</li>\n</ul>\n<h2 id=\"Credential-helper 지정(Choose a credential helper)\">Credential helper 지정(Choose a credential helper) <a href=\"#Credential-helper 지정(Choose a credential helper)\">🔗</a></h2><p class=\"red-A400 center small\">※ Git을 처음 접하시는 분들은 해당 설정을 기본값으로 지정하시길 권장합니다.</p>\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90954457-53873100-e4af-11ea-9a98-ef5131c4ab1a.png\" width=\"820px\" />\n</p>\n\n<p>Credential helper를 지정한다.</p>\n<blockquote>\n<p>Credential은 데이터 통신에 HTTP 프로토콜을 사용 시, 매번 입력해야하는 인증정보를 저장하고 자동으로 입력해주는 시스템을 제공한다.</p>\n</blockquote>\n<ul>\n<li>None: 사용하지 않음</li>\n<li><span class=\"primary\">Git Credential Manager</span>: Windows 전용 Credential Manager 사용</li>\n<li>Git Credential Manager Core: Cross-Platform을 지원하는 Credential Manager 사용</li>\n</ul>\n<h2 id=\"실험-옵션 지정(Configuring experimental options)\">실험 옵션 지정(Configuring experimental options) <a href=\"#실험-옵션 지정(Configuring experimental options)\">🔗</a></h2><p class=\"red-A400 center small\">※ Git을 처음 접하시는 분들은 해당 설정을 기본값으로 지정하시길 권장합니다.</p>\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90954553-225b3080-e4b0-11ea-8930-6b461f966b4c.png\" width=\"820px\" />\n</p>\n\n<p><span class=\"orange-A400\">Git</span>에서 제공하는 실험적인 옵션을 선택한다. 해당 옵션은 업데이트에 따라 정식으로 지원되거나, 제외될 수 있다.</p>\n<ul>\n<li>Enable experimental support for pseudo consoles: 가상 터미널 지원</li>\n</ul>\n<h2 id=\"설치-완료\">설치 완료 <a href=\"#설치-완료\">🔗</a></h2><p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90957778-03b66300-e4cb-11ea-9927-a0efbfc1e921.png\" width=\"820px\" />\n</p>\n\n<p>컴퓨터의 사양에 따라 약간의 시간이 소요될 수 있다.</p>\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90957782-0618bd00-e4cb-11ea-9972-7bd3fe1aa45b.png\" width=\"820px\" />\n</p>\n\n<p>설치가 완료됐다. <span class=\"primary\">Launch Git Bash</span>를 체크하면 Git 명령어를 입력할 수 있는 Git Bash가 즉시 실행된다.</p>\n<h2 id=\"Git-Bash 실행하기\">Git Bash 실행하기 <a href=\"#Git-Bash 실행하기\">🔗</a></h2><p>설치 후 바탕화면이나 폴더에서 오른쪽 마우스를 클릭해서 컨텍스트 메뉴를 띄우자. <a href=\"#설치-옵션\" target=\"_blank\">설치 옵션</a>에서 선택했던 내용에 따라 <span class=\"primary\">Git Bash Here</span>, <span class=\"primary\">Git GUI Here</span>가 생성됨을 확인할 수 있다. 해당 메뉴를 클릭하면 Bash 혹은 GUI를 실행할 수 있다. Bash는 콘솔 형태이며, GUI는 UI가 있는 흔한 프로그램이다.</p>\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/50317129/90957788-0913ad80-e4cb-11ea-8627-6ceba19d58b4.png\" width=\"820px\" />\n</p>\n\n<p>위 사진은 Bash의 사진으로, 본 시리즈에서는 Git Bash를 통한 명령어 입력을 기준으로 서술한다.</p>\n<blockquote>\n<p>Git GUI는 Git Desktop으로 인해 잘 쓰이지 않는다.</p>\n</blockquote>\n<h1 id=\"Git-설정하기\">Git 설정하기 <a href=\"#Git-설정하기\">🔗</a></h1><p>Git Bash를 실행한다. 자신이 만든 Repository와 통신하기 위해서, 내가 나임을 인증할 수 있는 정보를 사전에 입력해야 한다. 아래의 명령어를 통해 인증 정보를 입력하자.</p>\n<p><code class=\"inline-code\">git config --global user.name &quot;사용자 username&quot;</code>\n<code class=\"inline-code\">git config --global user.email &quot;사용자 email&quot;</code></p>\n<p>username과 email은 회원가입시 입력한 정보로 입력해야한다.</p>\n","url":["2021-06-06-jekyll-blog-prepare-git","2021","06","06","jekyll-blog-prepare-git"],"toc":[{"text":"개요","tag":"개요","depth":1},{"text":"GitHub Repository 생성하기","tag":"GitHub-Repository 생성하기","depth":1},{"text":"Git 설치하기","tag":"Git-설치하기","depth":1},{"text":"설치파일 다운로드","tag":"설치파일-다운로드","depth":2},{"text":"라이센스 동의","tag":"라이센스-동의","depth":2},{"text":"설치경로 선택","tag":"설치경로-선택","depth":2},{"text":"설치 옵션","tag":"설치-옵션","depth":2},{"text":"시작 프로그램 추가","tag":"시작-프로그램 추가","depth":2},{"text":"Git 편집기 선택(Choosing the default editor used by Git)","tag":"Git-편집기 선택(Choosing the default editor used by Git)","depth":2},{"text":"환경변수 지정(Adjusting your PATH environment)","tag":"환경변수-지정(Adjusting your PATH environment)","depth":2},{"text":"HTTPS 전송 방법 설정(Choosing HTTPS tranport backend)","tag":"HTTPS-전송 방법 설정(Choosing HTTPS tranport backend)","depth":2},{"text":"개행문자 처리방식 지정(Configuring the line ending conversions)","tag":"개행문자-처리방식 지정(Configuring the line ending conversions)","depth":2},{"text":"Git Bash 선택(Configuring the terminal emulator to use with Git Bash)","tag":"Git-Bash 선택(Configuring the terminal emulator to use with Git Bash)","depth":2},{"text":"Pull 기본동작 지정 (Choose the default behavior of 'git pull')","tag":"Pull-기본동작 지정 (Choose the default behavior of 'git pull')","depth":2},{"text":"Credential helper 지정(Choose a credential helper)","tag":"Credential-helper 지정(Choose a credential helper)","depth":2},{"text":"실험 옵션 지정(Configuring experimental options)","tag":"실험-옵션 지정(Configuring experimental options)","depth":2},{"text":"설치 완료","tag":"설치-완료","depth":2},{"text":"Git Bash 실행하기","tag":"Git-Bash 실행하기","depth":2},{"text":"Git 설정하기","tag":"Git-설정하기","depth":1}]},"hash":"96e5598e3c3"},"__N_SSG":true}