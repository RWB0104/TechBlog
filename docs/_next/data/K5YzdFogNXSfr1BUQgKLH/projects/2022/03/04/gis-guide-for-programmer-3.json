{"pageProps":{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 3. 좌표계","excerpt":"1986년, NASA에서 우주왕복선 챌린저호를 발사했으나, 발사한 지 약 73초만에 폭발한 안타까운 사고가 있었다. 원인은 어이없게도 단위 실수. 국제적인 표준은 미터법임에도 불구하고, 미국을 포함한 몇몇 국가는 인치법을 표준으로 사용하고 있었다. 이러한 상황에서 우주선의 설계도 중 미터법으로 표기된 부품 O Ring을 인치법으로 제작했기 때문에 일어난 사고였다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-04T01:47:29+09:00","type":"projects","category":"GIS","tag":["GIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-04-gis-guide-for-programmer-3.md","url":["2022-03-04-gis-guide-for-programmer-3","2022","03","04","gis-guide-for-programmer-3"],"toc":"<ul><li><a href=\"#다-같은 좌표가 아니야!\">다 같은 좌표가 아니야!</a></li><ul><li><a href=\"#타원체\">타원체</a></li><li><a href=\"#투영법\">투영법</a></li></ul><li><a href=\"#자주-사용하는 프로젝션\">자주 사용하는 프로젝션</a></li><ul><li><a href=\"#세계-측지\">세계 측지</a></li><li><a href=\"#국내-측지\">국내 측지</a></li></ul>","content":"<h1 id=\"다-같은 좌표가 아니야!\">다 같은 좌표가 아니야! <a href=\"#다-같은 좌표가 아니야!\">🔗</a></h1><p>1986년, NASA에서 우주왕복선 챌린저호를 발사했으나, 발사한 지 약 73초만에 폭발한 안타까운 사고가 있었다.</p>\n<p>원인은 어이없게도 단위 실수. 국제적인 표준은 미터법임에도 불구하고, 미국을 포함한 몇몇 국가는 인치법을 표준으로 사용하고 있었다. 이러한 상황에서 우주선의 설계도 중 미터법으로 표기된 부품 O Ring을 인치법으로 제작했기 때문에 일어난 사고였다.</p>\n<br />\n\n<p>공간정보 또한 이와 비슷하게 좌표계라는 일종의 단위를 가지고 있다. 통상 공간정보의 좌표라고 하면 대부분 동경 127, 북위 37을 떠올린다.</p>\n<p>동경 127, 북위 37은 GPS에서 주로 사용하는 세계측지 중 하나인 <code class=\"inline-code\">WGS-84</code> 좌표계다. 이와 같이 좌표계의 특성에 따라 표현되는 값도 다르며, 이를 구분하기 위해 EPSG:0000과 같이 EPSG 코드로 관리한다.</p>\n<p>방금 언급한 <code class=\"inline-code\">WGS-84</code>의 코드는 <code class=\"inline-code\">EPSG:4326</code>이다.</p>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">EPSG 코드</th>\n<th align=\"center\">proj 인자</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\"><code class=\"inline-code\">EPSG:4326</code></td>\n<td align=\"center\"><code class=\"inline-code\">+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs</code></td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>이러한 체계를 좌표계라고 부르며, 공식적으론 프로젝션(Projection)이라 명칭한다. 프로젝션은 EPSG 코드와 proj 인자로 이루어진다.</p>\n<p>EPSG 코드는 좌표계의 명칭이며, proj 인자는 좌표계를 표현하는 수식으로 +proj=로 시작한다. 이 proj 인자는 좌표계의 표현 및 좌표계 변환에 사용된다.</p>\n<p>SHP의 prj 파일은 이 프로젝션에 대한 정보를 담고 있다.</p>\n<p>대부분의 데이터 제공자는 자신이 제공하는 공간정보 데이터에 대한 좌표계를 제공하니, 사용하기전에 이를 반드시 확인해야한다. <span class=\"red-500\">간혹 명시하지 않거나, 오기입하는 경우도 있으니 주의.</span></p>\n<br />\n<br />\n\n\n\n\n\n<h2 id=\"타원체\">타원체 <a href=\"#타원체\">🔗</a></h2><p>좌표는 현재 위치를 특정 값으로 표시하는 것이다. 지구는 구(Sphere) 형태를 띄고 있으므로, 좌표를 정확하게 표시하기 위해선 이 구의 모양을 정의할 필요가 있다.</p>\n<p>지구는 구 형태지만, 실제로 엄밀한 구는 아니다. 아, 그렇다고 평평하다는 뜻은 더더욱 아니다.</p>\n<p>\n\t\t<a href=\"https://user-images.githubusercontent.com/50317129/156601191-e161a593-ccee-4f06-b5c8-b2ffce88bdaf.png\" target=\"_blank\" data-title=\"null\">\n\t\t\t<img src=\"https://user-images.githubusercontent.com/50317129/156601191-e161a593-ccee-4f06-b5c8-b2ffce88bdaf.png\" alt=\"image\" />\n\t\t</a>\n\t\t</p>\n<p>아름다운 구 형태였다면 좋았겠지만, 아쉽게도 지구의 모양은 문제가 좀 많다. 구라고 부르기 애매한 수준. 혹자는 감자라고도 칭한다.</p>\n<p>어쨌든 완벽한 구 형태가 아니다보니, 좌표를 계산함에 있어서 여러 보정이 필요하다.</p>\n<br />\n\n<p>이런 지구의 현실을 반영하여 지구의 형태를 정의한 것을 타원체라고 한다. 좌표계마다 사용하는 타원체는 제각각이며, 어떤 타원체를 사용하냐에 따라 그 특성이 달라진다.</p>\n<ul>\n<li>GRS80: 세계 타원체 표준. 국제측지학회, 지구물리학연합에서 채택함</li>\n<li>WGS84: 미국에서 군사용 GPS를 개발하는 과정에서 사용하기 위해 정의한 타원체.<ul>\n<li>GRS80과 WGS84는 거의 동일하며, 단반경 0.01mm 정도의 매우 근소한 차이를 가진다.</li>\n</ul>\n</li>\n<li>BESSEL: 특정 구역을 기준으로 정의한 타원체. 특정 구역까지는 정확하나, 구역에서 멀어질수록 오차가 심해진다.<ul>\n<li>대한민국은 일제강점기의 영향으로 이전까진 도쿄를 기준으로 정의된 BESSEL 타원체를 사용했다.</li>\n</ul>\n</li>\n</ul>\n<p>타원체와 관련된 정보를 찾다보면 <strong>ITRF-2000</strong>이라는 키워드가 보일텐데, ITRF-2000은 하나로 정의된 타원체가 아니라, 세계 공통 타원체를 ITRF-2000이라 부른다. 즉, 현재 기준으로 <code class=\"inline-code\">GRS80</code>과 동일하다.</p>\n<br />\n\n<p>GPS라는 걸출한 기술이 개발되기 전까지는 각 구역을 중심으로 타원체를 정의하는 <code class=\"inline-code\">BESSEL</code> 타원체를 많이 사용했다. GPS 기술 이전에는 전 세계의 타원체를 정의할 수단이나 기술이 전무했기 때문.</p>\n<p>그 중 우리나라는 위에서 언급했다시피, 일제강점기의 영향으로 인해 일본에서 진행한 국토조사 사업을 통해 BESSEL 동경 타원체를 사용하게 됐다.</p>\n<p><code class=\"inline-code\">EPSG:2096(동부)</code>, <code class=\"inline-code\">EPSG:2097(중부)</code>, <code class=\"inline-code\">EPSG:2096(서부)</code> 등이 이에 해당되며, 오래된 공간 정보 데이터를 찾다 보면 이 좌표계들을 사용하는 걸 볼 수도 있다.</p>\n<p>다행히 현재는 국제 표준을 위해 <code class=\"inline-code\">GRS80</code> 타원체를 사용하는 좌표계로 변경했다. 아래 후술할 <code class=\"inline-code\">EPSG:5180(서부)</code>, <code class=\"inline-code\">EPSG:5181(중부)</code>, <code class=\"inline-code\">EPSG:5183(동부)</code> 등이 이에 해당한다.</p>\n<br />\n<br />\n\n\n\n\n\n<h2 id=\"투영법\">투영법 <a href=\"#투영법\">🔗</a></h2><p>여러분 머릿속에 지도를 떠올려보자. 종이든, 앱이든 상관없다. 생각해보면, 지구는 구지만, 지도는 평면이다. 물론 지구의 형태를 충실히 이행한 지구본이 있지만, 요즘의 지구본은 위치보다는 인테리어의 범주에 들어섰다. 단언컨데 여기서 그 누구도 위치를 찾기 위해 지구본을 들여다보지 않을 것이다.</p>\n<p>그말인즉슨, 우리에게 익숙한 지도를 만들기 위해선, 구를 평면화하는 작업이 필요하다. 어렸을 때 수학시간에 전개라는 개념을 배운 적이 있는가? 우유팩을 완전히 펼치는 과정을 생각하면 얼추 비슷하다.</p>\n<p>\n\t\t<a href=\"https://user-images.githubusercontent.com/50317129/156607735-9b23d446-1bdc-4dd1-9105-455906f51fc4.png\" target=\"_blank\" data-title=\"null\">\n\t\t\t<img src=\"https://user-images.githubusercontent.com/50317129/156607735-9b23d446-1bdc-4dd1-9105-455906f51fc4.png\" alt=\"image\" />\n\t\t</a>\n\t\t</p>\n<p>이처럼 좌표계에서 구를 평면화하는 것을 투영법이라 부른다.</p>\n<ul>\n<li>TM(Transverse Mercator): BESSEL 타원체를 기준으로 투영한 평면좌표계</li>\n<li>UTM(Universal TM): GRS80(혹은 WGS84) 타원체를 기준으로 투영한 평면좌표계</li>\n<li>UTM-K: 일반적인 UTM은 적도를 기준으로 하므로, 한국과 약간의 오차가 발생한다. 이를 보정하여 한국에 맞게 정의한 것이 UTM-K다.<ul>\n<li>UTM 투영체는 GRS80 타원체를 기준으로 하는데, UTM-K 중 몇몇 좌표계는 BESSEL 타원체를 사용한다. 자세한 이유는 불명.</li>\n</ul>\n</li>\n</ul>\n<p>좌표계를 보면 중부, 동부 등으로 나눠져있는데, 이는 오차를 최소화하기 위해 기준점을 나눈 것이다.</p>\n<p>타원체를 정의하고, 이를 평면화하는 과정에서 발생하는 오차를 최대한 줄이기 위해 투영 기준점을 잡고, 해당 위치를 기준으로 투영하는 것이다. 대한민국은 동부, 중부, 서부, 제주원점이 존재(더 있을 수 있음)하며, 각 구역의 측위기준점을 기준으로 좌표계를 투영한다.</p>\n<p>국가급이 아닌 시군구, 지자체 단위에서 제공하는 공간 정보는 각 위치에 가장 최적화된 좌표계를 기준으로 제공한다. 예를들면 제주 관련 데이터는 제주원점, 강원도청에서 제공하는 데이터는 동부원점을 적용한다던가.</p>\n<br />\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"자주-사용하는 프로젝션\">자주 사용하는 프로젝션 <a href=\"#자주-사용하는 프로젝션\">🔗</a></h1><p>사실 타원체니, 투영법이니 크게 중요하지 않다. 그냥 본인이 가진 데이터가 어떤 좌표계를 사용하는지만 잘 알면 사용하는 데 아무런 지장이 없다. 타원체, 투영법에 관계없이 모든 좌표계는 <code class=\"inline-code\">EPSG:0000</code>의 형태로 관리되기 때문. 그냥 본인이 원하는 좌표계의 EPSG 코드만 알고 있으면 단순 사용에 아무런 문제가 없다.</p>\n<p>각 좌표계는 매칭되는 EPSG 코드와 proj 인자를 가진다. proj 인자는 해당 좌표계를 나타내는 일종의 수식으로, 이 인자를 통해 좌표계의 변환 연산이 가능하다. proj를 이해할 수 있다면, 이 좌표계가 어떤 특성을 가지는지 인자만 보고도 해석할 수 있다.</p>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">파라미터</th>\n<th align=\"center\">내용</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\"><code class=\"inline-code\">proj</code></td>\n<td align=\"center\">투영체</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">a</code></td>\n<td align=\"center\">장반경 (타원에서 가장 긴 반지름)</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">b</code></td>\n<td align=\"center\">단반경 (타원에서 가장 짧은 반지름)</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">lat</code> <code class=\"inline-code\">lon</code></td>\n<td align=\"center\">좌표계의 기준 경위도</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">x</code> <code class=\"inline-code\">y</code></td>\n<td align=\"center\">좌표계의 기준 xy</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">k</code></td>\n<td align=\"center\">좌표계 배율</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">ellps</code></td>\n<td align=\"center\">타원체 종류</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>대략적인 파라미터는 위와 같으며, <code class=\"inline-code\">lat</code>, <code class=\"inline-code\">lon</code>, <code class=\"inline-code\">x</code>, <code class=\"inline-code\">y</code>의 경우 <code class=\"inline-code\">lat_ts</code>, <code class=\"inline-code\">x_0</code>와 같이 뒤에 어떤 인자가 따라오느냐에 따라 의미하는 게 조금씩 달라지기도 한다.</p>\n<p>대충 이 정도만 알면 해당 좌표계의 인자가 뭘 의미하는 지 어렴풋이 파악할 수 있으며, 단순 좌표계를 사용하려는 개발자 선에선 이 이상 몰라도 상관없다. 아니, 이 조차 몰라도 사용에 지장은 없다.</p>\n<p>모든 좌표계를 숙지하거나, proj 인자를 외울 필요는 더더욱 없다. 단, 주로 사용하는 좌표계 정도는 알고 있으면 데이터 파악을 좀 더 쉽게 할 수 있다.</p>\n<br />\n<br />\n\n\n\n\n\n<h2 id=\"세계-측지\">세계 측지 <a href=\"#세계-측지\">🔗</a></h2>\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">EPSG 코드</th>\n<th align=\"left\">proj 인자</th>\n<th align=\"center\">비고</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\"><code class=\"inline-code\">EPSG:3857</code></td>\n<td align=\"left\"><code class=\"inline-code\">+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs</code></td>\n<td align=\"center\">GPS</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">EPSG:4326</code></td>\n<td align=\"left\"><code class=\"inline-code\">+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs</code></td>\n<td align=\"center\">Google Maps, VWorld</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>WGS84 세계 측지인 EPSG:4326을 보자. 장, 단반경이 6378137로 동일한 완벽한 구 형태를 지향하고 있다. GPS 기준 좌표계답게 위경도 및 xy의 보정이 없다. <code class=\"inline-code\">proj=merc</code>은 메르카토르 투영법을 사용했다는 의미다.</p>\n<p>여담으로, <code class=\"inline-code\">EPSG:3857</code>은 투영법이 <code class=\"inline-code\">longlat</code>으로 흔히 사용되는 평면 투영체인 <code class=\"inline-code\">TM</code>, <code class=\"inline-code\">UTM</code>과 달라 거리계산이 안 된다.</p>\n<p>즉, <code class=\"inline-code\">EPSG:3857</code>로 표현된 두 점 사이의 거리를 계산해도, 이 값이 실제 거리를 나타내지 않는다.</p>\n<br />\n<br />\n\n\n\n\n\n<h2 id=\"국내-측지\">국내 측지 <a href=\"#국내-측지\">🔗</a></h2>\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">EPSG 코드</th>\n<th align=\"left\">proj 인자</th>\n<th align=\"center\">비고</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\"><code class=\"inline-code\">EPSG:5179</code></td>\n<td align=\"left\"><code class=\"inline-code\">+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m +no_defs</code></td>\n<td align=\"center\">NAVER Map</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">EPSG:5181</code></td>\n<td align=\"left\"><code class=\"inline-code\">+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs</code></td>\n<td align=\"center\">KAKAO Map</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">EPSG:5186</code></td>\n<td align=\"left\"><code class=\"inline-code\">+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=600000 +ellps=GRS80 +units=m +no_defs</code></td>\n<td align=\"center\">중부원점</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>이 밖에도 여러 좌표계가 있으므로, 필요할 때마다 찾아 사용하면 된다.</p>\n<p><a href=\"https://epsg.io/\" target=\"_blank\">EPSG.io</a>에서 다양한 좌표계의 정보를 확인할 수 있으니 참고할 것.</p>\n","meta":{"group":[{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 20. WFS Transaction으로 데이터 추가하기","excerpt":"지금까지는 GeoServer를 통해 데이터를 호출하고, 이를 표현하는 것이 전부였다. 객체로 표현을 하던, 이미지로 그리던, 데이터를 직접 표현해주던, 결국 어떠한 형태로든 데이터를 보여주는 수준에 그쳤다. 이 문서를 포함하여, 앞으로 서술할 3개 문서는 공간정보 데이터의 삽입/수정/삭제에 대해 다룬다. WFS Transaction 프로토콜을 활용하면 정해진 패턴으로 데이터의 CUD를 수행할 수 있다. 이 중 이 문서에서는 WFS Transaction Insert. 즉, 공간정보 데이터의 추가에 대해 다룬다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-05-30T00:55:46+09:00","type":"projects","category":"GIS","tag":["GIS","GeoServer","OpenLayers","WFS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-05-30-gis-guide-for-programmer-20.md","url":["2022-05-30-gis-guide-for-programmer-20","2022","05","30","gis-guide-for-programmer-20"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 19. WMS에 팝업 붙이기","excerpt":"지도에 표시된 마커 혹은 객체를 클릭하면, 팝업을 통해 해당 객체의 자세한 정보를 보여준다. 이 장에서는 WFS 지도에 팝업을 출력하여 마커의 세부 정보를 표현해본다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-05-28T20:55:23+09:00","type":"projects","category":"GIS","tag":["GIS","GeoServer","OpenLayers","WMS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-05-28-gis-guide-for-programmer-19.md","url":["2022-05-28-gis-guide-for-programmer-19","2022","05","28","gis-guide-for-programmer-19"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 18. WFS에 팝업 붙이기","excerpt":"지도에 표시된 마커 혹은 객체를 클릭하면, 팝업을 통해 해당 객체의 자세한 정보를 보여준다. 이 장에서는 WFS 지도에 팝업을 출력하여 마커의 세부 정보를 표현해본다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-05-25T23:00:06+09:00","type":"projects","category":"GIS","tag":["GIS","GeoServer","OpenLayers","WFS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-05-25-gis-guide-for-programmer-18.md","url":["2022-05-25-gis-guide-for-programmer-18","2022","05","25","gis-guide-for-programmer-18"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 17. WFS 객체에 상호작용 추가하기","excerpt":"WFS와 WMS의 가장 큰 특징은 데이터의 결과물이다. WFS는 GeoJSON으로 공간정보 요소를 반환해주는 반면, WMS는 공간정보 요소를 토대로 직접 지도를 렌더링하여 제공해준다. OpenLayers는 WFS의 데이터를 토대로 `canvas`에 객체를 렌더링한다. 공간정보를 토대로 일종의 도형을 그린다고 생각하면 쉽다. 이미지와 다르게 웹 상에서 직접 그려지는 객체이므로, 웹은 이를 인식하거나 조작할 수 있다는 큰 장점이 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-05-21T03:04:59+09:00","type":"projects","category":"GIS","tag":["GIS","GeoServer","OpenLayers"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-05-21-gis-guide-for-programmer-17.md","url":["2022-05-21-gis-guide-for-programmer-17","2022","05","21","gis-guide-for-programmer-17"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 16. WMS GetImage를 사용하여 지도에 이미지 표시하기","excerpt":"이 장에선 WFS를 통해 지도에 이미지를 표시하는 방법에 대해 다룬다. 이전 장의 WFS는 공간정보 데이터를 GeoJSON으로 받아 직접 객체로 표시하지만, WMS는 객체를 GeoServer에서 이미지로 렌더링한 이미지를 받아 표시한다. 즉, GeoServer로 부터 직접 Tile Map을 받아 표현한다고 생각하면 된다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-05-16T02:13:10+09:00","type":"projects","category":"GIS","tag":["GIS","GeoServer","OpenLayers","OGC","WMS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-05-16-gis-guide-for-programmer-16.md","url":["2022-05-16-gis-guide-for-programmer-16","2022","05","16","gis-guide-for-programmer-16"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 15. WFS GetFeature를 사용하여 지도에 객체 표시하기","excerpt":"지금까지는 온전히 OpenLayers만의 기능이였다면, 이 장부터 슬슬 GeoServer와의 연동을 다루게 된다. 그 중 첫 번째로 다룰 기능은, WFS다. GeoServer에서 WFS는 지정한 요소의 정보를 GeoJSON의 형태로 반환해준다. 이 정보를 적절히 활용하여 지도에 표시할 수 있다. 이러한 기능을 통해 직접 관리하거나 가공한 데이터를 지도에 표시할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-05-15T02:48:50+09:00","type":"projects","category":"GIS","tag":["GIS","GeoServer","OpenLayers","OGC","WFS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-05-15-gis-guide-for-programmer-15.md","url":["2022-05-15-gis-guide-for-programmer-15","2022","05","15","gis-guide-for-programmer-15"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 14. 지도에 사용자의 위치 표시하기","excerpt":"사용자의 위치를 기반으로 다양한 서비스를 제공할 수 있겠지만, 그 중에서 가장 기본적인 기능은 사용자의 위치를 지도 상에 직접 표시하는 것이다. 이전 장에서 설명한 지오로케이션을 토대로, OpenLayers를 활용하여 위치를 지도에 표시한다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-04-04T01:56:03+09:00","type":"projects","category":"GIS","tag":["GIS","OpenLayers"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-04-04-gis-guide-for-programmer-14.md","url":["2022-04-04-gis-guide-for-programmer-14","2022","04","04","gis-guide-for-programmer-14"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 13. 브라우저에서 사용자 위치정보 수집하기","excerpt":"지도 서비스 중에서는 사용자의 위치를 분석하고, 위치에 더욱 적절한 컨텐츠를 제시하기도 한다. 일례로, 배달 어플은 사용자의 위치에 따라 일정 범위 내의 음식점만을 우선으로 보여준다던가 하는 방식이다. 어플리케이션의 경우, 주 구동 기기인 스마트폰의 GPS를 활용할 수 있다. 비슷하게 브라우저는 브라우저 자체적으로 사용자의 동의에 따라 위치정보를 수집하여 활용할 수 있다. 당연하게도 인터넷이 반드시 연결되어야 한다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-04-03T02:50:05+09:00","type":"projects","category":"GIS","tag":["GIS","OpenLayers"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-04-03-gis-guide-for-programmer-13.md","url":["2022-04-03-gis-guide-for-programmer-13","2022","04","03","gis-guide-for-programmer-13"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 12. 맵의 유용한 정보 표시하기","excerpt":"지도를 다루다보면, 내가 현재 보고있는 영역의 좌표, 지도 상에서 마우스가 위치한 좌표, 줌 레벨 등 다양한 정보를 얻어야할 경우가 생긴다. 이런 니즈를 충족하기 위해, 지도 상에 상태창을 만들어 관련 정보를 출력해주면 필요할 때 유용하게 사용할 수 있을 것이다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-22T22:37:21+09:00","type":"projects","category":"GIS","tag":["GIS","OpenLayers"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-22-gis-guide-for-programmer-12.md","url":["2022-03-22-gis-guide-for-programmer-12","2022","03","22","gis-guide-for-programmer-12"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 11. VWorld 맵 만들기","excerpt":"이전 장에서 OSM을 통해 지도를 표시해봤다. 하지만, OSM의 지도는 디테일함이 떨어진다는 무시할 수 없는 단점이 존재한다. OSM은 사용하기 쉬운 세계지도라는 큰 장점이 있음에도, 저 단점 하나로 인해 국내 서비스용 지도로 사용하기 어렵다. 즉, 예제 이상의 실질적인 서비스에 사용하려면 국내 지리에 특화된 지도가 필요하다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-21T23:51:45+09:00","type":"projects","category":"GIS","tag":["GIS","OpenLayers"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-21-gis-guide-for-programmer-11.md","url":["2022-03-21-gis-guide-for-programmer-11","2022","03","21","gis-guide-for-programmer-11"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 10. Open Street Map(OSM) 맵 만들기","excerpt":"OSM이란, 전세계 지도 종사자들이 자율적으로 관리하는 세계지도다. 즉, 지도 분야의 오픈 소스라고 생각하면 이해하기 쉽다. 각 국의 기여자들이 지도를 관리하고 있으며, 각 국가의 영역은 해당하는 국가의 언어로 표시된다. 전세계를 대상으로 하는 서비스에도 무리없이 적용 가능하다는 장점이 있다. 단, 한국 기준으로 지도의 퀄리티가 그리 뛰어나진 않다. OpenLayers는 라이브러리 단계에서 OSM을 기본 제공한다. 즉, 별다른 API 호출이나 설정 없이 간단한 코드 몇 줄 만으로도 웹 상에 세계지도를 띄울 수 있다. 이 장에서는 OpenLayers6를 활용하여 웹 상에 OSM을 띄우는 매우 기초적인 방법에 대해 다룬다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-15T04:53:00+09:00","type":"projects","category":"GIS","tag":["GIS","OpenLayers"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-19-gis-guide-for-programmer-10.md","url":["2022-03-19-gis-guide-for-programmer-10","2022","03","19","gis-guide-for-programmer-10"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 9. 데이터 필터링하기","excerpt":"WFS나 WMS를 호출할 때, 좀 더 다채로운 필터링이 필요한 경우가 존재할 수 있다. 특정 영역 밖의 객체를 호출한다거나, 특정 영역에 걸치는 데이터만 호출하는 것, 혹은 다양한 조건을 조합하여 데이터를 조회해야 할 수도 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-15T01:11:19+09:00","type":"projects","category":"GIS","tag":["GIS","GeoServer"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-15-gis-guide-for-programmer-9.md","url":["2022-03-15-gis-guide-for-programmer-9","2022","03","15","gis-guide-for-programmer-9"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 8. 공간정보 데이터를 주문하는 법. OGC","excerpt":"OpenLayers는 웹 브라우저에서 지도나 GIS 서비스를 제공하기 위한 JavaScript Library다. GIS 라이브러리 중 진입 장벽은 가장 높지만, 그에 상응하는 강력한 기능을 제공한다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-14T23:37:32+09:00","type":"projects","category":"GIS","tag":["GIS","GeoServer"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-14-gis-guide-for-programmer-8.md","url":["2022-03-14-gis-guide-for-programmer-8","2022","03","14","gis-guide-for-programmer-8"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 7. 공간정보 데이터를 관리하는 법. GeoServer","excerpt":"이전 장에서 공간정보 데이터를 DB에 넣어봤다. 이제 데이터를 적절한 방법으로 통신할 방법만 마련한다면, DB에 저장한 공간정보 데이터를 웹에서든 앱에서든 자유롭게 활용할 수 있을 것이다. 하지만 누누히 언급했듯이, 공간정보 데이터는 다른 데이터와 엄연한 차별점이 존재한다. 바로 공간 데이터라는 점이다. 공간정보 데이터는 일반적인 텍스트 기반의 데이터가 아니다보니, CRUD에 있어서 굉장히 취약하다. 좀 더 자유로운 통신을 위해 DB에 넣었음에도 CRUD에 전혀 강점이 없는 것. 즉, MyBatis든, JPA든, 일반적인 DB 통신으로는 공간정보 데이터를 온전히 받기가 어렵다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-07T01:12:33+09:00","type":"projects","category":"GIS","tag":["GIS","GeoServer"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-07-gis-guide-for-programmer-7.md","url":["2022-03-07-gis-guide-for-programmer-7","2022","03","07","gis-guide-for-programmer-7"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 6. 공간정보의 DB화","excerpt":"데이터의 CRUD 소요가 있는 서비스는 DB를 사용한다. 서비스 운영에 필요한 데이터를 DB에 저장하고, 이를 적절히 관리, 조작함으로써 서비스의 기능을 제공한다. GIS의 경우, 그 특성상 대용량 데이터를 자주 접하게 된다. 일례로, 전국의 건물 수는 몇백만을 우습게 상회하기 때문. 단순 row가 백만 단위인 것도 문제지만, 건물 정보의 특성 상 column의 갯수 또한 수십 개 정도다. 때문의 데이터의 용량이 매우 커진다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-05T04:35:41+09:00","type":"projects","category":"GIS","tag":["GIS","MariaDB","QGIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-05-gis-guide-for-programmer-6.md","url":["2022-03-05-gis-guide-for-programmer-6","2022","03","05","gis-guide-for-programmer-6"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 5. OpenLayers","excerpt":"OpenLayers는 웹 브라우저에서 지도나 GIS 서비스를 제공하기 위한 JavaScript Library다. GIS 라이브러리 중 진입 장벽은 가장 높지만, 그에 상응하는 강력한 기능을 제공한다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-05T03:39:25+09:00","type":"projects","category":"GIS","tag":["GIS","OpenLayers"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-05-gis-guide-for-programmer-5.md","url":["2022-03-05-gis-guide-for-programmer-5","2022","03","05","gis-guide-for-programmer-5"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 4. QGIS 체험하기","excerpt":"이전에 대부분의 공간정보 데이터는 SHP를 기본으로 제공한다고 언급했었다. 그런데 문제는 이 SHP. 어떻게 여는지 모르겠다. GeoJSON이나 CSV 같은 텍스트 기반 데이터는 어찌됐든 열어서 검증을 해볼 수 있지만, SHP는 그게 안 된다는 말이다. 때문에 SHP를 열어서 조작할 수 있는 일종의 툴이 필요한데, 이미 여러 툴이 있으니 크게 문제되진 않는다. 가장 대표적인 툴은 두 가지가 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-05T03:05:25+09:00","type":"projects","category":"GIS","tag":["GIS","QGIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-05-gis-guide-for-programmer-4.md","url":["2022-03-05-gis-guide-for-programmer-4","2022","03","05","gis-guide-for-programmer-4"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 3. 좌표계","excerpt":"1986년, NASA에서 우주왕복선 챌린저호를 발사했으나, 발사한 지 약 73초만에 폭발한 안타까운 사고가 있었다. 원인은 어이없게도 단위 실수. 국제적인 표준은 미터법임에도 불구하고, 미국을 포함한 몇몇 국가는 인치법을 표준으로 사용하고 있었다. 이러한 상황에서 우주선의 설계도 중 미터법으로 표기된 부품 O Ring을 인치법으로 제작했기 때문에 일어난 사고였다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-04T01:47:29+09:00","type":"projects","category":"GIS","tag":["GIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-04-gis-guide-for-programmer-3.md","url":["2022-03-04-gis-guide-for-programmer-3","2022","03","04","gis-guide-for-programmer-3"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 2. GIS랑 인사하기","excerpt":"여러분들이 GIS를 처음 접했다면, 한 번 물어보고 싶다. 공간이란 뭘로 이루어져 있을까? 한 번 생각해보자. 다양한 답이 나왔을 것이라 생각한다. 무슨 답인지 내가 직접 못 듣는다는 게 좀 아쉽지만. 아마 대부분 추상적인 답이 나왔을 것이라 생각한다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-03T23:36:04+09:00","type":"projects","category":"GIS","tag":["GIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-03-gis-guide-for-programmer-2.md","url":["2022-03-03-gis-guide-for-programmer-2","2022","03","03","gis-guide-for-programmer-2"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 1. 머릿말","excerpt":"공간정보, 지리쪽에 업이 있거나 관심있는 사람이 아니라면, GIS라는 단어는 다소 생소한 단어다. 혹자는 GIS가 아니라 GPS 아니냐고 반문하기도 한다. GPS(Global Positioning System)는 3개 이상의 위성 신호를 통해 수신기의 위치를 계산할 수 있는 기법이다. GPS라 하면 흔히 네비게이션을 연상하기 쉽지만, 알게 모르게 GPS는 일상생활에 깊게 녹아들어 있다. 네비게이션, 스마트폰 지도, 배달 플랫폼의 라이더 위치 추적, 드론 군집비행, 군사학 등. GPS는 다양한 영역에 스며들어 그 이로움을 전해준다. 우리는 GPS를 통해, 공간정보라는 디지털 시대에서 공간을 디지털화한다는 것이 어떤 능력을 발휘하는 지 엿볼 수 있다. GIS(Global Information System)는 GPS와 같이 공간정보를 다루는 모든 기술에 대한 포괄적인 기술을 의미한다. GPS 뿐만 아니라, 지도, 좌표계와 같이 공간과 엮이는 모든 기술은 GIS라는 커다란 범주로 묶을 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-03T23:05:35+09:00","type":"projects","category":"GIS","tag":["GIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-03-gis-guide-for-programmer-1.md","url":["2022-03-03-gis-guide-for-programmer-1","2022","03","03","gis-guide-for-programmer-1"]}],"next":{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 2. GIS랑 인사하기","excerpt":"여러분들이 GIS를 처음 접했다면, 한 번 물어보고 싶다. 공간이란 뭘로 이루어져 있을까? 한 번 생각해보자. 다양한 답이 나왔을 것이라 생각한다. 무슨 답인지 내가 직접 못 듣는다는 게 좀 아쉽지만. 아마 대부분 추상적인 답이 나왔을 것이라 생각한다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-03T23:36:04+09:00","type":"projects","category":"GIS","tag":["GIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-03-gis-guide-for-programmer-2.md","url":["2022-03-03-gis-guide-for-programmer-2","2022","03","03","gis-guide-for-programmer-2"]},"prev":{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 4. QGIS 체험하기","excerpt":"이전에 대부분의 공간정보 데이터는 SHP를 기본으로 제공한다고 언급했었다. 그런데 문제는 이 SHP. 어떻게 여는지 모르겠다. GeoJSON이나 CSV 같은 텍스트 기반 데이터는 어찌됐든 열어서 검증을 해볼 수 있지만, SHP는 그게 안 된다는 말이다. 때문에 SHP를 열어서 조작할 수 있는 일종의 툴이 필요한데, 이미 여러 툴이 있으니 크게 문제되진 않는다. 가장 대표적인 툴은 두 가지가 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-05T03:05:25+09:00","type":"projects","category":"GIS","tag":["GIS","QGIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-05-gis-guide-for-programmer-4.md","url":["2022-03-05-gis-guide-for-programmer-4","2022","03","05","gis-guide-for-programmer-4"]}}},"__N_SSG":true}