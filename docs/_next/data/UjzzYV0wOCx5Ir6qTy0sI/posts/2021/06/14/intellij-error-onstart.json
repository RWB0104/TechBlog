{"pageProps":{"page":{"type":"posts","prev":{"title":"[JAVA] split vs StringTokenizer","excerpt":"알고리즘을 풀다보면, 필연적으로 입력값 처리를 하게된다. 다양한 케이스에 대응하기 위해, 사용자의 값을 직접 입력받아 이를 처리하게 된다. 이 때, 우리는 십중팔구 이와 같은 상황이 발생한다. 데이터셋을 보내기 위해 데이터의 모음을 구분자(공백 혹은 쉼표)를 통해 하나의 문자열로 합쳐 전달한다.","coverImage":"https://www.textrazor.com/img/letters3.png","date":"2021-06-14T01:56:01","type":"posts","category":"JAVA","tag":["JAVA(자바)","String(문자열)","split","StringTokenizer"],"comment":true,"publish":true,"slug":"2021-06-14-split-and-stringtokenizer","content":"\r\n# 개요\r\n\r\n알고리즘을 풀다보면, 필연적으로 입력값 처리를 하게된다. 다양한 케이스에 대응하기 위해, 사용자의 값을 직접 입력받아 이를 처리하게 된다. 이 때, 우리는 십중팔구 이와 같은 상황이 발생한다. 데이터셋을 보내기 위해 데이터의 모음을 구분자(공백 혹은 쉼표)를 통해 하나의 문자열로 합쳐 전달한다.\r\n\r\n$$\r\n[ \"A\", \"B\", \"C\", \"D\" ] -> \"A B C D\"\r\n$$\r\n\r\n이를테면, 위와 같이 $[ \"A\", \"B\", \"C\", \"D\" ]$와 같은 배열을 전달하기 위해, 각 요소를 공백으로 구분하여 $\"A B C D\"$와 같이 전달하게 된다. 보통 내 경우 `split` 메소드를 활용하는데, 알고리즘 풀이를 찾아보다보니 `StringTokenizer`이라는 <span class=\"orange-400\">class</span>를 쓰는 코드들이 더러있었다. 처음보는 <span class=\"orange-400\">class</span>인데다, 접근성이 훨씬 뛰어난 `split`를 굳이 대체해서 쓰는 이유가 있을거라 판단. 직접 퍼포먼스를 비교해보기로 했다. 알고리즘은 수행속도 역시 중요한 지표로 작용하기 때문에, 조금이라도 시간을 줄일 필요가 있다. 안타깝게도 나는 코드 최적화 실력이 최악이라, 이런식으로 줄일 수 있는 자잘한 부분은 줄여야한다. 핵심 코드를 최적화할 생각은 안 하고 이런데서 시간을 단축하는게 꼭 다이어트한답시고 피자 먹으면서 제로콜라 마시는 느낌이긴 하나, `StringTokenizer`이 더 성능이 뛰어나다면 앞으로 푸는 알고리즘에 적용할 가치가 있을 것이다.\r\n\r\n## 테스트 환경\r\n\r\n| 구분  |                                                        내용                                                         |\r\n| :---: | :-----------------------------------------------------------------------------------------------------------------: |\r\n| 언어  | ![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |\r\n|  OS   |                                                  Windows 10 64bit                                                   |\r\n|  CPU  |                                                   Intel i7-10700K                                                   |\r\n|  RAM  |                                                        32GB                                                         |\r\n\r\n# split 메소드\r\n\r\n`split` 메소드는 특정 <span class=\"lightBlue-400\">구분자</span>로 문자열을 분리하는 전통적인 메소드다. 굳이 JAVA가 아니더라도 C(++, #), JavaScript, Python 등 여러 언어에 존재하는 키워드라 어떤 언어든 문자열을 구분할 때 제일 먼저 시도하는 방법이다.\r\n\r\nJAVA의 `split`은 문자열 데이터 형식인 `String` <span class=\"orange-400\">class</span>에 포함된 메소드다. 문자열 데이터라면 `split`를 호출하여 문자열을 구분할 수 있다. 반환값은 `String[]` 객체.\r\n\r\n사용법은 아래와 같다.\r\n\r\n``` java\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 메인 클래스\r\n *\r\n * @author RWB\r\n * @since 2021.06.13 Sun 22:50:57\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tString text = \"A B C D\";\r\n\t\t\r\n\t\tString[] splited = text.split(\" \");\r\n\t\t\r\n\t\tSystem.out.println(Arrays.toString(splited));\r\n\t}\r\n}\r\n```\r\n\r\n출력은 아래와 같다.\r\n\r\n``` tc\r\n[A, B, C, D]\r\n```\r\n\r\n문자열 `A B C D`가 공백을 기준으로 `[A, B, C, D]`로 분리된걸 확인할 수 있다. 그 밖에 한 가지 특이한 점이 있는데, JAVA의 `split` 메소드는 <span class=\"red-A400\">구분자에 정규식을 적용</span>할 수 있다. 이를 잘만 이용하면 복합적인 구분자를 사용할 수도 있다.\r\n\r\n# StringTokenizer\r\n\r\n이 포스팅을 쓰게 만든 직접적인 원인. `StringTokenizer` 역시 문자열을 구분하는데 특화된 <span class=\"orange-400\">class</span>의 일종이다. `String[]`을 반환하는 `split`과 달리 그 자체로 하나의 개별적인 <span class=\"orange-400\">class</span>라는 차이가 있다.\r\n\r\n`StringTokenizer tokenizer = new StringTokenizer(\"문자열\");`과 같은 형태로 초기화해서 사용한다. `StringTokenizer` 인스턴스를 사용하는데 알아두면 좋을법한 메소드는 아래와 같다.\r\n\r\n|    메소드     | 반환값  |         내용          |\r\n| :-----------: | :-----: | :-------------------: |\r\n|  countToken   |   int   |      토큰의 갯수      |\r\n|   nextToken   | String  |       다음 토큰       |\r\n| hasMoreTokens | boolean | 다음 토큰의 존재 유무 |\r\n\r\n`StringTokenizer tokenizer = new StringTokenizer(\"문자열\", \"구분자\");`와 같이 생성자의 인수에 구분자를 추가하여 원하는 구분자로 구분하게 할 수도 있다. 별도로 지정하지 않는다면 구분자는 `\\t\\n\\r\\t`로, 줄바꿈, 공백, 탭을 구분한다. 여기서 주의할 점이 하나 있는데, 기본 구분자 `\\t\\n\\r\\t`는 <span class=\"red-A400\">줄바꿈, 공백, 탭을 전부 포함</span>한다. 즉, `A B C D\\nA B C D`와 같이 공백과 줄바꿈이 혼용되어 있을 경우, 공백과 줄바꿈을 전부 구분하여 `[A, B, C, D, A, B, C, D]`와 같이 출력된다. 생성자에 구분자를 강제로 지정해줄 경우, 이를 막을 수 있다. 직접 지정할 경우 공백이나 줄바꿈이 아니더라도 여러 문자열을 사용할 수 있다.\r\n\r\n``` java\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\n/**\r\n * 메인 클래스\r\n *\r\n * @author RWB\r\n * @since 2021.06.13 Sun 23:48:14\r\n */\r\npublic class Test\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tString text = \"A B C D\";\r\n\t\t\r\n\t\tStringTokenizer tokenizer = new StringTokenizer(text);\r\n\t\t\r\n\t\tString[] splited = new String[tokenizer.countTokens()];\r\n\t\t\r\n\t\tfor (int i = 0; i < splited.length; i++)\r\n\t\t{\r\n\t\t\tsplited[i] = tokenizer.nextToken();\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(Arrays.toString(splited));\r\n\t}\r\n}\r\n```\r\n\r\n출력은 동일하다.\r\n\r\n``` tc\r\n[A, B, C, D]\r\n```\r\n\r\n# 속도 비교\r\n\r\n그렇다면 `split`과 `StringTokenizer`의 성능은 어떨까? 이를 비교하기 위해 간단한 테스트 프로그램을 만들었다.\r\n\r\n1. 반복횟수 `t`가 할당된다.\r\n2. 케이스마다 5 ~ 20자의 랜덤한 문자열을 생성한다. 각 문자 사이엔 공백이 포함된다.\r\n3. 공백을 구분자로 문자열을 구분한다\r\n   1. `split` 사용\r\n   2. `StringTokenizer` 사용\r\n4. 총 소요 시간 및 평균 소요 시간을 계산한다\r\n5. 결과를 표시한다\r\n\r\n소스는 아래와 같다.\r\n\r\n``` java\r\nimport java.text.DecimalFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Random;\r\nimport java.util.StringTokenizer;\r\n\r\n/**\r\n * 메인 클래스\r\n *\r\n * @author RWB\r\n * @since 2021.06.14 Mon 00:06:32\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tint t = 10000;\r\n\t\t\r\n\t\tlong[] timer = { 0, 0 };\r\n\t\t\r\n\t\tint[] sum = { 0, 0 };\r\n\t\t\r\n\t\tfor (int i = 0; i < t; i++)\r\n\t\t{\r\n\t\t\tint random = (int) ((Math.random() * (20 - 5)) + 5);\r\n\t\t\t\r\n\t\t\tString text = getTestString(random);\r\n\t\t\t\r\n\t\t\t// split 로직 ----------------------------------------\r\n\t\t\tlong timeStart = System.nanoTime();\r\n\t\t\t\r\n\t\t\tString[] a1 = useSplit(text);\r\n\t\t\t\r\n\t\t\tlong timeEnd = System.nanoTime() - timeStart;\r\n\t\t\t\r\n\t\t\tsum[0] += a1.length;\r\n\t\t\t\r\n\t\t\ttimer[0] += timeEnd;\r\n\t\t\t\r\n\t\t\tSystem.out.println(Arrays.toString(a1) + \": \" + addComma(timeEnd) + \"ns\");\r\n\t\t\t// split 로직 ----------------------------------------\r\n\t\t\t\r\n\t\t\t// StringTokenizer 로직 ----------------------------------------\r\n\t\t\ttimeStart = System.nanoTime();\r\n\t\t\t\r\n\t\t\tString[] a2 = useStringTokenizer(text);\r\n\t\t\t\r\n\t\t\ttimeEnd = System.nanoTime() - timeStart;\r\n\t\t\t\r\n\t\t\tsum[1] += a2.length;\r\n\t\t\t\r\n\t\t\ttimer[1] += timeEnd;\r\n\t\t\t\r\n\t\t\tSystem.out.println(Arrays.toString(a2) + \": \" + addComma(timeEnd) + \"ns\");\r\n\t\t\t// StringTokenizer 로직 ----------------------------------------\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(addComma(t) + \"개 데이터 그룹 수행\");\r\n\t\t\r\n\t\tSystem.out.println();\r\n\t\t\r\n\t\tSystem.out.println(\"split 결과\");\r\n\t\tSystem.out.println(\" * 총 소요: \" + addComma(timer[0]) + \"ns\");\r\n\t\tSystem.out.println(\" * 평균 소요: \" + addComma((timer[0] / t)) + \"ns\");\r\n\t\tSystem.out.println(\" * 분해한 요소: \" + addComma(sum[0]) + \"개\");\r\n\t\t\r\n\t\tSystem.out.println();\r\n\t\t\r\n\t\tSystem.out.println(\"StringTokenizer 결과\");\r\n\t\tSystem.out.println(\" * 총 소요: \" + addComma(timer[1]) + \"ns\");\r\n\t\tSystem.out.println(\" * 평균 소요: \" + addComma((timer[1] / t)) + \"ns\");\r\n\t\tSystem.out.println(\" * 분해한 요소: \" + addComma(sum[1]) + \"개\");\r\n\t\t\r\n\t\tSystem.out.println();\r\n\t\t\r\n\t\tSystem.out.println(\"split \" + (timer[0] == timer[1] ? \"==\" : (timer[0] > timer[1]) ? \"<\" : \">\") + \" StringTokenizer\");\r\n\t}\r\n\t\r\n\t/**\r\n\t * 구분된 문자열 반환 함수 (split)\r\n\t *\r\n\t * @param text: [String] 대상 문자열\r\n\t *\r\n\t * @return [String[]] 구분된 문자열\r\n\t */\r\n\tprivate static String[] useSplit(String text)\r\n\t{\r\n\t\treturn text.split(\" \");\r\n\t}\r\n\t\r\n\t/**\r\n\t * 구분된 문자열 반환 함수 (StringTokenizer)\r\n\t *\r\n\t * @param text: [String] 대상 문자열\r\n\t *\r\n\t * @return [String[]] 구분된 문자열\r\n\t */\r\n\tprivate static String[] useStringTokenizer(String text)\r\n\t{\r\n\t\tStringTokenizer tokenizer = new StringTokenizer(text, \" \");\r\n\t\t\r\n\t\tint count = tokenizer.countTokens();\r\n\t\t\r\n\t\tString[] result = new String[count];\r\n\t\t\r\n\t\tfor (int i = 0; i < count; i++)\r\n\t\t{\r\n\t\t\tresult[i] = tokenizer.nextToken();\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 무작위 문자열 반환 함수\r\n\t *\r\n\t * @param n: [int] 문자 갯수\r\n\t *\r\n\t * @return [String] 무작위 문자\r\n\t */\r\n\tprivate static String getTestString(int n)\r\n\t{\r\n\t\tRandom random = new Random();\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\r\n\t\tfor (int i = 0; i < n; i++)\r\n\t\t{\r\n\t\t\tbuilder.append((char) ((random.nextInt(26)) + 97)).append(\" \");\r\n\t\t}\r\n\t\t\r\n\t\treturn builder.toString().trim();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 1000 단위 구분 숫자 반환 함수\r\n\t *\r\n\t * @param num: [long] 대상 숫자\r\n\t *\r\n\t * @return [String] 1000 단위 구분 숫자\r\n\t */\r\n\tprivate static String addComma(long num)\r\n\t{\r\n\t\tDecimalFormat format = new DecimalFormat(\",###\");\r\n\t\t\r\n\t\treturn format.format(num);\r\n\t}\r\n}\r\n```\r\n\r\n횟수별로 10번씩 돌린 결과를 아래의 표로 정리했다.\r\n\r\n* $t = 1$\r\n\r\n| 테스트 횟수 | split 총 소요 | StringTokenizer 총 소요 |          속도           |\r\n| :---------: | :-----------: | :---------------------: | :---------------------: |\r\n|      1      |    80.3us     |         44.8us          | split < StringTokenizer |\r\n|      2      |    83.7us     |         46.2us          | split < StringTokenizer |\r\n|      3      |    136.6us    |         31.8us          | split < StringTokenizer |\r\n|      4      |    111.3us    |         40.4us          | split < StringTokenizer |\r\n|      5      |    93.4us     |         32.2us          | split < StringTokenizer |\r\n|      6      |    104.5us    |         28.7us          | split < StringTokenizer |\r\n|      7      |    40.1us     |         42.7us          | split > StringTokenizer |\r\n|      8      |    40.1us     |         42.7us          | split > StringTokenizer |\r\n|      9      |    104.7us    |         28.3us          | split < StringTokenizer |\r\n|     10      |    38.3us     |         29.2us          | split < StringTokenizer |\r\n\r\n한 번만 반복할 경우, 8:2로 `StringTokenizer`이 압승한다.\r\n\r\n* $t = 100$\r\n\r\n| 테스트 횟수 | split 총 소요 | StringTokenizer 총 소요 |          속도           |\r\n| :---------: | :-----------: | :---------------------: | :---------------------: |\r\n|      1      |    1.12ms     |         0.602ms         | split < StringTokenizer |\r\n|      2      |    1.11ms     |         0.612ms         | split < StringTokenizer |\r\n|      3      |    1.06ms     |         0.562ms         | split < StringTokenizer |\r\n|      4      |    1.02ms     |         0.595ms         | split < StringTokenizer |\r\n|      5      |     1.ms      |         0.550ms         | split < StringTokenizer |\r\n|      6      |    1.16ms     |         0.651ms         | split < StringTokenizer |\r\n|      7      |     98ms      |         0.558ms         | split < StringTokenizer |\r\n|      8      |    1.11ms     |         0.627ms         | split < StringTokenizer |\r\n|      9      |    0.981ms    |         0.555ms         | split < StringTokenizer |\r\n|     10      |    1.23ms     |         0.666ms         | split < StringTokenizer |\r\n\r\n100번을 반복할 때 역시 10:0으로 `StringTokenizer`이 압승한다.\r\n\r\n* $t = 1,000$\r\n\r\n| 테스트 횟수 | split 총 소요 | StringTokenizer 총 소요 |          속도           |\r\n| :---------: | :-----------: | :---------------------: | :---------------------: |\r\n|      1      |    3.00ms     |         3.17ms          | split > StringTokenizer |\r\n|      2      |    2.53ms     |         2.71ms          | split > StringTokenizer |\r\n|      3      |    2.79ms     |         2.84ms          | split > StringTokenizer |\r\n|      4      |    2.53ms     |         2.67ms          | split > StringTokenizer |\r\n|      5      |    2.67ms     |         2.97ms          | split > StringTokenizer |\r\n|      6      |    2.58ms     |         2.87ms          | split > StringTokenizer |\r\n|      7      |    2.48ms     |         2.65ms          | split > StringTokenizer |\r\n|      8      |    2.69ms     |         3.01ms          | split > StringTokenizer |\r\n|      9      |    2.50ms     |         2.90ms          | split > StringTokenizer |\r\n|     10      |    2.62ms     |         2.94ms          | split > StringTokenizer |\r\n\r\n$2^1$, $2^3$처럼 끊어가다가 뜬금없이 1000을 넣은 이유는, 이상하게 $t = 1,000$일 땐 `split`이 압승한다.\r\n\r\n* $t = 10,000$\r\n\r\n| 테스트 횟수 | split 총 소요 | StringTokenizer 총 소요 |          속도           |\r\n| :---------: | :-----------: | :---------------------: | :---------------------: |\r\n|      1      |    9.91ms     |         9.27ms          | split < StringTokenizer |\r\n|      2      |    9.49ms     |         9.19ms          | split < StringTokenizer |\r\n|      3      |    9.02ms     |         8.61ms          | split < StringTokenizer |\r\n|      4      |    9.95ms     |         9.25ms          | split < StringTokenizer |\r\n|      5      |    9.03ms     |         8.87ms          | split < StringTokenizer |\r\n|      6      |    8.83ms     |         9.08ms          | split > StringTokenizer |\r\n|      7      |    9.14ms     |         8.68ms          | split < StringTokenizer |\r\n|      8      |    9.28ms     |         9.07ms          | split < StringTokenizer |\r\n|      9      |    9.49ms     |         9.66ms          | split > StringTokenizer |\r\n|     10      |    11.79ms    |         11.20ms         | split < StringTokenizer |\r\n\r\n다시 8:2로 `StringTokenizer`이 압승한다.\r\n\r\n* $t = 1,000,000$\r\n\r\n| 테스트 횟수 | split 총 소요 | StringTokenizer 총 소요 |          속도           |\r\n| :---------: | :-----------: | :---------------------: | :---------------------: |\r\n|      1      |   306.86ms    |        373.06ms         | split > StringTokenizer |\r\n|      2      |   287.26ms    |        262.05ms         | split < StringTokenizer |\r\n|      3      |   289.92ms    |        255.51ms         | split < StringTokenizer |\r\n|      4      |   272.43ms    |        267.96ms         | split < StringTokenizer |\r\n|      5      |   278.35ms    |        322.28ms         | split > StringTokenizer |\r\n|      6      |   285.23ms    |        264.57ms         | split < StringTokenizer |\r\n|      7      |   273.37ms    |        268.18ms         | split < StringTokenizer |\r\n|      8      |   278.65ms    |        264.34ms         | split < StringTokenizer |\r\n|      9      |   278.56ms    |        266.62ms         | split < StringTokenizer |\r\n|     10      |   306.00ms    |        256.56ms         | split < StringTokenizer |\r\n\r\n8:2로 `StringTokenizer`이 압승한다.\r\n\r\n$t = 1,000$이라는 특수한 상황을 제외하고는 보편적으로 `StringTokenizer`가 성능이 더 우수하다. 저런 현상이 왜 발생하는지 이해는 잘 안 된다. 물론 통계라는게 숫자가 클 수록 의미가 커지므로 10번이라는 작은 횟수만으로 단정짓긴 어렵다.\r\n\r\n회사 컴퓨터(AMD Ryzen 2700X)에서는 모든 케이스에서 `StringTokenizer`의 속도가 빨랐다. CPU에 따라 연산 결과나 방식에 조금씩 차이가 있을 순 있겠다.\r\n\r\n[JAVA API](https://docs.oracle.com/javase/6/docs/api/java/util/StringTokenizer.html)에 의하면, `StringTokenizer`은 하위 호환성을 보장하기 위한 레거시 클래스라고 한다. JAVA API는 가급적 `StringTokenizer`보다 `split` 내지는 `regex` <span class=\"orange-400\">패키지</span>를 활용하도록 권고하고 있다.\r\n\r\n> **원문**  \r\n> `StringTokenizer` is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the `split` method of String or the `java.util.regex` package instead.\r\n\r\n# 결론\r\n\r\n표의 수치 상 `StringTokenizer`가 `split`에 비해 최대 약 20% 정도 더 빠르다. 하지만 JAVA API에서 가급적 다른 대체제를 사용하도록 권고하고 있고, 백만번의 연산에도 $ms$ 단위에서 움직인다. 상대적으론 차이가 있어도 객관적인 지표로 봤을땐 별다른 차이가 없는 셈. 문자열 분리하자고 새로운 <span class=\"orange-400\">class</span>를 다룰 바에 그냥 문자열 자체를 다루는 `split`을 사용하는 게 더 효율적이라 생각한다."},"next":{"title":"[백준 / JAVA] 백준 알고리즘 1014번 컨닝","excerpt":"최백준은 서강대학교에서 “컨닝의 기술”이라는 과목을 가르치고 있다. 이 과목은 상당히 까다롭기로 정평이 나있기 때문에, 몇몇 학생들은 시험을 보는 도중에 다른 사람의 답지를 베끼려 한다. 시험은 N행 X M열 크기의 직사각형 교실에서 이루어진다. 교실은 1 X 1 크기의 단위 정사각형으로 이루어져 있는데, 각 단위 정사각형은 자리 하나를 의미한다. 최백준은 컨닝을 방지하기 위해서 다음과 같은 전략을 세웠다. 모든 학생은 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위, 이렇게 총 네 자리에 앉아있는 친구의 답지를 항상 베낀다고 가정한다. 따라서, 자리 배치는 모든 학생이 컨닝을 할 수 없도록 배치되어야 한다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-18T16:42:44","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","PLATINUM","PLATINUM IV","네트워크 플로우","최소 버텍스 커버","이분 매칭"],"group":"백준 알고리즘","comment":true,"publish":true,"slug":"2021-06-18-A1014","content":"\r\n# Contact\r\n\r\n![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange)\r\n\r\n🔗 [전체 1014번 문제](https://www.acmicpc.net/problem/1014)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    512MB    |\r\n\r\n## 문제\r\n\r\n최백준은 서강대학교에서 “컨닝의 기술”이라는 과목을 가르치고 있다. 이 과목은 상당히 까다롭기로 정평이 나있기 때문에, 몇몇 학생들은 시험을 보는 도중에 다른 사람의 답지를 베끼려 한다.\r\n\r\n시험은 $N$행 $\\times$ $M$열 크기의 직사각형 교실에서 이루어진다. 교실은 $1 \\times 1$ 크기의 단위 정사각형으로 이루어져 있는데, 각 단위 정사각형은 자리 하나를 의미한다.\r\n\r\n최백준은 컨닝을 방지하기 위해서 다음과 같은 전략을 세웠다. 모든 학생은 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위, 이렇게 총 네 자리에 앉아있는 친구의 답지를 항상 베낀다고 가정한다. 따라서, 자리 배치는 모든 학생이 컨닝을 할 수 없도록 배치되어야 한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122051353-78bea480-ce1f-11eb-92c3-5fa4e3dc96b9.png\" width=\"500px\" />\r\n</p>\r\n\r\n위의 그림을 보자. $A$, $C$, $D$ 혹은 $E$에 다른 학생을 앉히는 것은 좋은 생각이 아니다. 그 이유는 이미 앉아있는 학생이 그들의 답안지를 베낄 우려가 있기 때문이다. 하지만, $B$에 다른 학생을 앉힌다면, 두 학생은 서로의 답지를 베낄 수 없어 컨닝의 우려가 없다.\r\n\r\n위와 같이 컨닝이 불가능하도록 자리를 배치 하려는 최백준의 행동에 분노한 일부 학생들이 교실의 책상을 부숴버렸기 때문에, 일부 자리에는 학생이 앉을 수 없다.\r\n\r\n최백준은 교실의 모양이 주어졌을 때, 이 곳에서 아무도 컨닝을 할 수 없도록 학생을 배치하였을 경우에 교실에 배치할 수 있는 최대 학생 수가 몇 명인지 궁금해졌다. 최백준을 위해 이를 구하는 프로그램을 작성하라.\r\n\r\n## 입력\r\n\r\n입력의 첫 줄에는 테스트케이스의 개수 $C$가 주어진다. 각각의 테스트 케이스는 아래와 같이 두 부분으로 이루어진다.\r\n\r\n첫 번째 부분에서는 교실의 세로길이 N과 가로길이 M이 한 줄에 주어진다. $(1 ≤ M ≤ 10, 1 ≤ N ≤ 10)$\r\n\r\n두 번째 부분에서는 정확하게 N줄이 주어진다. 그리고 각 줄은 M개의 문자로 이루어져있다. 모든 문자는 ‘.’(앉을 수 있는 자리) 또는 ‘x’(앉을 수 없는 자리, 소문자)로 구성된다.\r\n\r\n## 출력\r\n\r\n각각의 테스트 케이스에 대해 그 교실에서 시험을 볼 수 있는 최대 학생의 수를 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n4\r\n2 3\r\n...\r\n...\r\n2 3\r\nx.x\r\nxxx\r\n2 3\r\nx.x\r\nx.x\r\n10 10\r\n....x.....\r\n..........\r\n..........\r\n..x.......\r\n..........\r\nx...x.x...\r\n.........x\r\n...x......\r\n........x.\r\n.x...x....\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n4\r\n1\r\n2\r\n46\r\n```\r\n\r\n# 풀이\r\n\r\n또 한번의 <span class=\"teal-A400\">플래티넘</span> 문제. 하....\r\n\r\n문제 이름 그대로 컨닝을 못 참게 만드는 문제다. 문제를 푸는 방식에는 두 가지가 있다. <span class=\"primary\">네트워크 플로우</span>와 <span class=\"primary\">비트마스킹</span>. 본 포스팅에서는 <span class=\"primary\">네트워크 플로우</span> 방식을 차용한다. 이게 정석이라고 하기도 하고, JAVA 풀이는 죄다 <span class=\"primary\">비트마스킹</span> 방식이라서.\r\n\r\n나 같이 전공지식이 전무한 코더에게는 너무나도 가혹한 문제다. 지금까지 살면서 하나 깨달은 게 있다면, 아무리 처음 보는 개념이라도 계속 쳐다보면 언젠가 이해된다. 하루가 됐든 한 달이 됐든. 그 난리를 펴가며 이해한 내용은 아래와 같다.\r\n\r\n## 문제 분석하기\r\n\r\n문제 해결에 영향을 미치는 조건은 아래와 같다.\r\n\r\n1. 임의의 자리를 기준으로 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위 자리를 컨닝할 수 있다.\r\n2. 파손되어 앉을 수 없는 자리가 존재한다.\r\n\r\n임의의 자리가 있다고 가정하고 이를 도식화해보자.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956338-de7cd480-d3bb-11eb-93ce-5c1ea19185af.png\" width=\"600px\" />\r\n</p>\r\n\r\n위 사진과 같이 <span class=\"indigo-A400\">특정 자리</span>를 기준으로 자신의 주변엔 최대 8개의 <span class=\"indigo-200\">자리</span>가 존재할 수 있다. 1번 규칙에 따라 컨닝이 가능한 자리를 도식하면 아래와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956398-eccaf080-d3bb-11eb-9d2b-91e4aaa7ea40.png\" width=\"600px\" />\r\n</p>\r\n\r\n<span class=\"red-400\">컨닝 가능한 자리</span>는 위와 같이 6개로 표시된다. 엥? 분명히 1번 규칙에서는 <span class=\"indigo-A400\">특정 자리</span>를 기준으로 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위만 가능하다고 했다. 해당 규칙에 따르면 4개 자리여야 할텐데, 왼쪽 대각선 아래, 오른쪽 대각선 아래는 왜 해당되는걸까?\r\n\r\n<span class=\"indigo-A400\">특정 자리</span>에서 왼쪽 대각선 아래, 오른쪽 대각선 아래를 컨닝할 순 없지만, 반대로 왼쪽 대각선 아래, 오른쪽 대각선 아래에선 <span class=\"indigo-A400\">특정 자리</span>를 컨닝할 수 있기 때문. <span class=\"lightBlue-A400\">컨닝을 할 수 있는 자리와 당할 수 있는 자리</span> 모두를 고려해야한다.\r\n\r\n반대로 컨닝이 불가능한 자리를 도식하면 아래와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956442-f7858580-d3bb-11eb-8154-2bfe476ae278.png\" width=\"600px\" />\r\n</p>\r\n\r\n<span class=\"green-A400\">컨닝이 불가능한 자리</span>는 위와 같이 2개로 표시된다. 자신의 앞 뒤는 컨닝할 수 없다. 우리가 설계한 알고리즘이 이와 같은 결과를 계산할 수 있어야 한다. 그렇다면 이를 어떤 방법으로 해결할 수 있을까?\r\n\r\n이 문제를 해결하는 방법은 크게 두 가지가 있다.\r\n\r\n1. 최소 버텍스 커버, 이분 매칭\r\n2. DP, 비트마스킹\r\n\r\n이 중 1번 최소 버텍스 커버와 이분 매칭을 사용하여 풀고자 한다.\r\n\r\n## Miminum Vertex Cover(최소 버텍스 커버)\r\n\r\n<span class=\"amber-A400\">Miminum Vertex Cover(최소 버텍스 커버)</span>는 모든 노드가 연결된 점(Vertex)의 최소 집합을 의미한다. 예를 들어, 아래와 같은 그림이 있다고 가정하자.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956504-05d3a180-d3bc-11eb-8006-7f22037020b9.png\" width=\"600px\" />\r\n</p>\r\n\r\n위 사진에서의 $A$ ~ $I$에 해당하는 9개 점이 Vertex, 각 점마다 연결된 선이 노드가 된다. 버텍스가 모든 노드를 커버할 수 있다면 <span class=\"amber-A400\">버텍스 커버</span>라 볼 수 있다. 그 중 <span class=\"green-A400\">모든 노드를 커버하는 가작 적은 버텍스의 집합</span>이 <span class=\"amber-A400\">Miminum Vertex Cover(최소 버텍스 커버)</span>라 할 수 있다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956549-108e3680-d3bc-11eb-802e-53765cacf3ed.png\" width=\"600px\" />\r\n</p>\r\n\r\n버텍스 $E$의 경우, 대다수의 노드를 포함하고 있지만 $\\overline{AB}$, $\\overline{BC}$, $\\overline{FI}$ 노드를 포함하지 않으므로 버텍스 $E$만으로는 <span class=\"amber-A400\">최소 버텍스 커버</span> 조합이 될 수 없다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956594-1b48cb80-d3bc-11eb-8b48-cf263fd7bcfe.png\" width=\"600px\" />\r\n</p>\r\n\r\n위와 같이 $B$, $F$ 버텍스를 포함할 경우 존재하는 모든 노드를 포함하는 가장 적은 버텍스의 조합이므로 <span class=\"amber-A400\">최소 버텍스 커버</span>가 된다.\r\n\r\n유의깊게 봐야할 점은, <span class=\"amber-A400\">최소 버텍스 커버</span>를 통해 <span class=\"primary\">최대 독립 집합</span>을 구할 수 있다. <span class=\"amber-A400\">최소 버텍스 커버</span>에 해당하는 버텍스와 모든 노드를 제거해보자. 아래와 같이 도식할 수 있다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956663-2996e780-d3bc-11eb-97f7-d24bd59126fd.png\" width=\"600px\" />\r\n</p>\r\n\r\n이처럼, 전체 그룹에서 <span class=\"amber-A400\">최소 버텍스 커버</span>를 제거하면 <span class=\"orange-A400\">나머지 버텍스들은 그 어떤 버텍스끼리도 연결되지 않는 독립 버텍스</span>다. <span class=\"amber-A400\">최소 버텍스 커버</span>가 모든 노드를 연결한 버텍스의 최소 집함임을 생각한다면, 이를 뺀 나머지는 어떤 버텍스와도 연결되지 않는 버텍스 집합의 최대 조합이라고 할 수 있다. 즉, 최대 독립 집합 $=$ 전체 그룹 $-$ 최소 버텍스 커버로 표현할 수 있다.\r\n\r\n그래, 그건 그렇다 치고, 위 개념이 이 문제와 무슨 연관성이 있길래 이렇게 장황하게 서술할까? 이번엔 조금 다르게 이 문제와 연관지어 예시를 들어본다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956705-33204f80-d3bc-11eb-8e58-c1c96509d4fe.png\" width=\"600px\" />\r\n</p>\r\n\r\n그 어떤 자리도 파손되지 않은 온전한 9개 자리가 있다고 가정하자. 각 자리별로 컨닝이 가능한 자리를 노드로 연결하면 위와 같이 도식할 수 있다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956771-42070200-d3bc-11eb-908c-fc5c5db4f583.png\" width=\"600px\" />\r\n</p>\r\n\r\n위 사진에서 <span class=\"amber-A400\">최소 버텍스 커버</span>는 $B$, $E$, $H$가 된다. 이 자리 3개로 위 사진의 모든 노드를 포함할 수 있기 때문이다. 이 자리들을 제거하여 <span class=\"primary\">최대 독립 집합</span>을 표현하면 어떻게 될까?\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956808-4cc19700-d3bc-11eb-82ff-dc32d98960c4.png\" width=\"600px\" />\r\n</p>\r\n\r\n나머지 자리인 $A$, $C$, $D$, $F$, $G$, $H$만 남게 되며, 각 자리는 그 어떤 노드와도 연결되어있지 않다. 이 사진에서의 노드는 컨닝 가능한 자리이므로, **노드가 없다는 것은 컨닝할 수 있는 자리가 없다**는 뜻이 된다. 즉, <span class=\"amber-A400\">최소 버텍스 커버</span> 로직을 설계하는 것이 이번 알고리즘의 키 포인트다.\r\n\r\n## 이분 매칭\r\n\r\n자, <span class=\"amber-A400\">최소 버텍스 커버</span>가 알고리즘의 키인 건 알았으니, 이를 구현하기만 하면 된다. 안타깝게도 <span class=\"amber-A400\">최소 버텍스 커버</span>를 코딩으로 계산하는 것은 매우 복잡한 일이다.\r\n\r\n**König's Theorem**(쾨닉의 정리)에 의하면 <span class=\"red-400\">모든 이분 그래프의 최대 매칭은 최소 버텍스 커버와 같다</span>고 증명한다. 즉, 위 그래프를 이분 그래프로 변경하여 최대 매칭을 구하면 <span class=\"amber-A400\">최소 버텍스 커버</span>를 구할 수 있다는 뜻이다.\r\n\r\n결론적으로, <span class=\"amber-A400\">최소 버텍스 커버</span>를 구하기 위해 <span class=\"teal-A400\">이분 매칭</span> 알고리즘을 구현해야 한다.\r\n\r\n<span class=\"teal-A400\">이분 매칭</span>의 연산에 사용하는 **이분 그래프**는 아래와 같은 특징을 가진다.\r\n\r\n* 모든 정점을 두 그룹으로 나눌 수 있다.\r\n* 모든 노드는 한 그룹에서 다른 그룹으로 연결된다.\r\n* 같은 그룹끼리는 연결되지 않는다.\r\n\r\n고등수학을 배웠다면 우리는 이미 이분 그래프를 접한적이 있다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956906-6367ee00-d3bc-11eb-8612-b27579146961.png\" width=\"600px\" />\r\n</p>\r\n\r\n위 사진은 임의의 함수 $f(x)$에 대한 식을 도식화한 것이다. 위 함수 도식은 이분 그래프의 적절한 예시가 될 수 있다. 모든 그룹이 $x$ 혹은 $y$그룹으로 나뉘며, 모든 노드가 $x$에서 $y$로 연결된다.\r\n\r\n**이분 그래프의 매칭**은 각 그룹의 버텍스를 매칭하는 노드의 집합이다. 단, 각 노드의 끝 점은 다른 노드와 중복되지 않는다. **이분 그래프의 최대 매칭**은 이분 그래프의 매칭의 노드 수가 최대인 조합이다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122956970-71b60a00-d3bc-11eb-9019-0ffaef2ac35b.png\" width=\"600px\" />\r\n</p>\r\n\r\n위와 같이 연결된 이분 그래프가 있다고 가정하자. $1$번 버텍스를 기준으로 $A$와 $B$에 노드가 연결되어있다. $\\overline{A1}$을 선택할 경우, $\\overline{B1}$은 매칭에서 제외된다. 노드의 끝 선이 $1$번 버텍스로 동일하기 때문이다. 각 노드의 끝 점은 다른 노드와 중복되지 않는다는 말의 의미는 이와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122957021-7e3a6280-d3bc-11eb-8b24-07a0662def70.png\" width=\"600px\" />\r\n</p>\r\n\r\n1. $A$와 $1$번 버텍스를 잇는 노드 $\\overline{A1}$을 선택한다.\r\n2. $B$와 $1$번 버텍스를 잇는 노드 $\\overline{B1}$은 노드 $\\overline{A1}$이 $1$번 버텍스를 포함하므로 선택할 수 없다.\r\n3. 노드 $\\overline{A1}$의 시작 버텍스인 $A$에부터 다른 노드가 있는지 탐색한다.\r\n4. $A$ 버텍스와 연결된 다른 노드가 없으므로 노드 $\\overline{A1}$의 선택을 유지한다.\r\n5. $C$와 $1$번 버텍스를 잇는 노드 $\\overline{C1}$을 선택한다.\r\n6. 마지막 버텍스이므로 탐색을 종료하고 갯수를 계산한다.\r\n\r\n이와 같은 과정으로 이분 그래프의 최대 매칭의 수는 `2`가 된다. 물론 최대 매칭의 조합은 여러개가 될 수 있겠지만, 이 알고리즘에선 \"조합\"이 아니라 \"수\"가 중요하므로 경우의 수를 구할 필요는 없다.\r\n\r\n> **이분 그래프의 최대 매칭 조합**  \r\n> 위 그래프의 최대 매칭 조합은 $[ \\overline{A1}, \\overline{C2} ]$, $[ \\overline{A1}, \\overline{C3} ]$, $[ \\overline{B1}, \\overline{C2} ]$, $[ \\overline{B1}, \\overline{C3} ]$으로 최대 매칭의 수는 2이며 4가지 경우의 수가 존재한다.\r\n\r\n<span class=\"teal-A400\">이분 매칭</span>을 문제에 적용하면 아래와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122957080-898d8e00-d3bc-11eb-84f6-7b504b2d93b3.png\" width=\"600px\" />\r\n</p>\r\n\r\n이번엔 조금 복합적인 예시다. 버텍스 $A$와 $E$가 파손되어 앉을 수 없는 상황이다. 이러한 조건에서 컨닝 가능한 자리를 노드로 표현하면 위 사진과 같이 표현할 수 있다. 규칙의 특성 상, 한 쪽 열은 양 옆의 열에 영향을 준다. 즉, 홀수열과 짝수열로 그룹을 나눌 수 있다. 열의 홀짝을 기준으로 나눠 이분 그래프를 표시하면 아래와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/122957152-9ca05e00-d3bc-11eb-8a63-1c7ae6e5edfb.png\" width=\"600px\" />\r\n</p>\r\n\r\n위 이분 그래프의 최대 매칭은 2가 된다. 즉, 최소 버텍스 커버의 조합은 $B$, $H$고 파손되서 착석이 불가능한 자리는 $A$, $E$가 된다. 따라서 $C$, $D$, $F$, $G$, $I$가 컨닝 불가능한 자리가 된다. 단순히 자리의 \"수\"만 계산하면 되므로 `컨닝 불가능한 자리 = 전체 자리 - 최소 버텍스 커버 수 - 파손된 자리`가 된다. 따라서 위 그래프의 알고리즘 수행 결과는 5가 된다.\r\n\r\n<span class=\"teal-A400\">이분 매칭</span>은 <span class=\"blue-400\">BFS(Breadth First Search, 너비 우선 탐색)</span> 혹은 <span class=\"blue-400\">DFS(Depth First Search, 깊이 우선 탐색)</span>으로 구현할 수 있다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 백준 전체 1014 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/06/18/A1014/\">1014 풀이</a>\r\n * @since 2021.06.18 Fri 16:42:44\r\n */\r\npublic class Main\r\n{\r\n\t// 교실 세로 길이 (y)\r\n\tprivate static int N;\r\n\t\r\n\t// 교실 가로 길이 (x)\r\n\tprivate static int M;\r\n\t\r\n\t// 자리 번호\r\n\tprivate static int[][] room;\r\n\t\r\n\t// 컨닝 가능한 자리\r\n\tprivate static boolean[][] nodes;\r\n\t\r\n\t// 방문 횟수\r\n\tprivate static int visitCount;\r\n\t\r\n\t// 버텍스별 방문 횟수\r\n\tprivate static int[] visit;\r\n\t\r\n\t// 버텍스 매칭 여부\r\n\tprivate static int[] matched;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 현재 자리에서 컨닝이 가능한 자리의 위치 상대좌표\r\n\t\tint[][] scopes = { { -1, 1 }, { -1, 0 }, { -1, -1 }, { 1, 1 }, { 1, 0 }, { 1, -1 } };\r\n\t\t\r\n\t\t// 케이스 수\r\n\t\tint C = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\twhile (C-- > 0)\r\n\t\t{\r\n\t\t\tString[] temp = reader.readLine().split(\" \");\r\n\t\t\t\r\n\t\t\tN = Integer.parseInt(temp[0]);\r\n\t\t\tM = Integer.parseInt(temp[1]);\r\n\t\t\t\r\n\t\t\t// 자리의 파손 여부\r\n\t\t\tboolean[][] canSit = new boolean[N][M];\r\n\t\t\t\r\n\t\t\t// 자리의 번호\r\n\t\t\tint numbering = 1;\r\n\t\t\t\r\n\t\t\t// 파손된 자리의 총 갯수\r\n\t\t\tint broken = 0;\r\n\t\t\t\r\n\t\t\troom = new int[N][M];\r\n\t\t\tnodes = new boolean[N * M][N * M];\r\n\t\t\t\r\n\t\t\tvisitCount = 1;\r\n\t\t\t\r\n\t\t\tfor (int n = 0; n < N; n++)\r\n\t\t\t{\r\n\t\t\t\ttemp = reader.readLine().split(\"\");\r\n\t\t\t\t\r\n\t\t\t\tfor (int m = 0; m < M; m++)\r\n\t\t\t\t{\r\n\t\t\t\t\t// 자리 번호 기록\r\n\t\t\t\t\troom[n][m] = numbering++;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 앉을 수 있는 경우\r\n\t\t\t\t\tif (temp[m].equals(\".\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcanSit[n][m] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 파손된 경우\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcanSit[n][m] = false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 파손 갯수 1 추가\r\n\t\t\t\t\t\tbroken++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int n = 0; n < N; n++)\r\n\t\t\t{\r\n\t\t\t\t// 홀수 열만 대상으로 동작함\r\n\t\t\t\tfor (int m = 0; m < M; m += 2)\r\n\t\t\t\t{\r\n\t\t\t\t\t// 앉을 수 있는 좌석일 경우\r\n\t\t\t\t\tif (canSit[n][m])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor (int[] scope : scopes)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// 컨닝 가능성 있는 자리의 상대좌표\r\n\t\t\t\t\t\t\tint no = n + scope[1];\r\n\t\t\t\t\t\t\tint mo = m + scope[0];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// 상대좌표가 교실을 벗어나지 않으면서, 앉을 수 있을 경우\r\n\t\t\t\t\t\t\tif (no > -1 && mo > -1 && no < N && mo < M && canSit[no][mo])\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// 노드 연결 표시\r\n\t\t\t\t\t\t\t\tnodes[room[n][m] - 1][room[no][mo] - 1] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint result = bipartite();\r\n\t\t\t\r\n\t\t\twriter.write(Integer.toString(N * M - broken - result));\r\n\t\t\twriter.newLine();\r\n\t\t\twriter.flush();\r\n\t\t}\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 이분 매칭 갯수 반환 함수\r\n\t *\r\n\t * @return [int] 이분 매칭 갯수\r\n\t */\r\n\tprivate static int bipartite()\r\n\t{\r\n\t\t// 매칭 갯수\r\n\t\tint size = 0;\r\n\t\t\r\n\t\tvisit = new int[N * M];\r\n\t\t\r\n\t\tmatched = new int[N * M];\r\n\t\t\r\n\t\tArrays.fill(matched, -1);\r\n\t\t\r\n\t\tfor (int n = 0; n < N; n++)\r\n\t\t{\r\n\t\t\tfor (int m = 0; m < M; m += 2)\r\n\t\t\t{\r\n\t\t\t\tvisitCount++;\r\n\t\t\t\t\r\n\t\t\t\tsize += dfs(room[n][m] - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn size;\r\n\t}\r\n\t\r\n\t/**\r\n\t * DFS 알고리즘 결과 반환 함수\r\n\t *\r\n\t * @param num: [int] 시작점\r\n\t *\r\n\t * @return [int] 매칭 갯수\r\n\t */\r\n\tprivate static int dfs(int num)\r\n\t{\r\n\t\t// 같은 버텍스가 아닐 경우\r\n\t\tif (visit[num] != visitCount)\r\n\t\t{\r\n\t\t\tvisit[num] = visitCount;\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < N * M; i++)\r\n\t\t\t{\r\n\t\t\t\t// num과 i 버텍스 사이에 노드가 존재할 경우\r\n\t\t\t\tif (nodes[num][i])\r\n\t\t\t\t{\r\n\t\t\t\t\t// 아직 매칭되지 않았거나, 이미 i와 매칭된 버텍스가 다른 버텍스와 매칭할 수 있을 경우\r\n\t\t\t\t\tif (matched[i] == -1 || dfs(matched[i]) == 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmatched[i] = num;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn 0;\r\n\t}\r\n}\r\n```\r\n\r\n유의깊게 봐야할 코드는 아래와 같다.\r\n\r\n``` java\r\nprivate static int bipartite()\r\n{\r\n\t// 매칭 갯수\r\n\tint size = 0;\r\n\t\r\n\tvisit = new int[N * M];\r\n\t\r\n\tmatched = new int[N * M];\r\n\t\r\n\tArrays.fill(matched, -1);\r\n\t\r\n\tfor (int n = 0; n < N; n++)\r\n\t{\r\n\t\tfor (int m = 0; m < M; m += 2)\r\n\t\t{\r\n\t\t\tvisitCount++;\r\n\t\t\t\r\n\t\t\tsize += dfs(room[n][m] - 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn size;\r\n}\r\n```\r\n\r\n위 코드가 이분매칭을 <span class=\"primary\">DFS 알고리즘</span>을 통해 구현한 것이다.  `for`문의 변수 선언 중 `m += 2`인 이유는 홀수열만 체크하기 위함이다.\r\n\r\n``` java\r\nprivate static int dfs(int num)\r\n{\r\n\t// 같은 버텍스가 아닐 경우\r\n\tif (visit[num] != visitCount)\r\n\t{\r\n\t\tvisit[num] = visitCount;\r\n\t\t\r\n\t\tfor (int i = 0; i < N * M; i++)\r\n\t\t{\r\n\t\t\t// num과 i 버텍스 사이에 노드가 존재할 경우\r\n\t\t\tif (nodes[num][i])\r\n\t\t\t{\r\n\t\t\t\t// 아직 매칭되지 않았거나, 이미 i와 매칭된 버텍스가 다른 버텍스와 매칭할 수 있을 경우\r\n\t\t\t\tif (matched[i] == -1 || dfs(matched[i]) == 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tmatched[i] = num;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn 0;\r\n}\r\n```\r\n\r\n이분매칭을 구현하는 <span class=\"primary\">DFS 알고리즘</span>의 코드는 위와 같다. `matched` 배열은 -1로 초기화되며, 매칭되는 버텍스의 번호를 할당받는다.\r\n\r\n$A$ 버텍스가 $B$ 버텍스와 연결된 노드 $\\overline{AB}$를 가질 경우, 이를 `matched[A] = B`와 같이 표시한다. 만약, $A$ 버텍스가 $B$ 버텍스를 연결하는 와중에 이미 $B$가 $C$와 연결되어있을 경우, $C$ 버텍스에 $B$가 아닌 다른 버텍스와 연결된 노드가 있는지 확인한다. 만약 가능할 경우, $\\overline{BC}$를 제거하고 $C$와 연결할 수 있는 다른 버텍스를 연결한다. 이후 $\\overline{AB}$를 연결한다.\r\n\r\n이 과정을 반복하여 연결을 수립할 수 있을 경우 1, 없을 경우 0을 반환한다. 이는 `boolean` 타입으로도 대체할 수 있으나, `dfs()`연산 결과를 더하기 때문에 편의상 `int`로 반환한다.\r\n\r\n## 비공식 케이스\r\n\r\n+ 입력\r\n\r\n``` tc\r\n1\r\n10 10\r\n.X.X...X..\r\n.X..X.....\r\nX.X.......\r\n.X.X......\r\nX...X.....\r\n.X.X...X..\r\n.X..X.....\r\nX.X.......\r\n.X.X......\r\nX...X.....\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n42\r\n```\r\n\r\n+ 입력\r\n\r\n``` tc\r\n1\r\n5 10\r\n.X.X...X..\r\n.X..X.....\r\nX.X.......\r\n.X.X......\r\nX...X.....\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n21\r\n```\r\n\r\n+ 입력\r\n\r\n``` tc\r\n1\r\n5 8\r\n.X...X..\r\n..X.....\r\nX.......\r\n.X......\r\n..X.....\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n18\r\n```\r\n\r\n+ 입력\r\n\r\n``` tc\r\n1\r\n5 7\r\nX...X..\r\n.X.....\r\n.......\r\nX......\r\n.X.....\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n17\r\n```\r\n\r\n## 분류\r\n\r\n* 다이나믹 프로그래밍\r\n* 비트마스킹\r\n* 최대 유량\r\n* 비트필드를 이용한 다이나믹 프로그래밍\r\n\r\n# 여담\r\n\r\n[습격자 초라기](/posts/2021/06/06/A1006/)가 매우 복잡한 케이스들을 이해하는데 할애했다면, 이 문제는 케이스가 복잡하다기 보단, 네트워크 플로우를 이해하고 적용하는데 대부분의 시간을 할애했다. 문제 보니까 가면 갈수록 플래티넘이 계속해서 나오는 구간도 있던데, 순서대로 푸는 규칙에 대해 진지하게 생각해봐야하나 싶다.\r\n\r\n## 참고\r\n\r\n* [개발괴발](https://m.blog.naver.com/kelle111/221537563173)\r\n* [Crocus](https://www.crocus.co.kr/814)"}},"group":[],"post":{"title":"IntelliJ(인텔리제이) 시작 시 오류(java.net.BindException: Address already in use: bind)","excerpt":"","coverImage":"https://user-images.githubusercontent.com/50317129/121893356-d6d48480-cd58-11eb-80bb-d4611be3bd40.png","date":"2021-06-14T21:59:16","type":"posts","category":"JAVA","tag":["IntelliJ(인텔리제이)","Hyper-V","오류 해결책"],"comment":true,"publish":true,"slug":"2021-06-14-intellij-error-onstart","content":"<nav class=\"toc-wrap\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#않이-갑자기-왜요ㅠㅠ\">않이 갑자기 왜요ㅠㅠ</a></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#원인\">원인?</a></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#해결방법\">해결방법</a></li></ol></nav><h1 id=\"않이-갑자기-왜요ㅠㅠ\"><a class=\"head-link\" href=\"#않이-갑자기-왜요ㅠㅠ\"><span>🔗</span></a>않이 갑자기 왜요ㅠㅠ</h1>\n<p>분명히 어제까지만 해도 아무 이상없이 썼던 <span class=\"primary\">IntelliJ</span>를 퇴근 후에 키니 오류를 뱉으며 뻗어버렸다.</p>\n<p align=\"center\">\n\t<img src=\"https://user-images.githubusercontent.com/50317129/121893316-c6bca500-cd58-11eb-9c2a-658c604ee6d1.png\" width=\"600px\">\n</p>\n<p>두 개의 오류창이 떴는데, 하나는 위와 같은 <span class=\"red-A400\">java.net.BindException: Address already in use: bind</span>에러였고 다른 하나는 왠 <span class=\"red-A400\">NullPointerException</span>이 떴었다. 하필 <span class=\"red-A400\">NullPointerException</span>이 맨 위에 뜨는 바람에 엉뚱한걸 찾고 있었는데, 창 옮기니까 뒤에 저 오류창이 숨어있었다.</p>\n<h1 id=\"원인\"><a class=\"head-link\" href=\"#원인\"><span>🔗</span></a>원인?</h1>\n<p>Windows의 가상 OS머신인 <span class=\"lightBlue-A400\">Hyper-V</span>와 연관이 있는 모양이다. Windows 부팅 시 <span class=\"lightBlue-A400\">Hyper-V</span>에서 자신이 사용할 포트를 지정하는데, 이게 <span class=\"primary\">IntelliJ</span>와 겹쳐서 생긴다고 한다. 아니 갑자기 이제와서?</p>\n<p>실제로 난 <span class=\"lightBlue-A400\">Hyper-V</span>를 사용한다. CentOS 8과 Windows 10을 구동하고 있다. CentOS 8은 리눅스도 다뤄볼 겸 DB 하나 설치해서, 집에서 코딩할 때 DB 쓸 일 있으면 전부 저기다가 갖다 붙여서 쓰고 있다. Windows 10은 클린 PC가 필요하거나, 내가 극혐해 마지않는 인터넷뱅킹을 할 때 사용 중 <del>(플러그인 ㅂㄷㅂㄷ.....)</del> 이긴 한데, 거의 3개월 가까이 사용한 적이 없다. 간혹 Windows Update가 설정을 지멋대로 변경하기도 한다는데 그 때문인가.. 갑자기 잘 되던게 어떠한 문제로 인해 안 된다고 하는 경우가 왕왕있다. 지금까지 잘 돌아간 이유는 내가 알지 못 하는 어떤 신비의 힘이라도 작용했는 모양이다.</p>\n<h1 id=\"해결방법\"><a class=\"head-link\" href=\"#해결방법\"><span>🔗</span></a>해결방법</h1>\n<p><span class=\"green-A400\">윈도우 콘솔을 관리자 권한으로 실행</span>한다. <span class=\"primary\">cmd</span>, <span class=\"primary\">PowerShell</span> 등 어떠한 콘솔이든 명령어만 보낼 수 있으면 상관없다. 콘솔에 아래의 명령어를 입력한다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-batch\"><code class=\"language-batch\"># Hyper-V 비활성화 <span class=\"token punctuation\">(</span>윈도우 재부팅 필요<span class=\"token punctuation\">)</span>\n<span class=\"token command\"><span class=\"token keyword\">dism</span>.exe <span class=\"token parameter attr-name\">/Online</span> /Disable-Feature:Microsoft-Hyper<span class=\"token parameter attr-name\">-V</span></span>\n\n# TCPv6 6942 ~ 6952 포트 예약\n<span class=\"token command\"><span class=\"token keyword\">netsh</span> int ipv6 add excludedportrange protocol=tcp startport=<span class=\"token number\">6942</span> numberofports=<span class=\"token number\">10</span></span>\n\n# Hyper-V 활성화 <span class=\"token punctuation\">(</span>윈도우 재부팅 필요<span class=\"token punctuation\">)</span>\n<span class=\"token command\"><span class=\"token keyword\">dism</span>.exe <span class=\"token parameter attr-name\">/Online</span> /Enable-Feature:Microsoft-Hyper<span class=\"token parameter attr-name\">-V</span> <span class=\"token parameter attr-name\">/All</span></span>\n</code></pre></div>\n<p><span class=\"lightBlue-A400\">Hyper-V</span> 활성화/비활성화에 각각 재부팅을 요구한다. 이후 <span class=\"primary\">IntelliJ</span>는 정상적으로 켜지는데, <span class=\"lightBlue-A400\">Hyper-V</span>가 제대로 안 되는 거 같았다. OS를 켜도 \"시작하는 중\"에서 넘어가질 않는다. <span class=\"lightBlue-A400\">Hyper-V</span> 기능 재설치하고 재부팅하고 다시 시도했는데 안 된다.... 싶었는데 냅둬놓고 기다리니 잘 되더라. IntelliJ 계열 프로그램 모두에게 발생 가능성이 있다고 한다.</p>\n<p>개운하진 않지만, 어쨌든 잘 해결됐으니 다행.</p>"}},"__N_SSG":true}