{"pageProps":{"page":{"type":"posts","prev":{"header":{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 2. 인증서버 설계하기","excerpt":"OAuth2.0 프로토콜에 대한 사전 지식도 얻었으니, 이를 통해 인증서버를 직접 구축해보자. Frontend, Backend 부분으로 나누어 웹 페이지를 통해 소셜 로그인을 수행하고, 직접 구현한 인증서버에서 이를 처리하는 시스템 일체를 구축하는 것이 궁극적인 목표다.","coverImage":"https://user-images.githubusercontent.com/50317129/137171016-99af1db1-a346-4def-9329-6072b927bdc0.png","date":"2021-10-14T22:12:25","type":"posts","category":"JAVA","tag":["JAVA","OAuth2.0"],"group":"OAuth2.0 인증서버 구축기","comment":true,"publish":true},"name":"2021-10-14-oauth2-java-server-2.md","content":"\r\n# 개요\r\n\r\nOAuth2.0 프로토콜에 대한 사전 지식도 얻었으니, 이를 통해 인증서버를 직접 구축해보자.\r\n\r\nFrontend, Backend 부분으로 나누어 웹 페이지를 통해 <span class=\"red-400\">소셜 로그인을 수행</span>하고, 직접 구현한 <span class=\"red-400\">인증서버에서 이를 처리하는 시스템 일체를 구축</span>하는 것이 궁극적인 목표다.\r\n\r\n인증 서버의 인증 방식은 <span class=\"primary\">인가 코드 승인 (Authorization Code Grant)</span>을 취한다.\r\n\r\n# 제원\r\n\r\n웹 페이지인 Frontend와 API 통신의 주체가 되는 인증서버인 Backend로 나뉜다.\r\n\r\n## Backend\r\n\r\n<b class=\"large green-600\">💬 Language</b>\r\n\r\n* [![Java](http://img.shields.io/badge/java-v16.0.2-007396?logo=java&logoWidth=25)](https://www.java.com/ko/)\r\n\r\n<b class=\"large green-600\">🧱 Framework</b>\r\n\r\n* [![Gradle](https://img.shields.io/badge/gradle-02303A?logo=gradle&logoWidth=25)](https://gradle.org/)\r\n* ![jakarta.servlet-api](https://img.shields.io/badge/jakarta.servlet--api-v5.0.0-blue)\r\n* ![lombok](https://img.shields.io/badge/lombok-v1.18.20-blue)\r\n* ![jjwt](https://img.shields.io/badge/jjwt-v0.9.1-blue)\r\n* ![scribejava-apis](https://img.shields.io/badge/scribejava--apis-v8.3.1-blue)\r\n* ![jersey-server](https://img.shields.io/badge/jersey--server-v3.0.3-blue)\r\n* ![jersey-container-servlet](https://img.shields.io/badge/jersey--container--servlet-v3.0.3-blue)\r\n* ![jersey-hk2](https://img.shields.io/badge/jersey--hk2-v3.0.3-blue)\r\n* ![jersey-media-json-jackson](https://img.shields.io/badge/jersey--media--json--jackson-v3.0.3-blue)\r\n\r\n<b class=\"large green-600\">📦 Publish</b>\r\n\r\n* [![Tomcat](http://img.shields.io/badge/Tomcat-v10.0.12-F8DC75?logo=apachetomcat&logoWidth=25&logoColor=FFF)](http://tomcat.apache.org/)\r\n* [![Raspberry Pi](http://img.shields.io/badge/RaspberryPi-F00?logo=raspberrypi&logoWidth=25&logoColor=FFF)](https://www.raspberrypi.org/)\r\n\r\nJersey는 RESTful API 프레임워크, scribeJAVA는 OAuth 프레임워크다.\r\n\r\nJersey 3는 Servlet 5.0 최신 스펙인 `jakarta.*`을 사용한다. 때문에 이를 구현한 Tomcat 10을 사용한다. Tomcat 10 미만 혹은 `jakarta.*`을 구현하지 않는 등 <b class=\"red-600\">최신 서블릿 스펙을 사용할 수 없는 WAS의 경우 이 프로젝트는 배포할 수 없다.</b>\r\n\r\n## Frontend\r\n\r\n<b class=\"large green-600\">💬 Language</b>\r\n\r\n* [![HTML5](http://img.shields.io/badge/HTML5-E34F26?logo=html5&logoWidth=25&logoColor=FFF)](https://developer.mozilla.org/ko/docs/Web/HTML)\r\n* [![JavaScript](http://img.shields.io/badge/JavaScript-F7DF1E?logo=javascript&logoWidth=25&logoColor=000)](https://developer.mozilla.org/ko/docs/Web/JavaScript)\r\n* [![CSS3](http://img.shields.io/badge/CSS3-1572B6?logo=css3&logoWidth=25)](https://developer.mozilla.org/ko/docs/Web/CSS)\r\n\r\n<b class=\"large green-600\">🧱 Framework</b>\r\n\r\n* [![eslint](https://img.shields.io/badge/eslint-^7.32.0-4B32C3?logo=eslint&logoWidth=25)](https://eslint.org/)\r\n\r\n<b class=\"large green-600\">📦 Publish</b>\r\n\r\n* [![GitHub](http://img.shields.io/badge/GitHub%20Pages-000?logo=github&logoWidth=25&logoColor=FFF)](https://pages.github.com/)\r\n\r\n원래는 Raspberry Pi로 배포하고 있었으나, 굳이 그럴 필요가 없어서 GutHub Pages로 배포한다.\r\n\r\nFrontend는 단순히 인증 서버와의 API 통신 및 정보 표출 정도만 수행하므로, React 같은 복잡한 기술은 최대한 지양하고 최대한 기본 기능으로만 구성했다.\r\n\r\n# 구성\r\n\r\n인증서버는 크게 세 부분으로 나눌 수 있다.\r\n\r\n* `controller` - 지정한 URL의 요청을 받아 process에게 위임한다.\r\n* `process` - API의 동작을 수행하고, 응답을 생성한다\r\n* `module` - API 동작 수행에 필요한 모듈\r\n\r\n이는 패키지로 구분한다.\r\n\r\n## controller\r\n\r\nJersey 프레임워크는 `controller` 영역에서 동작한다.\r\n\r\n기존의 Servlet은 RESTful API를 설계하기위해 직접 구현해야할 부분이 존재한다.\r\n\r\nRESTful API를 효과적으로 설계하기 위해 Jersey 프레임워크를 사용한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137264829-4e703edf-e682-4793-a2b1-675056cba087.png)\r\n\r\ncontroller는 <span class=\"primary\">정의된 process로 요청을 전달하고, process가 반환하는 응답을 요청자에게 다시 전달</span>한다.\r\n\r\n* `/login`\r\n  * GET `/:platform` - 플랫폼별 인증 URL 반환 API\r\n  * PUT `/put` - 정보 제공 동의 갱신 URL 반환 API\r\n  * POST `/:platform` - 플랫폼별 로그인 API\r\n  * POST `/auto` - 자동 로그인 API\r\n\r\n* `/logout`\r\n  * POST `/` - 로그아웃 API\r\n\r\n* `/revoke`\r\n  * POST `/` - 연동 해제 API\r\n\r\n* `/userinfo`\r\n  * POST `/` - 사용자 정보 API\r\n\r\n해당 프로젝트에선 위 `controller`들이 구현될 것이다.\r\n\r\n## process\r\n\r\n`process`에선 실제 로직이 구현되는 영역이다. 이 때 필요하다면 `module`을 호출하기도 한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137265824-a2652f3c-c32f-42cf-9b5e-8f523530895e.png)\r\n\r\n`process`는 <span class=\"primary\">수행 결과를 정해진 형식의 JSON을 기반으로 응답 객체</span>를 만들어 `controller`로 반환한다.\r\n\r\n``` json\r\n{\r\n    flag: true,\r\n    title: \"success\",\r\n    message: \"test api response success\",\r\n    body: {\r\n        key1: \"value1\",\r\n        key2: true,\r\n        key3: 4932,\r\n        key4: [\r\n            \"A\",\r\n            \"B\",\r\n            \"C\"\r\n        ],\r\n        key5: 93.203\r\n    }\r\n}\r\n```\r\n\r\n| 파라미터 | 필수 여부 |                   데이터 형식                    |      내용      |\r\n| :------: | :-------: | :----------------------------------------------: | :------------: |\r\n|   flag   |     Y     |                    `boolean`                     | 응답 정상 여부 |\r\n|  title   |     Y     |                     `String`                     |   응답 제목    |\r\n| message  |     Y     |                     `String`                     |  응답 메세지   |\r\n|   body   |     Y     | `String \\| Number \\| boolean \\| Array \\| Object` | 응답 정상 여부 |\r\n\r\n응답 명세는 위와 같다.\r\n\r\n`process`는 GET, POST 등 HTTP Method에 따라 나누어 관리한다.\r\n\r\n## module\r\n\r\nmodule은 여러 `process`에서 <span class=\"primary\">반복적으로 사용되는 로직의 모듈화를 구현한 객체</span>다.\r\n\r\n이 중 핵심 기능인 OAuth의 인증을 처리하는 모듈은 scribeJAVA 기반으로 작성된다.\r\n\r\n로그인, 사용자 정보 요청 등 인증과 관련된 로직을 수행하는 `process`들은 모두 위 모듈을 호출하여 사용함으로써 중복 코드를 줄이고 유지보수성을 높인다.\r\n\r\n# OAuth 모듈\r\n\r\n이 프로젝트의 Backend에 가장 중요한 역할을 담당하는 모듈로, OAuth 인증을 구현한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137314562-675ee988-0dad-4937-93a1-73753c2afee4.png)\r\n\r\n요즘은 어느정도 규모있는 플랫폼이라면 OAuth 서비스를 제공한다. 플랫폼은 달라도 OAuth를 준수한다면 모두 공통된 요청 받아 공통된 응답을 제공할 것이다. 공통 프로토콜을 사용하므로, 인증 모듈 하나를 만들어 모든 인증을 거기서 처리하면 될 것이다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137314573-599b1317-0e46-4698-ac65-04fef57933e8.png)\r\n\r\n하지만 문제가 하나 있다. 아무리 공통 프로토콜을 사용한다지만, <span class=\"red-400\">플랫폼마다 추가적인 파라미터 혹은 헤더를 요구</span>하기도 한다. 조건문을 떡칠한다면 모를까, 고작 인증 모듈 하나에서 플랫폼별 요구사항을 하나하나 처리하기엔 문제가 많다. 조건문을 통한 분기 역시 유지보수적인 측면에서 그리 좋은 방식은 아니다.\r\n\r\n<br />\r\n<br />\r\n\r\nOAuth는 객체라기보단 일종의 개념에 더 가깝다. 이렇게 추상적인 개념의 형태는 JAVA의 인터페이스 내지는 추상 객체가 적합하다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137314582-cf0c24f7-5ad3-42f8-a7d7-de19e59c8582.png)\r\n\r\n인증 모듈의 경우, 몇몇 플랫폼의 특이 사항으로 인해 문제가 발생하니, 기본적으로는 <span class=\"blue-600\">인증 모듈의 공통 로직을 사용하되, 추가적인 요구를 하는 플랫폼에 한해 로직을 변경하는 것이 효율적</span>일 것이다. 따라서 인증 모듈은 인터페이스보단 추상 객체가 더 어울릴 것이다.\r\n\r\n이렇게 인증 추상 모듈을 하나 생성하고, 각 소셜 플랫폼마다 인증 모듈을 상속받아 구현하게끔 설계하면 될 것이다.\r\n\r\n문제가 없는 플랫폼은 기 선언된 인증 모듈의 메서드를 그대로 사용하고, <span class=\"blue-600\">추가 요구사항이 있는 플랫폼은 해당 플랫폼의 인증 모듈에서 메서드를 오버라이딩</span>하여 요구사항에 맞게 재설계한다.\r\n\r\n## 인증 모듈 기능\r\n\r\n구현해야할 기능은 아래와 같다.\r\n\r\n* 플랫폼 로그인 URL 생성 로직\r\n* 정보 제공 동의 갱신 URL 생성 로직\r\n* 서비스 로그인 로직 (인가코드 -> Access Token)\r\n* 자동 로그인 로직\r\n* 로그아웃 로직\r\n* 사용자 정보 호출 로직\r\n* 연동 해제 로직\r\n\r\n최소한 위 기능이 구현되어야한다.\r\n\r\n사용자 정보 호출의 경우, 플랫폼마다 주는 응답이 천차만별로 다르다.\r\n\r\n사용자 정보는 OAuth로 전달받은 Access Token으로 Service Provider에 정보를 요청하여 받을 수 있다. OAuth는 어디까지나 인증을 받기 위한 표준 프로토콜로, <span class=\"red-400\">인증 토큰을 통해 수행하는 부가적인 활동에 대해서는 별다른 제약이 없으므로</span>, Access Token 발급 이후의 API 요청 및 응답은 플랫폼마다 천차만별로 다르다.\r\n\r\n때문에 사용자 정보 호출 로직의 경우, OAuth 표준 프로토콜에 구애받지 않는다. 이에 대응하기 위해 추상 메서드로 선언하여 각 모듈에서 응답을 정제하여 반환하도록 강제하자.\r\n\r\n# 구조도\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137319720-28a6d25b-6128-4873-bbb4-b0e0f5cce847.png)\r\n\r\nOAuth 모듈을 사용하는 API의 구조를 도식화하면 위와 같다.\r\n\r\nJersey가 URL을 캐치하여 정해진 process로 전달한다. process는 인증을 수행하기 위해 해당 플랫폼의 OAuth 구현체를 호출하여 로직을 수행할 것이다. 이후 결과가 반환되어 사용자에게 전달되는 구조다.\r\n\r\n# 정리\r\n\r\n지금까지 인증 서버에 대한 설계를 진행했다. 다음 장엔 위 설계를 토대로 인증 서버를 본격적으로 구축해본다. 그 중에서도 scribeJAVA와 OAuth 인증 모듈에 대해 다룰 예정이다.\r\n\r\n구축 순서는 module -> process -> controller 순이다.\r\n\r\n가장 안쪽에 위치한 프로세스가 module이므로, module에서부터 바깥쪽으로 순차적으로 구현할 예정이다.","url":["2021-10-14-oauth2-java-server-2","2021","10","14","oauth2-java-server-2"]},"next":null},"group":[{"header":{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 2. 인증서버 설계하기","excerpt":"OAuth2.0 프로토콜에 대한 사전 지식도 얻었으니, 이를 통해 인증서버를 직접 구축해보자. Frontend, Backend 부분으로 나누어 웹 페이지를 통해 소셜 로그인을 수행하고, 직접 구현한 인증서버에서 이를 처리하는 시스템 일체를 구축하는 것이 궁극적인 목표다.","coverImage":"https://user-images.githubusercontent.com/50317129/137171016-99af1db1-a346-4def-9329-6072b927bdc0.png","date":"2021-10-14T22:12:25","type":"posts","category":"JAVA","tag":["JAVA","OAuth2.0"],"group":"OAuth2.0 인증서버 구축기","comment":true,"publish":true},"name":"2021-10-14-oauth2-java-server-2.md","content":"\r\n# 개요\r\n\r\nOAuth2.0 프로토콜에 대한 사전 지식도 얻었으니, 이를 통해 인증서버를 직접 구축해보자.\r\n\r\nFrontend, Backend 부분으로 나누어 웹 페이지를 통해 <span class=\"red-400\">소셜 로그인을 수행</span>하고, 직접 구현한 <span class=\"red-400\">인증서버에서 이를 처리하는 시스템 일체를 구축</span>하는 것이 궁극적인 목표다.\r\n\r\n인증 서버의 인증 방식은 <span class=\"primary\">인가 코드 승인 (Authorization Code Grant)</span>을 취한다.\r\n\r\n# 제원\r\n\r\n웹 페이지인 Frontend와 API 통신의 주체가 되는 인증서버인 Backend로 나뉜다.\r\n\r\n## Backend\r\n\r\n<b class=\"large green-600\">💬 Language</b>\r\n\r\n* [![Java](http://img.shields.io/badge/java-v16.0.2-007396?logo=java&logoWidth=25)](https://www.java.com/ko/)\r\n\r\n<b class=\"large green-600\">🧱 Framework</b>\r\n\r\n* [![Gradle](https://img.shields.io/badge/gradle-02303A?logo=gradle&logoWidth=25)](https://gradle.org/)\r\n* ![jakarta.servlet-api](https://img.shields.io/badge/jakarta.servlet--api-v5.0.0-blue)\r\n* ![lombok](https://img.shields.io/badge/lombok-v1.18.20-blue)\r\n* ![jjwt](https://img.shields.io/badge/jjwt-v0.9.1-blue)\r\n* ![scribejava-apis](https://img.shields.io/badge/scribejava--apis-v8.3.1-blue)\r\n* ![jersey-server](https://img.shields.io/badge/jersey--server-v3.0.3-blue)\r\n* ![jersey-container-servlet](https://img.shields.io/badge/jersey--container--servlet-v3.0.3-blue)\r\n* ![jersey-hk2](https://img.shields.io/badge/jersey--hk2-v3.0.3-blue)\r\n* ![jersey-media-json-jackson](https://img.shields.io/badge/jersey--media--json--jackson-v3.0.3-blue)\r\n\r\n<b class=\"large green-600\">📦 Publish</b>\r\n\r\n* [![Tomcat](http://img.shields.io/badge/Tomcat-v10.0.12-F8DC75?logo=apachetomcat&logoWidth=25&logoColor=FFF)](http://tomcat.apache.org/)\r\n* [![Raspberry Pi](http://img.shields.io/badge/RaspberryPi-F00?logo=raspberrypi&logoWidth=25&logoColor=FFF)](https://www.raspberrypi.org/)\r\n\r\nJersey는 RESTful API 프레임워크, scribeJAVA는 OAuth 프레임워크다.\r\n\r\nJersey 3는 Servlet 5.0 최신 스펙인 `jakarta.*`을 사용한다. 때문에 이를 구현한 Tomcat 10을 사용한다. Tomcat 10 미만 혹은 `jakarta.*`을 구현하지 않는 등 <b class=\"red-600\">최신 서블릿 스펙을 사용할 수 없는 WAS의 경우 이 프로젝트는 배포할 수 없다.</b>\r\n\r\n## Frontend\r\n\r\n<b class=\"large green-600\">💬 Language</b>\r\n\r\n* [![HTML5](http://img.shields.io/badge/HTML5-E34F26?logo=html5&logoWidth=25&logoColor=FFF)](https://developer.mozilla.org/ko/docs/Web/HTML)\r\n* [![JavaScript](http://img.shields.io/badge/JavaScript-F7DF1E?logo=javascript&logoWidth=25&logoColor=000)](https://developer.mozilla.org/ko/docs/Web/JavaScript)\r\n* [![CSS3](http://img.shields.io/badge/CSS3-1572B6?logo=css3&logoWidth=25)](https://developer.mozilla.org/ko/docs/Web/CSS)\r\n\r\n<b class=\"large green-600\">🧱 Framework</b>\r\n\r\n* [![eslint](https://img.shields.io/badge/eslint-^7.32.0-4B32C3?logo=eslint&logoWidth=25)](https://eslint.org/)\r\n\r\n<b class=\"large green-600\">📦 Publish</b>\r\n\r\n* [![GitHub](http://img.shields.io/badge/GitHub%20Pages-000?logo=github&logoWidth=25&logoColor=FFF)](https://pages.github.com/)\r\n\r\n원래는 Raspberry Pi로 배포하고 있었으나, 굳이 그럴 필요가 없어서 GutHub Pages로 배포한다.\r\n\r\nFrontend는 단순히 인증 서버와의 API 통신 및 정보 표출 정도만 수행하므로, React 같은 복잡한 기술은 최대한 지양하고 최대한 기본 기능으로만 구성했다.\r\n\r\n# 구성\r\n\r\n인증서버는 크게 세 부분으로 나눌 수 있다.\r\n\r\n* `controller` - 지정한 URL의 요청을 받아 process에게 위임한다.\r\n* `process` - API의 동작을 수행하고, 응답을 생성한다\r\n* `module` - API 동작 수행에 필요한 모듈\r\n\r\n이는 패키지로 구분한다.\r\n\r\n## controller\r\n\r\nJersey 프레임워크는 `controller` 영역에서 동작한다.\r\n\r\n기존의 Servlet은 RESTful API를 설계하기위해 직접 구현해야할 부분이 존재한다.\r\n\r\nRESTful API를 효과적으로 설계하기 위해 Jersey 프레임워크를 사용한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137264829-4e703edf-e682-4793-a2b1-675056cba087.png)\r\n\r\ncontroller는 <span class=\"primary\">정의된 process로 요청을 전달하고, process가 반환하는 응답을 요청자에게 다시 전달</span>한다.\r\n\r\n* `/login`\r\n  * GET `/:platform` - 플랫폼별 인증 URL 반환 API\r\n  * PUT `/put` - 정보 제공 동의 갱신 URL 반환 API\r\n  * POST `/:platform` - 플랫폼별 로그인 API\r\n  * POST `/auto` - 자동 로그인 API\r\n\r\n* `/logout`\r\n  * POST `/` - 로그아웃 API\r\n\r\n* `/revoke`\r\n  * POST `/` - 연동 해제 API\r\n\r\n* `/userinfo`\r\n  * POST `/` - 사용자 정보 API\r\n\r\n해당 프로젝트에선 위 `controller`들이 구현될 것이다.\r\n\r\n## process\r\n\r\n`process`에선 실제 로직이 구현되는 영역이다. 이 때 필요하다면 `module`을 호출하기도 한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137265824-a2652f3c-c32f-42cf-9b5e-8f523530895e.png)\r\n\r\n`process`는 <span class=\"primary\">수행 결과를 정해진 형식의 JSON을 기반으로 응답 객체</span>를 만들어 `controller`로 반환한다.\r\n\r\n``` json\r\n{\r\n    flag: true,\r\n    title: \"success\",\r\n    message: \"test api response success\",\r\n    body: {\r\n        key1: \"value1\",\r\n        key2: true,\r\n        key3: 4932,\r\n        key4: [\r\n            \"A\",\r\n            \"B\",\r\n            \"C\"\r\n        ],\r\n        key5: 93.203\r\n    }\r\n}\r\n```\r\n\r\n| 파라미터 | 필수 여부 |                   데이터 형식                    |      내용      |\r\n| :------: | :-------: | :----------------------------------------------: | :------------: |\r\n|   flag   |     Y     |                    `boolean`                     | 응답 정상 여부 |\r\n|  title   |     Y     |                     `String`                     |   응답 제목    |\r\n| message  |     Y     |                     `String`                     |  응답 메세지   |\r\n|   body   |     Y     | `String \\| Number \\| boolean \\| Array \\| Object` | 응답 정상 여부 |\r\n\r\n응답 명세는 위와 같다.\r\n\r\n`process`는 GET, POST 등 HTTP Method에 따라 나누어 관리한다.\r\n\r\n## module\r\n\r\nmodule은 여러 `process`에서 <span class=\"primary\">반복적으로 사용되는 로직의 모듈화를 구현한 객체</span>다.\r\n\r\n이 중 핵심 기능인 OAuth의 인증을 처리하는 모듈은 scribeJAVA 기반으로 작성된다.\r\n\r\n로그인, 사용자 정보 요청 등 인증과 관련된 로직을 수행하는 `process`들은 모두 위 모듈을 호출하여 사용함으로써 중복 코드를 줄이고 유지보수성을 높인다.\r\n\r\n# OAuth 모듈\r\n\r\n이 프로젝트의 Backend에 가장 중요한 역할을 담당하는 모듈로, OAuth 인증을 구현한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137314562-675ee988-0dad-4937-93a1-73753c2afee4.png)\r\n\r\n요즘은 어느정도 규모있는 플랫폼이라면 OAuth 서비스를 제공한다. 플랫폼은 달라도 OAuth를 준수한다면 모두 공통된 요청 받아 공통된 응답을 제공할 것이다. 공통 프로토콜을 사용하므로, 인증 모듈 하나를 만들어 모든 인증을 거기서 처리하면 될 것이다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137314573-599b1317-0e46-4698-ac65-04fef57933e8.png)\r\n\r\n하지만 문제가 하나 있다. 아무리 공통 프로토콜을 사용한다지만, <span class=\"red-400\">플랫폼마다 추가적인 파라미터 혹은 헤더를 요구</span>하기도 한다. 조건문을 떡칠한다면 모를까, 고작 인증 모듈 하나에서 플랫폼별 요구사항을 하나하나 처리하기엔 문제가 많다. 조건문을 통한 분기 역시 유지보수적인 측면에서 그리 좋은 방식은 아니다.\r\n\r\n<br />\r\n<br />\r\n\r\nOAuth는 객체라기보단 일종의 개념에 더 가깝다. 이렇게 추상적인 개념의 형태는 JAVA의 인터페이스 내지는 추상 객체가 적합하다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137314582-cf0c24f7-5ad3-42f8-a7d7-de19e59c8582.png)\r\n\r\n인증 모듈의 경우, 몇몇 플랫폼의 특이 사항으로 인해 문제가 발생하니, 기본적으로는 <span class=\"blue-600\">인증 모듈의 공통 로직을 사용하되, 추가적인 요구를 하는 플랫폼에 한해 로직을 변경하는 것이 효율적</span>일 것이다. 따라서 인증 모듈은 인터페이스보단 추상 객체가 더 어울릴 것이다.\r\n\r\n이렇게 인증 추상 모듈을 하나 생성하고, 각 소셜 플랫폼마다 인증 모듈을 상속받아 구현하게끔 설계하면 될 것이다.\r\n\r\n문제가 없는 플랫폼은 기 선언된 인증 모듈의 메서드를 그대로 사용하고, <span class=\"blue-600\">추가 요구사항이 있는 플랫폼은 해당 플랫폼의 인증 모듈에서 메서드를 오버라이딩</span>하여 요구사항에 맞게 재설계한다.\r\n\r\n## 인증 모듈 기능\r\n\r\n구현해야할 기능은 아래와 같다.\r\n\r\n* 플랫폼 로그인 URL 생성 로직\r\n* 정보 제공 동의 갱신 URL 생성 로직\r\n* 서비스 로그인 로직 (인가코드 -> Access Token)\r\n* 자동 로그인 로직\r\n* 로그아웃 로직\r\n* 사용자 정보 호출 로직\r\n* 연동 해제 로직\r\n\r\n최소한 위 기능이 구현되어야한다.\r\n\r\n사용자 정보 호출의 경우, 플랫폼마다 주는 응답이 천차만별로 다르다.\r\n\r\n사용자 정보는 OAuth로 전달받은 Access Token으로 Service Provider에 정보를 요청하여 받을 수 있다. OAuth는 어디까지나 인증을 받기 위한 표준 프로토콜로, <span class=\"red-400\">인증 토큰을 통해 수행하는 부가적인 활동에 대해서는 별다른 제약이 없으므로</span>, Access Token 발급 이후의 API 요청 및 응답은 플랫폼마다 천차만별로 다르다.\r\n\r\n때문에 사용자 정보 호출 로직의 경우, OAuth 표준 프로토콜에 구애받지 않는다. 이에 대응하기 위해 추상 메서드로 선언하여 각 모듈에서 응답을 정제하여 반환하도록 강제하자.\r\n\r\n# 구조도\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137319720-28a6d25b-6128-4873-bbb4-b0e0f5cce847.png)\r\n\r\nOAuth 모듈을 사용하는 API의 구조를 도식화하면 위와 같다.\r\n\r\nJersey가 URL을 캐치하여 정해진 process로 전달한다. process는 인증을 수행하기 위해 해당 플랫폼의 OAuth 구현체를 호출하여 로직을 수행할 것이다. 이후 결과가 반환되어 사용자에게 전달되는 구조다.\r\n\r\n# 정리\r\n\r\n지금까지 인증 서버에 대한 설계를 진행했다. 다음 장엔 위 설계를 토대로 인증 서버를 본격적으로 구축해본다. 그 중에서도 scribeJAVA와 OAuth 인증 모듈에 대해 다룰 예정이다.\r\n\r\n구축 순서는 module -> process -> controller 순이다.\r\n\r\n가장 안쪽에 위치한 프로세스가 module이므로, module에서부터 바깥쪽으로 순차적으로 구현할 예정이다.","url":["2021-10-14-oauth2-java-server-2","2021","10","14","oauth2-java-server-2"]},{"header":{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 1. OAuth2.0이란?","excerpt":"사이트를 돌아다니다보면 로그인이 필요한 사이트를 심심치않게 만나볼 수 있다. 그리고 이런 사이트들은 대부분 \"네이버로 로그인하기\"와 같은 플랫폼 로그인을 제공한다. 사이트 뿐만 아니라 근래 들어 출시되는 앱 역시 대부분 플랫폼을 통한 인증 서비스를 제공한다. 이를 활용하면 매우 간단한 절차를 통해 회원가입 또는 로그인을 수행할 수 있게 된다. 이러한 서비스는 네이버 뿐만 아니라 Google, 카카오 등 어느정도 규모있는 플랫폼의 대부분은 이러한 \"플랫폼으로 로그인하기\"와 같은 기능을 제공한다. 이렇게 플랫폼의 정보를 활용하여 타 사이트에서 인증을 수행하는 것을 OAuth 프로토콜이라 한다.","coverImage":"https://user-images.githubusercontent.com/50317129/137171016-99af1db1-a346-4def-9329-6072b927bdc0.png","date":"2021-10-14T00:56:31","type":"posts","category":"JAVA","tag":["JAVA","OAuth2.0"],"group":"OAuth2.0 인증서버 구축기","comment":true,"publish":true},"name":"2021-10-14-oauth2-java-server-1.md","content":"\r\n# 개요\r\n\r\n사이트를 돌아다니다보면 로그인이 필요한 사이트를 심심치않게 만나볼 수 있다. 그리고 이런 사이트들은 대부분 \"네이버로 로그인하기\"와 같은 플랫폼 로그인을 제공한다. 사이트 뿐만 아니라 근래 들어 출시되는 앱 역시 대부분 플랫폼을 통한 인증 서비스를 제공한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137170074-d678c0e1-d30a-4d38-91e5-543344e18ec3.png)\r\n\r\n이를 활용하면 매우 간단한 절차를 통해 회원가입 또는 로그인을 수행할 수 있게 된다. 이러한 서비스는 네이버 뿐만 아니라 Google, 카카오 등 어느정도 규모있는 플랫폼의 대부분은 이러한 \"플랫폼으로 로그인하기\"와 같은 기능을 제공한다.\r\n\r\n이렇게 플랫폼의 정보를 활용하여 타 사이트에서 인증을 수행하는 것을 OAuth 프로토콜이라 한다.\r\n\r\n# OAuth\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137171256-3ca820ec-1435-4103-bc34-9c922832886c.png)\r\n\r\nOAuth는 Open Authentication의 약자로, 인증을 위한 표준 프로토콜이다.\r\n\r\n이전의 인증 방식은 사이트 혹은 애플리케이션에 직접 회원가입을 수행하여 내 정보를 제공하고, 비밀번호를 통해 인증하는 비밀번호 인증 방식을 취한다. 물론 이 비밀번호 인증 방식은 인터넷의 초창기부터 지금까지 사용하는 기법이지만, 그렇다고 문제가 아주 없는 것은 아니였다.\r\n\r\n* 서비스마다 운영되는 중구난방적인 인증 시스템\r\n* 사이트의 신뢰성 문제\r\n* 인터넷을 사용할수록 과적되는 인증 정보\r\n\r\nOAuth 이전에는 이렇다할 인증 표준이 존재하지 않았다. 표준이 없다보니 인증 시스템은 서비스마다 개성이 넘처흘렀다. 사이트마다 요구하는 정보, 방식이 천차만별로 다르니 사용자 입장에서는 매우 혼란스러울 것이다.\r\n\r\n그래도 이 점은 나름 사이트를 구분할 수 있는 일종의 척도(?)가 되기도 한다만, 더 큰 문제는 해당 사이트를 신뢰할만한 지표가 전혀 없다는 것이다. 내 정보를 왜 가져가는지, 어떻게 보관하는지 알 길이 없는 사용자들은 울며 겨자먹기로 서비스에게 내 정보를 제공하게 된다.\r\n\r\n이런 사이트들을 조금만 돌아다니면서 상호작용을 하다보면, 나도 모르는 새에 계정정보가 쌓여있을 것이다. 인증의 주체가 되는 \"나\"는 하나인데, 인증 표준의 부재로 인해 각 서비스마다 나 자신을 인증하기 위한 여러 방법을 소유하게되는 것이다.\r\n\r\n<br />\r\n\r\n이러한 비효율성을 타파하기 위해 Twitter 주도하에 인증 표준이 설립되었고, 이 것이 OAuth의 시초다. OAuth 라는 표준 프로토콜이 정의됨에 따라 각 서비스는 공통된 인터페이스로 사용자에게 인증을 요구할 수 있고, 사용자 역시 익숙하고 신뢰성있는 대형 플랫폼에 인증 정보를 입력하기 때문에 보안적인 측면은 물론, 절차 또한 간소화되는 이점을 가지게 된다.\r\n\r\nOAuth는 1.0을 시작으로, 1.0에 세션 고정 공격이라는 보안 취약점이 발견됨에 따라 현재는 2.0을 사용하고 있다.\r\n\r\n> <b class=\"orange-400\">OAuth1.0의 몰락</b>  \r\n> OAuth1.0은 <span class=\"primary\">세션 고정 공격</span>이라는 보안 취약점을 가지고 있다. 이를 해결하기 위해 OAuth2.0에서는 이러한 문제들이 해결되었으며, OAuth2.0은 OAuth1.0을 완전히 대체한다.\r\n\r\nOAuth2.0은 그 방식에 따라 4가지 방식으로 구분한다.\r\n\r\n이를 설명하기 앞서 OAuth에서 사용하는 키워드에 대해 알아보자\r\n\r\n|      키워드      |                             의미                             |\r\n| :--------------: | :----------------------------------------------------------: |\r\n|       User       |                            사용자                            |\r\n|     Consumer     |               OAuth를 제공하는 서비스 (웹 등)                |\r\n| Service Provider |                OAuth 서비스 제공자 (NAVER 등)                |\r\n|   Access Token   | Consumer가 Service Provider의 자원에 접근하기 위한 인증 코드 |\r\n|  Refresh Token   |             Access Token을 재발급하기 위한 코드              |\r\n\r\n아마 대부분 User의 범주에 속해있을 것이다. 여기서 궁극적으로 구축할 서비스는 Consumer가 된다.\r\n\r\n간혹 Service Provider는 인증 서버와 자원 서버로 분리해서 다루기도 한다.\r\n\r\nNAVER, Google과 같은 플랫폼은 Service Provider가 되며, 인증 절차를 통해 Access Token과 Refresh Token을 전달받게 된다.\r\n\r\n# OAuth Workflow\r\n\r\nOAuth2.0은 구현 방식에 따라 4가지 방식으로 구분된다.\r\n\r\n## 인가 코드 승인 (Authorization Code Grant)\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137179813-de61fd8a-bbe6-4824-afdf-3652cde164bc.png)\r\n\r\n* 사용자가 Service Provider에 직접 인증을 수행\r\n* 인증에 성공하면 Consumer Frontend는 인가 코드를 전달받음\r\n* Consumer는 인가 코드를 Service Provider에 전달하여 Access, Refresh Token을 반환받음\r\n* Token 반환 이전에 인가 코드를 받는 과정이 추가되어 높은 수준의 보안을 제공함\r\n* Consumer의 Backend에서 Token 교환이 일어나므로 중간에 이를 탈취하기 어려움\r\n* 웹에서 사용되는 가장 보편적인 인증 형태로, 이 프로젝트 또한 인가 코드 승인 형태가 적용됨\r\n\r\n``` input\r\nGET /auth\r\nHost: oauth2.example.com\r\n\r\nresponse_type=code\r\n&client_id=asj2y93bdjen3\r\n&redirect_url=https://oauth2.example.com/callback\r\n&state=6b773c55-b688-4a77-adaf-0bd25f4c4111\r\n&scope=email,profile\r\n```\r\n\r\n|     구분      |           필수 여부            |                내용                 |\r\n| :-----------: | :----------------------------: | :---------------------------------: |\r\n| response_type | <span class=\"red-400\">Y</span> |  응답 타입으로, 값은 `code`로 고정  |\r\n|   client_id   | <span class=\"red-400\">Y</span> | Service Provider에서 제공한 API KEY |\r\n| redirect_url  | <span class=\"red-400\">Y</span> |            응답 반환 URL            |\r\n|     state     |               N                |      임의로 생성한 고유 상태값      |\r\n|     scope     |               N                |              요청 권한              |\r\n\r\n<br />\r\n<br />\r\n\r\n``` output\r\nGET /callback\r\nHost: oauth2.example.com\r\n\r\ncode=dfnY865gHjUbnknt57yGV\r\n&state=6b773c55-b688-4a77-adaf-0bd25f4c4111\r\n```\r\n\r\n| 구분  |            내용             |\r\n| :---: | :-------------------------: |\r\n| code  |          인가 코드          |\r\n| state | 요청에서 전달한 고유 상태값 |\r\n\r\n`state`는 Consumer Backend에서 임의로 생성한 상태값으로, 통상 UUID를 하나 생성하여 사용한다.\r\n\r\n`code`와 입력했던 `state`가 반환된다. `code`를 통해 Service Provider에 요청하여 Access Token으로 교환할 수 있다.\r\n\r\n## 암시적 승인 (Implicit Grant)\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137179833-fe688388-0d29-47c0-b4db-c4a42b26dccd.png)\r\n\r\n* 인가 코드 승인과 달리, 인증 성공 시 Consumer는 Token을 직접 전달받음\r\n* 각 플랫폼에서 제공되는 JavaScript SDK를 사용하여 구현\r\n* 인가 코드 승인에 비해 서버가 필요하지 않아 구현이 간단함\r\n* Token이 GET 방식으로 URL 파라미터에 담겨 전달되므로 보안에 취약하다.\r\n\r\n``` input\r\nGET /auth\r\nHost: oauth2.example.com\r\n\r\nresponse_type=token\r\n&client_id=asj2y93bdjen3\r\n&redirect_url=https://oauth2.example.com/callback\r\n&state=97c66e11-d0e0-4c86-833c-e08bed40748d\r\n&scope=email,profile\r\n```\r\n\r\n|     구분      |           필수 여부            |                 내용                 |\r\n| :-----------: | :----------------------------: | :----------------------------------: |\r\n| response_type | <span class=\"red-400\">Y</span> | 응답 타입으로, 값은 `token`으로 고정 |\r\n|   client_id   | <span class=\"red-400\">Y</span> | Service Provider에서 제공한 API KEY  |\r\n| redirect_url  | <span class=\"red-400\">Y</span> |            응답 반환 URL             |\r\n|     state     |               N                |      임의로 생성한 고유 상태값       |\r\n|     scope     |               N                |              요청 권한               |\r\n\r\n<br />\r\n<br />\r\n\r\n``` output\r\nGET /callback\r\nHost: oauth2.example.com\r\n\r\n#access_token=kr40FkgksmGS92lffkGls\r\n&token_type=Bearer\r\n&expires_in=3600\r\n&state=97c66e11-d0e0-4c86-833c-e08bed40748d\r\n```\r\n\r\n|     구분     |                  내용                  |\r\n| :----------: | :------------------------------------: |\r\n| access_token |               접근 토큰                |\r\n|  token_type  | 접근 토큰의 타입으로, 통상 Bearer 사용 |\r\n|  expires_in  |           토큰 유효기간 (초)           |\r\n|    state     |      요청에서 전달한 고유 상태값       |\r\n\r\n인가 코드 승인과 달리, 요청에 Access Token이 포함되어 전달된다.\r\n\r\n> <b class=\"orange-400\">파라미터가 왜 </b>`#`<b class=\"orange-400\">으로 시작하지?</b>  \r\n> `#`은 URI Fragment라는 식별자다. 해당 식별자는 URL 접근 시 서버에 전달되지 않기 때문에 보안적인 측면에서 이점을 가져가기 위한 조치다.\r\n\r\n## 리소스 소유자 암호 자격 승인 (Resource Owner Password Credentials Grant)\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137179866-29962644-c0a7-42f8-a397-7b3b1c361082.png)\r\n\r\n* Service Provider에 ID, PW를 전달하여 Token을 전달받음\r\n* 보안 구조가 비밀번호 기반의 인증 뿐이므로 이를 구현하는 Consumer는 신뢰성이 매우 높아야 함\r\n\r\n``` input\r\nPOST /auth\r\nHost: oauth2.example.com\r\n\r\ngrant_type=password\r\n&client_id=asj2y93bdjen3\r\n&username=username123\r\n&password=password123\r\n&scope=email,profile\r\n```\r\n\r\n|    구분    |           필수 여부            |                내용                 |\r\n| :--------: | :----------------------------: | :---------------------------------: |\r\n| grant_type | <span class=\"red-400\">Y</span> |  승인 타입으로, `password`로 고정   |\r\n| client_id  | <span class=\"red-400\">Y</span> | Service Provider에서 제공한 API KEY |\r\n|  username  | <span class=\"red-400\">Y</span> |               아이디                |\r\n|  password  | <span class=\"red-400\">Y</span> |              비밀번호               |\r\n|   scope    |               N                |              요청 권한              |\r\n\r\n<br />\r\n<br />\r\n\r\n``` json\r\n{\r\n    \"access_token\": \"dGkdi93ns2kdkV9dkA3\",\r\n    \"token_type\": \"Bearer\",\r\n    \"expires_in\": 3600,\r\n    \"scope\": \"email,profile\"\r\n}\r\n```\r\n\r\n|     구분     |                  내용                  |\r\n| :----------: | :------------------------------------: |\r\n| access_token |               접근 토큰                |\r\n|  token_type  | 접근 토큰의 타입으로, 통상 Bearer 사용 |\r\n|  expires_in  |           토큰 유효기간 (초)           |\r\n|    scope     |               요청 권한                |\r\n\r\n## 클라이언트 자격 승인 (Client Credentials Grant)\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/137179894-94e8f974-27cd-44b1-9c36-5e1d3dc69377.png)\r\n\r\n* 사용자가 Access Token을 외부 저장소에서 받아 인증하는 형식\r\n* 클라이언트 자체가 인증 수단이므로 절차가 매우 간소함\r\n* 통상 자기 자신의 정보만을 호출함\r\n\r\n``` input\r\nGET /auth\r\nHost: oauth2.example.com\r\n\r\ngrant_type=client_credentials\r\n&client_id=asj2y93bdjen3\r\n&client_secret=https://oauth2.example.com/callback\r\n&scope=email,profile\r\n```\r\n\r\n|     구분      |           필수 여부            |                      내용                       |\r\n| :-----------: | :----------------------------: | :---------------------------------------------: |\r\n|  grant_type   | <span class=\"red-400\">Y</span> | 응답 타입으로, 값은 `client_credentials`로 고정 |\r\n|   client_id   | <span class=\"red-400\">Y</span> |       Service Provider에서 제공한 API KEY       |\r\n| client_secret | <span class=\"red-400\">Y</span> |   Service Provider에서 제공한 API Secret KEY    |\r\n|     scope     |               N                |                    요청 권한                    |\r\n\r\n<br />\r\n<br />\r\n\r\n``` json\r\n{\r\n    \"access_token\": \"dGkdi93ns2kdkV9dkA3\",\r\n    \"token_type\": \"Bearer\",\r\n    \"expires_in\": 3600,\r\n\t\"scope\": \"email,profile\"\r\n}\r\n```\r\n\r\n|     구분     |                  내용                  |\r\n| :----------: | :------------------------------------: |\r\n| access_token |               접근 토큰                |\r\n|  token_type  | 접근 토큰의 타입으로, 통상 Bearer 사용 |\r\n|  expires_in  |           토큰 유효기간 (초)           |\r\n|    scope     |               요청 권한                |\r\n\r\n# 정리\r\n\r\n* OAuth2.0은 인증을 위한 표준 프로토콜으로, OAuth 프로토콜을 준수하는 서비스는 기본적으로 공통된 API를 사용해서 인증을 수행할 수 있다.\r\n* OAuth 프로토콜을 통해 인증 절차는 간소화하고, 보안 수준은 강화할 수 있다.\r\n* OAuth의 방식은 4가지로 구분되며, 보편적으로 인가 코드 승인 방식을 사용한다.\r\n* 암시적 승인은 Serverless 서비스나 앱에서 주로 사용된다.\r\n* 나머지 방식은 특수한 환경에서 사용된다.\r\n\r\n다음 장에서는 구축할 시스템의 구성에 대해 다룬다.\r\n\r\n# 참고\r\n\r\n* [IT위키 - OAuth](https://itwiki.kr/w/OAuth)\r\n* [Microsoft OAuth](https://docs.microsoft.com/ko-kr/azure/active-directory/develop/active-directory-v2-protocols)\r\n* [RFC6749](https://datatracker.ietf.org/doc/html/rfc6749)","url":["2021-10-14-oauth2-java-server-1","2021","10","14","oauth2-java-server-1"]}],"data":{"header":{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 3. scribeJAVA로 OAuth2.0 인증 모듈 구현하기","excerpt":"OAuth 라이브러리인 scribeJAVA를 통해 인증 모듈을 구현해보자.","coverImage":"https://user-images.githubusercontent.com/50317129/137171016-99af1db1-a346-4def-9329-6072b927bdc0.png","date":"2021-10-20T01:26:40","type":"posts","category":"JAVA","tag":["JAVA","OAuth2.0","Jersey"],"group":"OAuth2.0 인증서버 구축기","comment":true,"publish":true},"name":"2021-10-20-oauth2-java-server-3.md","content":"<h1 id=\"개요\">개요 <a href=\"#개요\">🔗</a></h1><p>OAuth 라이브러리인 scribeJAVA를 통해 인증 모듈을 구현해보자.</p>\n<h1 id=\"OAuth-인증 모듈 구현하기\">OAuth 인증 모듈 구현하기 <a href=\"#OAuth-인증 모듈 구현하기\">🔗</a></h1><p>이전 장에서도 언급했듯이, OAuth 인증 모듈은 그 공통된 특성으로 인해 추상 객체가 적합하다.</p>\n<p>scribeJAVA 모듈을 사용하여 추상 객체를 구현한다.</p>\n<h2 id=\"scribeJAVA-적용하기\">scribeJAVA 적용하기 <a href=\"#scribeJAVA-적용하기\">🔗</a></h2><p>프로젝트에 scribeJAVA를 적용해보자.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>GROOVY</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-groovy\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>implementation group: 'com.github.scribejava', name: 'scribejava-apis', version: '8.3.1'</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p><code class=\"inline-code\">build.gradle</code>의 dependencies에 위 의존성을 추가하는 것으로 scribeJAVA를 적용할 수 있다.</p>\n<h2 id=\"scribeJAVA-사용하기\">scribeJAVA 사용하기 <a href=\"#scribeJAVA-사용하기\">🔗</a></h2><p>본격적으로 scribeJAVA를 사용해보자.</p>\n<p>scribeJAVA는 <code class=\"inline-code\">OAuth20Service</code>라는 객체를 중심으로 동작한다. <code class=\"inline-code\">OAuth20Service</code> 객체를 통해 아래의 로직을 수행할 수 있다.</p>\n<ul>\n<li>플랫폼 로그인 URL 생성</li>\n<li>인가 코드를 Access, Refresh Token으로 교환</li>\n<li>Refresh Token을 통해 Access Token 갱신</li>\n<li>기타 OAuth 관련 요청 생성</li>\n</ul>\n<p>즉, OAuth 인증에 있어서 핵심이 되는 동작은 모두 이 <code class=\"inline-code\">OAuth20Service</code> 객체를 중심으로 이루어진다.</p>\n<h3 id=\"OAuth20Service-객체 생성하기\">OAuth20Service 객체 생성하기 <a href=\"#OAuth20Service-객체 생성하기\">🔗</a></h3><p><code class=\"inline-code\">OAuth20Service</code> 객체를 생성한다. 필요한 요소는 아래와 같다.</p>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">필수 여부</th>\n<th align=\"center\">내용</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">API Key</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">API 키</td>\n</tr>\n<tr>\n<td align=\"center\">API Secret Key</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">API 시크릿 키</td>\n</tr>\n<tr>\n<td align=\"center\">Callback URL</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">로그인 결과를 반환할 URL</td>\n</tr>\n<tr>\n<td align=\"center\">Scope</td>\n<td align=\"center\">N (일부 플랫폼 Y)</td>\n<td align=\"center\">권한</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>API Key, API Secret Key, Callback URL은 기본적으로 반드시 필요하며, 몇몇 플랫폼의 경우 Scope도 필수 사양으로 지정하는 경우가 있다. 이 프로젝트에 적용할 플랫폼들 중 Google이 그렇다. 구글은 후술할 플랫폼 로그인 URL 생성 시 Scope를 지정하지 않으면 오류를 출력한다.</p>\n<p>API Key, API Secret Key는 각 플랫폼에 OAuth 서비스 등록 시 부여해주며, Callback URL은 본인이 직접 정해서 입력하면 된다. 등록되지 않은 Callback URL로 로그인을 수행하면 오류가 출력된다. Callback URL은 여러개를 지정할 수 있다.</p>\n<p>각 플랫폼 별 OAuth 서비스를 등록하는 방법은 추후에 다루고, 일단 이런 부가적인 부분들은 준비가 됐다고 가정한다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token class-name\">OAuth20Service</span> service <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServiceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{API_KEY}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apiSecret</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{SECRET_KEY}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{CALLBACK_URL}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>이와 같이 생성할 수 있다. <code class=\"inline-code\">build(this)</code>에서 <code class=\"inline-code\">this</code>는 <code class=\"inline-code\">DefaultApi20</code> 객체다. 아래는 <code class=\"inline-code\">OAuth20Service</code> 객체의 메서드와 그 기능들이다.</p>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">내용</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\"><code class=\"inline-code\">getAuthorizationUrl</code></td>\n<td align=\"center\">플랫폼 로그인 URL 반환 메서드</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">getAccessToken</code></td>\n<td align=\"center\">OAuth2AccessToken 반환 메서드</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">signRequest</code></td>\n<td align=\"center\">OAuth 요청 등록 메서드</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"inline-code\">execute</code></td>\n<td align=\"center\">등록된 요청 수행 메서드</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>이 프로젝트에선 위 4가지 용도만 알아도 무방하다.</p>\n<h2 id=\"AuthModule-생성하기\">AuthModule 생성하기 <a href=\"#AuthModule-생성하기\">🔗</a></h2><p>이제 본격적으로 모듈 객체를 구현해보자. 인증 모듈은 반드시 <code class=\"inline-code\">DefaultApi20</code>을 상속받아 구현해야한다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthModule</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultApi20</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>    <span class=\"token comment\" data-tag=\"new\">// 구현 예정</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p><code class=\"inline-code\">DefaultApi20</code> 추상 객체는 두 개의 추상 메서드를 가지고 있다. 즉, 이를 상속하는 <code class=\"inline-code\">AuthModule</code>는 이 두 메서드를 구현해야할 책임이 있다.</p>\n<ul>\n<li><code class=\"inline-code\">getAccessTokenEndpoint</code> - 접근 토큰 요청 URL 반환 메서드</li>\n<li><code class=\"inline-code\">getAuthorizationBaseUrl</code> - 인증 URL 반환 메서드</li>\n</ul>\n<p>하지만 <code class=\"inline-code\">AuthModule</code> 역시 추상 객체이므로, 이를 상속받아 사용할 하위 플랫폼 인증 모듈에게 이 책임을 위임할 수 있다. 즉, <code class=\"inline-code\">DefaultApi20</code>의 추상 메서드는 <code class=\"inline-code\">AuthModule</code>에서 구현하지 않고 이를 상속하는 하위 플랫폼 인증 모듈에서 구현할 것이다.</p>\n<p>인증 모듈 추상 객체는 위와 같은 형태를 가진다. NAVER, Google 등 플랫폼별 인증 모듈은 위 <code class=\"inline-code\">AuthModule</code>을 상속받아 사용할 것이다. 인증 모듈의 핵심 동작은 대부분 <code class=\"inline-code\">OAuth20Service</code> 객체로부터 이루어지니, <code class=\"inline-code\">AuthModule</code>을 상속할 때 반드시 관련 객체를 받도록 명시하는 것이 좋아보인다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthModule</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultApi20</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">OAuth20Service</span> service<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>    </td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>    <span class=\"token annotation punctuation\">@Getter</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> unique<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthModule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceBuilderOAuth20</span> serviceBuilder<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> unique<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>        service <span class=\"token operator\">=</span> serviceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>        </td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unique <span class=\"token operator\">=</span> unique<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">데이터 형식</th>\n<th align=\"center\">내용</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">serviceBuilder</td>\n<td align=\"center\"><code class=\"inline-code\">ServiceBuilderOAuth20</code></td>\n<td align=\"center\"><code class=\"inline-code\">OAuth20Service</code> 객체의 빌더</td>\n</tr>\n<tr>\n<td align=\"center\">unique</td>\n<td align=\"center\"><code class=\"inline-code\">String</code></td>\n<td align=\"center\">인증 모듈의 고유값. 플랫폼의 소문자 표기와 동일 (ex. NAVER -> naver 등)</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>생성자와 멤버 변수를 위와 같이 지정한다. 전부 <code class=\"inline-code\">protected</code> 접근 제어자를 가지므로, <code class=\"inline-code\">AuthModule</code>을 상속받은 객체에서만 생성자를 사용할 수 있으며, <code class=\"inline-code\">service</code>, <code class=\"inline-code\">unique</code> 파라미터 역시 마찬가지다.</p>\n<p><code class=\"inline-code\">ServiceBuilderOAuth20</code>를 인수로 할당받아 생성자에서 <code class=\"inline-code\">OAuth20Service</code>로 빌드하여 멤버 변수 <code class=\"inline-code\">service</code>에 할당한다. <code class=\"inline-code\">AuthModule</code> 상속받은 객체의 어느 곳에서든 <code class=\"inline-code\">service</code>와 <code class=\"inline-code\">unique</code>에 접근할 수 있다.</p>\n<p>이 모듈에 기본적인 로직을 작성하고, 플랫폼마다 구현이 모두 다를 경우, 추상 메서드를 선언하여 이를 상속받는 객체가 이를 직접 구현하도록 위임한다.</p>\n<h3 id=\"플랫폼-로그인 URL 반환 메서드\">플랫폼 로그인 URL 반환 메서드 <a href=\"#플랫폼-로그인 URL 반환 메서드\">🔗</a></h3><p>scribeJAVA를 통해 플랫폼 로그인 URL 반환 메서드를 구현해보자. 예를 들어, 네이버 아이디로 로그인 버튼을 클릭하면 네이버 로그인 창이 뜰 것이다. 이 과정은 앞선 예시와 같은 플랫폼 로그인 창의 URL을 생성하는 것이다.</p>\n<p><code class=\"inline-code\">service</code>의 <code class=\"inline-code\">getAuthorizationUrl</code> 메서드를 사용하는 것만으로 간단히 구현할 수 있다. <code class=\"inline-code\">ServiceBuilderOAuth20</code>에 입력했던 API Key, Secret Key, Callback URL을 토대로 플랫폼 인증 URL을 생성하여 반환한다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAuthorizationUrl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>    <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorizationUrl</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p><code class=\"inline-code\">getAuthorizationBaseUrl</code>의 반환 URL을 기준으로 생성한다.</p>\n<p>인수인 <code class=\"inline-code\">state</code>는 고유 상태값으로, 서버에서 임의의 UUID를 하나 생성해서 사용한다. 이는 보안을 위한 세션 체크용으로 사용하는 값이다.</p>\n<h3 id=\"OAuth2AccessToken-반환 메서드\">OAuth2AccessToken 반환 메서드 <a href=\"#OAuth2AccessToken-반환 메서드\">🔗</a></h3><p>이번엔 <code class=\"inline-code\">OAuth2AccessToken</code> 객체를 반환하는 메서드를 구현해보자. <code class=\"inline-code\">OAuth2AccessToken</code>는 Access, Refresh Token. 토큰 종류, 유효시간을 가지는 scribeJAVA의 객체다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">public</span> <span class=\"token class-name\">OAuth2AccessToken</span> <span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>    <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>마찬가지로 <code class=\"inline-code\">service</code>의 <code class=\"inline-code\">getAccessToken</code> 메서드를 사용하여 간단히 구현할 수 있다. 인수인 <code class=\"inline-code\">code</code>를 Service Provider에 전달하면, Access, Refresh Token을 제공한다.</p>\n<h3 id=\"Access-Token 갱신 메서드\">Access Token 갱신 메서드 <a href=\"#Access-Token 갱신 메서드\">🔗</a></h3><p>Access Token은 보안을 위해 만료시간이 굉장히 짧거나 세션 만료 시 같이 만료되는 것이 보통이다. 이 경우 원래대로라면 다시 인증을 받아야하고, 경우에 따라 사용자에게 플랫폼 로그인 수행을 다시 요구할 수도 있다.</p>\n<p>대부분의 OAuth 플랫폼은 인증 시 Access Token과 함께 Refresh Token을 같이 제공한다.</p>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">만료시간</th>\n<th align=\"center\">인증 가능 여부</th>\n<th align=\"center\">내용</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">Access Token</td>\n<td align=\"center\">짧거나 일시적</td>\n<td align=\"center\">가능</td>\n<td align=\"center\">인증을 담당하는 토큰. Access Token 존재 자체만으로 사용자가 인증 정보를 제공한다고 가정한다.</td>\n</tr>\n<tr>\n<td align=\"center\">Refresh Token</td>\n<td align=\"center\">길거나 영구적</td>\n<td align=\"center\">불가능</td>\n<td align=\"center\">Access Token을 재발급하는 토큰. Refresh Token 자체만으론 재발급 외의 유의미한 작업이 불가능하다.</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>두 토큰의 차이는 위와 같다.</p>\n<p>scribeJAVA에서 Refresh Token으로 Access Token을 재발급 받아보자.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">public</span> <span class=\"token class-name\">OAuth2AccessToken</span> <span class=\"token function\">getRefreshAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> refresh<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>    params<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client_id\"</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getApiKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>    params<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client_secret\"</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getApiSecret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>    params<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"refresh_token\"</span><span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6>    </td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>    <span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8>    </td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> param <span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>        builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13>    </td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14>    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramBytes <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15>    </td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>    <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRefreshTokenEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17>    </td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18>    <span class=\"token class-name\">HttpURLConnection</span> connection <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpURLConnection</span><span class=\"token punctuation\">)</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19>    connection<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20>    connection<span class=\"token punctuation\">.</span><span class=\"token function\">setDoOutput</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21>    connection<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>paramBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22>    </td></tr>\n<tr data-number=23><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23>    <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=24><td class=\"line-number\" data-number=\"24\">24</td><td class=\"line-code\" data-number=24>    </td></tr>\n<tr data-number=25><td class=\"line-number\" data-number=\"25\">25</td><td class=\"line-code\" data-number=25>    <span class=\"token class-name\">StringBuilder</span> responseBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=26><td class=\"line-number\" data-number=\"26\">26</td><td class=\"line-code\" data-number=26>    <span class=\"token class-name\">String</span> temp<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=27><td class=\"line-number\" data-number=\"27\">27</td><td class=\"line-code\" data-number=27>    </td></tr>\n<tr data-number=28><td class=\"line-number\" data-number=\"28\">28</td><td class=\"line-code\" data-number=28>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=29><td class=\"line-number\" data-number=\"29\">29</td><td class=\"line-code\" data-number=29>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=30><td class=\"line-number\" data-number=\"30\">30</td><td class=\"line-code\" data-number=30>        responseBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=31><td class=\"line-number\" data-number=\"31\">31</td><td class=\"line-code\" data-number=31>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=32><td class=\"line-number\" data-number=\"32\">32</td><td class=\"line-code\" data-number=32>    </td></tr>\n<tr data-number=33><td class=\"line-number\" data-number=\"33\">33</td><td class=\"line-code\" data-number=33>    reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=34><td class=\"line-number\" data-number=\"34\">34</td><td class=\"line-code\" data-number=34>    </td></tr>\n<tr data-number=35><td class=\"line-number\" data-number=\"35\">35</td><td class=\"line-code\" data-number=35>    <span class=\"token class-name\">ObjectMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=36><td class=\"line-number\" data-number=\"36\">36</td><td class=\"line-code\" data-number=36>    </td></tr>\n<tr data-number=37><td class=\"line-number\" data-number=\"37\">37</td><td class=\"line-code\" data-number=37>    <span class=\"token class-name\">JsonNode</span> node <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readTree</span><span class=\"token punctuation\">(</span>responseBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=38><td class=\"line-number\" data-number=\"38\">38</td><td class=\"line-code\" data-number=38>    </td></tr>\n<tr data-number=39><td class=\"line-number\" data-number=\"39\">39</td><td class=\"line-code\" data-number=39>    <span class=\"token class-name\">String</span> access_token <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access_token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">textValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=40><td class=\"line-number\" data-number=\"40\">40</td><td class=\"line-code\" data-number=40>    <span class=\"token class-name\">String</span> token_type <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token_type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">textValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=41><td class=\"line-number\" data-number=\"41\">41</td><td class=\"line-code\" data-number=41>    <span class=\"token keyword\">int</span> expires_in <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expires_in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=42><td class=\"line-number\" data-number=\"42\">42</td><td class=\"line-code\" data-number=42>    </td></tr>\n<tr data-number=43><td class=\"line-number\" data-number=\"43\">43</td><td class=\"line-code\" data-number=43>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OAuth2AccessToken</span><span class=\"token punctuation\">(</span>access_token<span class=\"token punctuation\">,</span> token_type<span class=\"token punctuation\">,</span> expires_in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> responseBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=44><td class=\"line-number\" data-number=\"44\">44</td><td class=\"line-code\" data-number=44><span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=45><td class=\"line-number\" data-number=\"45\">45</td><td class=\"line-code\" data-number=45></td></tr>\n<tr data-number=46><td class=\"line-number\" data-number=\"46\">46</td><td class=\"line-code\" data-number=46><span class=\"token annotation punctuation\">@Override</span></td></tr>\n<tr data-number=47><td class=\"line-number\" data-number=\"47\">47</td><td class=\"line-code\" data-number=47><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRefreshTokenEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=48><td class=\"line-number\" data-number=\"48\">48</td><td class=\"line-code\" data-number=48><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=49><td class=\"line-number\" data-number=\"49\">49</td><td class=\"line-code\" data-number=49>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAccessTokenEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"?grant_type=refresh_token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=50><td class=\"line-number\" data-number=\"50\">50</td><td class=\"line-code\" data-number=50><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>Access Token 재발급 코드는 위와 같다. 원래 <code class=\"inline-code\">service.refreshAccessToken()</code> 메서드가 있긴 한데, <code class=\"inline-code\">getRefreshTokenEndpoint</code> 처리가 플랫폼별로 다른건지, 제대로 동작이 안 되는 것 같다. 필자는 그냥 <code class=\"inline-code\">HttpURLConnection</code>을 활용하여 OAuth2.0 스펙에 맞게끔 요청을 설계했다.</p>\n<p><code class=\"inline-code\">getRefreshTokenEndpoint</code> 메서드는 Refresh Token 관련 작업을 수행할 때 베이스가 되는 URL을 반환하는 메서드다. <code class=\"inline-code\">getAccessTokenEndpoint</code> URL 뒤에 <code class=\"inline-code\">?grant_type=refresh_token</code> 파라미터를 붙여 반환한다.</p>\n<p><code class=\"inline-code\">getRefreshTokenEndpoint</code>이 반환하는 URL을 기준삼아 <code class=\"inline-code\">client_id</code>, <code class=\"inline-code\">client_secret</code>, <code class=\"inline-code\">refresh_token</code>을 파라미터로 담아 전송하여 응답을 받고, 여기서 필요한 내용을 추출하여 <code class=\"inline-code\">OAuth2AccessToken</code> 객체를 생성하여 반환한다.</p>\n<h3 id=\"유저-정보 호출 메서드\">유저 정보 호출 메서드 <a href=\"#유저-정보 호출 메서드\">🔗</a></h3><p>Access Token을 성공적으로 받아왔다면, 이를 통해 사용자 정보를 불러올 수 있다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">public</span> <span class=\"token class-name\">Response</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> access<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>    <span class=\"token class-name\">OAuthRequest</span> oAuthRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OAuthRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Verb</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">,</span> <span class=\"token function\">getUserInfoEndPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>    service<span class=\"token punctuation\">.</span><span class=\"token function\">signRequest</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> oAuthRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>    </td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>    <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>oAuthRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserInfoEndPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>    </td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserInfoBean</span> <span class=\"token function\">getUserInfoBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span><span class=\"token punctuation\">;</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>총 세 가지 메서드를 정의해야하는데, 하나는 직접 구현이고 나머지 두 개는 추상 메서드다.</p>\n<p><code class=\"inline-code\">getUserInfo</code> 메서드는 Access Token을 활용하여 해당 플랫폼의 UserInfo API로 요청을 보내 응답을 반환한다.</p>\n<p><code class=\"inline-code\">OAuthRequest</code> 객체를 선언하여 요청 메서드와 대상 URL을 지정한다. 이후 <code class=\"inline-code\">service.signRequest</code>를 통해 <code class=\"inline-code\">service</code>에 요청을 등록하고, <code class=\"inline-code\">service.execute</code>로 해당 요청을 수행한다.</p>\n<p><code class=\"inline-code\">getUserInfoEndPoint</code> 메서드는 각 플랫폼의 UserInfo API URL을 반환하는 추상 메서드로, 플랫폼마다 URL이 다르기 때문에 추상 객체로 선언하여 하위 플랫폼 인증 모듈에게 구현 책임을 위임한다.</p>\n<p><code class=\"inline-code\">getUserInfoBean</code>는 <code class=\"inline-code\">getUserInfo</code>의 응답을 받아 <code class=\"inline-code\">UserInfoBean</code> DTO로 변환하여 이를 반환하는 추상 메서드다. 참고로 <code class=\"inline-code\">UserInfoBean</code>은 scribeJAVA에 포함된 것이 아니라, 직접 작성한 DTO 객체다.</p>\n<p>플랫폼마다 사용자 정보의 응답값이 다르기 때문에, 이를 적절히 대응하고 값을 반환하고자 설계된 메서드다. 이 역시 하위 플랫폼 인증 모듈에게 구현을 위임한다.</p>\n<h3 id=\"연동-해제 메서드\">연동 해제 메서드 <a href=\"#연동-해제 메서드\">🔗</a></h3><p>플랫폼으로부터 완전히 연동을 해제하는 메서드가 필요하다.</p>\n<p>이는 단순히 로그아웃이 아니라, 플랫폼과 해당 사용자의 연결을 완전히 파기한다. 이 과정에서 사용자의 관련 데이터 및 정보 제공 동의 이력 역시 같이 파기된다.</p>\n<p>연동 해제 후 다시 로그인을 하게 되면, 처음 로그인을 수행하는 것 처럼 약관과 정보 제공 동의를 다시 선택해야한다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">deleteInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> access<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>연동 해제의 경우 OAuth의 범주에선 살짝 벗어나있어서, 이 역시도 동일한 인터페이스를 가지진 않는다. 각 플랫폼마다의 구현이 천차만별이므로 추상 메서드로 정의한다.</p>\n<h3 id=\"정보-제공 동의 갱신 URL 반환 메서드\">정보 제공 동의 갱신 URL 반환 메서드 <a href=\"#정보-제공 동의 갱신 URL 반환 메서드\">🔗</a></h3><p>서비스를 운영하다보면 사용자에게 요구할 정보가 변경되기도 한다.</p>\n<p>만약 한참 잘 운영하다가 사용자에게 추가적인 정보를 받아야만 한다면? 정보를 호출해도 동의 내역 자체가 없으니 관련 정보는 얻을 수조차 없다.</p>\n<p>이러한 상황에 대비해 정보 제공 동의를 갱신하는 기능이 필요하다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUpdateAuthorizationUrl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>정보 제공 동의 갱신 역시 플랫폼마다 천차만별로 조금씩 다른 것 같다. 마찬가지로 추상 메서드로 정의하자.</p>\n<h3 id=\"API-객체 반환 메서드\">API 객체 반환 메서드 <a href=\"#API-객체 반환 메서드\">🔗</a></h3><p>마지막으로 scribeJAVA와 직접적인 관련은 없지만, API 관련 요소를 불러오기위한 메서드가 필요하다.</p>\n<p>OAuth2.0을 사용하기 위해 필요한 3가지 요소는 API Key, API Secret Key, Callback URL이 필요하다. 이를 하드코딩해서 코드 안에 녹이는 건 그리 좋은 방법은 아니다.</p>\n<p>플랫폼별 API 요소를 <code class=\"inline-code\">.properties</code> 파일로 관리하여 <code class=\"inline-code\">WEB-INF/</code> 아래에서 관리할 것이다.</p>\n<blockquote>\n<p><b class=\"orange-400\">WEB-INF의 특별함</b><br>Tomcat의 <code class=\"inline-code\">WEB-INF</code>는 조금 특별하다. 기본적으로 대상 경로 아래의 모든 폴더 및 파일은 웹 형태로 접근이 가능하지만, <code class=\"inline-code\">WEB-INF</code> 아래에 위치하는 폴더 및 파일은 배포 대상에서 제외되므로 접근할 수 없다. 하지만 파일 시스템엔 여전히 존재하고 있으므로, 이에 구애받지 않는 JAVA 등 Backend에서의 접근엔 지장이 없다.<br>API 키, 암호화 키 등 보안에 웹 서버 운영에 필요하면서도 각별한 보안이 요구되는 파일은 <code class=\"inline-code\">WEB-INF</code> 아래에 관리하는 것이 좋다.</p>\n</blockquote>\n<p>이렇게 관리하고 <code class=\"inline-code\">gitignore</code>에서 각 플랫폼의 설정파일을 제외하면 GitHub에 올려도 해당 파일을 제외하고 올린다. 따라서 이렇게 코드를 오픈해도 API 유출을 막을 수 있다.</p>\n<p>코드는 아래와 같다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ApiKeyBean</span> <span class=\"token function\">getApiKeyBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> platform<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>    <span class=\"token class-name\">ApiKeyBean</span> apiKeyBean<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>    apiKeyBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApiKeyBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>    </td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>    <span class=\"token comment\" data-tag=\"new\">// API 키 획득 시도</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6>    <span class=\"token keyword\">try</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span>platform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>        </td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>        apiKeyBean<span class=\"token punctuation\">.</span><span class=\"token function\">setApi</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>        apiKeyBean<span class=\"token punctuation\">.</span><span class=\"token function\">setSecret</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>        apiKeyBean<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14>    </td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15>    <span class=\"token comment\" data-tag=\"new\">// 예외</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20>    </td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21>    <span class=\"token keyword\">return</span> apiKeyBean<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token annotation punctuation\">@Getter</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token annotation punctuation\">@Setter</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiKeyBean</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>    <span class=\"token comment\" data-tag=\"new\">// API 키</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> api<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6>    </td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>    <span class=\"token comment\" data-tag=\"new\">// API SECRET 키</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secret<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>    </td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>    <span class=\"token comment\" data-tag=\"new\">// 콜백 URL</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> callback<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p><code class=\"inline-code\">ApiKeyBean</code>은 직접 설계한 객체로, 위 코드와 같다. <code class=\"inline-code\">lombok</code>이 적용되어 있다.</p>\n<p>JAVA는 <code class=\"inline-code\">.properties</code> 파일을 읽어 key-value 형태의 HashMap으로 변환해주는 기능이 있다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>PROPERTIES</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-properties\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>api={API_KEY}</td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>secret={SECRET_KEY}</td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>callback={CALLBACK_URL}</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>설정 파일은 위와 같다. 이 메서드를 활용하여 각 플랫폼별 API 설정파일을 불러오도록 구성한다.</p>\n<h2 id=\"AuthModule-전체 코드\">AuthModule 전체 코드 <a href=\"#AuthModule-전체 코드\">🔗</a></h2>\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">package</span> <span class=\"token namespace\">oauth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>module</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonProcessingException</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonNode</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>scribejava<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServiceBuilderOAuth20</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>scribejava<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultApi20</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>scribejava<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OAuth2AccessToken</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>scribejava<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OAuthRequest</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>scribejava<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>scribejava<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Verb</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>scribejava<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>oauth<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccessTokenRequestParams</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>scribejava<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>oauth<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OAuth20Service</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13><span class=\"token keyword\">import</span> <span class=\"token namespace\">global<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15><span class=\"token keyword\">import</span> <span class=\"token namespace\">oauth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApiKeyBean</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16><span class=\"token keyword\">import</span> <span class=\"token namespace\">oauth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserInfoBean</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpURLConnection</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=23><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=24><td class=\"line-number\" data-number=\"24\">24</td><td class=\"line-code\" data-number=24><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>charset<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=25><td class=\"line-number\" data-number=\"25\">25</td><td class=\"line-code\" data-number=25><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=26><td class=\"line-number\" data-number=\"26\">26</td><td class=\"line-code\" data-number=26><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=27><td class=\"line-number\" data-number=\"27\">27</td><td class=\"line-code\" data-number=27><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=28><td class=\"line-number\" data-number=\"28\">28</td><td class=\"line-code\" data-number=28></td></tr>\n<tr data-number=29><td class=\"line-number\" data-number=\"29\">29</td><td class=\"line-code\" data-number=29><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=30><td class=\"line-number\" data-number=\"30\">30</td><td class=\"line-code\" data-number=30><span class=\"token comment\" data-tag=\"new\"> * 인증 모듈 추상 클래스</span></td></tr>\n<tr data-number=31><td class=\"line-number\" data-number=\"31\">31</td><td class=\"line-code\" data-number=31><span class=\"token comment\" data-tag=\"new\"> *</span></td></tr>\n<tr data-number=32><td class=\"line-number\" data-number=\"32\">32</td><td class=\"line-code\" data-number=32><span class=\"token comment\" data-tag=\"new\"> * @author RWB</span></td></tr>\n<tr data-number=33><td class=\"line-number\" data-number=\"33\">33</td><td class=\"line-code\" data-number=33><span class=\"token comment\" data-tag=\"new\"> * @since 2021.09.29 Wed 23:30:47</span></td></tr>\n<tr data-number=34><td class=\"line-number\" data-number=\"34\">34</td><td class=\"line-code\" data-number=34><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=35><td class=\"line-number\" data-number=\"35\">35</td><td class=\"line-code\" data-number=35><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthModule</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultApi20</span></td></tr>\n<tr data-number=36><td class=\"line-number\" data-number=\"36\">36</td><td class=\"line-code\" data-number=36><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=37><td class=\"line-number\" data-number=\"37\">37</td><td class=\"line-code\" data-number=37>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">OAuth20Service</span> service<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=38><td class=\"line-number\" data-number=\"38\">38</td><td class=\"line-code\" data-number=38>    </td></tr>\n<tr data-number=39><td class=\"line-number\" data-number=\"39\">39</td><td class=\"line-code\" data-number=39>    <span class=\"token annotation punctuation\">@Getter</span></td></tr>\n<tr data-number=40><td class=\"line-number\" data-number=\"40\">40</td><td class=\"line-code\" data-number=40>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> unique<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=41><td class=\"line-number\" data-number=\"41\">41</td><td class=\"line-code\" data-number=41>    </td></tr>\n<tr data-number=42><td class=\"line-number\" data-number=\"42\">42</td><td class=\"line-code\" data-number=42>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=43><td class=\"line-number\" data-number=\"43\">43</td><td class=\"line-code\" data-number=43><span class=\"token comment\" data-tag=\"new\">     * 생성자 메서드</span></td></tr>\n<tr data-number=44><td class=\"line-number\" data-number=\"44\">44</td><td class=\"line-code\" data-number=44><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=45><td class=\"line-number\" data-number=\"45\">45</td><td class=\"line-code\" data-number=45><span class=\"token comment\" data-tag=\"new\">     * @param serviceBuilder: [ServiceBuilderOAuth20] API 서비스 빌더</span></td></tr>\n<tr data-number=46><td class=\"line-number\" data-number=\"46\">46</td><td class=\"line-code\" data-number=46><span class=\"token comment\" data-tag=\"new\">     * @param unique: [String] 유니크 키</span></td></tr>\n<tr data-number=47><td class=\"line-number\" data-number=\"47\">47</td><td class=\"line-code\" data-number=47><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=48><td class=\"line-number\" data-number=\"48\">48</td><td class=\"line-code\" data-number=48>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthModule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceBuilderOAuth20</span> serviceBuilder<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> unique<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=49><td class=\"line-number\" data-number=\"49\">49</td><td class=\"line-code\" data-number=49>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=50><td class=\"line-number\" data-number=\"50\">50</td><td class=\"line-code\" data-number=50>        service <span class=\"token operator\">=</span> serviceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=51><td class=\"line-number\" data-number=\"51\">51</td><td class=\"line-code\" data-number=51>        </td></tr>\n<tr data-number=52><td class=\"line-number\" data-number=\"52\">52</td><td class=\"line-code\" data-number=52>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unique <span class=\"token operator\">=</span> unique<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=53><td class=\"line-number\" data-number=\"53\">53</td><td class=\"line-code\" data-number=53>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=54><td class=\"line-number\" data-number=\"54\">54</td><td class=\"line-code\" data-number=54>    </td></tr>\n<tr data-number=55><td class=\"line-number\" data-number=\"55\">55</td><td class=\"line-code\" data-number=55>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserInfoEndPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=56><td class=\"line-number\" data-number=\"56\">56</td><td class=\"line-code\" data-number=56>    </td></tr>\n<tr data-number=57><td class=\"line-number\" data-number=\"57\">57</td><td class=\"line-code\" data-number=57>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserInfoBean</span> <span class=\"token function\">getUserInfoBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=58><td class=\"line-number\" data-number=\"58\">58</td><td class=\"line-code\" data-number=58>    </td></tr>\n<tr data-number=59><td class=\"line-number\" data-number=\"59\">59</td><td class=\"line-code\" data-number=59>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">deleteInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> access<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=60><td class=\"line-number\" data-number=\"60\">60</td><td class=\"line-code\" data-number=60>    </td></tr>\n<tr data-number=61><td class=\"line-number\" data-number=\"61\">61</td><td class=\"line-code\" data-number=61>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUpdateAuthorizationUrl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=62><td class=\"line-number\" data-number=\"62\">62</td><td class=\"line-code\" data-number=62>    </td></tr>\n<tr data-number=63><td class=\"line-number\" data-number=\"63\">63</td><td class=\"line-code\" data-number=63>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=64><td class=\"line-number\" data-number=\"64\">64</td><td class=\"line-code\" data-number=64><span class=\"token comment\" data-tag=\"new\">     * 인증 URL 반환 메서드</span></td></tr>\n<tr data-number=65><td class=\"line-number\" data-number=\"65\">65</td><td class=\"line-code\" data-number=65><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=66><td class=\"line-number\" data-number=\"66\">66</td><td class=\"line-code\" data-number=66><span class=\"token comment\" data-tag=\"new\">     * @param state: [String] 고유 상태값</span></td></tr>\n<tr data-number=67><td class=\"line-number\" data-number=\"67\">67</td><td class=\"line-code\" data-number=67><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=68><td class=\"line-number\" data-number=\"68\">68</td><td class=\"line-code\" data-number=68><span class=\"token comment\" data-tag=\"new\">     * @return [String] 인증 URL</span></td></tr>\n<tr data-number=69><td class=\"line-number\" data-number=\"69\">69</td><td class=\"line-code\" data-number=69><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=70><td class=\"line-number\" data-number=\"70\">70</td><td class=\"line-code\" data-number=70>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAuthorizationUrl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=71><td class=\"line-number\" data-number=\"71\">71</td><td class=\"line-code\" data-number=71>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=72><td class=\"line-number\" data-number=\"72\">72</td><td class=\"line-code\" data-number=72>        <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorizationUrl</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=73><td class=\"line-number\" data-number=\"73\">73</td><td class=\"line-code\" data-number=73>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=74><td class=\"line-number\" data-number=\"74\">74</td><td class=\"line-code\" data-number=74>    </td></tr>\n<tr data-number=75><td class=\"line-number\" data-number=\"75\">75</td><td class=\"line-code\" data-number=75>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=76><td class=\"line-number\" data-number=\"76\">76</td><td class=\"line-code\" data-number=76><span class=\"token comment\" data-tag=\"new\">     * 접근 토큰 반환 메서드</span></td></tr>\n<tr data-number=77><td class=\"line-number\" data-number=\"77\">77</td><td class=\"line-code\" data-number=77><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=78><td class=\"line-number\" data-number=\"78\">78</td><td class=\"line-code\" data-number=78><span class=\"token comment\" data-tag=\"new\">     * @param code: [String] 인증 코드</span></td></tr>\n<tr data-number=79><td class=\"line-number\" data-number=\"79\">79</td><td class=\"line-code\" data-number=79><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=80><td class=\"line-number\" data-number=\"80\">80</td><td class=\"line-code\" data-number=80><span class=\"token comment\" data-tag=\"new\">     * @return [OAuth2AccessToken] 접근 토큰</span></td></tr>\n<tr data-number=81><td class=\"line-number\" data-number=\"81\">81</td><td class=\"line-code\" data-number=81><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=82><td class=\"line-number\" data-number=\"82\">82</td><td class=\"line-code\" data-number=82><span class=\"token comment\" data-tag=\"new\">     * @throws IOException 데이터 입출력 예외</span></td></tr>\n<tr data-number=83><td class=\"line-number\" data-number=\"83\">83</td><td class=\"line-code\" data-number=83><span class=\"token comment\" data-tag=\"new\">     * @throws ExecutionException 실행 예외</span></td></tr>\n<tr data-number=84><td class=\"line-number\" data-number=\"84\">84</td><td class=\"line-code\" data-number=84><span class=\"token comment\" data-tag=\"new\">     * @throws InterruptedException 인터럽트 예외</span></td></tr>\n<tr data-number=85><td class=\"line-number\" data-number=\"85\">85</td><td class=\"line-code\" data-number=85><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=86><td class=\"line-number\" data-number=\"86\">86</td><td class=\"line-code\" data-number=86>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OAuth2AccessToken</span> <span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span></td></tr>\n<tr data-number=87><td class=\"line-number\" data-number=\"87\">87</td><td class=\"line-code\" data-number=87>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=88><td class=\"line-number\" data-number=\"88\">88</td><td class=\"line-code\" data-number=88>        <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=89><td class=\"line-number\" data-number=\"89\">89</td><td class=\"line-code\" data-number=89>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=90><td class=\"line-number\" data-number=\"90\">90</td><td class=\"line-code\" data-number=90>    </td></tr>\n<tr data-number=91><td class=\"line-number\" data-number=\"91\">91</td><td class=\"line-code\" data-number=91>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=92><td class=\"line-number\" data-number=\"92\">92</td><td class=\"line-code\" data-number=92><span class=\"token comment\" data-tag=\"new\">     * 접근 토큰 반환 메서드</span></td></tr>\n<tr data-number=93><td class=\"line-number\" data-number=\"93\">93</td><td class=\"line-code\" data-number=93><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=94><td class=\"line-number\" data-number=\"94\">94</td><td class=\"line-code\" data-number=94><span class=\"token comment\" data-tag=\"new\">     * @param params: [AccessTokenRequestParams] AccessTokenRequestParams 객체</span></td></tr>\n<tr data-number=95><td class=\"line-number\" data-number=\"95\">95</td><td class=\"line-code\" data-number=95><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=96><td class=\"line-number\" data-number=\"96\">96</td><td class=\"line-code\" data-number=96><span class=\"token comment\" data-tag=\"new\">     * @return [OAuth2AccessToken] 접근 토큰</span></td></tr>\n<tr data-number=97><td class=\"line-number\" data-number=\"97\">97</td><td class=\"line-code\" data-number=97><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=98><td class=\"line-number\" data-number=\"98\">98</td><td class=\"line-code\" data-number=98><span class=\"token comment\" data-tag=\"new\">     * @throws IOException 데이터 입출력 예외</span></td></tr>\n<tr data-number=99><td class=\"line-number\" data-number=\"99\">99</td><td class=\"line-code\" data-number=99><span class=\"token comment\" data-tag=\"new\">     * @throws ExecutionException 실행 예외</span></td></tr>\n<tr data-number=100><td class=\"line-number\" data-number=\"100\">100</td><td class=\"line-code\" data-number=100><span class=\"token comment\" data-tag=\"new\">     * @throws InterruptedException 인터럽트 예외</span></td></tr>\n<tr data-number=101><td class=\"line-number\" data-number=\"101\">101</td><td class=\"line-code\" data-number=101><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=102><td class=\"line-number\" data-number=\"102\">102</td><td class=\"line-code\" data-number=102>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OAuth2AccessToken</span> <span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccessTokenRequestParams</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span></td></tr>\n<tr data-number=103><td class=\"line-number\" data-number=\"103\">103</td><td class=\"line-code\" data-number=103>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=104><td class=\"line-number\" data-number=\"104\">104</td><td class=\"line-code\" data-number=104>        <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=105><td class=\"line-number\" data-number=\"105\">105</td><td class=\"line-code\" data-number=105>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=106><td class=\"line-number\" data-number=\"106\">106</td><td class=\"line-code\" data-number=106>    </td></tr>\n<tr data-number=107><td class=\"line-number\" data-number=\"107\">107</td><td class=\"line-code\" data-number=107>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=108><td class=\"line-number\" data-number=\"108\">108</td><td class=\"line-code\" data-number=108><span class=\"token comment\" data-tag=\"new\">     * 접근 토큰 갱신 및 반환 메서드</span></td></tr>\n<tr data-number=109><td class=\"line-number\" data-number=\"109\">109</td><td class=\"line-code\" data-number=109><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=110><td class=\"line-number\" data-number=\"110\">110</td><td class=\"line-code\" data-number=110><span class=\"token comment\" data-tag=\"new\">     * @param refresh: [String] 리프레쉬 토큰</span></td></tr>\n<tr data-number=111><td class=\"line-number\" data-number=\"111\">111</td><td class=\"line-code\" data-number=111><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=112><td class=\"line-number\" data-number=\"112\">112</td><td class=\"line-code\" data-number=112><span class=\"token comment\" data-tag=\"new\">     * @return [OAuth2AccessToken] 접근 토큰</span></td></tr>\n<tr data-number=113><td class=\"line-number\" data-number=\"113\">113</td><td class=\"line-code\" data-number=113><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=114><td class=\"line-number\" data-number=\"114\">114</td><td class=\"line-code\" data-number=114><span class=\"token comment\" data-tag=\"new\">     * @throws IOException 데이터 입출력 예외</span></td></tr>\n<tr data-number=115><td class=\"line-number\" data-number=\"115\">115</td><td class=\"line-code\" data-number=115><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=116><td class=\"line-number\" data-number=\"116\">116</td><td class=\"line-code\" data-number=116>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OAuth2AccessToken</span> <span class=\"token function\">getRefreshAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> refresh<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span></td></tr>\n<tr data-number=117><td class=\"line-number\" data-number=\"117\">117</td><td class=\"line-code\" data-number=117>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=118><td class=\"line-number\" data-number=\"118\">118</td><td class=\"line-code\" data-number=118>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=119><td class=\"line-number\" data-number=\"119\">119</td><td class=\"line-code\" data-number=119>        params<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client_id\"</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getApiKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=120><td class=\"line-number\" data-number=\"120\">120</td><td class=\"line-code\" data-number=120>        params<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client_secret\"</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">getApiSecret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=121><td class=\"line-number\" data-number=\"121\">121</td><td class=\"line-code\" data-number=121>        params<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"refresh_token\"</span><span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=122><td class=\"line-number\" data-number=\"122\">122</td><td class=\"line-code\" data-number=122>        </td></tr>\n<tr data-number=123><td class=\"line-number\" data-number=\"123\">123</td><td class=\"line-code\" data-number=123>        <span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=124><td class=\"line-number\" data-number=\"124\">124</td><td class=\"line-code\" data-number=124>        </td></tr>\n<tr data-number=125><td class=\"line-number\" data-number=\"125\">125</td><td class=\"line-code\" data-number=125>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> param <span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=126><td class=\"line-number\" data-number=\"126\">126</td><td class=\"line-code\" data-number=126>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=127><td class=\"line-number\" data-number=\"127\">127</td><td class=\"line-code\" data-number=127>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=128><td class=\"line-number\" data-number=\"128\">128</td><td class=\"line-code\" data-number=128>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=129><td class=\"line-number\" data-number=\"129\">129</td><td class=\"line-code\" data-number=129>        </td></tr>\n<tr data-number=130><td class=\"line-number\" data-number=\"130\">130</td><td class=\"line-code\" data-number=130>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramBytes <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=131><td class=\"line-number\" data-number=\"131\">131</td><td class=\"line-code\" data-number=131>        </td></tr>\n<tr data-number=132><td class=\"line-number\" data-number=\"132\">132</td><td class=\"line-code\" data-number=132>        <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRefreshTokenEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=133><td class=\"line-number\" data-number=\"133\">133</td><td class=\"line-code\" data-number=133>        </td></tr>\n<tr data-number=134><td class=\"line-number\" data-number=\"134\">134</td><td class=\"line-code\" data-number=134>        <span class=\"token class-name\">HttpURLConnection</span> connection <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpURLConnection</span><span class=\"token punctuation\">)</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=135><td class=\"line-number\" data-number=\"135\">135</td><td class=\"line-code\" data-number=135>        connection<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=136><td class=\"line-number\" data-number=\"136\">136</td><td class=\"line-code\" data-number=136>        connection<span class=\"token punctuation\">.</span><span class=\"token function\">setDoOutput</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=137><td class=\"line-number\" data-number=\"137\">137</td><td class=\"line-code\" data-number=137>        connection<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>paramBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=138><td class=\"line-number\" data-number=\"138\">138</td><td class=\"line-code\" data-number=138>        </td></tr>\n<tr data-number=139><td class=\"line-number\" data-number=\"139\">139</td><td class=\"line-code\" data-number=139>        <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=140><td class=\"line-number\" data-number=\"140\">140</td><td class=\"line-code\" data-number=140>        </td></tr>\n<tr data-number=141><td class=\"line-number\" data-number=\"141\">141</td><td class=\"line-code\" data-number=141>        <span class=\"token class-name\">StringBuilder</span> responseBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=142><td class=\"line-number\" data-number=\"142\">142</td><td class=\"line-code\" data-number=142>        <span class=\"token class-name\">String</span> temp<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=143><td class=\"line-number\" data-number=\"143\">143</td><td class=\"line-code\" data-number=143>        </td></tr>\n<tr data-number=144><td class=\"line-number\" data-number=\"144\">144</td><td class=\"line-code\" data-number=144>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=145><td class=\"line-number\" data-number=\"145\">145</td><td class=\"line-code\" data-number=145>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=146><td class=\"line-number\" data-number=\"146\">146</td><td class=\"line-code\" data-number=146>            responseBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=147><td class=\"line-number\" data-number=\"147\">147</td><td class=\"line-code\" data-number=147>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=148><td class=\"line-number\" data-number=\"148\">148</td><td class=\"line-code\" data-number=148>        </td></tr>\n<tr data-number=149><td class=\"line-number\" data-number=\"149\">149</td><td class=\"line-code\" data-number=149>        reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=150><td class=\"line-number\" data-number=\"150\">150</td><td class=\"line-code\" data-number=150>        </td></tr>\n<tr data-number=151><td class=\"line-number\" data-number=\"151\">151</td><td class=\"line-code\" data-number=151>        <span class=\"token class-name\">ObjectMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=152><td class=\"line-number\" data-number=\"152\">152</td><td class=\"line-code\" data-number=152>        </td></tr>\n<tr data-number=153><td class=\"line-number\" data-number=\"153\">153</td><td class=\"line-code\" data-number=153>        <span class=\"token class-name\">JsonNode</span> node <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readTree</span><span class=\"token punctuation\">(</span>responseBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=154><td class=\"line-number\" data-number=\"154\">154</td><td class=\"line-code\" data-number=154>        </td></tr>\n<tr data-number=155><td class=\"line-number\" data-number=\"155\">155</td><td class=\"line-code\" data-number=155>        <span class=\"token class-name\">String</span> access_token <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access_token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">textValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=156><td class=\"line-number\" data-number=\"156\">156</td><td class=\"line-code\" data-number=156>        <span class=\"token class-name\">String</span> token_type <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token_type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">textValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=157><td class=\"line-number\" data-number=\"157\">157</td><td class=\"line-code\" data-number=157>        <span class=\"token keyword\">int</span> expires_in <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expires_in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=158><td class=\"line-number\" data-number=\"158\">158</td><td class=\"line-code\" data-number=158>        </td></tr>\n<tr data-number=159><td class=\"line-number\" data-number=\"159\">159</td><td class=\"line-code\" data-number=159>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OAuth2AccessToken</span><span class=\"token punctuation\">(</span>access_token<span class=\"token punctuation\">,</span> token_type<span class=\"token punctuation\">,</span> expires_in<span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> responseBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=160><td class=\"line-number\" data-number=\"160\">160</td><td class=\"line-code\" data-number=160>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=161><td class=\"line-number\" data-number=\"161\">161</td><td class=\"line-code\" data-number=161>    </td></tr>\n<tr data-number=162><td class=\"line-number\" data-number=\"162\">162</td><td class=\"line-code\" data-number=162>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=163><td class=\"line-number\" data-number=\"163\">163</td><td class=\"line-code\" data-number=163><span class=\"token comment\" data-tag=\"new\">     * 사용자 정보 응답 반환 메서드</span></td></tr>\n<tr data-number=164><td class=\"line-number\" data-number=\"164\">164</td><td class=\"line-code\" data-number=164><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=165><td class=\"line-number\" data-number=\"165\">165</td><td class=\"line-code\" data-number=165><span class=\"token comment\" data-tag=\"new\">     * @param access: [String] 접근 토큰</span></td></tr>\n<tr data-number=166><td class=\"line-number\" data-number=\"166\">166</td><td class=\"line-code\" data-number=166><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=167><td class=\"line-number\" data-number=\"167\">167</td><td class=\"line-code\" data-number=167><span class=\"token comment\" data-tag=\"new\">     * @return [Response] 사용자 정보 응답</span></td></tr>\n<tr data-number=168><td class=\"line-number\" data-number=\"168\">168</td><td class=\"line-code\" data-number=168><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=169><td class=\"line-number\" data-number=\"169\">169</td><td class=\"line-code\" data-number=169><span class=\"token comment\" data-tag=\"new\">     * @throws IOException 데이터 입출력 예외</span></td></tr>\n<tr data-number=170><td class=\"line-number\" data-number=\"170\">170</td><td class=\"line-code\" data-number=170><span class=\"token comment\" data-tag=\"new\">     * @throws ExecutionException 실행 예외</span></td></tr>\n<tr data-number=171><td class=\"line-number\" data-number=\"171\">171</td><td class=\"line-code\" data-number=171><span class=\"token comment\" data-tag=\"new\">     * @throws InterruptedException 인터럽트 예외</span></td></tr>\n<tr data-number=172><td class=\"line-number\" data-number=\"172\">172</td><td class=\"line-code\" data-number=172><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=173><td class=\"line-number\" data-number=\"173\">173</td><td class=\"line-code\" data-number=173>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Response</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> access<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span></td></tr>\n<tr data-number=174><td class=\"line-number\" data-number=\"174\">174</td><td class=\"line-code\" data-number=174>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=175><td class=\"line-number\" data-number=\"175\">175</td><td class=\"line-code\" data-number=175>        <span class=\"token class-name\">OAuthRequest</span> oAuthRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OAuthRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Verb</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">,</span> <span class=\"token function\">getUserInfoEndPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=176><td class=\"line-number\" data-number=\"176\">176</td><td class=\"line-code\" data-number=176>        service<span class=\"token punctuation\">.</span><span class=\"token function\">signRequest</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> oAuthRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=177><td class=\"line-number\" data-number=\"177\">177</td><td class=\"line-code\" data-number=177>        </td></tr>\n<tr data-number=178><td class=\"line-number\" data-number=\"178\">178</td><td class=\"line-code\" data-number=178>        <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>oAuthRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=179><td class=\"line-number\" data-number=\"179\">179</td><td class=\"line-code\" data-number=179>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=180><td class=\"line-number\" data-number=\"180\">180</td><td class=\"line-code\" data-number=180>    </td></tr>\n<tr data-number=181><td class=\"line-number\" data-number=\"181\">181</td><td class=\"line-code\" data-number=181>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=182><td class=\"line-number\" data-number=\"182\">182</td><td class=\"line-code\" data-number=182><span class=\"token comment\" data-tag=\"new\">     * 접근 토큰 재발급 요청 URL 반환 메서드</span></td></tr>\n<tr data-number=183><td class=\"line-number\" data-number=\"183\">183</td><td class=\"line-code\" data-number=183><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=184><td class=\"line-number\" data-number=\"184\">184</td><td class=\"line-code\" data-number=184><span class=\"token comment\" data-tag=\"new\">     * @return [String] 접근 토큰 재발급 요청 URL</span></td></tr>\n<tr data-number=185><td class=\"line-number\" data-number=\"185\">185</td><td class=\"line-code\" data-number=185><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=186><td class=\"line-number\" data-number=\"186\">186</td><td class=\"line-code\" data-number=186>    <span class=\"token annotation punctuation\">@Override</span></td></tr>\n<tr data-number=187><td class=\"line-number\" data-number=\"187\">187</td><td class=\"line-code\" data-number=187>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRefreshTokenEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=188><td class=\"line-number\" data-number=\"188\">188</td><td class=\"line-code\" data-number=188>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=189><td class=\"line-number\" data-number=\"189\">189</td><td class=\"line-code\" data-number=189>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAccessTokenEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"?grant_type=refresh_token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=190><td class=\"line-number\" data-number=\"190\">190</td><td class=\"line-code\" data-number=190>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=191><td class=\"line-number\" data-number=\"191\">191</td><td class=\"line-code\" data-number=191>    </td></tr>\n<tr data-number=192><td class=\"line-number\" data-number=\"192\">192</td><td class=\"line-code\" data-number=192>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=193><td class=\"line-number\" data-number=\"193\">193</td><td class=\"line-code\" data-number=193><span class=\"token comment\" data-tag=\"new\">     * API 키 객체 반환 메서드</span></td></tr>\n<tr data-number=194><td class=\"line-number\" data-number=\"194\">194</td><td class=\"line-code\" data-number=194><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=195><td class=\"line-number\" data-number=\"195\">195</td><td class=\"line-code\" data-number=195><span class=\"token comment\" data-tag=\"new\">     * @param platform: [String] 플랫폼</span></td></tr>\n<tr data-number=196><td class=\"line-number\" data-number=\"196\">196</td><td class=\"line-code\" data-number=196><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=197><td class=\"line-number\" data-number=\"197\">197</td><td class=\"line-code\" data-number=197><span class=\"token comment\" data-tag=\"new\">     * @return [ApiKeyBean] API 키 객체</span></td></tr>\n<tr data-number=198><td class=\"line-number\" data-number=\"198\">198</td><td class=\"line-code\" data-number=198><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=199><td class=\"line-number\" data-number=\"199\">199</td><td class=\"line-code\" data-number=199>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ApiKeyBean</span> <span class=\"token function\">getApiKeyBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> platform<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=200><td class=\"line-number\" data-number=\"200\">200</td><td class=\"line-code\" data-number=200>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=201><td class=\"line-number\" data-number=\"201\">201</td><td class=\"line-code\" data-number=201>        <span class=\"token class-name\">ApiKeyBean</span> apiKeyBean<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=202><td class=\"line-number\" data-number=\"202\">202</td><td class=\"line-code\" data-number=202>        apiKeyBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApiKeyBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=203><td class=\"line-number\" data-number=\"203\">203</td><td class=\"line-code\" data-number=203>        </td></tr>\n<tr data-number=204><td class=\"line-number\" data-number=\"204\">204</td><td class=\"line-code\" data-number=204>        <span class=\"token comment\" data-tag=\"new\">// API 키 획득 시도</span></td></tr>\n<tr data-number=205><td class=\"line-number\" data-number=\"205\">205</td><td class=\"line-code\" data-number=205>        <span class=\"token keyword\">try</span></td></tr>\n<tr data-number=206><td class=\"line-number\" data-number=\"206\">206</td><td class=\"line-code\" data-number=206>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=207><td class=\"line-number\" data-number=\"207\">207</td><td class=\"line-code\" data-number=207>            <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span>platform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=208><td class=\"line-number\" data-number=\"208\">208</td><td class=\"line-code\" data-number=208>            </td></tr>\n<tr data-number=209><td class=\"line-number\" data-number=\"209\">209</td><td class=\"line-code\" data-number=209>            apiKeyBean<span class=\"token punctuation\">.</span><span class=\"token function\">setApi</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=210><td class=\"line-number\" data-number=\"210\">210</td><td class=\"line-code\" data-number=210>            apiKeyBean<span class=\"token punctuation\">.</span><span class=\"token function\">setSecret</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=211><td class=\"line-number\" data-number=\"211\">211</td><td class=\"line-code\" data-number=211>            apiKeyBean<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=212><td class=\"line-number\" data-number=\"212\">212</td><td class=\"line-code\" data-number=212>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=213><td class=\"line-number\" data-number=\"213\">213</td><td class=\"line-code\" data-number=213>        </td></tr>\n<tr data-number=214><td class=\"line-number\" data-number=\"214\">214</td><td class=\"line-code\" data-number=214>        <span class=\"token comment\" data-tag=\"new\">// 예외</span></td></tr>\n<tr data-number=215><td class=\"line-number\" data-number=\"215\">215</td><td class=\"line-code\" data-number=215>        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=216><td class=\"line-number\" data-number=\"216\">216</td><td class=\"line-code\" data-number=216>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=217><td class=\"line-number\" data-number=\"217\">217</td><td class=\"line-code\" data-number=217>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=218><td class=\"line-number\" data-number=\"218\">218</td><td class=\"line-code\" data-number=218>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=219><td class=\"line-number\" data-number=\"219\">219</td><td class=\"line-code\" data-number=219>        </td></tr>\n<tr data-number=220><td class=\"line-number\" data-number=\"220\">220</td><td class=\"line-code\" data-number=220>        <span class=\"token keyword\">return</span> apiKeyBean<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=221><td class=\"line-number\" data-number=\"221\">221</td><td class=\"line-code\" data-number=221>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=222><td class=\"line-number\" data-number=\"222\">222</td><td class=\"line-code\" data-number=222><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>전체 소스는 위와 같다.</p>\n<p>중간에 한 번씩 사용되는 <code class=\"inline-code\">Util</code> 객체는 해당 프로젝트에서 범용적으로 사용되는 메서드를 모아놓은 공통 모듈이다.</p>\n<h1 id=\"정리\">정리 <a href=\"#정리\">🔗</a></h1><p>scribeJAVA를 통해 인증 모듈의 원형이되는 추상 객체를 구현했다. 해당 모듈을 토대로 각 플랫폼별 인증 모듈을 확장하여 개발할 수 있을 것이다.</p>\n<p>다음 장에서는 본격적으로 플랫폼별 OAuth 서비스 신청과 인증 모듈 구현에 대해 다룬다.</p>\n","url":["2021-10-20-oauth2-java-server-3","2021","10","20","oauth2-java-server-3"],"toc":[{"text":"개요","tag":"개요","depth":1},{"text":"OAuth 인증 모듈 구현하기","tag":"OAuth-인증 모듈 구현하기","depth":1},{"text":"scribeJAVA 적용하기","tag":"scribeJAVA-적용하기","depth":2},{"text":"scribeJAVA 사용하기","tag":"scribeJAVA-사용하기","depth":2},{"text":"OAuth20Service 객체 생성하기","tag":"OAuth20Service-객체 생성하기","depth":3},{"text":"AuthModule 생성하기","tag":"AuthModule-생성하기","depth":2},{"text":"플랫폼 로그인 URL 반환 메서드","tag":"플랫폼-로그인 URL 반환 메서드","depth":3},{"text":"OAuth2AccessToken 반환 메서드","tag":"OAuth2AccessToken-반환 메서드","depth":3},{"text":"Access Token 갱신 메서드","tag":"Access-Token 갱신 메서드","depth":3},{"text":"유저 정보 호출 메서드","tag":"유저-정보 호출 메서드","depth":3},{"text":"연동 해제 메서드","tag":"연동-해제 메서드","depth":3},{"text":"정보 제공 동의 갱신 URL 반환 메서드","tag":"정보-제공 동의 갱신 URL 반환 메서드","depth":3},{"text":"API 객체 반환 메서드","tag":"API-객체 반환 메서드","depth":3},{"text":"AuthModule 전체 코드","tag":"AuthModule-전체 코드","depth":2},{"text":"정리","tag":"정리","depth":1}]},"hash":"be28863335a"},"__N_SSG":true}