{"pageProps":{"header":{"title":"[JAVA] split vs StringTokenizer","excerpt":"알고리즘을 풀다보면, 필연적으로 입력값 처리를 하게된다. 다양한 케이스에 대응하기 위해, 사용자의 값을 직접 입력받아 이를 처리하게 된다. 이 때, 우리는 십중팔구 이와 같은 상황이 발생한다. 데이터셋을 보내기 위해 데이터의 모음을 구분자(공백 혹은 쉼표)를 통해 하나의 문자열로 합쳐 전달한다.","coverImage":"https://www.textrazor.com/img/letters3.png","date":"2021-06-14T01:56:01","type":"posts","category":"JAVA","tag":["JAVA(자바)","String(문자열)","split","StringTokenizer"],"comment":true,"publish":true},"name":"2021-06-14-split-and-stringtokenizer.md","url":["2021-06-14-split-and-stringtokenizer","2021","06","14","split-and-stringtokenizer"],"toc":"<ul><li><a href=\"#개요\">개요</a></li><ul><li><a href=\"#테스트-환경\">테스트 환경</a></li></ul><li><a href=\"#split-메소드\">split 메소드</a></li><li><a href=\"#StringTokenizer\">StringTokenizer</a></li><li><a href=\"#속도-비교\">속도 비교</a></li><li><a href=\"#결론\">결론</a></li></ul>","content":"<h1 id=\"개요\">개요 <a href=\"#개요\">🔗</a></h1><p>알고리즘을 풀다보면, 필연적으로 입력값 처리를 하게된다. 다양한 케이스에 대응하기 위해, 사용자의 값을 직접 입력받아 이를 처리하게 된다. 이 때, 우리는 십중팔구 이와 같은 상황이 발생한다. 데이터셋을 보내기 위해 데이터의 모음을 구분자(공백 혹은 쉼표)를 통해 하나의 문자열로 합쳐 전달한다.</p>\n<div class=\"katex-block\"><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">&quot;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">&quot;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\">&quot;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">&quot;</span><span class=\"mclose\">]</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">BC</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">&quot;</span></span></span></span></div><p>이를테면, 위와 같이 <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">&quot;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">&quot;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\">&quot;</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">&quot;</span><span class=\"mclose\">]</span></span></span></span>와 같은 배열을 전달하기 위해, 각 요소를 공백으로 구분하여 <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">&quot;</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">BC</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">&quot;</span></span></span></span>와 같이 전달하게 된다. 보통 내 경우 <code class=\"inline-code\">split</code> 메소드를 활용하는데, 알고리즘 풀이를 찾아보다보니 <code class=\"inline-code\">StringTokenizer</code>이라는 <span class=\"orange-400\">class</span>를 쓰는 코드들이 더러있었다. 처음보는 <span class=\"orange-400\">class</span>인데다, 접근성이 훨씬 뛰어난 <code class=\"inline-code\">split</code>를 굳이 대체해서 쓰는 이유가 있을거라 판단. 직접 퍼포먼스를 비교해보기로 했다. 알고리즘은 수행속도 역시 중요한 지표로 작용하기 때문에, 조금이라도 시간을 줄일 필요가 있다. 안타깝게도 나는 코드 최적화 실력이 최악이라, 이런식으로 줄일 수 있는 자잘한 부분은 줄여야한다. 핵심 코드를 최적화할 생각은 안 하고 이런데서 시간을 단축하는게 꼭 다이어트한답시고 피자 먹으면서 제로콜라 마시는 느낌이긴 하나, <code class=\"inline-code\">StringTokenizer</code>이 더 성능이 뛰어나다면 앞으로 푸는 알고리즘에 적용할 가치가 있을 것이다.</p>\n<h2 id=\"테스트-환경\">테스트 환경 <a href=\"#테스트-환경\">🔗</a></h2>\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">내용</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">언어</td>\n<td align=\"center\">\n\t\t<a href=\"https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange\" target=\"_blank\" data-title=\"null\">\n\t\t\t<img src=\"https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange\" alt=\"JAVA\" />\n\t\t</a>\n\t\t</td>\n</tr>\n<tr>\n<td align=\"center\">OS</td>\n<td align=\"center\">Windows 10 64bit</td>\n</tr>\n<tr>\n<td align=\"center\">CPU</td>\n<td align=\"center\">Intel i7-10700K</td>\n</tr>\n<tr>\n<td align=\"center\">RAM</td>\n<td align=\"center\">32GB</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<h1 id=\"split-메소드\">split 메소드 <a href=\"#split-메소드\">🔗</a></h1><p><code class=\"inline-code\">split</code> 메소드는 특정 <span class=\"lightBlue-400\">구분자</span>로 문자열을 분리하는 전통적인 메소드다. 굳이 JAVA가 아니더라도 C(++, #), JavaScript, Python 등 여러 언어에 존재하는 키워드라 어떤 언어든 문자열을 구분할 때 제일 먼저 시도하는 방법이다.</p>\n<p>JAVA의 <code class=\"inline-code\">split</code>은 문자열 데이터 형식인 <code class=\"inline-code\">String</code> <span class=\"orange-400\">class</span>에 포함된 메소드다. 문자열 데이터라면 <code class=\"inline-code\">split</code>를 호출하여 문자열을 구분할 수 있다. 반환값은 <code class=\"inline-code\">String[]</code> 객체.</p>\n<p>사용법은 아래와 같다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"> * 메인 클래스</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token comment\" data-tag=\"new\"> *</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token comment\" data-tag=\"new\"> * @author RWB</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\"> * @since 2021.06.13 Sun 22:50:57</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11><span class=\"token comment\" data-tag=\"new\">     * 메인 함수</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13><span class=\"token comment\" data-tag=\"new\">     * @param args: [String[]] 매개변수</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17>        <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"A B C D\"</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18>        </td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> splited <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20>        </td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>splited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=23><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>출력은 아래와 같다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>TC</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-tc\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>[A, B, C, D]</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>문자열 <code class=\"inline-code\">A B C D</code>가 공백을 기준으로 <code class=\"inline-code\">[A, B, C, D]</code>로 분리된걸 확인할 수 있다. 그 밖에 한 가지 특이한 점이 있는데, JAVA의 <code class=\"inline-code\">split</code> 메소드는 <span class=\"red-A400\">구분자에 정규식을 적용</span>할 수 있다. 이를 잘만 이용하면 복합적인 구분자를 사용할 수도 있다.</p>\n<h1 id=\"StringTokenizer\">StringTokenizer <a href=\"#StringTokenizer\">🔗</a></h1><p>이 포스팅을 쓰게 만든 직접적인 원인. <code class=\"inline-code\">StringTokenizer</code> 역시 문자열을 구분하는데 특화된 <span class=\"orange-400\">class</span>의 일종이다. <code class=\"inline-code\">String[]</code>을 반환하는 <code class=\"inline-code\">split</code>과 달리 그 자체로 하나의 개별적인 <span class=\"orange-400\">class</span>라는 차이가 있다.</p>\n<p><code class=\"inline-code\">StringTokenizer tokenizer = new StringTokenizer(&quot;문자열&quot;);</code>과 같은 형태로 초기화해서 사용한다. <code class=\"inline-code\">StringTokenizer</code> 인스턴스를 사용하는데 알아두면 좋을법한 메소드는 아래와 같다.</p>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">메소드</th>\n<th align=\"center\">반환값</th>\n<th align=\"center\">내용</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">countToken</td>\n<td align=\"center\">int</td>\n<td align=\"center\">토큰의 갯수</td>\n</tr>\n<tr>\n<td align=\"center\">nextToken</td>\n<td align=\"center\">String</td>\n<td align=\"center\">다음 토큰</td>\n</tr>\n<tr>\n<td align=\"center\">hasMoreTokens</td>\n<td align=\"center\">boolean</td>\n<td align=\"center\">다음 토큰의 존재 유무</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p><code class=\"inline-code\">StringTokenizer tokenizer = new StringTokenizer(&quot;문자열&quot;, &quot;구분자&quot;);</code>와 같이 생성자의 인수에 구분자를 추가하여 원하는 구분자로 구분하게 할 수도 있다. 별도로 지정하지 않는다면 구분자는 <code class=\"inline-code\">\\t\\n\\r\\t</code>로, 줄바꿈, 공백, 탭을 구분한다. 여기서 주의할 점이 하나 있는데, 기본 구분자 <code class=\"inline-code\">\\t\\n\\r\\t</code>는 <span class=\"red-A400\">줄바꿈, 공백, 탭을 전부 포함</span>한다. 즉, <code class=\"inline-code\">A B C D\\nA B C D</code>와 같이 공백과 줄바꿈이 혼용되어 있을 경우, 공백과 줄바꿈을 전부 구분하여 <code class=\"inline-code\">[A, B, C, D, A, B, C, D]</code>와 같이 출력된다. 생성자에 구분자를 강제로 지정해줄 경우, 이를 막을 수 있다. 직접 지정할 경우 공백이나 줄바꿈이 아니더라도 여러 문자열을 사용할 수 있다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringTokenizer</span></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token comment\" data-tag=\"new\"> * 메인 클래스</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token comment\" data-tag=\"new\"> *</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\"> * @author RWB</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token comment\" data-tag=\"new\"> * @since 2021.06.13 Sun 23:48:14</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12><span class=\"token comment\" data-tag=\"new\">     * 메인 함수</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14><span class=\"token comment\" data-tag=\"new\">     * @param args: [String[]] 매개변수</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18>        <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"A B C D\"</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19>        </td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20>        <span class=\"token class-name\">StringTokenizer</span> tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21>        </td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> splited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">countTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=23><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23>        </td></tr>\n<tr data-number=24><td class=\"line-number\" data-number=\"24\">24</td><td class=\"line-code\" data-number=24>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> splited<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=25><td class=\"line-number\" data-number=\"25\">25</td><td class=\"line-code\" data-number=25>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=26><td class=\"line-number\" data-number=\"26\">26</td><td class=\"line-code\" data-number=26>            splited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=27><td class=\"line-number\" data-number=\"27\">27</td><td class=\"line-code\" data-number=27>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=28><td class=\"line-number\" data-number=\"28\">28</td><td class=\"line-code\" data-number=28>        </td></tr>\n<tr data-number=29><td class=\"line-number\" data-number=\"29\">29</td><td class=\"line-code\" data-number=29>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>splited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=30><td class=\"line-number\" data-number=\"30\">30</td><td class=\"line-code\" data-number=30>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=31><td class=\"line-number\" data-number=\"31\">31</td><td class=\"line-code\" data-number=31><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>출력은 동일하다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>TC</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-tc\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>[A, B, C, D]</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<h1 id=\"속도-비교\">속도 비교 <a href=\"#속도-비교\">🔗</a></h1><p>그렇다면 <code class=\"inline-code\">split</code>과 <code class=\"inline-code\">StringTokenizer</code>의 성능은 어떨까? 이를 비교하기 위해 간단한 테스트 프로그램을 만들었다.</p>\n<ol>\n<li>반복횟수 <code class=\"inline-code\">t</code>가 할당된다.</li>\n<li>케이스마다 5 ~ 20자의 랜덤한 문자열을 생성한다. 각 문자 사이엔 공백이 포함된다.</li>\n<li>공백을 구분자로 문자열을 구분한다<ol>\n<li><code class=\"inline-code\">split</code> 사용</li>\n<li><code class=\"inline-code\">StringTokenizer</code> 사용</li>\n</ol>\n</li>\n<li>총 소요 시간 및 평균 소요 시간을 계산한다</li>\n<li>결과를 표시한다</li>\n</ol>\n<p>소스는 아래와 같다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DecimalFormat</span></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringTokenizer</span></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\"> * 메인 클래스</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token comment\" data-tag=\"new\"> *</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token comment\" data-tag=\"new\"> * @author RWB</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9><span class=\"token comment\" data-tag=\"new\"> * @since 2021.06.14 Mon 00:06:32</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14><span class=\"token comment\" data-tag=\"new\">     * 메인 함수</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16><span class=\"token comment\" data-tag=\"new\">     * @param args: [String[]] 매개변수</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20>        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21>        </td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22>        <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> timer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=23><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23>        </td></tr>\n<tr data-number=24><td class=\"line-number\" data-number=\"24\">24</td><td class=\"line-code\" data-number=24>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=25><td class=\"line-number\" data-number=\"25\">25</td><td class=\"line-code\" data-number=25>        </td></tr>\n<tr data-number=26><td class=\"line-number\" data-number=\"26\">26</td><td class=\"line-code\" data-number=26>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=27><td class=\"line-number\" data-number=\"27\">27</td><td class=\"line-code\" data-number=27>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=28><td class=\"line-number\" data-number=\"28\">28</td><td class=\"line-code\" data-number=28>            <span class=\"token keyword\">int</span> random <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=29><td class=\"line-number\" data-number=\"29\">29</td><td class=\"line-code\" data-number=29>            </td></tr>\n<tr data-number=30><td class=\"line-number\" data-number=\"30\">30</td><td class=\"line-code\" data-number=30>            <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> <span class=\"token function\">getTestString</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=31><td class=\"line-number\" data-number=\"31\">31</td><td class=\"line-code\" data-number=31>            </td></tr>\n<tr data-number=32><td class=\"line-number\" data-number=\"32\">32</td><td class=\"line-code\" data-number=32>            <span class=\"token comment\" data-tag=\"new\">// split 로직 ----------------------------------------</span></td></tr>\n<tr data-number=33><td class=\"line-number\" data-number=\"33\">33</td><td class=\"line-code\" data-number=33>            <span class=\"token keyword\">long</span> timeStart <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=34><td class=\"line-number\" data-number=\"34\">34</td><td class=\"line-code\" data-number=34>            </td></tr>\n<tr data-number=35><td class=\"line-number\" data-number=\"35\">35</td><td class=\"line-code\" data-number=35>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a1 <span class=\"token operator\">=</span> <span class=\"token function\">useSplit</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=36><td class=\"line-number\" data-number=\"36\">36</td><td class=\"line-code\" data-number=36>            </td></tr>\n<tr data-number=37><td class=\"line-number\" data-number=\"37\">37</td><td class=\"line-code\" data-number=37>            <span class=\"token keyword\">long</span> timeEnd <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> timeStart<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=38><td class=\"line-number\" data-number=\"38\">38</td><td class=\"line-code\" data-number=38>            </td></tr>\n<tr data-number=39><td class=\"line-number\" data-number=\"39\">39</td><td class=\"line-code\" data-number=39>            sum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> a1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=40><td class=\"line-number\" data-number=\"40\">40</td><td class=\"line-code\" data-number=40>            </td></tr>\n<tr data-number=41><td class=\"line-number\" data-number=\"41\">41</td><td class=\"line-code\" data-number=41>            timer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> timeEnd<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=42><td class=\"line-number\" data-number=\"42\">42</td><td class=\"line-code\" data-number=42>            </td></tr>\n<tr data-number=43><td class=\"line-number\" data-number=\"43\">43</td><td class=\"line-code\" data-number=43>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>timeEnd<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=44><td class=\"line-number\" data-number=\"44\">44</td><td class=\"line-code\" data-number=44>            <span class=\"token comment\" data-tag=\"new\">// split 로직 ----------------------------------------</span></td></tr>\n<tr data-number=45><td class=\"line-number\" data-number=\"45\">45</td><td class=\"line-code\" data-number=45>            </td></tr>\n<tr data-number=46><td class=\"line-number\" data-number=\"46\">46</td><td class=\"line-code\" data-number=46>            <span class=\"token comment\" data-tag=\"new\">// StringTokenizer 로직 ----------------------------------------</span></td></tr>\n<tr data-number=47><td class=\"line-number\" data-number=\"47\">47</td><td class=\"line-code\" data-number=47>            timeStart <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=48><td class=\"line-number\" data-number=\"48\">48</td><td class=\"line-code\" data-number=48>            </td></tr>\n<tr data-number=49><td class=\"line-number\" data-number=\"49\">49</td><td class=\"line-code\" data-number=49>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a2 <span class=\"token operator\">=</span> <span class=\"token function\">useStringTokenizer</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=50><td class=\"line-number\" data-number=\"50\">50</td><td class=\"line-code\" data-number=50>            </td></tr>\n<tr data-number=51><td class=\"line-number\" data-number=\"51\">51</td><td class=\"line-code\" data-number=51>            timeEnd <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> timeStart<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=52><td class=\"line-number\" data-number=\"52\">52</td><td class=\"line-code\" data-number=52>            </td></tr>\n<tr data-number=53><td class=\"line-number\" data-number=\"53\">53</td><td class=\"line-code\" data-number=53>            sum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> a2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=54><td class=\"line-number\" data-number=\"54\">54</td><td class=\"line-code\" data-number=54>            </td></tr>\n<tr data-number=55><td class=\"line-number\" data-number=\"55\">55</td><td class=\"line-code\" data-number=55>            timer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> timeEnd<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=56><td class=\"line-number\" data-number=\"56\">56</td><td class=\"line-code\" data-number=56>            </td></tr>\n<tr data-number=57><td class=\"line-number\" data-number=\"57\">57</td><td class=\"line-code\" data-number=57>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>timeEnd<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=58><td class=\"line-number\" data-number=\"58\">58</td><td class=\"line-code\" data-number=58>            <span class=\"token comment\" data-tag=\"new\">// StringTokenizer 로직 ----------------------------------------</span></td></tr>\n<tr data-number=59><td class=\"line-number\" data-number=\"59\">59</td><td class=\"line-code\" data-number=59>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=60><td class=\"line-number\" data-number=\"60\">60</td><td class=\"line-code\" data-number=60>        </td></tr>\n<tr data-number=61><td class=\"line-number\" data-number=\"61\">61</td><td class=\"line-code\" data-number=61>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"개 데이터 그룹 수행\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=62><td class=\"line-number\" data-number=\"62\">62</td><td class=\"line-code\" data-number=62>        </td></tr>\n<tr data-number=63><td class=\"line-number\" data-number=\"63\">63</td><td class=\"line-code\" data-number=63>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=64><td class=\"line-number\" data-number=\"64\">64</td><td class=\"line-code\" data-number=64>        </td></tr>\n<tr data-number=65><td class=\"line-number\" data-number=\"65\">65</td><td class=\"line-code\" data-number=65>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"split 결과\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=66><td class=\"line-number\" data-number=\"66\">66</td><td class=\"line-code\" data-number=66>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 총 소요: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=67><td class=\"line-number\" data-number=\"67\">67</td><td class=\"line-code\" data-number=67>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 평균 소요: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=68><td class=\"line-number\" data-number=\"68\">68</td><td class=\"line-code\" data-number=68>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 분해한 요소: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"개\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=69><td class=\"line-number\" data-number=\"69\">69</td><td class=\"line-code\" data-number=69>        </td></tr>\n<tr data-number=70><td class=\"line-number\" data-number=\"70\">70</td><td class=\"line-code\" data-number=70>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=71><td class=\"line-number\" data-number=\"71\">71</td><td class=\"line-code\" data-number=71>        </td></tr>\n<tr data-number=72><td class=\"line-number\" data-number=\"72\">72</td><td class=\"line-code\" data-number=72>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StringTokenizer 결과\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=73><td class=\"line-number\" data-number=\"73\">73</td><td class=\"line-code\" data-number=73>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 총 소요: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=74><td class=\"line-number\" data-number=\"74\">74</td><td class=\"line-code\" data-number=74>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 평균 소요: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=75><td class=\"line-number\" data-number=\"75\">75</td><td class=\"line-code\" data-number=75>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 분해한 요소: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"개\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=76><td class=\"line-number\" data-number=\"76\">76</td><td class=\"line-code\" data-number=76>        </td></tr>\n<tr data-number=77><td class=\"line-number\" data-number=\"77\">77</td><td class=\"line-code\" data-number=77>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=78><td class=\"line-number\" data-number=\"78\">78</td><td class=\"line-code\" data-number=78>        </td></tr>\n<tr data-number=79><td class=\"line-number\" data-number=\"79\">79</td><td class=\"line-code\" data-number=79>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"split \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> timer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"==\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> timer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"&lt;\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" StringTokenizer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=80><td class=\"line-number\" data-number=\"80\">80</td><td class=\"line-code\" data-number=80>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=81><td class=\"line-number\" data-number=\"81\">81</td><td class=\"line-code\" data-number=81>    </td></tr>\n<tr data-number=82><td class=\"line-number\" data-number=\"82\">82</td><td class=\"line-code\" data-number=82>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=83><td class=\"line-number\" data-number=\"83\">83</td><td class=\"line-code\" data-number=83><span class=\"token comment\" data-tag=\"new\">     * 구분된 문자열 반환 함수 (split)</span></td></tr>\n<tr data-number=84><td class=\"line-number\" data-number=\"84\">84</td><td class=\"line-code\" data-number=84><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=85><td class=\"line-number\" data-number=\"85\">85</td><td class=\"line-code\" data-number=85><span class=\"token comment\" data-tag=\"new\">     * @param text: [String] 대상 문자열</span></td></tr>\n<tr data-number=86><td class=\"line-number\" data-number=\"86\">86</td><td class=\"line-code\" data-number=86><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=87><td class=\"line-number\" data-number=\"87\">87</td><td class=\"line-code\" data-number=87><span class=\"token comment\" data-tag=\"new\">     * @return [String[]] 구분된 문자열</span></td></tr>\n<tr data-number=88><td class=\"line-number\" data-number=\"88\">88</td><td class=\"line-code\" data-number=88><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=89><td class=\"line-number\" data-number=\"89\">89</td><td class=\"line-code\" data-number=89>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">useSplit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=90><td class=\"line-number\" data-number=\"90\">90</td><td class=\"line-code\" data-number=90>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=91><td class=\"line-number\" data-number=\"91\">91</td><td class=\"line-code\" data-number=91>        <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=92><td class=\"line-number\" data-number=\"92\">92</td><td class=\"line-code\" data-number=92>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=93><td class=\"line-number\" data-number=\"93\">93</td><td class=\"line-code\" data-number=93>    </td></tr>\n<tr data-number=94><td class=\"line-number\" data-number=\"94\">94</td><td class=\"line-code\" data-number=94>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=95><td class=\"line-number\" data-number=\"95\">95</td><td class=\"line-code\" data-number=95><span class=\"token comment\" data-tag=\"new\">     * 구분된 문자열 반환 함수 (StringTokenizer)</span></td></tr>\n<tr data-number=96><td class=\"line-number\" data-number=\"96\">96</td><td class=\"line-code\" data-number=96><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=97><td class=\"line-number\" data-number=\"97\">97</td><td class=\"line-code\" data-number=97><span class=\"token comment\" data-tag=\"new\">     * @param text: [String] 대상 문자열</span></td></tr>\n<tr data-number=98><td class=\"line-number\" data-number=\"98\">98</td><td class=\"line-code\" data-number=98><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=99><td class=\"line-number\" data-number=\"99\">99</td><td class=\"line-code\" data-number=99><span class=\"token comment\" data-tag=\"new\">     * @return [String[]] 구분된 문자열</span></td></tr>\n<tr data-number=100><td class=\"line-number\" data-number=\"100\">100</td><td class=\"line-code\" data-number=100><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=101><td class=\"line-number\" data-number=\"101\">101</td><td class=\"line-code\" data-number=101>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">useStringTokenizer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=102><td class=\"line-number\" data-number=\"102\">102</td><td class=\"line-code\" data-number=102>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=103><td class=\"line-number\" data-number=\"103\">103</td><td class=\"line-code\" data-number=103>        <span class=\"token class-name\">StringTokenizer</span> tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=104><td class=\"line-number\" data-number=\"104\">104</td><td class=\"line-code\" data-number=104>        </td></tr>\n<tr data-number=105><td class=\"line-number\" data-number=\"105\">105</td><td class=\"line-code\" data-number=105>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">countTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=106><td class=\"line-number\" data-number=\"106\">106</td><td class=\"line-code\" data-number=106>        </td></tr>\n<tr data-number=107><td class=\"line-number\" data-number=\"107\">107</td><td class=\"line-code\" data-number=107>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=108><td class=\"line-number\" data-number=\"108\">108</td><td class=\"line-code\" data-number=108>        </td></tr>\n<tr data-number=109><td class=\"line-number\" data-number=\"109\">109</td><td class=\"line-code\" data-number=109>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=110><td class=\"line-number\" data-number=\"110\">110</td><td class=\"line-code\" data-number=110>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=111><td class=\"line-number\" data-number=\"111\">111</td><td class=\"line-code\" data-number=111>            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=112><td class=\"line-number\" data-number=\"112\">112</td><td class=\"line-code\" data-number=112>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=113><td class=\"line-number\" data-number=\"113\">113</td><td class=\"line-code\" data-number=113>        </td></tr>\n<tr data-number=114><td class=\"line-number\" data-number=\"114\">114</td><td class=\"line-code\" data-number=114>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=115><td class=\"line-number\" data-number=\"115\">115</td><td class=\"line-code\" data-number=115>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=116><td class=\"line-number\" data-number=\"116\">116</td><td class=\"line-code\" data-number=116>    </td></tr>\n<tr data-number=117><td class=\"line-number\" data-number=\"117\">117</td><td class=\"line-code\" data-number=117>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=118><td class=\"line-number\" data-number=\"118\">118</td><td class=\"line-code\" data-number=118><span class=\"token comment\" data-tag=\"new\">     * 무작위 문자열 반환 함수</span></td></tr>\n<tr data-number=119><td class=\"line-number\" data-number=\"119\">119</td><td class=\"line-code\" data-number=119><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=120><td class=\"line-number\" data-number=\"120\">120</td><td class=\"line-code\" data-number=120><span class=\"token comment\" data-tag=\"new\">     * @param n: [int] 문자 갯수</span></td></tr>\n<tr data-number=121><td class=\"line-number\" data-number=\"121\">121</td><td class=\"line-code\" data-number=121><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=122><td class=\"line-number\" data-number=\"122\">122</td><td class=\"line-code\" data-number=122><span class=\"token comment\" data-tag=\"new\">     * @return [String] 무작위 문자</span></td></tr>\n<tr data-number=123><td class=\"line-number\" data-number=\"123\">123</td><td class=\"line-code\" data-number=123><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=124><td class=\"line-number\" data-number=\"124\">124</td><td class=\"line-code\" data-number=124>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getTestString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=125><td class=\"line-number\" data-number=\"125\">125</td><td class=\"line-code\" data-number=125>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=126><td class=\"line-number\" data-number=\"126\">126</td><td class=\"line-code\" data-number=126>        <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=127><td class=\"line-number\" data-number=\"127\">127</td><td class=\"line-code\" data-number=127>        </td></tr>\n<tr data-number=128><td class=\"line-number\" data-number=\"128\">128</td><td class=\"line-code\" data-number=128>        <span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=129><td class=\"line-number\" data-number=\"129\">129</td><td class=\"line-code\" data-number=129>        </td></tr>\n<tr data-number=130><td class=\"line-number\" data-number=\"130\">130</td><td class=\"line-code\" data-number=130>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=131><td class=\"line-number\" data-number=\"131\">131</td><td class=\"line-code\" data-number=131>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=132><td class=\"line-number\" data-number=\"132\">132</td><td class=\"line-code\" data-number=132>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=133><td class=\"line-number\" data-number=\"133\">133</td><td class=\"line-code\" data-number=133>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=134><td class=\"line-number\" data-number=\"134\">134</td><td class=\"line-code\" data-number=134>        </td></tr>\n<tr data-number=135><td class=\"line-number\" data-number=\"135\">135</td><td class=\"line-code\" data-number=135>        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=136><td class=\"line-number\" data-number=\"136\">136</td><td class=\"line-code\" data-number=136>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=137><td class=\"line-number\" data-number=\"137\">137</td><td class=\"line-code\" data-number=137>    </td></tr>\n<tr data-number=138><td class=\"line-number\" data-number=\"138\">138</td><td class=\"line-code\" data-number=138>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=139><td class=\"line-number\" data-number=\"139\">139</td><td class=\"line-code\" data-number=139><span class=\"token comment\" data-tag=\"new\">     * 1000 단위 구분 숫자 반환 함수</span></td></tr>\n<tr data-number=140><td class=\"line-number\" data-number=\"140\">140</td><td class=\"line-code\" data-number=140><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=141><td class=\"line-number\" data-number=\"141\">141</td><td class=\"line-code\" data-number=141><span class=\"token comment\" data-tag=\"new\">     * @param num: [long] 대상 숫자</span></td></tr>\n<tr data-number=142><td class=\"line-number\" data-number=\"142\">142</td><td class=\"line-code\" data-number=142><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=143><td class=\"line-number\" data-number=\"143\">143</td><td class=\"line-code\" data-number=143><span class=\"token comment\" data-tag=\"new\">     * @return [String] 1000 단위 구분 숫자</span></td></tr>\n<tr data-number=144><td class=\"line-number\" data-number=\"144\">144</td><td class=\"line-code\" data-number=144><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=145><td class=\"line-number\" data-number=\"145\">145</td><td class=\"line-code\" data-number=145>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> num<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=146><td class=\"line-number\" data-number=\"146\">146</td><td class=\"line-code\" data-number=146>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=147><td class=\"line-number\" data-number=\"147\">147</td><td class=\"line-code\" data-number=147>        <span class=\"token class-name\">DecimalFormat</span> format <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DecimalFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",###\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=148><td class=\"line-number\" data-number=\"148\">148</td><td class=\"line-code\" data-number=148>        </td></tr>\n<tr data-number=149><td class=\"line-number\" data-number=\"149\">149</td><td class=\"line-code\" data-number=149>        <span class=\"token keyword\">return</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=150><td class=\"line-number\" data-number=\"150\">150</td><td class=\"line-code\" data-number=150>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=151><td class=\"line-number\" data-number=\"151\">151</td><td class=\"line-code\" data-number=151><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>횟수별로 10번씩 돌린 결과를 아래의 표로 정리했다.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">테스트 횟수</th>\n<th align=\"center\">split 총 소요</th>\n<th align=\"center\">StringTokenizer 총 소요</th>\n<th align=\"center\">속도</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">80.3us</td>\n<td align=\"center\">44.8us</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">83.7us</td>\n<td align=\"center\">46.2us</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">136.6us</td>\n<td align=\"center\">31.8us</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">111.3us</td>\n<td align=\"center\">40.4us</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">93.4us</td>\n<td align=\"center\">32.2us</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">104.5us</td>\n<td align=\"center\">28.7us</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">40.1us</td>\n<td align=\"center\">42.7us</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">40.1us</td>\n<td align=\"center\">42.7us</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">104.7us</td>\n<td align=\"center\">28.3us</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\">38.3us</td>\n<td align=\"center\">29.2us</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>한 번만 반복할 경우, 8:2로 <code class=\"inline-code\">StringTokenizer</code>이 압승한다.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">100</span></span></span></span></li>\n</ul>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">테스트 횟수</th>\n<th align=\"center\">split 총 소요</th>\n<th align=\"center\">StringTokenizer 총 소요</th>\n<th align=\"center\">속도</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">1.12ms</td>\n<td align=\"center\">0.602ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">1.11ms</td>\n<td align=\"center\">0.612ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">1.06ms</td>\n<td align=\"center\">0.562ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">1.02ms</td>\n<td align=\"center\">0.595ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">1.ms</td>\n<td align=\"center\">0.550ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">1.16ms</td>\n<td align=\"center\">0.651ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">98ms</td>\n<td align=\"center\">0.558ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">1.11ms</td>\n<td align=\"center\">0.627ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">0.981ms</td>\n<td align=\"center\">0.555ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\">1.23ms</td>\n<td align=\"center\">0.666ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>100번을 반복할 때 역시 10:0으로 <code class=\"inline-code\">StringTokenizer</code>이 압승한다.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">000</span></span></span></span></li>\n</ul>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">테스트 횟수</th>\n<th align=\"center\">split 총 소요</th>\n<th align=\"center\">StringTokenizer 총 소요</th>\n<th align=\"center\">속도</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">3.00ms</td>\n<td align=\"center\">3.17ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">2.53ms</td>\n<td align=\"center\">2.71ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">2.79ms</td>\n<td align=\"center\">2.84ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">2.53ms</td>\n<td align=\"center\">2.67ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">2.67ms</td>\n<td align=\"center\">2.97ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">2.58ms</td>\n<td align=\"center\">2.87ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">2.48ms</td>\n<td align=\"center\">2.65ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">2.69ms</td>\n<td align=\"center\">3.01ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">2.50ms</td>\n<td align=\"center\">2.90ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\">2.62ms</td>\n<td align=\"center\">2.94ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>처럼 끊어가다가 뜬금없이 1000을 넣은 이유는, 이상하게 <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">000</span></span></span></span>일 땐 <code class=\"inline-code\">split</code>이 압승한다.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">10</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">000</span></span></span></span></li>\n</ul>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">테스트 횟수</th>\n<th align=\"center\">split 총 소요</th>\n<th align=\"center\">StringTokenizer 총 소요</th>\n<th align=\"center\">속도</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">9.91ms</td>\n<td align=\"center\">9.27ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">9.49ms</td>\n<td align=\"center\">9.19ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">9.02ms</td>\n<td align=\"center\">8.61ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">9.95ms</td>\n<td align=\"center\">9.25ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">9.03ms</td>\n<td align=\"center\">8.87ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">8.83ms</td>\n<td align=\"center\">9.08ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">9.14ms</td>\n<td align=\"center\">8.68ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">9.28ms</td>\n<td align=\"center\">9.07ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">9.49ms</td>\n<td align=\"center\">9.66ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\">11.79ms</td>\n<td align=\"center\">11.20ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>다시 8:2로 <code class=\"inline-code\">StringTokenizer</code>이 압승한다.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">000</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">000</span></span></span></span></li>\n</ul>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">테스트 횟수</th>\n<th align=\"center\">split 총 소요</th>\n<th align=\"center\">StringTokenizer 총 소요</th>\n<th align=\"center\">속도</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">306.86ms</td>\n<td align=\"center\">373.06ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">287.26ms</td>\n<td align=\"center\">262.05ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">289.92ms</td>\n<td align=\"center\">255.51ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">272.43ms</td>\n<td align=\"center\">267.96ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">278.35ms</td>\n<td align=\"center\">322.28ms</td>\n<td align=\"center\">split > StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">285.23ms</td>\n<td align=\"center\">264.57ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">273.37ms</td>\n<td align=\"center\">268.18ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">278.65ms</td>\n<td align=\"center\">264.34ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">278.56ms</td>\n<td align=\"center\">266.62ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\">306.00ms</td>\n<td align=\"center\">256.56ms</td>\n<td align=\"center\">split < StringTokenizer</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>8:2로 <code class=\"inline-code\">StringTokenizer</code>이 압승한다.</p>\n<p><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">000</span></span></span></span>이라는 특수한 상황을 제외하고는 보편적으로 <code class=\"inline-code\">StringTokenizer</code>가 성능이 더 우수하다. 저런 현상이 왜 발생하는지 이해는 잘 안 된다. 물론 통계라는게 숫자가 클 수록 의미가 커지므로 10번이라는 작은 횟수만으로 단정짓긴 어렵다.</p>\n<p>회사 컴퓨터(AMD Ryzen 2700X)에서는 모든 케이스에서 <code class=\"inline-code\">StringTokenizer</code>의 속도가 빨랐다. CPU에 따라 연산 결과나 방식에 조금씩 차이가 있을 순 있겠다.</p>\n<p><a href=\"https://docs.oracle.com/javase/6/docs/api/java/util/StringTokenizer.html\" target=\"_blank\">JAVA API</a>에 의하면, <code class=\"inline-code\">StringTokenizer</code>은 하위 호환성을 보장하기 위한 레거시 클래스라고 한다. JAVA API는 가급적 <code class=\"inline-code\">StringTokenizer</code>보다 <code class=\"inline-code\">split</code> 내지는 <code class=\"inline-code\">regex</code> <span class=\"orange-400\">패키지</span>를 활용하도록 권고하고 있다.</p>\n<blockquote>\n<p><strong>원문</strong><br><code class=\"inline-code\">StringTokenizer</code> is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the <code class=\"inline-code\">split</code> method of String or the <code class=\"inline-code\">java.util.regex</code> package instead.</p>\n</blockquote>\n<h1 id=\"결론\">결론 <a href=\"#결론\">🔗</a></h1><p>표의 수치 상 <code class=\"inline-code\">StringTokenizer</code>가 <code class=\"inline-code\">split</code>에 비해 최대 약 20% 정도 더 빠르다. 하지만 JAVA API에서 가급적 다른 대체제를 사용하도록 권고하고 있고, 백만번의 연산에도 <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span></span></span></span> 단위에서 움직인다. 상대적으론 차이가 있어도 객관적인 지표로 봤을땐 별다른 차이가 없는 셈. 문자열 분리하자고 새로운 <span class=\"orange-400\">class</span>를 다룰 바에 그냥 문자열 자체를 다루는 <code class=\"inline-code\">split</code>을 사용하는 게 더 효율적이라 생각한다.</p>\n","meta":{"prev":{"header":{"title":"IntelliJ(인텔리제이) 시작 시 오류(java.net.BindException: Address already in use: bind)","excerpt":"","coverImage":"https://user-images.githubusercontent.com/50317129/121893356-d6d48480-cd58-11eb-80bb-d4611be3bd40.png","date":"2021-06-14T21:59:16","type":"posts","category":"JAVA","tag":["IntelliJ(인텔리제이)","Hyper-V","오류 해결책"],"comment":true,"publish":true},"name":"2021-06-14-intellij-error-onstart.md","url":["2021-06-14-intellij-error-onstart","2021","06","14","intellij-error-onstart"]},"next":{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1013번 Contact","excerpt":"푸에르토리코 아레시보에 위치한 아레시보 전파망원경(Arecibo radio telescope)은 수십 년째 존재하지 않을 지도 모르는 외계 문명으로부터의 전파를 수신하기 위해 밤하늘을 바라보고 있다. 이 망원경이 수집한 전파 속에서 자연적으로 발생하기 힘든 패턴들을 찾아내어, 그것을 증거로 외계 문명의 존재 여부를 가리려는 노력은 줄곧 이어져왔지만 아직까지도 그러한 패턴은 발견되지 않았다. 한국 천문학계의 자존심 김동혁 박사는 국내 기술로 이러한 탐사를 진행하기 위하여 다음의 전파 표기를 표준으로 삼았다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-13T04:53:32","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","정규 표현식","GOLD","GOLD V"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-13-a1013.md","url":["2021-06-13-a1013","2021","06","13","a1013"]},"group":[{"header":{"title":"[Ubuntu] Ubuntu 원격 프로토콜 보안 강화하기","excerpt":"SSH, SFTP와 같은 원격 프로토콜은 서버의 접근성을 향상시켜주지만, 서버의 보안성을 극도로 훼손한다. 공격자가 특정 서버의 IP를 알아냈을 경우, 해당 IP로 SSH 접속 시도를 할 수 있다. 굳이 IP가 아니더라도 해당 IP와 연결된 도메인을 통해서도 얼마든지 가능하다. 특정 도메인의 정보를 DNS서버에 요청하여 IP는 물론 소유자 정보까지 쉽게 취득할 수 있기 때문이다. 따라서 누군가가 내가 접속하려는 서버의 IP 혹은 도메인, SSH 서비스 포트, 계정정보를 알고 있다면 얼마든지 SSH 접속 시도를 하거나 서버에 피해를 줄 수 있다. 외부에 도메인을 공개하는 순간 국내는 물론 외국에서 여러 접속 시도가 들어오기도 한다. 특히 중국에서의 공격이 많이 들어오며, 인터넷에서 이와 관련된 경험담이나 피해사례를 쉽게 찾아볼 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/133300948-2ee9b77a-1589-4afc-8489-fb402a13520f.png","date":"2021-09-15T01:53:21","type":"posts","category":"Ubuntu","tag":["Ubuntu","SSH","SFTP"],"comment":true,"publish":true},"name":"2021-09-15-increase-ubuntu-remote-security.md","url":["2021-09-15-increase-ubuntu-remote-security","2021","09","15","increase-ubuntu-remote-security"]},{"header":{"title":"[Ubuntu] ufw로 방화벽 포트 설정하기","excerpt":"모든 건물에는 입구가 존재한다. 일반적인 상황에서, 누구든지 해당 건물에 드나들기 위해선 좋든 싫든 입구를 통과해야한다. 이 입구라는 것이 또 마냥 열려있는 건 아니라서, 필요 시엔 개방되어있다가도 특정 시간에는 폐쇄되기도 한다. 심지어 어떤 곳은 까다롭기 그지없어서, 사람을 가려받기도 한다. 이를테면 보안구역이라던가, 금요일 밤의 클럽이라던가. PC통신도 이와 원리가 별반 다를 바 없다. 보기엔 그냥 막 통신하는 것 같아도, 저마다 할당받은 입구를 통해 PC에 드나든다. PC가 건물이라고 한다면, PC의 입구는 포트(PORT)라 할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/132039520-3efc64ec-28c2-499c-af29-dfe153f53852.png","date":"2021-09-04T01:26:20","type":"posts","category":"Ubuntu","tag":["Ubuntu","방화벽"],"comment":true,"publish":true},"name":"2021-09-04-firewall-with-ufw.md","url":["2021-09-04-firewall-with-ufw","2021","09","04","firewall-with-ufw"]},{"header":{"title":"블로그 텍스트 색상 예시","excerpt":"색상 테스트","coverImage":"https://user-images.githubusercontent.com/50317129/130466968-83b176c7-2175-4740-85de-12914252d160.png","date":"2021-08-20T15:43:00","type":"posts","category":"잡담","tag":["개발 블로그"],"comment":true,"publish":true},"name":"2021-08-20-color-test.md","url":["2021-08-20-color-test","2021","08","20","color-test"]},{"header":{"title":"블로그 개편기","excerpt":"이 블로그를 처음 개발한지가 한 5월 쯤으로 기억한다. 4월부터 접한 리액트에 흥미가 생겨 두서없이 만든게 시작이였으니, 결과물은 내 생각보다 훨씬 조잡하지 않았나 생각했다. 다행스럽게(?)도 블로그 또한 그런 내 믿음을 져버리기 싫었는지, 동작 과정에서 크고 작은 문제들을 보여주곤 했다. 동작 자체에 영향을 미칠 정도로 크리티컬한 문제는 아니였다만, 내 신경엔 영향을 미칠 정도로 거슬리는 부분이 몇 가지 있었다. 아무도 관심 없지만 이왕 만든거 이번 포스팅을 통해 블로그의 개선점을 정리해놓고자 한다.","coverImage":"https://user-images.githubusercontent.com/50317129/127343484-697c4678-edf3-49fa-8a4d-86775a804428.png","date":"2021-07-26T04:54:40","type":"posts","category":"React","tag":["React(리액트)","Next.js","개발 블로그","TypeScript","SCSS"],"comment":true,"publish":true},"name":"2021-07-26-brand-new.md","url":["2021-07-26-brand-new","2021","07","26","brand-new"]},{"header":{"title":"IntelliJ(인텔리제이) 시작 시 오류(java.net.BindException: Address already in use: bind)","excerpt":"","coverImage":"https://user-images.githubusercontent.com/50317129/121893356-d6d48480-cd58-11eb-80bb-d4611be3bd40.png","date":"2021-06-14T21:59:16","type":"posts","category":"JAVA","tag":["IntelliJ(인텔리제이)","Hyper-V","오류 해결책"],"comment":true,"publish":true},"name":"2021-06-14-intellij-error-onstart.md","url":["2021-06-14-intellij-error-onstart","2021","06","14","intellij-error-onstart"]},{"header":{"title":"[JAVA] split vs StringTokenizer","excerpt":"알고리즘을 풀다보면, 필연적으로 입력값 처리를 하게된다. 다양한 케이스에 대응하기 위해, 사용자의 값을 직접 입력받아 이를 처리하게 된다. 이 때, 우리는 십중팔구 이와 같은 상황이 발생한다. 데이터셋을 보내기 위해 데이터의 모음을 구분자(공백 혹은 쉼표)를 통해 하나의 문자열로 합쳐 전달한다.","coverImage":"https://www.textrazor.com/img/letters3.png","date":"2021-06-14T01:56:01","type":"posts","category":"JAVA","tag":["JAVA(자바)","String(문자열)","split","StringTokenizer"],"comment":true,"publish":true},"name":"2021-06-14-split-and-stringtokenizer.md","url":["2021-06-14-split-and-stringtokenizer","2021","06","14","split-and-stringtokenizer"]},{"header":{"title":"Compiler(컴파일러) & Interpreter(인터프리터)","excerpt":"천공카드 이래로 지금까지 컴퓨터 언어는 무수히 많은 발전을 거듭했다. 현재에 이르러서는 개발된 언어끼리의 시너지가 일어나 하루가 멀다하고 새로운 언어, 개념이 생성되고 있다. 하지만 그 아무리 새로운 언어로 구현한 소프트웨어라 하더라도, 결과적으로 프로그램의 실행 주체는 컴퓨터에게 있다. 우리가 아무리 새로운 언어니, 프레임워크니, 기술이니 지지고 볶고 하더라도 결국은 컴퓨터가 알아먹을 수 있어야 실행된다는 얘기다. 글로벌 시대답게 초등학생도 1개 이상의 외국어를 하는 마당에, 안타깝게도 우리 컴퓨터는 개발 이래로 초지일관 기계어만을 고집한다. 한글, 영어는 고사하고 우리가 개발할 때 사용하는 프로그래밍 언어라고 하는 대부분의 언어들. 심지어 C언어 보다도 저수준인 어셈블리어 조차 컴퓨터 입장에서는 외계어와 다를 바 없다.","coverImage":"https://user-images.githubusercontent.com/50317129/120613280-0a79f980-c491-11eb-81a9-15e63062db75.png","date":"2021-06-03T17:25:23","type":"posts","category":"CS","tag":["Compiler(컴파일러)","Interpreter(인터프리터)"],"comment":true,"publish":true},"name":"2021-06-03-compiler-interpreter.md","url":["2021-06-03-compiler-interpreter","2021","06","03","compiler-interpreter"]},{"header":{"title":"Unsupported major.minor version 에러 해결하기 (+Servlet 404 에러)","excerpt":"간혹 JAVA 프로그램을 실행하다보면 Unsupported major.minor version 52(숫자는 class 버전에 따라 다름) 오류가 출력되면서 정상적으로 동작하지 않는 오류가 발생한다. Unsupported major.minor version 오류는 직역하면 \"지원하지 않는 주/부 버전\"이다. JAVA 버전관련 오류라고 보면 된다.","coverImage":"https://user-images.githubusercontent.com/50317129/120079117-78b76880-c0ed-11eb-944d-c0d020228db3.png","date":"2021-05-30T02:16:35","type":"posts","category":"JAVA","tag":["JAVA","WAS","Tomcat(톰캣)","오류 해결책"],"comment":true,"publish":true},"name":"2021-05-30-unsupported-version-error.md","url":["2021-05-30-unsupported-version-error","2021","05","30","unsupported-version-error"]},{"header":{"title":"URI? URL? URN? 리소스 식별자 구분하기","excerpt":"우리가 인터넷 상에서 특정한 데이터에 접근할 때 URL이라는 것을 활용하여 접근한다. 원하는 자료의 URL을 얻으면, 브라우저 같은 HTTP 통신 프로그램에 해당 URL을 호출하여 응답을 얻는 것이다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028437-a63ddc80-c02f-11eb-9d41-7c50d7002a42.png","date":"2021-05-29T03:30:17","type":"posts","category":"WEB","tag":["WEB(웹)","URI","URL","URN"],"comment":true,"publish":true},"name":"2021-05-29-uri-url-urn.md","url":["2021-05-29-uri-url-urn","2021","05","29","uri-url-urn"]},{"header":{"title":"Tomcat(톰캣) 현재 콘솔창에서 구동하기","excerpt":"오늘도 어느때와 다름없이 톰캣을 구동하는 A씨. 어제까지만 해도 잘 되던 톰캣이 무슨 오류가 있는지 구동 중에 바로 꺼져버린다. 꺼지기 직전의 순간 무슨 오류가 뜬 거 같은데..... 너무 빨라서 도통 확인할 수가 없다. 할 수 없이 일일이 로그를 찾아보며 오류를 수정하는 A씨. 건드린 것도 없는데, 왜 이러는 걸까?","coverImage":"https://user-images.githubusercontent.com/50317129/119212068-1b218b80-baf1-11eb-9a42-85945bceb7d9.png","date":"2021-05-26T16:32:16","type":"posts","category":"WAS","tag":["WAS","Tomcat(톰캣)","Console(콘솔)"],"comment":true,"publish":true},"name":"2021-05-26-tomcat-current-window.md","url":["2021-05-26-tomcat-current-window","2021","05","26","tomcat-current-window"]},{"header":{"title":"Tomcat(톰캣) 콘솔창 한글 인코딩 깨짐 현상 해결하기","excerpt":"톰캣을 구동하다보면 심심치않게 마주하는 오류(?)는 아니고 현상. Windows Console의 기본 인코딩과 Tomcat이 출력하는 인코딩이 서로 달라서 생긴다.","coverImage":"https://user-images.githubusercontent.com/50317129/119212068-1b218b80-baf1-11eb-9a42-85945bceb7d9.png","date":"2021-05-22T12:52:51","type":"posts","category":"WAS","tag":["WAS","Tomcat(톰캣)","Console(콘솔)"],"comment":true,"publish":true},"name":"2021-05-22-tomcat-encoding-euckr.md","url":["2021-05-22-tomcat-encoding-euckr","2021","05","22","tomcat-encoding-euckr"]},{"header":{"title":"도메인이란?","excerpt":"도메인을 이해하기 위해선, IP에 대해 짚고 넘어가야 한다. 인터넷에 연결된 모든 디바이스(컴퓨터, 스마트폰, 공유기 등)는 고유한 12자리 숫자로 구성된 IP주소를 가진다. IP를 유동성으로 나누면 크게 유동 IP, 고정 IP로 분류할 수 있다. 유동 IP: 임의의 시점마다 IP주소가 갱신되는 IP. 갱신 주기는 일정하지 않음. 대부분의 인터넷 회선에 적용됨. 고정 IP: 회선에 고정된 IP를 부여하며, 해당 회선의 IP는 갱신되지 않음. 부가서비스 형태로 제공되며, 쇼핑몰이나 회사 등 지속적으로 시스템을 운영해야 할 경우 적합함. 우리가 원하는 장소에 방문하기 위해 주소를 찾듯이, 특정 서버에서 운영하는 웹 사이트를 방문하기 위해선 해당 서버의 주소인 IP가 필요하다.","coverImage":"https://user-images.githubusercontent.com/50317129/120056028-b2985880-c074-11eb-8cc3-39f5f10a2c7f.png","date":"2021-05-22T12:52:51","type":"posts","category":"WEB","tag":["WEB(웹)","Domain(도메인)"],"comment":true,"publish":true},"name":"2021-05-22-about-domain.md","url":["2021-05-22-about-domain","2021","05","22","about-domain"]},{"header":{"title":"Jekyll에서 Next.js로","excerpt":"Jekyll에서 Next.js로의 블로그 이동기","coverImage":"https://user-images.githubusercontent.com/50317129/119211732-cf6de280-baee-11eb-8539-f2f5344fecb1.png","date":"2021-05-21T15:09:33","type":"posts","category":"잡담","tag":["React(리액트)","Next.js","개발 블로그","Jekyll"],"comment":true,"publish":true},"name":"2021-05-21-jekyll-to-nextjs.md","url":["2021-05-21-jekyll-to-nextjs","2021","05","21","jekyll-to-nextjs"]}]}},"__N_SSG":true}