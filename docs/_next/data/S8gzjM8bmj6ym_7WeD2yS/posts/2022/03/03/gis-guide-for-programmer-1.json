{"pageProps":{"page":{"type":"posts","prev":{"header":{"title":"Tomcat 9 vs 10","excerpt":"필자는 Jersey 3 라이브러리를 활용하여 API 서버를 구성하고 있다. 코드를 작성하고 올바른 URL을 호출했음에도, 404 오류가 계속 출력됐다. 간단한 테스트 서블릿을 작성하고, 공식 문서와 아무리 비교를 해도 별다른 특이점을 찾을 수 없었다. 알고보니, Jersey 3는 Servlet 5.0을 지원하기 때문에 Servlet 5.0 스펙을 구현한 Tomcat 10 이상부터 구동이 가능하다는 것을 처음 알았다. 지금껏 톰캣의 버전을 크게 신경쓰지 않았으나, 이 계기로 Tomcat 9와 Tomcat 10에 큰 차이가 있다는 것을 깨달았다.","coverImage":"https://user-images.githubusercontent.com/50317129/145976356-6b5d1430-31c0-4c34-829e-6be8f747ab19.png","date":"2021-12-29T22:13:12+09:00","type":"posts","category":"알고리즘","tag":["JAVA(자바)","WAS","Tomcat(톰캣)"],"group":"프로그래머스","comment":true,"publish":true},"name":"2022-02-12-tomcat-9-and-10.md","content":"\r\n# 개요\r\n\r\n필자는 `Jersey 3` 라이브러리를 활용하여 API 서버를 구성하고 있다. 코드를 작성하고 올바른 URL을 호출했음에도, 404 오류가 계속 출력됐다.\r\n\r\n간단한 테스트 서블릿을 작성하고, 공식 문서와 아무리 비교를 해도 별다른 특이점을 찾을 수 없었다.\r\n\r\n알고보니, `Jersey 3`는 `Servlet 5.0`을 지원하기 때문에 `Servlet 5.0` 스펙을 구현한 `Tomcat 10` 이상부터 구동이 가능하다는 것을 처음 알았다.\r\n\r\n지금껏 톰캣의 버전을 크게 신경쓰지 않았으나, 이 계기로 `Tomcat 9`와 `Tomcat 10`에 큰 차이가 있다는 것을 깨달았다.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# JavaEE와 JakartaEE\r\n\r\nTomcat 9와 Tomcat 10는 API 구현체가 완전히 달라진다.\r\n\r\n* `JavaEE` - Tomcat 9까지 적용됨 `(javax.*)`\r\n* `JakartaEE` - Tomcat 10부터 적용됨 `(jakarta.*)`\r\n\r\n`Tomcat 9` 이전까진 `JavaEE`라는 동일한 스펙을 구현했다. 이 덕분에 톰캣 버전 업그레이드를 하더라도 하위 호환성 덕분에 `JavaEE`를 사용하는 데 별다른 문제가 없었다.\r\n\r\n하지만 `Tomcat 10`부터는 `JakartaEE`로 완전히 스펙이 변경되어 더이상 호환이 불가능하다. `Servlet 5.0`은 `JakartaEE`부터 지원되므로, 해당 버전의 서블릿을 `JavaEE`로 구동하거나, 더 낮은 버전의 서블릿을 `JakartaEE`로 구동하면 서블릿이 정상적으로 동작하지 않아 404 오류가 뜨게 된다.\r\n\r\n<br />\r\n\r\n내부 로직이나 구조적으론 많은 게 변경됐겠지만, 표면적으로 `JavaEE`와 `JakartaEE`의 차이는 패키지명이다.\r\n\r\n`javax.*`을 `jakarta.*`로 변경하는 것만으로 마이그레이션이 가능하다. 아래는 `JavaEE`와 `JakartaEE`의 패키지를 정리한 것이다.\r\n\r\n|  구분   |       JavaEE        |       JakartaEE       |\r\n| :-----: | :-----------------: | :-------------------: |\r\n| Servlet |   `javax.servlet`   |   `jakarta.servlet`   |\r\n|   JPA   | `javax.persistence` | `jakarta.persistence` |\r\n|   EJB   |     `javax.ejb`     |     `jakarta.ejb`     |\r\n|  Mail   |    `javax.mail`     |    `jakarta.mail`     |\r\n\r\n위와 같이 `EE`명에 따라 `javax`인지 `jakarta`인지로 나뉜다.\r\n\r\n이 내용은 [Tomcat 10 다운로드 페이지](https://tomcat.apache.org/download-10.cgi)에도 명시되어있다. 안타깝게도 한국의 경우, 언어의 장벽이 작용하므로 주의깊게 읽지 않는 한 모르고 지나가기 쉽다.\r\n\r\n\r\n\r\n\r\n\r\n## 왜 굳이?\r\n\r\n사실 이렇게 전체적인 구조가 바뀌는 일은 흔하지 않다. 반드시 바꾸지 않으면 중대한 영향을 미치는 크리티컬한 문제가 발생했거나, 예상될 경우, 적절한 논의와 의견 조율을 통해 바꾸는 것이 대부분이다. 특히 Java처럼 사용자 풀이나 서비스의 규모가 세계급인 것은 더더욱 그렇다.\r\n\r\n그럼에도 불구하고 이렇게 패키지명을 변경한 이유는, 코드적인 목적보다는 소위 **어른들의 사정**으로 인한 이유가 더욱 크다.\r\n\r\n2010년, Oracle이 Java의 개발사인 Sun Microsystems를 인수하면서 관련 라이센스가 Oracle로 전부 이관되게 된다. 이후 7년 뒤, Oracle은 Java의 라이센스를 Eclipse Foundation으로 이관하게 된다.\r\n\r\n이 과정에서 Java의 라이센스는 이관되었지만, Java의 상표는 여전히 Oracle이 소유하고 있어, 이클립스 재단은 `JavaEE`에 사용되는 Java를 \"Java\"라고 명명할 수 없는 촌극이 발생하게 된다. 미국판 홍길동인 셈. 이는 [이클립스 재단 블로그](https://eclipse-foundation.blog/2019/05/03/jakarta-ee-java-trademarks/)에서 자세한 내막을 확인할 수 있다.\r\n\r\n때문에 이클립스 재단은 `JavaEE`로 인한 라이센스를 준수하기 위해 `JakartaEE`로 명칭을 변경하여 운영하게 된 것이다. 따라서 앞으로 이클립스 재단이 개발하는 모든 사항은 `JakartaEE`에 반영된다.\r\n\r\n`JavaEE`의 릴리즈는 종료된 셈이다. 수 년이 지나면 `JavaEE`는 deprecated로 더이상 사용되지 않게 될 가능성 또한 배제할 수 없다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## JakartaEE에서 JavaEE 사용하기\r\n\r\nTomcat 9와 10 사이의 차이로 인해, JavaEE를 사용하여 컴파일된 WAR는 사용할 수 없다. 특히 서드파티 WAR를 반드시 사용해야하는 경우, 본인이 직접 컴파일한 게 아니라서 구조를 변경하기도 난감하다.\r\n\r\n하지만 위에서 언급한 듯이 JavaEE와 JakartaEE의 마이그레이션이 매우 간단하기 때문에, 아래의 방법만 활용하면 JavaEE로 컴파일된 WAR를 JakartaEE로 간단히 변환할 수 있다.\r\n\r\n1. Tomcat 10의 경로에 `webapps-javaee`를 만든다.\r\n2. `webapps-javaee`에 변환하길 원하는 WAR를 위치시킨다.\r\n3. Tomcat에서 변환하는 걸 기다린다.\r\n   1. 만약 변환되지 않는다면 재기동\r\n4. `webapps`에서 변환된 WAR를 확인할 수 있다.\r\n\r\n위 내용은 [Tomcat 공식 홈페이지](https://tomcat.apache.org/)의 Tomcat 10 릴리즈 내용에서도 확인할 수 있다.\r\n\r\n이런 방식으로 JavaEE -> JakartaEE로의 변환이 가능하다. 그 반대도 가능한지는 따로 명세된 게 없다.","url":["2022-02-12-tomcat-9-and-10","2022","02","12","tomcat-9-and-10"]},"next":{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 2. GIS랑 인사하기","excerpt":"여러분들이 GIS를 처음 접했다면, 한 번 물어보고 싶다. 공간이란 뭘로 이루어져 있을까? 한 번 생각해보자. 다양한 답이 나왔을 것이라 생각한다. 무슨 답인지 내가 직접 못 듣는다는 게 좀 아쉽지만. 아마 대부분 추상적인 답이 나왔을 것이라 생각한다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-03T23:36:04+09:00","type":"posts","category":"GIS","tag":["GIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-03-gis-guide-for-programmer-2.md","content":"\r\n# GIS의 50가지 그림자\r\n\r\n여러분들이 GIS를 처음 접했다면, 한 번 물어보고 싶다. **공간이란 뭘로 이루어져 있을까?** 한 번 생각해보자.\r\n\r\n다양한 답이 나왔을 것이라 생각한다. 무슨 답인지 내가 직접 못 듣는다는 게 좀 아쉽지만. 아마 대부분 추상적인 답이 나왔을 것이라 생각한다.\r\n\r\n<br />\r\n\r\n어떤 사물을 파악할 때, <span class=\"red-500\">가장 효과적인 방법은 사물의 본질을 파악하는 것</span>이다. 철로 이루어진 어떤 물건이 있다고 해보자. 이걸 어디다 쓰는진 알 수 없지만, 단단한 게 필요할 때 요긴하게 쓸 수 있을 것이다. 필요하다면, 녹여서 다른 철제 물건으로 만들 수도 있다.\r\n\r\n반대로 이게 정확히 뭔지 모르고 \"어... 이거 그건데..? 그 뭐였더라...?\" 같은 추상적인 방법으로 접근한다면 그 사물이 뭔지 파악하는 건 매우 어렵다.\r\n\r\n공간을 구현해야한다는 관점에서 볼 때, 공간을 추상적인 개념으로 접근한다면 공간을 디지털화하기 매우 어려울 것이다. 때문에 우리는 공간을 다루기 이전에, 공간이 무엇으로 이루어지는지 그 개념을 명확하게 알 필요가 있다.\r\n\r\n공간은 **점(Point)**, **선(Line)**, **면(Polygon)**으로 이루어진다.\r\n\r\n* 공간에 점을 하나 찍으면 점이 생긴다.\r\n* 무수히 많은 점을 연달아 찍으면 선이 생긴다.\r\n* 무수히 많은 선을 연달아 그으면 면이 생긴다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156584563-367bd1e7-390d-4e3d-bef1-1ff3103b1a13.png)\r\n\r\n3차원 관점에서는 좀 더 복잡한 요소들이 작용하지만, 2차원은 단순한 점, 선, 면만으로 온전한 공간을 구현할 수 있다. 면은 선의 집합으로 표현할 수 있고, 선은 점의 집합으로 표현할 수 있으니, 공간은 점의 위치들로 표현이 가능하다. 이 글에서 궁극적으로 다룰 OpenLayers는 2차원 형태의 지도이므로, 이 정도로만 기억해도 당장엔 무리가 없다.\r\n\r\n공간이 무엇으로 이루어져 있는지 앞서 생각한 답과 점의 집합 중 어느게 더 구현하기 쉬울 지 비교해보자. 아마 점 $(x, y)$로 표현하는 것이 더 간단할 것이다.\r\n\r\n* 점: 하나의 $(x, y)$로 이루어진다.\r\n* 선: 다수의 $(x, y)$들로 이루어진다. 단, 가장 처음 $(x, y)$와 마지막 $(x, y)$가 달라야 한다.\r\n* 면: 다수의 $(x, y)$들로 이루어진다. 단, 가장 처음 $(x, y)$와 마지막 $(x, y)$가 서로 같아야 한다.\r\n\r\n선과 면의 차이에 주목하자. 선과 면 모두 무수히 많은 점들로 구성되어 있는데, 선과 면을 구분할 수 있는 가장 큰 차이는 가장 첫 좌표와 마지막 좌표가 동일한지 확인하는 것이다.\r\n\r\n<span class=\"blue-500\">첫 좌표와 마지막 좌표가 동일하면 온전히 하나의 면이 이루어진 것</span>으로 보며, 만약 육안으로 아무리 가까워보여도 <span class=\"blue-500\">첫 좌표와 마지막 좌표가 서로 일치하지 않으면 선</span>이다.\r\n\r\n3차원 공간은 GIS 지식에 대한 전공 수준의 이해 뿐만 아니라, 3D 프로그래밍에도 조예가 있어야하는 매우 복잡한 영역이니, 여기선 다루지 않는다. <del class=\"grey-500\">애초에 3차원 개발하려는 사람의 수준은 이 글을 아득히 뛰어넘는다.</del>\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 공간정보를 냉장고에 넣는 법\r\n\r\n디지털에서 공간을 표현하는 데 점의 위치를 이용한다는 것을 알았다. 그런데, 이 정보. 도대체 어떤 식으로 다뤄야될까?\r\n\r\n점의 경우 다행히 데이터의 표현 방식이 $(x, y)$로 명확하다. 하지만 선, 면으로 가면 얘기가 다소 복잡해진다. 우선 데이터의 양이 매우 많아진다. 데이터를 어떤 식으로 구분하는지에도 차이가 발생한다.\r\n\r\n* ${x_1}$,${y_1}$ ${x_2}$,${y_2}$ ... ${x_n}$,${y_n}$\r\n* ${x_1}$ ${y_1}$,${x_2}$ ${y_2}$, ... ${x_n}$ ${y_n}$\r\n\r\n위 처럼 같은 집합을 표현함에도 개발자에 따라 다양한 표현 방법이 나오게 된다. 특정 컬럼의 양이 기하급수적으로 늘어남은 물론이고, 문자열 연산도 수행해야한다. 더 큰 문제는 데이터 보관 주체마다 양식이 통일되지 않으므로, 호환성은 희망사항일 뿐이다.\r\n\r\n때문에 공간정보를 다루기 위한 여러 포맷이 고안됐다.\r\n\r\n<br />\r\n\r\n\r\n\r\n### SHP (Shape)\r\n\r\n가장 대표적인 공간정보 데이터 포맷이다. 미국의 ESRI에서 공간정보 데이터를 위해 고안한 형식이다. ESRI는 SHP 뿐만 아니라 QGIS라는 걸출한 GIS 오픈소스 툴을 만든 회사이기도 하다.\r\n\r\nSHP는 일반 데이터 컬럼은 데이터 형식에 맞게 저장하고(VARCHAR, NUMBER, DATE 등) 위치정보만 정해진 규격으로 저장한다. 해당 바이너리를 통해 데이터의 형식 및 좌표 데이터를 산출할 수 있다.\r\n\r\nSHP 파일은 기본적으로 아래 4가지 파일로 이루어져있다. shp를 제외한 나머지 파일은 shp를 보조하는 파일로, 없어도 shp를 다루는데 문제는 없다.\r\n\r\n* `shp`: 벡터 도형 데이터 (핵심)\r\n* `shx`: 벡터 도형 인덱스\r\n* `dbf`: 각 도형의 속성 데이터\r\n* `prj`: 좌표 정보\r\n\r\n공간정보 뿐만 아니라 다양한 부가 데이터를 쉽게 저장할 수 있으며, 구조 상 데이터베이스와 매우 유사하다는 이점이 있으며, 거의 대부분의 GIS 툴이 SHP를 지원한다.\r\n\r\n이러한 이점과 범용성에 힘입어 공간정보 데이터의 표준이 되었고, 대부분의 공간정보는 기본적으로 SHP로 제공된다고 봐도 무방하다. 즉, <span class=\"primary\">공간정보 데이터는 SHP 하나만 알고 있어도 된다.</span>\r\n\r\n<br />\r\n\r\n\r\n\r\n### GeoJSON\r\n\r\nJSON은 알겠는데, GeoJSON은 또 뭐야? 하겠지만, 우리가 아는 그 JSON 맞다. 단, 공간정보를 표현하기 위해 정해진 방식으로 구성된 JSON이다.\r\n\r\nGeoJSON의 양식은 아래와 같다.\r\n\r\nJavaScript와 친숙한 JSON을 차용함으로써, HTTP 통신으로 공간정보를 쉽게 호출하는 데 쓰인다. 이러한 특성 때문에, 공간정보 데이터를 보관한다는 목적 보다는 HTTP 데이터 통신 시 주로 사용한다.\r\n\r\n물론 GeoJSON도 공간정보를 보관하는데 무리가 없으며, 인지도 있는 GIS 툴은 GeoJSON을 지원한다. 또한 SHP와 달리 데이터의 CRUD에 별다른 툴이 필요하지 않다는 장점이 있다.\r\n\r\n\r\n\r\n### 기타\r\n\r\n그 밖에도 CSV, Excel, txt 등 여러 텍스트 기반 파일로 다루기도 한다. 단, 이러한 형식들은 공간정보를 저장하는데 적합하지 않아 공간 데이터의 추출 결과물이나, 점 데이터에 한해 제한적으로 사용하기도 한다.\r\n\r\n공간정보를 다루는 방법에 있어서 꼭 SHP나 GeoJSON으로만 한정되지 않는다는 것만 참고하자.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 둘러보기\r\n\r\n* [도로명주소 건물 데이터](http://data.nsdi.go.kr/dataset/14783) (로그인 필요)\r\n\r\n위 URL은 도로명주소의 건물 데이터를 제공받을 수 있는 URL이다. 건물 뿐만 아니라 시도, 시군구, 건물 진출입로, 도로 등 다양한 데이터를 제공하고 있다. 대부분 SHP로 제공한다는 점에 주목하자.","url":["2022-03-03-gis-guide-for-programmer-2","2022","03","03","gis-guide-for-programmer-2"]}},"group":[{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 7. 공간정보 데이터를 관리하는 법. GeoServer","excerpt":"이전 장에서 공간정보 데이터를 DB에 넣어봤다. 이제 데이터를 적절한 방법으로 통신할 방법만 마련한다면, DB에 저장한 공간정보 데이터를 웹에서든 앱에서든 자유롭게 활용할 수 있을 것이다. 하지만 누누히 언급했듯이, 공간정보 데이터는 다른 데이터와 엄연한 차별점이 존재한다. 바로 공간 데이터라는 점이다. 공간정보 데이터는 일반적인 텍스트 기반의 데이터가 아니다보니, CRUD에 있어서 굉장히 취약하다. 좀 더 자유로운 통신을 위해 DB에 넣었음에도 CRUD에 전혀 강점이 없는 것. 즉, MyBatis든, JPA든, 일반적인 DB 통신으로는 공간정보 데이터를 온전히 받기가 어렵다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-07T01:12:33+09:00","type":"posts","category":"GIS","tag":["GIS","GeoServer"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-07-gis-guide-for-programmer-7.md","content":"\r\n# Without GeoServer\r\n\r\n이전 장에서 공간정보 데이터를 DB에 넣어봤다. 이제 데이터를 적절한 방법으로 통신할 방법만 마련한다면, DB에 저장한 공간정보 데이터를 웹에서든 앱에서든 자유롭게 활용할 수 있을 것이다.\r\n\r\n하지만 누누히 언급했듯이, 공간정보 데이터는 다른 데이터와 엄연한 차별점이 존재한다. 바로 공간 데이터라는 점이다. 공간정보 데이터는 일반적인 텍스트 기반의 데이터가 아니다보니, CRUD에 있어서 굉장히 취약하다. 좀 더 자유로운 통신을 위해 DB에 넣었음에도 CRUD에 전혀 강점이 없는 것.\r\n\r\n즉, MyBatis든, JPA든, 일반적인 DB 통신으로는 공간정보 데이터를 온전히 받기가 어렵다.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# GeoServer\r\n\r\n이 쯤에서 등장하는 게 <span class=\"primary\">GeoServer</span>다. GeoServer는 GIS 데이터를 공유, 편집할 수 있는 웹 서버다. JAVA로 개발된 오픈 소프트웨어다.\r\n\r\nAPI 형태로 원하는 GIS 데이터를 다양한 형태로 통신할 수 있으며, 엔진 단계에서 좌표계 변환, 타일 렌더링 등을 제공하기 때문에 개발자가 구현해야할 GIS 연산 로직이 대폭 감소한다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## GeoServer 설치하기\r\n\r\n설치는 [GeoServer 공식 홈페이지](http://geoserver.org/release/stable/)에서 확인 가능하다. GeoServer의 파일은 두 가지 형태로 제공한다.\r\n\r\n* Stand-Alone: 단독 설치버전. WAS가 자체적으로 포함되어있음.\r\n  * Platform Independent Binary: OS에 범용적인 바이너리 파일\r\n  * Windows Installer: Windows 전용 exe 파일\r\n* Web Archive: WAR 버전. Tomcat같은 JavaEE를 구현한 WAS에서 구동 가능.\r\n\r\n둘 중 원하는 방식을 사용하면 된다.\r\n\r\n만약 별도로 Tomcat을 운용하는데, GeoServer 스탠드얼론 버전을 사용할 경우, 포트가 8080으로 서로 겹친다. GeoServer 스탠드얼론 버전의 기본 포트도 8080이기 때문. `start.ini`의 `jetty.port=8080`을 원하는 포트로 변경해주면 된다.\r\n\r\n기본 설정 기준으로 [https://localhost:8080/geoserver](https://localhost:8080/geoserver)로 접속하면 GeoServer에 접속할 수 있다.\r\n\r\n-- 사진 --\r\n\r\n위 화면이 뜬다면 정상적으로 설치가 완료된 것.\r\n\r\nGeoServer의 모든 설정은 웹에서 관리하므로, 여기에서 원하는 설정을 관리하면 된다.\r\n\r\n기본 계정의 아이디/비밀번호는 `admin/geoserver`다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 계정 관리\r\n\r\n기본 계정을 그대로 사용할 경우, 보안 상의 위협을 받을 수 있다. 따라서 비밀번호를 변경하거나, 아예 새로운 계정을 만들어 관리하는 것이 안전하다.\r\n\r\n사이드 메뉴의 [사용자, 그룹, 역할] 메뉴를 클릭한다. 상단의 탭에서 [사용자/그룹] 탭을 클릭하여 계정을 관리할 수 있다. `admin` 계정은 가장 기본적으로 제공하는 계정이므로, 노출도가 심하다. 비밀번호를 적절히 변경해주거나, 아니면 아예 다른 계정을 사용하는 것이 안전하다.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n### 새로운 계정 생성하기\r\n\r\n상단의 버튼 중 [새로운 사용자 추가] 버튼을 클릭한다.\r\n\r\n-- 사진 --\r\n\r\n원하는 계정명, 비밀번호를 입력한다. 맨 하단의 역할에서 [ADMIN]을 활성화하면, 기존의 `admin` 계정과 동일한 권한을 부여받는다.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n### admin 계정 비활성화\r\n\r\n사용하지 않는 계정은 비활성화하는 것이 안전하다. 아까와 동일한 메뉴에서 `admin` 계정을 클릭하여 들어간다.\r\n\r\n계정명 하단의 [비활성화] 체크박스를 활성화하고 저정하면 계정이 비활성화된다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 레이어 추가하기\r\n\r\nGeoServer를 설치했으니, GeoServer에게 어떤 데이터를 서비스할 것인지 알려주는 과정이 필요하다. 이 과정을 \"레이어를 추가한다\"고 한다.\r\n\r\n레이어는 아래의 분류를 가진다.\r\n\r\n* 레이어: 데이터의 주체가 되는 소분류. DB의 테이블이 여기에 해당한다.\r\n* 레이어 그룹: 다수의 레이어를 그룹화한 것. 한꺼번에 여러개의 레이어를 호출해야할 경우, 그룹화하여 호출 레이어를 간략화할 수 있다.\r\n* 저장소: 데이터 저장소가 되는 중분류. DB, SHP가 여기에 해당한다. 다수의 레이어 및 그룹을 하위에 포함하고 있다.\r\n* 작업공간: GeoServer에서 레이어를 관리하기 위한 대분류. 다수의 저장소를 하위에 포함하고 있다.\r\n\r\n작업공간은 저장소를 포함하고, 저장소는 레이어 그룹 및 레이어를 포함한다. 즉, 레이어를 추가하기 위해선 먼저 작업공간을 만들고, 저장소를 추가한 뒤 레이어를 생성하는 순서로 진행된다.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n### 1. 작업공간 추가하기\r\n\r\n레이어의 가장 대분류가 되는 작업공간을 추가하자. 좌측 사이드 메뉴에서 [작업공간] 메뉴를 클릭하자.\r\n\r\n-- 사진\r\n\r\n[새로운 작업공간 추가하기]를 클릭하여 작업공간을 추가한다.\r\n\r\n이름과 URL를 지정한다. URI는 추후 레이어 호출 시 같이 입력해야 하므로, 적절한 걸 입력해주자.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n### 2. 저장소 생성하기\r\n\r\n레이어를 담고있는 저장소를 생성하자. SHP 혹은 DB를 연결할 수 있다.\r\n\r\nDB의 경우, 기본적으로 PostgreSQL을 지원하며, 별도의 플러그인을 통해 다른 DB와의 연결을 추가할 수도 있다. 이 장에서 사용할 MariaDB(MySQL)의 경우도 별도의 플러그인을 추가하여 진행하게 된다.\r\n\r\n-- 사진\r\n\r\n[새로운 저장소 생성하기]를 클릭하여 저장소를 생성한다.\r\n\r\n원하는 연결 방법을 선택하자. 파일 시스템의 SHP를 지정할 수도, DB를 연결할 수도 있다.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n#### 플러그인 추가하기\r\n\r\n[GeoServer 다운로드 페이지](http://geoserver.org/release/stable/)에서 각 버전에 해당하는 플러그인을 다운로드 받을 수 있다.\r\n\r\n링크의 사이트를 Stable 버전으로, 자신이 설치한 버전에 맞는 플러그인을 받는 것이 좋으므로 버전을 꼭 확인하자.\r\n\r\nMariaDB(MySQL) 플러그인의 경우, 하단의 [Vector Formats - MySQL]을 클릭해서 다운로드 받을 수 있다.\r\n\r\n이 밖에도 Oracle, MongoDB 등 타 DB의 플러그인도 있는 걸 확인할 수 있으니, 필요하다면 참고할 것. [Extensions - Extensions]를 클릭하여 제공하는 플러그인 일체를 확인할 수 있다.\r\n\r\n<br />\r\n\r\n받은 플러그인의 압축을 해제하면 `jar` 파일이 나오는데, 이 `jar` 라이브러리를 GeoServer의 라이브러리에 넣으면 된다. 아래의 경로 중 하나에 넣자.\r\n\r\nTomcat의 설치경로를 `$CATALINA_HOME`으로 표기한다.\r\n\r\n* Tomcat 전역 라이브러리: `$CATALINA_HOME/lib`\r\n* GeoServer 라이브러리 `$CATALINA_HOME/webapps/geoserver/WEB-INF/lib`\r\n\r\n이후 재기동을 해주면 반영된다. MySQL 플러그인을 설치하면, 이후 [저장소 생성하기] 메뉴의 저장소 목록에서 MySQL 관련 항목이 추가된 것을 확인할 수 있다.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n#### SHP 추가하기\r\n\r\nDB를 따로 구축하기 싫다면, 파일 기반의 SHP를 통해 레이어를 구성할 수도 있다.\r\n\r\n[Directory of Spatial files]를 클릭한다.\r\n\r\n-- 사진\r\n\r\n1. 할당할 저장공간을 선택한다.\r\n2. 데이터 저장소의 이름을 선택한다.\r\n3. SHP 경로를 지정한다.\r\n4. 데이터의 문자셋을 지정한다.\r\n\r\n이후 저장을 누르면 SHP 기반의 저장소가 생성된다.\r\n\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n#### MariaDB(MySQL) 추가하기\r\n\r\nGIS 데이터를 관리하는 DB가 있다면, GeoServer와 연동하여 레이어를 구성할 수 있다.\r\n\r\n진행 전에 아래 두 사항을 진행했는지 확인하자.\r\n\r\n* GIS 데이터가 DB에 이미 삽입되어 있어야한다.\r\n* MySQL 플러그인이 설치되어 있어야한다.\r\n\r\n[MySQL]을 클릭한다.\r\n\r\n-- 사진\r\n\r\n1. 할당할 저장공간을 선택한다.\r\n2. 데이터 저장소의 이름을 선택한다.\r\n3. host를 입력한다. (IP 혹은 도메인)\r\n4. 포트를 입력한다.\r\n5. 데이터베이스의 이름을 입력한다.\r\n6. 계정명, 비밀번호를 입력한다.\r\n\r\n이 정도가 필수 사항이고, 나머지 하단의 옵션은 Connection Pool에 대한 설정이므로 원한다면 별도로 수정해주면 된다.\r\n\r\n이후 저장을 누르면 MySQL 기반의 저장소가 생성된다.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n### 3. 레이어 추가하기\r\n\r\nGIS 데이터의 기본이 되는 레이어를 추가하자. 기존에 유효한 저장소가 추가되어 있어야, 정상적으로 레이어를 추가할 수 있다.\r\n\r\n[새로운 레이어 추가하기]를 클릭한다.\r\n\r\n-- 사진\r\n\r\n1. 대상 저장소를 선택한다. 추가 가능한 레이어 목록이 표시된다.\r\n2. 원하는 레이어의 우측 [발행하기] 버튼을 클릭한다.\r\n3. 좌표계를 지정한다. 원하는 좌표계를 검색하여 선택할 수 있다.\r\n4. 레이어 영역을 지정한다. [데이터로부터 계산하기], [원본 영역으로부터 계산하기]를 각각 눌러주면 알아서 계산된다.\r\n5. 상단 탭의 [발행]을 클릭한다.\r\n6. [WMS 설정]의 [기본 스타일]을 지정한다.\r\n   1. 해당 스타일은 WMS 요청 시 기본으로 지정되여 렌더링된다. (자세한건 추후 별도 문서에서 후술)\r\n\r\n이후 저장을 누르면 레이어가 추가된다. 여기까지 진행해야 GeoServer에서 레이어를 호출할 수 있다.\r\n\r\n레이어 호출 시 `{저장공간 URI명}:{레이어명}`으로 레이어를 특정할 수 있다. 만약, 저장공간의 URI를 `storage`라 지정하고, 레이어명은 `polygon`으로 지정했다면, `storage:polygon`이라는 형식으로 해당 레이어를 특정할 수 있는 것이다.","url":["2022-03-07-gis-guide-for-programmer-7","2022","03","07","gis-guide-for-programmer-7"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 6. 공간정보의 DB화","excerpt":"데이터의 CRUD 소요가 있는 서비스는 DB를 사용한다. 서비스 운영에 필요한 데이터를 DB에 저장하고, 이를 적절히 관리, 조작함으로써 서비스의 기능을 제공한다. GIS의 경우, 그 특성상 대용량 데이터를 자주 접하게 된다. 일례로, 전국의 건물 수는 몇백만을 우습게 상회하기 때문. 단순 row가 백만 단위인 것도 문제지만, 건물 정보의 특성 상 column의 갯수 또한 수십 개 정도다. 때문의 데이터의 용량이 매우 커진다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-05T04:35:41+09:00","type":"posts","category":"GIS","tag":["GIS","MariaDB","QGIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-05-gis-guide-for-programmer-6.md","content":"\r\n# 공간정보 데이터 관리하기\r\n\r\n데이터의 CRUD 소요가 있는 서비스는 DB를 사용한다. 서비스 운영에 필요한 데이터를 DB에 저장하고, 이를 적절히 관리, 조작함으로써 서비스의 기능을 제공한다.\r\n\r\nGIS의 경우, 그 특성상 대용량 데이터를 자주 접하게 된다. 일례로, 전국의 건물 수는 몇백만을 우습게 상회하기 때문. 단순 row가 백만 단위인 것도 문제지만, 건물 정보의 특성 상 column의 갯수 또한 수십 개 정도다. 때문의 데이터의 용량이 매우 커진다.\r\n\r\n때문에 공간정보 역시 DB에 저장하여 관리할 필요성이 생긴다. 하지만 문제는 공간정보는 DB에 저장하기 꽤나 까다롭다. 다른 데이터야 문자열이든 정수형이든 대충 삽입하면 되지만, 좌표값에서 문제가 발생한다. 점의 경우 $(x, y)$로 비교적 간단하지만, 선과 면의 경우 $xy$좌표가 무수히 나올 수 있으므로 문제가 커진다.\r\n\r\n그 뿐만 아니라, 별도로 언급하지 않은 복잡한 형태의 도형(도넛처럼 가운데가 빈 면 등)을 저장할때도 많은 문제가 생긴다. 때문에 적절한 툴을 활용하여 DB에 SHP를 삽입하는 것이 가장 효과적이다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## ogr2ogr로 MariaDB에 SHP 삽입하기\r\n\r\n이 장에서는 DB에 SHP를 삽입하는 방법으로 `ogr2ogr`을 사용한다. 이 툴은 공간정보를 다루는 라이브러리로, QGIS를 설치하면 자동으로 같이 설치된다.\r\n\r\n`ogr2ogr`만 따로 설치하는 것보다 QGIS 설치해서 딸려나오는 걸 사용하는 게 훨씬 편하므로, 여기선 이 방법을 통해 기술한다.\r\n\r\nQGIS 3.16 기준으로 일반적인 설치 경로는 `C:\\Program Files\\QGIS 3.16`이다. 물론 버전에 따라 경로는 조금씩 차이가 발생할 수 있으니 참고만 할 것.\r\n\r\n`C:\\Program Files\\QGIS 3.16\\bin`에서 `ogr2ogr`을 찾을 수 있다. 해당 경로에서 `cmd`를 통해 `ogr2ogr`에 명령어를 날려 SHP를 삽입해보자.\r\n\r\n<br />\r\n\r\n``` batch\r\nogr2ogr -f MySQL MySQL:{DB명}, host={DB 호스트}, user={DB 계정명}, password={DB 비밀번호} {SHP 경로} -nln {생성할 테이블 이름} -a_srs {SHP의 EPSG 코드} -lco engine=MYISAM\r\n```\r\n\r\n위 명령어를 입력하여 SHP를 MariaDB에 삽입할 수 있다. `-nln` 옵션을 지정하지 않을 경우, SHP의 이름을 그대로 따라간다.\r\n\r\n삽입 시, SHP의 테이블 외에도 공간정보의 메타데이터를 관리하는 테이블이 2개 생성되며, 각각 아래와 같다.\r\n\r\n* `geometry_columns`: 각 레이어의 좌표 정보에 대한 메타데이터\r\n* `spatial_ref_sys`: 사용된 좌표계의 메타데이터\r\n\r\n위 두 테이블은 개발자가 직접 사용할 일은 거의 없으니 그냥 이런 게 있다고 알고만 있으면 된다. 이 점을 모를 경우, 내가 의도한 테이블 외에 다른 테이블이 생김에 혼란을 일으킬 수 있기 때문.\r\n\r\n> <b class=\"yellow-500\">🙋‍♂️ DB는 꼭 MariaDB가 아니여도 상관없어요!</b>  \r\n> 이 문서에서는 MariaDB를 기준으로 설명했지만, 이건 어디까지나 내 서버에 MariaDB를 운용하고 있기 때문이지, 다른 이유가 있는 건 아니다.  \r\n> GIS를 전문으로 취급하는 데이터베이스를 구축할 심산이라면, PostgreSQL이 훨씬 나은 선택지다. PostgreSQL은 GIS 관련 기능이 매우 강력하기 때문에, DB 자체적으로 많은 편의기능을 제공한다.  \r\n> 많은 GIS 툴에서 PostgreSQL과의 직접적인 Connection Pool을 기본으로 제공한다.\r\n\r\n<br />\r\n\r\nSHP 데이터를 입력하다보면, 잘못된 도형으로 인해 삽입이 되지 않는 현상을 종종 목격한다. 명령어 마지막에 `--skipfailure` 옵션을 붙여주면 오류가 난 행은 제외하고 삽입하니 참고할 것.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156867178-87770a5a-e24f-4beb-b21b-fc081d67e5aa.png)\r\n\r\nSHP를 MariaDB에 삽입한 예시. DBeaver로 데이터베이스를 확인하면 무려 OSM을 기반으로 데이터의 형태까지 보여준다. 하단의 메뉴에서 EPSG 코드를 설정할 수 있으니 참고할 것.","url":["2022-03-05-gis-guide-for-programmer-6","2022","03","05","gis-guide-for-programmer-6"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 5. OpenLayers","excerpt":"OpenLayers는 웹 브라우저에서 지도나 GIS 서비스를 제공하기 위한 JavaScript Library다. GIS 라이브러리 중 진입 장벽은 가장 높지만, 그에 상응하는 강력한 기능을 제공한다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-05T03:39:25+09:00","type":"posts","category":"GIS","tag":["GIS","OpenLayers"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-05-gis-guide-for-programmer-5.md","content":"\r\n# OpenLayers\r\n\r\nOpenLayers는 웹 브라우저에서 지도나 GIS 서비스를 제공하기 위한 JavaScript Library다. GIS 라이브러리 중 진입 장벽은 가장 높지만, 그에 상응하는 강력한 기능을 제공한다.\r\n\r\n``` bash\r\n# OpenLayers 설치\r\nyarn add ol\r\n```\r\n\r\nOpenLayers는 위와 같이 설치할 수 있다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## OpenLayers의 Map 객체 구조\r\n\r\nOpenLayers의 핵심이 되는 `Map` 객체엔 다양한 객체가 있다. 이 객체들이 서로 모이고 엮여, 하나의 상호작용 가능한 맵이 구현된다.\r\n\r\n하나의 맵에 많은 객체들이 연관된 만큼, 각각의 객체들이 무엇을 의미하는지 파악하지 못하면 원하는 걸 구현하기 위해 어떤걸 사용해야하는지 모르는 사태가 벌어진다. 불행히 관련 키워드조차 모른다면, 관련 정보를 찾는 것조차 어려워진다. 설상가상으로 GIS라는 영역은 국내에서 자료의 양이 그리 많지 않다.\r\n\r\n이런 시간낭비를 미연에 방지하기 위해, OpenLayers의 각 객체가 가지는 특성과, 무엇을 포함하는지와 같은 구조를 이해하면 구현이 좀 더 수월해질 것이다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156811772-4fd36475-dcc9-41a5-a3ab-c7bcef24e8da.png)\r\n\r\n위 그림은 OpenLayers의 주요 객체들을 도식화한 것이다. (그림의 객체가 OpenLayers의 전부는 아님)\r\n\r\n* `Feature`: 점, 선, 면과 같은 요소 (벡터 레이어 한정)\r\n* `Source`: 레이이의 데이터 원천. Feature의 모음과 같다. (SHP, GeoJSON 등)\r\n* `Layer`: 데이터 원천을 토대로 정의한 데이터셋 (벡터, 이미지)\r\n* `View`: 사용자가 현재 맵을 바라보는 방식의 정보\r\n* `Interaction`: 맵의 상호작용 요소 (Zoom in, out 버튼 등)\r\n* `Overlay`: 맵에 표시할 요소\r\n\r\n이 외에도 여러 객체들이 모여 하나의 맵을 구성하게 되고, 이 맵이 사용자에게 보여지게 된다.\r\n\r\n이를 잘 알아두면, 내가 필요한 정보에 따라 어떤 객체에 접근해야하는지 설계할 수 있다. 예를 들어, 각 `Feature`에 접근하고 싶다면, `Map`의 `Layer` 객체에 접근해야한다. 또한, 사용자가 바라보는 위치의 중심, 영역이 필요하다면 `View` 객체에 접근해야한다. 버튼을 만들고 싶다? `Interaction`에 길이 있을 것이다.\r\n\r\n그 밖의 다양한 정보들은 [OpenLayers Docs](https://openlayers.org/)를 참고하자. 공식문서가 엄청 자세하고 친절한 편은 아니니 참고할 것. 아 물론, 당연히 영어다.","url":["2022-03-05-gis-guide-for-programmer-5","2022","03","05","gis-guide-for-programmer-5"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 4. QGIS 체험하기","excerpt":"이전에 대부분의 공간정보 데이터는 SHP를 기본으로 제공한다고 언급했었다. 그런데 문제는 이 SHP. 어떻게 여는지 모르겠다. GeoJSON이나 CSV 같은 텍스트 기반 데이터는 어찌됐든 열어서 검증을 해볼 수 있지만, SHP는 그게 안 된다는 말이다. 때문에 SHP를 열어서 조작할 수 있는 일종의 툴이 필요한데, 이미 여러 툴이 있으니 크게 문제되진 않는다. 가장 대표적인 툴은 두 가지가 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-05T03:05:25+09:00","type":"posts","category":"GIS","tag":["GIS","QGIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-05-gis-guide-for-programmer-4.md","content":"\r\n# QGIS\r\n\r\n이전에 대부분의 공간정보 데이터는 SHP를 기본으로 제공한다고 언급했었다. 그런데 문제는 이 SHP. 어떻게 여는지 모르겠다. GeoJSON이나 CSV 같은 텍스트 기반 데이터는 어찌됐든 열어서 검증을 해볼 수 있지만, SHP는 그게 안 된다는 말이다.\r\n\r\n때문에 SHP를 열어서 조작할 수 있는 일종의 툴이 필요한데, 이미 여러 툴이 있으니 크게 문제되진 않는다. 가장 대표적인 툴은 두 가지가 있다.\r\n\r\n* ArcGIS: 강력한 퍼포먼스를 가진 상용 프로그램. 비싸다.\r\n* QGIS: ESRI에서 만든 오픈소스 프로그램. 무료지만, 대용량 처리 시 좀 버벅인다.\r\n\r\n타일맵 제작이나 초대용량 데이터 처리가 아니라면, 대부분은 QGIS로 충분히 커버할 수 있다. 두 프로그램 모두 Python으로 개발되었으며, 덕분에 Python을 활용한 다양한 플러그인을 사용할 수 있다. 본인이 Python에 조예가 있다면, 직접 스크립트를 입력하여 복잡한 동작을 수행할 수도 있다. 하지만 QGIS로 이 정도 수준의 업무를 수행한다면, 개발자라기보단 데이터 관련 직무에 더 가깝다.\r\n\r\n공간정보 데이터에 대한 충분한 이해 없이 OpenLayers를 다뤄봤자, 혼란만 가중된다. 때문에 OpenLayers에 대해 설명하기 이전에, QGIS를 통해 SHP를 다루는 방법을 먼저 다루고 넘어간다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 설치하기\r\n\r\nQGIS는 [공식 홈페이지](https://qgis.org/ko/site/)에서 다운로드 받을 수 있다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## SHP 열어보기\r\n\r\nQGIS를 실행하고, SHP를 드래그해보자. 정상적인 공간정보 파일이라면, 관련 데이터가 창에 표시된다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156781770-e5540bed-d1c3-4fde-be69-e3dac0e08c8c.png)\r\n\r\n위 데이터는 도로명주소에서 제공하는 세종시 건물 데이터다. 처음 해보는 사람도, 일단 뭔가 유효한 데이터가 출력됐다 정도는 인식할 수 있다.\r\n\r\n건물은 면(Polygon) 형태를 띈다. 각 도형은 건물을 의미한다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## Open Street Map 띄워서 비교하기\r\n\r\n데이터가 나왔다는 건 알겠는데, 저 건물이 실제로 어떤 위치에 있는지 확인하기 매우 어렵다. 즉, 위치를 비교할 수 있는 완전한 지도를 같이 띄워놓고 비교하는 것이 편하다.\r\n\r\nQGIS는 Open Street Map(이하 OSM) 레이어를 기본으로 제공한다.\r\n\r\nOSM이란, 전세계 지도 종사자들이 자율적으로 관리하는 세계지도다. 각국의 지도는 해당 국가의 개발자들이 기여하므로, 로컬라이징은 물론, 세계화도 잘 되어있어 당장 간편하게 쓰기 좋은 지도다. 단, 네이버나 카카오처럼 국내에 특화된 지도는 아니라서, 국내 한정 서비스에 적용하기는 다소 아쉽다.\r\n\r\n<br />\r\n\r\n물론 이건 어디까지나 서비스할 때 얘기고, 당장 데이터 놓고 위치 비교하기엔 이만한 게 없다.\r\n\r\n좌측 사이드바에서 [XYZ Tiles - OpenStreetMap]을 더블 클릭하여 레이어에 추가하자.\r\n\r\n레이어 순서에 따라 표시되는 우선순위가 달라지니, 가급적 OpenLayers를 제일 밑에 두도록 하자.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156783705-707ce5d6-c6ce-4d7f-9b49-ce13d824f9e6.png)\r\n\r\n더욱 비교하기 쉬워졌다. 데이터를 보면 얼추 세종시의 지형에 맞게 데이터가 배치된 것을 확인할 수 있다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 데이터 확인하기\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156788688-ce4efff3-9648-45a9-8f19-fed8fc81ee21.png)\r\n\r\n데이터를 클릭해서 정보를 확인할 수 있다. 상단 메뉴에서 [객체 식별 (Ctrl + Shift + I)] 버튼을 클릭하고 객체를 누르면 정보를 확인할 수 있다.\r\n\r\n<br />\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156793866-a6d13e58-fc2b-4b63-aabc-5e16112b07b2.png)\r\n\r\n레이어를 오른쪽 마우스로 클릭하면 사용 가능한 메뉴를 볼 수 있다. [속성 테이블 열기]를 클릭하면 모든 데이터의 속성을 볼 수 있다. DB의 형태와 매우 유사하다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156789125-2c96cf14-43d8-4202-bfbf-752aacad0bcb.png)\r\n\r\n데이터를 찾거나, 선택한 데이터를 지도에 표시하는 것은 물론, 데이터의 수정, 삭제 또한 가능하다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 좌표계 설정하기\r\n\r\nQGIS는 각 레이어의 좌표계를 확인하고 주 좌표계로 변환하여 QGIS에 표시한다.\r\n\r\n예를 들어, 아래와 같다고 해보자.\r\n\r\n* 주 좌표계: EPSG:4326\r\n* A 레이어 좌표계: EPSG:5179\r\n* B 레이어 좌표계: EPSG:3857\r\n\r\n주 좌표계가 `EPSG:4326`이므로, A, B 좌표를 `EPSG:4326`으로 변환하여 QGIS에 표시한다. 최종적으로 사용자는 `EPSG:4326`으로 표현된 지도를 볼 수 있다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156792339-013c91ae-0762-44f0-a03d-fe76144271b2.png)\r\n\r\n주 좌표계는 QGIS 우측 하단에서 설정할 수 있다. 원하는 EPSG 코드를 찾아 지정하면, 해당 좌표계로 데이터가 자동 변환되어 표시된다.\r\n\r\n<br />\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156792509-a23d95b7-0a64-4e2e-a483-0cfd0f553d93.png)\r\n\r\n각 레이어의 좌표계는 해당 메뉴를 통해 변환할 수 있다. 반드시 해당 레이어에 맞는 좌표계를 지정해야한다.\r\n\r\n예를 들어, `EPSG:5181` 좌표계로 정의된 레이어를 `EPSG:4326`으로 잘 못 지정하면 전혀 엉뚱한 위치로 계산된다.\r\n\r\n쉽게 설명하자면, 번역기에 이탈리아어를 영어로 인식하고 번역하는 것과 같은 이치다. 영어가 아닌 것을 영어라고 번역하니 전혀 의미없는 단어가 번역되기 때문. 마찬가지로, 레이어 좌표계를 잘 못 지정하면 전혀 엉뚱한 위치로 변환되므로 주의해야한다. 만약 이 현상이 나타났다면, 레이어의 좌표계를 다시 확인하기 바란다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 레이어 저장하기\r\n\r\nQGIS에서 데이터의 내용이나, 좌표계를 변경했을 경우, 이 데이터를 SHP 혹은 그에 준하는 공간정보 데이터로 출력해서 사용할 수 있다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156793756-eb05a60b-be4f-4554-a309-610b0a61ab4b.png)\r\n\r\n[내보내기 - 객체를 다른 이름으로 저장]을 클릭하여 저장 메뉴를 호출한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156800667-0ef7c428-c905-4fa3-94a9-2cdda89193e3.png)\r\n\r\n원하는 데이터 형식과 설정을 입력하면, 데이터를 저장할 수 있다.","url":["2022-03-05-gis-guide-for-programmer-4","2022","03","05","gis-guide-for-programmer-4"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 3. 좌표계","excerpt":"1986년, NASA에서 우주왕복선 챌린저호를 발사했으나, 발사한 지 약 73초만에 폭발한 안타까운 사고가 있었다. 원인은 어이없게도 단위 실수. 국제적인 표준은 미터법임에도 불구하고, 미국을 포함한 몇몇 국가는 인치법을 표준으로 사용하고 있었다. 이러한 상황에서 우주선의 설계도 중 미터법으로 표기된 부품 O Ring을 인치법으로 제작했기 때문에 일어난 사고였다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-04T01:47:29+09:00","type":"posts","category":"GIS","tag":["GIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-04-gis-guide-for-programmer-3.md","content":"\r\n# 다 같은 좌표가 아니야!\r\n\r\n1986년, NASA에서 우주왕복선 챌린저호를 발사했으나, 발사한 지 약 73초만에 폭발한 안타까운 사고가 있었다.\r\n\r\n원인은 어이없게도 단위 실수. 국제적인 표준은 미터법임에도 불구하고, 미국을 포함한 몇몇 국가는 인치법을 표준으로 사용하고 있었다. 이러한 상황에서 우주선의 설계도 중 미터법으로 표기된 부품 O Ring을 인치법으로 제작했기 때문에 일어난 사고였다.\r\n\r\n<br />\r\n\r\n공간정보 또한 이와 비슷하게 좌표계라는 일종의 단위를 가지고 있다. 통상 공간정보의 좌표라고 하면 대부분 동경 127, 북위 37을 떠올린다.\r\n\r\n동경 127, 북위 37은 GPS에서 주로 사용하는 세계측지 중 하나인 `WGS-84` 좌표계다. 이와 같이 좌표계의 특성에 따라 표현되는 값도 다르며, 이를 구분하기 위해 EPSG:0000과 같이 EPSG 코드로 관리한다.\r\n\r\n방금 언급한 `WGS-84`의 코드는 `EPSG:4326`이다.\r\n\r\n|  EPSG 코드  |                     proj 인자                      |\r\n| :---------: | :------------------------------------------------: |\r\n| `EPSG:4326` | `+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs` |\r\n\r\n이러한 체계를 좌표계라고 부르며, 공식적으론 프로젝션(Projection)이라 명칭한다. 프로젝션은 EPSG 코드와 proj 인자로 이루어진다.\r\n\r\nEPSG 코드는 좌표계의 명칭이며, proj 인자는 좌표계를 표현하는 수식으로 +proj=로 시작한다. 이 proj 인자는 좌표계의 표현 및 좌표계 변환에 사용된다.\r\n\r\nSHP의 prj 파일은 이 프로젝션에 대한 정보를 담고 있다.\r\n\r\n대부분의 데이터 제공자는 자신이 제공하는 공간정보 데이터에 대한 좌표계를 제공하니, 사용하기전에 이를 반드시 확인해야한다. <span class=\"red-500\">간혹 명시하지 않거나, 오기입하는 경우도 있으니 주의.</span>\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 타원체\r\n\r\n좌표는 현재 위치를 특정 값으로 표시하는 것이다. 지구는 구(Sphere) 형태를 띄고 있으므로, 좌표를 정확하게 표시하기 위해선 이 구의 모양을 정의할 필요가 있다.\r\n\r\n지구는 구 형태지만, 실제로 엄밀한 구는 아니다. 아, 그렇다고 평평하다는 뜻은 더더욱 아니다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156601191-e161a593-ccee-4f06-b5c8-b2ffce88bdaf.png)\r\n\r\n아름다운 구 형태였다면 좋았겠지만, 아쉽게도 지구의 모양은 문제가 좀 많다. 구라고 부르기 애매한 수준. 혹자는 감자라고도 칭한다.\r\n\r\n어쨌든 완벽한 구 형태가 아니다보니, 좌표를 계산함에 있어서 여러 보정이 필요하다.\r\n\r\n<br />\r\n\r\n이런 지구의 현실을 반영하여 지구의 형태를 정의한 것을 타원체라고 한다. 좌표계마다 사용하는 타원체는 제각각이며, 어떤 타원체를 사용하냐에 따라 그 특성이 달라진다.\r\n\r\n* GRS80: 세계 타원체 표준. 국제측지학회, 지구물리학연합에서 채택함\r\n* WGS84: 미국에서 군사용 GPS를 개발하는 과정에서 사용하기 위해 정의한 타원체.\r\n  * GRS80과 WGS84는 거의 동일하며, 단반경 0.01mm 정도의 매우 근소한 차이를 가진다.\r\n* BESSEL: 특정 구역을 기준으로 정의한 타원체. 특정 구역까지는 정확하나, 구역에서 멀어질수록 오차가 심해진다.\r\n  * 대한민국은 일제강점기의 영향으로 이전까진 도쿄를 기준으로 정의된 BESSEL 타원체를 사용했다.\r\n\r\n타원체와 관련된 정보를 찾다보면 **ITRF-2000**이라는 키워드가 보일텐데, ITRF-2000은 하나로 정의된 타원체가 아니라, 세계 공통 타원체를 ITRF-2000이라 부른다. 즉, 현재 기준으로 `GRS80`과 동일하다.\r\n\r\n<br />\r\n\r\nGPS라는 걸출한 기술이 개발되기 전까지는 각 구역을 중심으로 타원체를 정의하는 `BESSEL` 타원체를 많이 사용했다. GPS 기술 이전에는 전 세계의 타원체를 정의할 수단이나 기술이 전무했기 때문.\r\n\r\n그 중 우리나라는 위에서 언급했다시피, 일제강점기의 영향으로 인해 일본에서 진행한 국토조사 사업을 통해 BESSEL 동경 타원체를 사용하게 됐다.\r\n\r\n`EPSG:2096(동부)`, `EPSG:2097(중부)`, `EPSG:2096(서부)` 등이 이에 해당되며, 오래된 공간 정보 데이터를 찾다 보면 이 좌표계들을 사용하는 걸 볼 수도 있다.\r\n\r\n다행히 현재는 국제 표준을 위해 `GRS80` 타원체를 사용하는 좌표계로 변경했다. 아래 후술할 `EPSG:5180(서부)`, `EPSG:5181(중부)`, `EPSG:5183(동부)` 등이 이에 해당한다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 투영법\r\n\r\n여러분 머릿속에 지도를 떠올려보자. 종이든, 앱이든 상관없다. 생각해보면, 지구는 구지만, 지도는 평면이다. 물론 지구의 형태를 충실히 이행한 지구본이 있지만, 요즘의 지구본은 위치보다는 인테리어의 범주에 들어섰다. 단언컨데 여기서 그 누구도 위치를 찾기 위해 지구본을 들여다보지 않을 것이다.\r\n\r\n그말인즉슨, 우리에게 익숙한 지도를 만들기 위해선, 구를 평면화하는 작업이 필요하다. 어렸을 때 수학시간에 전개라는 개념을 배운 적이 있는가? 우유팩을 완전히 펼치는 과정을 생각하면 얼추 비슷하다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156607735-9b23d446-1bdc-4dd1-9105-455906f51fc4.png)\r\n\r\n이처럼 좌표계에서 구를 평면화하는 것을 투영법이라 부른다.\r\n\r\n* TM(Transverse Mercator): BESSEL 타원체를 기준으로 투영한 평면좌표계\r\n* UTM(Universal TM): GRS80(혹은 WGS84) 타원체를 기준으로 투영한 평면좌표계\r\n* UTM-K: 일반적인 UTM은 적도를 기준으로 하므로, 한국과 약간의 오차가 발생한다. 이를 보정하여 한국에 맞게 정의한 것이 UTM-K다.\r\n  * UTM 투영체는 GRS80 타원체를 기준으로 하는데, UTM-K 중 몇몇 좌표계는 BESSEL 타원체를 사용한다. 자세한 이유는 불명.\r\n\r\n좌표계를 보면 중부, 동부 등으로 나눠져있는데, 이는 오차를 최소화하기 위해 기준점을 나눈 것이다.\r\n\r\n타원체를 정의하고, 이를 평면화하는 과정에서 발생하는 오차를 최대한 줄이기 위해 투영 기준점을 잡고, 해당 위치를 기준으로 투영하는 것이다. 대한민국은 동부, 중부, 서부, 제주원점이 존재(더 있을 수 있음)하며, 각 구역의 측위기준점을 기준으로 좌표계를 투영한다.\r\n\r\n국가급이 아닌 시군구, 지자체 단위에서 제공하는 공간 정보는 각 위치에 가장 최적화된 좌표계를 기준으로 제공한다. 예를들면 제주 관련 데이터는 제주원점, 강원도청에서 제공하는 데이터는 동부원점을 적용한다던가.\r\n\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 자주 사용하는 프로젝션\r\n\r\n사실 타원체니, 투영법이니 크게 중요하지 않다. 그냥 본인이 가진 데이터가 어떤 좌표계를 사용하는지만 잘 알면 사용하는 데 아무런 지장이 없다. 타원체, 투영법에 관계없이 모든 좌표계는 `EPSG:0000`의 형태로 관리되기 때문. 그냥 본인이 원하는 좌표계의 EPSG 코드만 알고 있으면 단순 사용에 아무런 문제가 없다.\r\n\r\n각 좌표계는 매칭되는 EPSG 코드와 proj 인자를 가진다. proj 인자는 해당 좌표계를 나타내는 일종의 수식으로, 이 인자를 통해 좌표계의 변환 연산이 가능하다. proj를 이해할 수 있다면, 이 좌표계가 어떤 특성을 가지는지 인자만 보고도 해석할 수 있다.\r\n\r\n|  파라미터   |                내용                |\r\n| :---------: | :--------------------------------: |\r\n|   `proj`    |               투영체               |\r\n|     `a`     |  장반경 (타원에서 가장 긴 반지름)  |\r\n|     `b`     | 단반경 (타원에서 가장 짧은 반지름) |\r\n| `lat` `lon` |        좌표계의 기준 경위도        |\r\n|   `x` `y`   |          좌표계의 기준 xy          |\r\n|     `k`     |            좌표계 배율             |\r\n|   `ellps`   |            타원체 종류             |\r\n\r\n대략적인 파라미터는 위와 같으며, `lat`, `lon`, `x`, `y`의 경우 `lat_ts`, `x_0`와 같이 뒤에 어떤 인자가 따라오느냐에 따라 의미하는 게 조금씩 달라지기도 한다.\r\n\r\n대충 이 정도만 알면 해당 좌표계의 인자가 뭘 의미하는 지 어렴풋이 파악할 수 있으며, 단순 좌표계를 사용하려는 개발자 선에선 이 이상 몰라도 상관없다. 아니, 이 조차 몰라도 사용에 지장은 없다.\r\n\r\n모든 좌표계를 숙지하거나, proj 인자를 외울 필요는 더더욱 없다. 단, 주로 사용하는 좌표계 정도는 알고 있으면 데이터 파악을 좀 더 쉽게 할 수 있다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 세계 측지\r\n\r\n|  EPSG 코드  | proj 인자                                                                                                          |        비고         |\r\n| :---------: | :----------------------------------------------------------------------------------------------------------------- | :-----------------: |\r\n| `EPSG:3857` | `+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs`                                                                 |         GPS         |\r\n| `EPSG:4326` | `+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs` | Google Maps, VWorld |\r\n\r\nWGS84 세계 측지인 EPSG:4326을 보자. 장, 단반경이 6378137로 동일한 완벽한 구 형태를 지향하고 있다. GPS 기준 좌표계답게 위경도 및 xy의 보정이 없다. `proj=merc`은 메르카토르 투영법을 사용했다는 의미다.\r\n\r\n여담으로, `EPSG:3857`은 투영법이 `longlat`으로 흔히 사용되는 평면 투영체인 `TM`, `UTM`과 달라 거리계산이 안 된다.\r\n\r\n즉, `EPSG:3857`로 표현된 두 점 사이의 거리를 계산해도, 이 값이 실제 거리를 나타내지 않는다.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 국내 측지\r\n\r\n|  EPSG 코드  | proj 인자                                                                                               |   비고    |\r\n| :---------: | :------------------------------------------------------------------------------------------------------ | :-------: |\r\n| `EPSG:5179` | `+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m +no_defs` | NAVER Map |\r\n| `EPSG:5181` | `+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs`          | KAKAO Map |\r\n| `EPSG:5186` | `+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=600000 +ellps=GRS80 +units=m +no_defs`          | 중부원점  |\r\n\r\n이 밖에도 여러 좌표계가 있으므로, 필요할 때마다 찾아 사용하면 된다.\r\n\r\n[EPSG.io](https://epsg.io/)에서 다양한 좌표계의 정보를 확인할 수 있으니 참고할 것.","url":["2022-03-04-gis-guide-for-programmer-3","2022","03","04","gis-guide-for-programmer-3"]},{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 2. GIS랑 인사하기","excerpt":"여러분들이 GIS를 처음 접했다면, 한 번 물어보고 싶다. 공간이란 뭘로 이루어져 있을까? 한 번 생각해보자. 다양한 답이 나왔을 것이라 생각한다. 무슨 답인지 내가 직접 못 듣는다는 게 좀 아쉽지만. 아마 대부분 추상적인 답이 나왔을 것이라 생각한다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-03T23:36:04+09:00","type":"posts","category":"GIS","tag":["GIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-03-gis-guide-for-programmer-2.md","content":"\r\n# GIS의 50가지 그림자\r\n\r\n여러분들이 GIS를 처음 접했다면, 한 번 물어보고 싶다. **공간이란 뭘로 이루어져 있을까?** 한 번 생각해보자.\r\n\r\n다양한 답이 나왔을 것이라 생각한다. 무슨 답인지 내가 직접 못 듣는다는 게 좀 아쉽지만. 아마 대부분 추상적인 답이 나왔을 것이라 생각한다.\r\n\r\n<br />\r\n\r\n어떤 사물을 파악할 때, <span class=\"red-500\">가장 효과적인 방법은 사물의 본질을 파악하는 것</span>이다. 철로 이루어진 어떤 물건이 있다고 해보자. 이걸 어디다 쓰는진 알 수 없지만, 단단한 게 필요할 때 요긴하게 쓸 수 있을 것이다. 필요하다면, 녹여서 다른 철제 물건으로 만들 수도 있다.\r\n\r\n반대로 이게 정확히 뭔지 모르고 \"어... 이거 그건데..? 그 뭐였더라...?\" 같은 추상적인 방법으로 접근한다면 그 사물이 뭔지 파악하는 건 매우 어렵다.\r\n\r\n공간을 구현해야한다는 관점에서 볼 때, 공간을 추상적인 개념으로 접근한다면 공간을 디지털화하기 매우 어려울 것이다. 때문에 우리는 공간을 다루기 이전에, 공간이 무엇으로 이루어지는지 그 개념을 명확하게 알 필요가 있다.\r\n\r\n공간은 **점(Point)**, **선(Line)**, **면(Polygon)**으로 이루어진다.\r\n\r\n* 공간에 점을 하나 찍으면 점이 생긴다.\r\n* 무수히 많은 점을 연달아 찍으면 선이 생긴다.\r\n* 무수히 많은 선을 연달아 그으면 면이 생긴다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/156584563-367bd1e7-390d-4e3d-bef1-1ff3103b1a13.png)\r\n\r\n3차원 관점에서는 좀 더 복잡한 요소들이 작용하지만, 2차원은 단순한 점, 선, 면만으로 온전한 공간을 구현할 수 있다. 면은 선의 집합으로 표현할 수 있고, 선은 점의 집합으로 표현할 수 있으니, 공간은 점의 위치들로 표현이 가능하다. 이 글에서 궁극적으로 다룰 OpenLayers는 2차원 형태의 지도이므로, 이 정도로만 기억해도 당장엔 무리가 없다.\r\n\r\n공간이 무엇으로 이루어져 있는지 앞서 생각한 답과 점의 집합 중 어느게 더 구현하기 쉬울 지 비교해보자. 아마 점 $(x, y)$로 표현하는 것이 더 간단할 것이다.\r\n\r\n* 점: 하나의 $(x, y)$로 이루어진다.\r\n* 선: 다수의 $(x, y)$들로 이루어진다. 단, 가장 처음 $(x, y)$와 마지막 $(x, y)$가 달라야 한다.\r\n* 면: 다수의 $(x, y)$들로 이루어진다. 단, 가장 처음 $(x, y)$와 마지막 $(x, y)$가 서로 같아야 한다.\r\n\r\n선과 면의 차이에 주목하자. 선과 면 모두 무수히 많은 점들로 구성되어 있는데, 선과 면을 구분할 수 있는 가장 큰 차이는 가장 첫 좌표와 마지막 좌표가 동일한지 확인하는 것이다.\r\n\r\n<span class=\"blue-500\">첫 좌표와 마지막 좌표가 동일하면 온전히 하나의 면이 이루어진 것</span>으로 보며, 만약 육안으로 아무리 가까워보여도 <span class=\"blue-500\">첫 좌표와 마지막 좌표가 서로 일치하지 않으면 선</span>이다.\r\n\r\n3차원 공간은 GIS 지식에 대한 전공 수준의 이해 뿐만 아니라, 3D 프로그래밍에도 조예가 있어야하는 매우 복잡한 영역이니, 여기선 다루지 않는다. <del class=\"grey-500\">애초에 3차원 개발하려는 사람의 수준은 이 글을 아득히 뛰어넘는다.</del>\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n## 공간정보를 냉장고에 넣는 법\r\n\r\n디지털에서 공간을 표현하는 데 점의 위치를 이용한다는 것을 알았다. 그런데, 이 정보. 도대체 어떤 식으로 다뤄야될까?\r\n\r\n점의 경우 다행히 데이터의 표현 방식이 $(x, y)$로 명확하다. 하지만 선, 면으로 가면 얘기가 다소 복잡해진다. 우선 데이터의 양이 매우 많아진다. 데이터를 어떤 식으로 구분하는지에도 차이가 발생한다.\r\n\r\n* ${x_1}$,${y_1}$ ${x_2}$,${y_2}$ ... ${x_n}$,${y_n}$\r\n* ${x_1}$ ${y_1}$,${x_2}$ ${y_2}$, ... ${x_n}$ ${y_n}$\r\n\r\n위 처럼 같은 집합을 표현함에도 개발자에 따라 다양한 표현 방법이 나오게 된다. 특정 컬럼의 양이 기하급수적으로 늘어남은 물론이고, 문자열 연산도 수행해야한다. 더 큰 문제는 데이터 보관 주체마다 양식이 통일되지 않으므로, 호환성은 희망사항일 뿐이다.\r\n\r\n때문에 공간정보를 다루기 위한 여러 포맷이 고안됐다.\r\n\r\n<br />\r\n\r\n\r\n\r\n### SHP (Shape)\r\n\r\n가장 대표적인 공간정보 데이터 포맷이다. 미국의 ESRI에서 공간정보 데이터를 위해 고안한 형식이다. ESRI는 SHP 뿐만 아니라 QGIS라는 걸출한 GIS 오픈소스 툴을 만든 회사이기도 하다.\r\n\r\nSHP는 일반 데이터 컬럼은 데이터 형식에 맞게 저장하고(VARCHAR, NUMBER, DATE 등) 위치정보만 정해진 규격으로 저장한다. 해당 바이너리를 통해 데이터의 형식 및 좌표 데이터를 산출할 수 있다.\r\n\r\nSHP 파일은 기본적으로 아래 4가지 파일로 이루어져있다. shp를 제외한 나머지 파일은 shp를 보조하는 파일로, 없어도 shp를 다루는데 문제는 없다.\r\n\r\n* `shp`: 벡터 도형 데이터 (핵심)\r\n* `shx`: 벡터 도형 인덱스\r\n* `dbf`: 각 도형의 속성 데이터\r\n* `prj`: 좌표 정보\r\n\r\n공간정보 뿐만 아니라 다양한 부가 데이터를 쉽게 저장할 수 있으며, 구조 상 데이터베이스와 매우 유사하다는 이점이 있으며, 거의 대부분의 GIS 툴이 SHP를 지원한다.\r\n\r\n이러한 이점과 범용성에 힘입어 공간정보 데이터의 표준이 되었고, 대부분의 공간정보는 기본적으로 SHP로 제공된다고 봐도 무방하다. 즉, <span class=\"primary\">공간정보 데이터는 SHP 하나만 알고 있어도 된다.</span>\r\n\r\n<br />\r\n\r\n\r\n\r\n### GeoJSON\r\n\r\nJSON은 알겠는데, GeoJSON은 또 뭐야? 하겠지만, 우리가 아는 그 JSON 맞다. 단, 공간정보를 표현하기 위해 정해진 방식으로 구성된 JSON이다.\r\n\r\nGeoJSON의 양식은 아래와 같다.\r\n\r\nJavaScript와 친숙한 JSON을 차용함으로써, HTTP 통신으로 공간정보를 쉽게 호출하는 데 쓰인다. 이러한 특성 때문에, 공간정보 데이터를 보관한다는 목적 보다는 HTTP 데이터 통신 시 주로 사용한다.\r\n\r\n물론 GeoJSON도 공간정보를 보관하는데 무리가 없으며, 인지도 있는 GIS 툴은 GeoJSON을 지원한다. 또한 SHP와 달리 데이터의 CRUD에 별다른 툴이 필요하지 않다는 장점이 있다.\r\n\r\n\r\n\r\n### 기타\r\n\r\n그 밖에도 CSV, Excel, txt 등 여러 텍스트 기반 파일로 다루기도 한다. 단, 이러한 형식들은 공간정보를 저장하는데 적합하지 않아 공간 데이터의 추출 결과물이나, 점 데이터에 한해 제한적으로 사용하기도 한다.\r\n\r\n공간정보를 다루는 방법에 있어서 꼭 SHP나 GeoJSON으로만 한정되지 않는다는 것만 참고하자.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 둘러보기\r\n\r\n* [도로명주소 건물 데이터](http://data.nsdi.go.kr/dataset/14783) (로그인 필요)\r\n\r\n위 URL은 도로명주소의 건물 데이터를 제공받을 수 있는 URL이다. 건물 뿐만 아니라 시도, 시군구, 건물 진출입로, 도로 등 다양한 데이터를 제공하고 있다. 대부분 SHP로 제공한다는 점에 주목하자.","url":["2022-03-03-gis-guide-for-programmer-2","2022","03","03","gis-guide-for-programmer-2"]}],"data":{"header":{"title":"OpenLayers를 여행하는 개발자를 위한 안내서 - 1. 머릿말","excerpt":"공간정보, 지리쪽에 업이 있거나 관심있는 사람이 아니라면, GIS라는 단어는 다소 생소한 단어다. 혹자는 GIS가 아니라 GPS 아니냐고 반문하기도 한다. GPS(Global Positioning System)는 3개 이상의 위성 신호를 통해 수신기의 위치를 계산할 수 있는 기법이다. GPS라 하면 흔히 네비게이션을 연상하기 쉽지만, 알게 모르게 GPS는 일상생활에 깊게 녹아들어 있다. 네비게이션, 스마트폰 지도, 배달 플랫폼의 라이더 위치 추적, 드론 군집비행, 군사학 등. GPS는 다양한 영역에 스며들어 그 이로움을 전해준다. 우리는 GPS를 통해, 공간정보라는 디지털 시대에서 공간을 디지털화한다는 것이 어떤 능력을 발휘하는 지 엿볼 수 있다. GIS(Global Information System)는 GPS와 같이 공간정보를 다루는 모든 기술에 대한 포괄적인 기술을 의미한다. GPS 뿐만 아니라, 지도, 좌표계와 같이 공간과 엮이는 모든 기술은 GIS라는 커다란 범주로 묶을 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/156607880-c5abad92-1991-4c01-b85f-7153bf89cb64.png","date":"2022-03-03T23:05:35+09:00","type":"posts","category":"GIS","tag":["GIS"],"group":"OpenLayers를 여행하는 개발자를 위한 안내서","comment":true,"publish":true},"name":"2022-03-03-gis-guide-for-programmer-1.md","content":"<h1 id=\"개요\">개요 <a href=\"#개요\">🔗</a></h1><p>공간정보, 지리쪽에 업이 있거나 관심있는 사람이 아니라면, GIS라는 단어는 다소 생소한 단어다. 혹자는 GIS가 아니라 GPS 아니냐고 반문하기도 한다.</p>\n<p>GPS(Global Positioning System)는 3개 이상의 위성 신호를 통해 수신기의 위치를 계산할 수 있는 기법이다. GPS라 하면 흔히 네비게이션을 연상하기 쉽지만, 알게 모르게 GPS는 일상생활에 깊게 녹아들어 있다. 네비게이션, 스마트폰 지도, 배달 플랫폼의 라이더 위치 추적, 드론 군집비행, 군사학 등. GPS는 다양한 영역에 스며들어 그 이로움을 전해준다. 우리는 GPS를 통해, 공간정보라는 디지털 시대에서 공간을 디지털화한다는 것이 어떤 능력을 발휘하는 지 엿볼 수 있다.</p>\n<p>GIS(Global Information System)는 GPS와 같이 공간정보를 다루는 모든 기술에 대한 포괄적인 기술을 의미한다. GPS 뿐만 아니라, 지도, 좌표계와 같이 공간과 엮이는 모든 기술은 GIS라는 커다란 범주로 묶을 수 있다.</p>\n<p>\n\t\t<a href=\"https://user-images.githubusercontent.com/50317129/156580872-dfd08787-3416-4595-b224-a12156075ffb.png\" target=\"_blank\" data-title=\"null\">\n\t\t\t<img src=\"https://user-images.githubusercontent.com/50317129/156580872-dfd08787-3416-4595-b224-a12156075ffb.png\" alt=\"image\" />\n\t\t</a>\n\t\t</p>\n<p>컴퓨터의 발전이래, 인류는 현실세계의 모든 것을 디지털화하고 있다. 이미 인류는 보고 듣는 모든 것들을 디지털화했다. 찰나의 순간, 기억을 저장한다는 욕구 이후로, 이젠 이러한 자료를 관리하고 제공하는 자들이 막대한 돈을 벌어들이고 있다.</p>\n<p>\n\t\t<a href=\"https://user-images.githubusercontent.com/50317129/156581103-fd79ade7-ab3e-424e-852c-8bfd3d4382b7.png\" target=\"_blank\" data-title=\"null\">\n\t\t\t<img src=\"https://user-images.githubusercontent.com/50317129/156581103-fd79ade7-ab3e-424e-852c-8bfd3d4382b7.png\" alt=\"image\" />\n\t\t</a>\n\t\t</p>\n<p>시청각의 디지털화는 시청각을 마음대로 다룰 수 있다는 뜻이나 다름없다. 정적 데이터인 사진의 합성은 이젠 애들 장난 수준이다. 발전된 영상 편집 기술은 물론 논란의 중심인 딥 페이크 기술을 보고 있자면 인식의 개념을 부정당하는 느낌이 들기도 한다.</p>\n<br />\n<p align=\"center\" class=\"large grey-400\"><i>고도로 발달한 기술은 마법과 구별할 수 없다.</i></p>\n<br />\n\n<p>동영상, 사진이 시청각을 다룬다면, GIS는 현실에서의 공간을 디지털화하고, 이를 다룰 수 있는 매우 멋진 기술이다. 지금은 지도나 위치정보 같은 데이터류를 다루는 것이 일반적이지만, 현재 각광받고 있는 메타버스 기술, 가상현실과 같이 '공간'이 주가 되는 기술에서 GIS는 그 핵심이 될 것이다.</p>\n<p>시청각 디지털이 시청각에 마법을 일으킨다면, GIS는 디지털 속 공간이라는 개념에 마법을 부릴 수 있다 하겠다.</p>\n<br />\n<br />\n<br />\n\n<p>...라고 말은 거창하게 적었지만 내가 무슨 GIS의 대가도 아니고, 그냥 GIS 살짝 담궈본 일개 프로그래머일 뿐이다.</p>\n<p>이직한 회사에서 GIS에 대한 소요가 좀 있는 거 같길래, 이전 회사에서 배웠던 기술도 좀 되살려볼 겸, 토이 프로젝트 식으로 GIS 서비스를 만들며 관련 기술에 대해 기록해볼까 한다.</p>\n<p>사실 한국에서의 GIS는 다른 기술에 비해 찬밥 신세를 면치 못 한다. 이런 원천기술류가 으레 그렇듯이, 깊게 들어가면 측량, 토목 쪽으로 빠져버리니 GIS라는 분야에 뜻을 가진 사람이 아니라면 깊게 들어가기도 애매하다. 당장 이 글을 읽는 당신 조차 그렇다. 당신은 개발자이기를 원하지, 절대 GIS 연구자이고 싶지 않을 테니.</p>\n<br />\n\n<p>사람들은 여행을 떠날 때 GIS로 이루어진 지도라는 걸 보고 여행하겠지만, 막상 GIS를 여행하려는 사람들은 한국에서 볼 게 적은 것이 현실이다. 남들은 여행길이 고생길이라고 할 때, GIS 여행자들은 여행 준비부터가 고생인 셈이다.</p>\n<br />\n<p align=\"center\" class=\"large grey-400\"><i>우리 모두는 한 때 초심자였다.</i></p>\n<br />\n\n<p>\"수학을 잘하고 싶어요!\"라고 말하는 초등학생에게 다짜고짜 수학의 정석을 풀라고 할 수 없다.</p>\n<p>\"프로그래밍 잘하고 싶어요!\"라고 말하는 국비 3일차 개발자에게 \"음 그래? 그럼 프로그래머스 5단계 풀어\"라고 할 수 없다.</p>\n<p>모든 것엔 입문이 있고, 순서라는 게 존재한다. 아이의 생각은 아이의 눈높이에서 봐야 가장 잘 이해할 수 있다.</p>\n<p>내 비록 꼬꼬마 프로그래머지만, 내 경험과 글, 시야를 통해 이제 막 OpenLayers 여행을 시작한 개발자들에게 작은 안내서라도 되어주길 바란다.</p>\n<br />\n<br />\n<br />\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"부록\">부록 <a href=\"#부록\">🔗</a></h1><h2 id=\"준비물\">준비물 <a href=\"#준비물\">🔗</a></h2><ul>\n<li>OpenLayers 6</li>\n<li>React</li>\n<li>GeoServer</li>\n</ul>\n<h2 id=\"우리는-커서...\">우리는 커서... <a href=\"#우리는-커서...\">🔗</a></h2><ul>\n<li>프로그래밍에서 GIS를 어떤 식으로 다루는 지 알아봐요!</li>\n<li>GeoServer로 GIS 서비스 환경을 만들어요!</li>\n<li>React + OpenLayers 6로 GIS 서비스를 제공해요!<ul>\n<li>OpenLayers 6는 ESNext를 지향하므로, React가 적합하답니다.</li>\n</ul>\n</li>\n</ul>\n","url":["2022-03-03-gis-guide-for-programmer-1","2022","03","03","gis-guide-for-programmer-1"],"toc":[{"text":"개요","tag":"개요","depth":1},{"text":"부록","tag":"부록","depth":1},{"text":"준비물","tag":"준비물","depth":2},{"text":"우리는 커서...","tag":"우리는-커서...","depth":2}]},"hash":"838337bde02"},"__N_SSG":true}