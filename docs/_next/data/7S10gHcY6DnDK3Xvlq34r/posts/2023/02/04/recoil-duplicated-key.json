{"pageProps":{"header":{"title":"[recoil] Duplicate atom key 오류 해결하기","excerpt":"React와 상태관리는 떼놓을 수 없는 존재다. 좀 더 효율적이고 스마트한 상태관리를 위한 많은 시도가 있어왔는데, recoil도 그 중 하나다. recoil은 선발주자인 Redux, mobx와 달리 간편하면서도 강력한 기능 덕분에 많은 사랑을 받는 라이브러리다. 나 또한 React 개발 시 애용하기도 하고.","coverImage":"https://user-images.githubusercontent.com/50317129/216662084-69f29d33-1956-42a1-90d6-80d311949d10.png","date":"2023-02-04T01:56:31+09:00","type":"posts","category":"React","tag":["React","Web","recoil"],"comment":true,"publish":true},"name":"2023-02-04-recoil-duplicated-key.md","url":["2023-02-04-recoil-duplicated-key","2023","02","04","recoil-duplicated-key"],"toc":"<ul><li><a href=\"#개요\">개요</a></li><li><a href=\"#왜?\">왜?</a></li><li><a href=\"#해결-방법\">해결 방법</a></li><ul><li><a href=\"#&#114;&#101;&#99;&#x6f;&#105;&#x6c;&#64;&#48;&#x2e;&#55;&#x2e;&#54;-이상일 경우의 방법\"><a href=\"mailto:&#114;&#101;&#99;&#x6f;&#105;&#x6c;&#64;&#48;&#x2e;&#55;&#x2e;&#54;\" target=\"_blank\">&#114;&#101;&#99;&#x6f;&#105;&#x6c;&#64;&#48;&#x2e;&#55;&#x2e;&#54;</a> 이상일 경우의 방법</a></li><ul><li><a href=\"#환경변수-활용하기\">환경변수 활용하기</a></li><li><a href=\"#코드-활용하기\">코드 활용하기</a></li></ul><li><a href=\"#모든-recoil 버전에서의 해결 방법\">모든 recoil 버전에서의 해결 방법</a></li></ul><li><a href=\"#마치며\">마치며</a></li></ul>","content":"<h1 id=\"개요\">개요 <a href=\"#개요\">🔗</a></h1><p>React와 상태관리는 떼놓을 수 없는 존재다. 좀 더 효율적이고 스마트한 상태관리를 위한 많은 시도가 있어왔는데, <code class=\"inline-code\">recoil</code>도 그 중 하나다.</p>\n<p><code class=\"inline-code\">recoil</code>은 선발주자인 <code class=\"inline-code\">Redux</code>, <code class=\"inline-code\">mobx</code>와 달리 간편하면서도 강력한 기능 덕분에 많은 사랑을 받는 라이브러리다. 나 또한 React 개발 시 애용하기도 하고.</p>\n<br />\n\n<p>NextJS 같은 SSR 프레임워크와 <code class=\"inline-code\">recoil</code>을 쓰다보면 콘솔에 이런 오류를 자주 볼 수 있다.</p>\n\n\t\t\t\t<div class=\"block-code\">\n\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t<p>TXT</p>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t<pre class=\"language-txt\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>Expectation Violation: Duplicate atom key [KEY_NAME].</td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>This is a FATAL ERROR in production.</td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>But it is safe to ignore this warning if it occurred because of hot module replacement.</td></tr></tbody></table></pre>\n\t\t\t\t</div>\n\t\t\t<p>직역하자면, <code class=\"inline-code\">atom</code>의 키가 중복되었다는 뜻인데, 분명 중복된 키를 가진 <code class=\"inline-code\">atom</code>이 없음에도 이런 오류가 발생한다.</p>\n<p>다행히도 기능 상의 문제는 없으며, 빌드 시 사라지긴 한다. 그러나 명목상으로나마 <span class='red-600'>오류</span>인 이 현상을 그냥 두기엔 꽤나 거슬린다.</p>\n<p>이 문서에서는 이러한 현상이 발생하는 이유와, 이를 어떻게 해결하는지에 대해 다루고자 한다.</p>\n<h1 id=\"왜?\">왜? <a href=\"#왜?\">🔗</a></h1><p>이 현상은 보통 개발환경에서만 발생하며, 빌드 후 배포한 운영환경에선 잡히지 않는 경우가 대부분이다. 반대였다면 꽤나 골치아팠을텐데.</p>\n<p>개발환경에서만 발생하며, 기능에 별다른 문제도 일어나지 않는 이 오류같지 않은 오류는 왜 발생하는걸까?</p>\n<br />\n\n\n\t\t\t\t<div class=\"block-code\">\n\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t<p>TSX</p>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t<pre class=\"language-tsx\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">const</span> stringAtom <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">atom</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>  key<span class=\"token operator\">:</span> <span class=\"token string\">'stringAtom'</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr></tbody></table></pre>\n\t\t\t\t</div>\n\t\t\t<p>위 코드는 기초적인 <code class=\"inline-code\">atom</code> 선언 방법이다. <code class=\"inline-code\">key</code>는 <code class=\"inline-code\">atom</code>을 내부적으로 구분하기 위한 고유값을 입력한다. 분명 <code class=\"inline-code\">stringAtom</code>은 다른 <code class=\"inline-code\">atom</code>에 쓰지 않았음에도, 오류가 발생할 것이다.</p>\n<p>그 이유는 React 개발환경만의 특징과 밀접한 연관이 있다.. React 개발 시, 편의를 위해 핫 로드 기법을 사용한다. 코드가 변경될 경우, 개발 서버가 이를 감지하여 변경분을 실시간으로 교체해준다. 이 과정에서, 일부 코드가 다시 렌더링되며 <code class=\"inline-code\">recoil</code>의 <code class=\"inline-code\">atom</code> 까지 다시 할당해버린다.</p>\n<p>때문에 <code class=\"inline-code\">recoil</code> 입장에서는, 이미 할당된 <code class=\"inline-code\">stringAtom</code>을 다시 할당하는 것이므로, <code class=\"inline-code\">atom</code>의 고유값 훼손을 막기 위해 오류를 발생시켜 개발자에게 이를 알려주는 것이다. 하지만 개발자 입장에서는 본인의 의지가 전혀 개입되지 않은 현상이므로, 서로의 입장 차이가 발생하는 셈이다.</p>\n<p>물론 일반적인 서비스라면 이러한 형태로 구동되지 않는다. 위에서 언급했듯이 핫 로드라는 환경으로 인해 개발환경에서만 발생하는 것이다. 운영환경의 경우, 당연히 빌드된 결과물만 갖고 구동하므로 이런 일이 발생하지 않는다.</p>\n<h1 id=\"해결-방법\">해결 방법 <a href=\"#해결-방법\">🔗</a></h1><p>이 오류의 해결방법은 그리 어렵지 않다. 간혹 여러 자료에서 <code class=\"inline-code\">node_modules</code>의 <code class=\"inline-code\">recoil</code> 라이브러리 파일을 찾아 이를 유발하는 <code class=\"inline-code\">console.error()</code>를 주석 처리하라고 알려주기도 한다. 하지만 대부분 알다시피, 이렇게 라이브러리를 임의로 수정해서 사용하는 건 그리 좋은 방법은 아니다. 물론 방법이 정 없다면? 이렇게라도 하는 게 맞겠지만, 이 경우 라이브러리를 욕해도 라이브러리 개발자는 할 말이 없을 것이다.</p>\n<p>그러니 아래 두 방법 중 하나를 택하여, 깔끔한 트러블슈팅과 라이브러리 개발자를 향한 리스펙 둘 다 챙겨보자.</p>\n<h2 id=\"&#114;&#101;&#99;&#x6f;&#105;&#x6c;&#64;&#48;&#x2e;&#55;&#x2e;&#54;-이상일 경우의 방법\"><a href=\"mailto:&#114;&#101;&#99;&#x6f;&#105;&#x6c;&#64;&#48;&#x2e;&#55;&#x2e;&#54;\" target=\"_blank\">&#114;&#101;&#99;&#x6f;&#105;&#x6c;&#64;&#48;&#x2e;&#55;&#x2e;&#54;</a> 이상일 경우의 방법 <a href=\"#&#114;&#101;&#99;&#x6f;&#105;&#x6c;&#64;&#48;&#x2e;&#55;&#x2e;&#54;-이상일 경우의 방법\">🔗</a></h2><p><code class=\"inline-code\">recoil</code> 사용자 모두가 이 유사 버그를 거슬려 하다보니, 해당 라이브러리의 레포지토리는 물론, 각종 커뮤니티에서 관련된 토론이 끊이질 않았다.</p>\n<p>다행히 <code class=\"inline-code\">0.7.6</code> 버전부터 라이브러리에 관련 옵션을 추가하여 오류를 쉽게 컨트롤 할 수 있도록 개선했다.</p>\n<p>환경변수를 활용하는 방법 하나, 코드 내에서 활용하는 방법 하나가 있다.</p>\n<h3 id=\"환경변수-활용하기\">환경변수 활용하기 <a href=\"#환경변수-활용하기\">🔗</a></h3>\n\t\t\t\t<div class=\"block-code\">\n\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t<p>PROPERTIES</p>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t<pre class=\"language-properties\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0># .env</td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED=false</td></tr></tbody></table></pre>\n\t\t\t\t</div>\n\t\t\t<p>환경변수에서 <code class=\"inline-code\">RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED</code> 옵션을 꺼주면 된다.</p>\n<p>어찌됐든 <code class=\"inline-code\">atom</code>의 고유성을 보호하는 로직인데다, 운영환경에서는 진짜 중복된 게 아닌 이상 개발환경처럼 중구난방으로 발생하지 않으므로 덮어놓고 꺼버리는 건 그닥 좋은 선택지는 아닌 것 같아 보인다.</p>\n<p>이 경우 아래와 같이 스마트하게 구성할 수도 있다.</p>\n<br />\n\n\n\t\t\t\t<div class=\"block-code\">\n\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t<p>PROPERTIES</p>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t<pre class=\"language-properties\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0># .env.development</td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1># 개발환경 환경변수</td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED=false</td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4># .env.production</td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5># 운영환경 환경변수</td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6>RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED=true</td></tr></tbody></table></pre>\n\t\t\t\t</div>\n\t\t\t<p>이렇게 환경에 따라 옵션에 차이를 둘 수 있다.</p>\n<h3 id=\"코드-활용하기\">코드 활용하기 <a href=\"#코드-활용하기\">🔗</a></h3><p>간혹, 특정 프레임워크는 환경변수의 접두사로 특정 문자열을 반드시 요구하기도 한다. 이 경우 환경변수를 활용하기엔 무리가 있다. 그 외에도 여러 이유로 환경변수를 활용할 수 없는 케이스가 있을 수도 있고.</p>\n<p>그렇다고 걱정하지 않아도 된다. 코드 상에서도 동일한 동작을 구현할 수 있으니 말이다.</p>\n\n\t\t\t\t<div class=\"block-code\">\n\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t<p>TSX</p>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t<pre class=\"language-tsx\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RecoilEnv<span class=\"token punctuation\">,</span> RecoilRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token comment\" data-tag=\"new\">// 중복 체크 해제</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>RecoilEnv<span class=\"token punctuation\">.</span><span class=\"token constant\">RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element</td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RecoilRoot</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RecoilRoot</span></span><span class=\"token punctuation\">></span></span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t</div>\n\t\t\t<p><code class=\"inline-code\">RecoilEnv</code>를 통해 코드 상에서 옵션을 컨트롤 할 수 있다. <code class=\"inline-code\">process.env.NODE_ENV</code>가 환경값을 담고 있으므로, 이를 활용하면 위처럼 개발환경에서만 옵션을 끌 수 있다.</p>\n<h2 id=\"모든-recoil 버전에서의 해결 방법\">모든 recoil 버전에서의 해결 방법 <a href=\"#모든-recoil 버전에서의 해결 방법\">🔗</a></h2><p><code class=\"inline-code\">0.7.6</code> 버전 미만에서는 <code class=\"inline-code\">RecoilEnv</code>를 제공하지 않는다. 따라서 코드 상에서 다른 방법을 강구해야한다.</p>\n<p>이 방법은 코드 내에서 해결하는 범용적인 방식이므로, <code class=\"inline-code\">recoil</code> 버전이 <code class=\"inline-code\">0.7.6</code> 이상이여도 적용 가능하다.</p>\n<br />\n\n<p>원리는 간단하다. 이 오류가 발생하는 이유는 <strong>핫 로드로 인해 재할당되는 과정에서 동일한 key를 가진 atom을 할당하기 때문</strong>이다.</p>\n<p>그럼 개발환경에서만 key가 중복 안 되게만 해주면 된다. 어차피 재할당 되면서 해당 <code class=\"inline-code\">atom</code>으로 대체되므로, 키가 달라져도 기능 상의 차이는 없다.</p>\n<br />\n\n\n\t\t\t\t<div class=\"block-code\">\n\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t<p>TSX</p>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t<pre class=\"language-tsx\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">const</span> stringAtom <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">atom</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>  key<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">stringAtom-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">'stringAtom'</span> <span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr></tbody></table></pre>\n\t\t\t\t</div>\n\t\t\t<p><code class=\"inline-code\">process.env.NODE_ENV</code>를 통해 개발환경일 때만 키에 시간을 붙여서 할당한다. 굳이 시간이 아니더라도 <code class=\"inline-code\">Math.random()</code> 같이 난수 특징을 갖는 것들 중 마음에 드는걸 갖다 붙여도 상관없다.</p>\n<p>좀 더 스마트하게 구성하려면 아래와 같이, <code class=\"inline-code\">key</code> 생성 부분을 메서드로 빼도 된다.</p>\n\n\t\t\t\t<div class=\"block-code\">\n\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t<p>TSX</p>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t<pre class=\"language-tsx\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">function</span> <span class=\"token function\">getAtomKey</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>  <span class=\"token keyword\">return</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> key<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token keyword\">const</span> stringAtom <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">atom</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6>  key<span class=\"token operator\">:</span> <span class=\"token function\">getAtomKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stringAtom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr></tbody></table></pre>\n\t\t\t\t</div>\n\t\t\t<p>위 처럼 만들면 코드의 중복을 제거할 수 있다.</p>\n<h1 id=\"마치며\">마치며 <a href=\"#마치며\">🔗</a></h1><p>위에서 언급한 방법 중 마음에 드는 걸 선택하면 된다.</p>\n<p>결과에 차이는 없으나, 난 개인적으로 <strong>모든 recoil 버전에서의 해결 방법</strong>을 더 선호한다.</p>\n<p>검증 로직을 고의로 꺼서 이미 발생한 에러를 막는 것보다, 에러를 유발하지 않는 게 더 나을 것 같다는 생각 때문이다. 물론 내부를 까보진 않아서 어떻게 동작할진 모르지만.</p>\n<br />\n\n<p>이제 거슬리는 오류를 치워버리자.</p>\n","meta":{"group":[],"next":{"header":{"title":"심심해서 쓰는 Tesla Model 3 렌트 후기","excerpt":"제주도 갈끄니까~~~~~~","coverImage":"https://user-images.githubusercontent.com/50317129/180824351-714b4d97-f27e-482f-b1c6-2e45f67ab816.png","date":"2022-07-26T01:06:39","type":"posts","category":"잡담","tag":["Tesla"],"comment":true,"publish":true},"name":"2022-07-25-tesla-model3.md","url":["2022-07-25-tesla-model3","2022","07","25","tesla-model3"]},"prev":null}},"__N_SSG":true}