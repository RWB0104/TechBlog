{"pageProps":{"posts":[{"header":{"title":"재귀를 사용한 재귀적 반복","excerpt":"컴퓨터 언어에서의 재귀란 자기 자신을 호출함을 의미한다. 알고리즘에서의 재귀는 매우 중요한 개념 중 하나로써, 그 특성 상 복잡한 연산 및 연산에 걸리는 소요 시간을 효과적으로 개선할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-08-04T00:26:26","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","재귀"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-08-04-about-algorithm-chapter09.md","content":"","url":["2021-08-04-about-algorithm-chapter09","2021","08","04","about-algorithm-chapter09"]},{"header":{"title":"스택과 큐로 간결한 코드 생성","excerpt":"이 장에서는 스택과 큐에 대해 알아본다. 사실 이 두 자료구조는 배열에 특정한 제약을 건 자료구조다. 제약이라는 개념 때문에 특수한 상황에서만 쓰이지 않을까 싶지만, 오히려 이러한 제약이 주는 규칙으로 인해 굉장히 많은 곳에서 쓰인다. 스택과 큐의 가장 큰 특징은 데이터 처리에 순서가 있다는 점이다. 스택과 큐는 그 제약에 따라 반드시 정해진 순서로 데이터를 처리한다. 이러한 특징 덕에 순서가 필요한 작업들에 유용하게 사용된다. 대표적으로 스케쥴러, 대기 등이 있으며 OS의 인터럽트(Interrupt) 작업에서 스택이 쓰인다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-31T11:58:37","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","큐","스택"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-31-about-algorithm-chapter08.md","content":"","url":["2021-07-31-about-algorithm-chapter08","2021","07","31","about-algorithm-chapter08"]},{"header":{"title":"해시 테이블로 매우 빠른 룩업","excerpt":"현재까지 다룬 데이터 형식 중 다수의 데이터를 다루는 데 가장 효과적인 형식은 배열일 것이다. 하지만 배열의 경우, 요소별로 단 하나의 값이 들어가는 데 특화되어 있다. 만약 하나의 요소에 두 값을 넣고자 한다면 어떻게 될까? [[A, 1], [B, 2], [C, 3]]과 같은 형태로 나타낼 것이다. 배열의 단점 중 하나는, 값을 빠르게 찾기 위해선 반드시 정렬을 수행해야 한다는 것이다. 하지만 저렇게 배열 안에 또다른 배열이 포함되는 것처럼 배열의 depth가 심해질 경우 구조가 복잡해서 배열을 다루기 점점 난해해진다. 더군다나 배열의 경우 원하는 요소를 탐색하기 위해선 적어도 O(logN) 이상의 시간복잡도를 필요로 한다. 만약, 배열과 같이 특정 데이터의 모음에서 내가 원하는 데이터를 O(1)과 같이 상수 시간으로 탐색할 수 있는 데이터가 있다면 어떨까? 왠지 이 장에서 그 해답을 찾을 수 있을 것 같다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-29T23:02:27","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","해시 테이블"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-29-about-algorithm-chapter07.md","content":"","url":["2021-07-29-about-algorithm-chapter07","2021","07","29","about-algorithm-chapter07"]},{"header":{"title":"긍정적인 시나리오 최적화","excerpt":"지금까지는 항상 알고리즘을 비관적인 관점으로 바라봤다. 이 경우의 장점은 명확하다. 어떠한 경우에도 최악을 대비하면 문제가 없다. 하지만 모든 데이터가 항상 최악의 경우는 아닐 뿐더러, 대부분의 케이스는 평범한 영역에 위치할 것이다. 이 장에서는 모든 시나리오를 고려하여 상황에 따른 적절한 알고리즘을 판단한다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-24T04:54:40","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","삽입 정렬"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-24-about-algorithm-chapter06.md","content":"","url":["2021-07-24-about-algorithm-chapter06","2021","07","24","about-algorithm-chapter06"]},{"header":{"title":"빅 오를 사용하거나 사용하지 않는 코드 최적화","excerpt":"지금까지 알고리즘의 퍼포먼스를 비교하면서 빅 오 표기법을 통해 수치화했다. 하지만 빅 오 표기법도 알고리즘의 퍼포먼스를 측정함에 있어서 완벽함을 보여주진 않는다. 이전 장에서 N(O^2)이나 N(N^2 - N) 모두 빅 오 표기법에선 N(O^2)로 간주한다고 설명했다. 이러한 특성으로 인해, 실제로는 명백한 차이를 보이는 알고리즘임에도 불구하고 빅 오 표기법으론 성능이 거의 동일하게 측정되기도 한다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-23T23:42:33","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","선택 정렬"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-23-about-algorithm-chapter05.md","content":"","url":["2021-07-23-about-algorithm-chapter05","2021","07","23","about-algorithm-chapter05"]},{"header":{"title":"빅 오로 코드 속도 올리기","excerpt":"이전 장에서 빅 오 코드 표기법을 배웠으니, 이를 통해 시간 복잡도를 비교함으로써 알고리즘을 서로 비교할 수 있음을 확인했다. 이 장에서는 버블 정렬 알고리즘을 설계하고, 이를 빅 오 표기법을 통해 어떻게 개선할 수 있는지 확인해본다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-16T21:39:54","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","버블 정렬"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-16-about-algorithm-chapter04.md","content":"","url":["2021-07-16-about-algorithm-chapter04","2021","07","16","about-algorithm-chapter04"]},{"header":{"title":"빅 오 표기법","excerpt":"하나의 문제가 있어도, 이를 해결하는 수 많은 알고리즘이 존재할 수 있다. 어떠한 방법으로든 문제를 해결할 수 있다면 그 자체로 알고리즘이라 불러도 손색이 없지만, 알고리즘이라고 해서 다 같진 않다. 바로 문제를 해결하는 효율성의 차이 때문. 결과적으로 문제를 해결한다고 해도 그냥 무식하게 해결하는 알고리즘이 있는가 하면, 정말 효율적으로 문제를 해결하는 알고리즘도 있다. 그리고 우리는 통상 후자를 알고리즘이라는 명칭에 더 어울린다고 생각할 것이다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-14T04:21:37","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","빅 오 표기법"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-14-about-algorithm-chapter03.md","content":"","url":["2021-07-14-about-algorithm-chapter03","2021","07","14","about-algorithm-chapter03"]},{"header":{"title":"알고리즘이 중요한 까닭","excerpt":"IT영역에서의 알고리즘이란, 어떤 문제를 해결하는 방법을 형상화한 코드를 의미한다. 알고리즘을 잘 설계한다면, 단순한 로직으로 접근할 때보다 훨씬 빠르게 문제를 처리할 수 있다. 개발에는 정말 다양한 문제와 그보다 더욱 다양한 해결방법이 존재하기 때문에, 복잡한 문제일수록 정교한 알고리즘의 설계가 요구된다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-10T04:21:37","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","배열","정렬","이진 검색"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-10-about-algorithm-chapter02.md","content":"","url":["2021-07-10-about-algorithm-chapter02","2021","07","10","about-algorithm-chapter02"]},{"header":{"title":"자료구조가 중요한 까닭","excerpt":"혼자 공부하는건 다 좋은데 효율이 떨어진다. 컴퓨터 앞에 앉아있는 시간은 거의 대부분이라 할 수 있지만, 순수하게 공부하는 시간이 얼마나 되냐고 물어보면 눈치보기 바쁘다. 마침 블로그도 새로 개발해서 쓰고 있고, 공부도 할 겸 적절한 스터디에 하나 참가했다. 노트북 팔아버린 뒤로 스터디에 가입하고 싶어도 할 수가 없었던 차에, 노트북 없이도 할 수 있다는 말에 바로 들어갔다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-10T01:30:56","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","배열"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-10-about-algorithm-chapter01.md","content":"","url":["2021-07-10-about-algorithm-chapter01","2021","07","10","about-algorithm-chapter01"]}],"categories":{"All":{"count":158,"flag":true},"알고리즘":{"count":103,"flag":true},"NextJS":{"count":5,"flag":false},"JAVA":{"count":15,"flag":false},"Ubuntu":{"count":2,"flag":false},"RaspberryPi":{"count":7,"flag":false},"잡담":{"count":2,"flag":false},"WEB":{"count":7,"flag":false},"CS":{"count":10,"flag":false},"React":{"count":1,"flag":false},"Jekyll":{"count":4,"flag":false},"WAS":{"count":2,"flag":false}},"images":["https://user-images.githubusercontent.com/50317129/146303516-288b53c3-8648-43f5-9d2a-6ebef95f36f8.mp4","https://user-images.githubusercontent.com/50317129/146303553-d5ac3c36-c552-41b3-bd2e-15274fdee942.mp4","https://user-images.githubusercontent.com/50317129/146303559-67669141-ee25-466f-8668-f36f2c2142d6.mp4","https://user-images.githubusercontent.com/50317129/146303570-14a553b7-4172-4d91-90ee-55005188d5a0.mp4","https://user-images.githubusercontent.com/50317129/146303578-8bd99347-8167-4b49-975c-386bc8e4f74f.mp4","https://user-images.githubusercontent.com/50317129/146303602-2835aa08-33b3-47d2-941f-994a79f1cb61.mp4","https://user-images.githubusercontent.com/50317129/146303606-e5b84abe-760b-4480-b4c2-47e8aa15d76d.mp4","https://user-images.githubusercontent.com/50317129/146303611-54474d8c-f89a-49fd-a743-7ddd42d84c9c.mp4","https://user-images.githubusercontent.com/50317129/146303625-67b9afcc-88ed-4a64-8ba6-a27d0c5a210a.mp4","https://user-images.githubusercontent.com/50317129/146303633-791d39ac-1ad3-47e8-9169-0fb7c4b56087.mp4","https://user-images.githubusercontent.com/50317129/146303645-98f9902a-5380-425a-9204-5267b69fa4dc.mp4","https://user-images.githubusercontent.com/50317129/146303649-adda4ce7-e823-4012-ba0c-36546d763bcf.mp4","https://user-images.githubusercontent.com/50317129/146303652-0eb3a12a-34b4-494c-9ec9-4723dd5da903.mp4","https://user-images.githubusercontent.com/50317129/146303660-7d5c5856-4331-40fe-9fda-029ebe0bded7.mp4","https://user-images.githubusercontent.com/50317129/146303662-9a8b5bb4-f805-414b-a1f7-92ce16e95c90.mp4","https://user-images.githubusercontent.com/50317129/146303669-c3e5ece9-dba0-42ab-bd4c-a18ec7ce62d5.mp4","https://user-images.githubusercontent.com/50317129/146303672-6d735c23-01f8-44d3-9e37-69a25aea7fee.mp4","https://user-images.githubusercontent.com/50317129/146303693-918687df-9c4c-402e-a1f5-f9b33cc4facb.mp4","https://user-images.githubusercontent.com/50317129/146303695-be0ba3b8-7c67-4b62-a452-3354e10a84aa.mp4","https://user-images.githubusercontent.com/50317129/146303701-1a5dfaa5-dcae-49ef-a68a-606a3c03a7d7.mp4","https://user-images.githubusercontent.com/50317129/146303703-74af99cd-5f3f-4716-8c6b-587eefa35d46.mp4","https://user-images.githubusercontent.com/50317129/146303706-7a090198-7aaf-4370-b53c-60366725ba45.mp4","https://user-images.githubusercontent.com/50317129/146303723-889fd3d5-59ba-471c-92c9-98aa7cbc0b58.mp4","https://user-images.githubusercontent.com/50317129/146303728-702d8de1-86c5-403d-be3a-fea90cd4b318.mp4","https://user-images.githubusercontent.com/50317129/146303733-3eb6db41-1c23-475f-8a1d-a966d45e6554.mp4","https://user-images.githubusercontent.com/50317129/146303738-8c2df40b-88d4-4a77-ad31-5d14bf0ff672.mp4","https://user-images.githubusercontent.com/50317129/146303739-e3179069-7aa9-4393-8b2a-d729db7e054d.mp4","https://user-images.githubusercontent.com/50317129/146303754-ff55ef5c-4749-4eaa-996b-3646baa61c01.mp4","https://user-images.githubusercontent.com/50317129/146303759-2e0de415-0e4b-47e5-b26f-0cb3c76cdb68.mp4","https://user-images.githubusercontent.com/50317129/146303765-e8da715b-ff8d-4f63-bd69-3b4f8d68d6a8.mp4","https://user-images.githubusercontent.com/50317129/146303778-776e7c6c-3fda-48ce-91d7-727c61331fe5.mp4","https://user-images.githubusercontent.com/50317129/146303786-72faa7af-7cea-409f-9823-97fb79706747.mp4","https://user-images.githubusercontent.com/50317129/146303789-69bc1c89-44b3-4608-a369-23a055e647a9.mp4","https://user-images.githubusercontent.com/50317129/146303797-fb6f45ef-c4af-464c-8671-79b69608b833.mp4","https://user-images.githubusercontent.com/50317129/146303800-9b726d33-4cef-49c8-a097-aab9722533a7.mp4","https://user-images.githubusercontent.com/50317129/146303805-35387fd8-c6c9-492a-92c5-3bf5cc4bcfef.mp4","https://user-images.githubusercontent.com/50317129/146303814-2736dc05-ed07-4884-9cb9-d71df4df65e9.mp4","https://user-images.githubusercontent.com/50317129/146303822-fd81b3af-4e1a-4f26-8ab2-d24bb4641b3f.mp4","https://user-images.githubusercontent.com/50317129/146303828-3830c831-d959-4ecf-a9ef-9e46e3894a5c.mp4","https://user-images.githubusercontent.com/50317129/146303834-91c0efa7-61a5-42fb-bbbc-579a8ca0b29e.mp4"],"tag":"누구나 자료 구조와 알고리즘","page":1,"total":1,"hash":"8de03571fc1"},"__N_SSG":true}