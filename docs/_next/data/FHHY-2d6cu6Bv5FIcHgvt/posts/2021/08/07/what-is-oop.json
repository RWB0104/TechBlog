{"pageProps":{"page":{"type":"posts","prev":{"header":{"title":"재귀를 사용한 재귀적 반복","excerpt":"컴퓨터 언어에서의 재귀란 자기 자신을 호출함을 의미한다. 알고리즘에서의 재귀는 매우 중요한 개념 중 하나로써, 그 특성 상 복잡한 연산 및 연산에 걸리는 소요 시간을 효과적으로 개선할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-08-04T00:26:26","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","재귀"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-08-04-about-algorithm-chapter09.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 9장 재귀를 사용한 재귀적 반복\r\n\r\n컴퓨터 언어에서의 <span class=\"primary\">재귀</span>란 자기 자신을 호출함을 의미한다. 알고리즘에서의 재귀는 매우 중요한 개념 중 하나로써, 그 특성 상 복잡한 연산 및 연산에 걸리는 소요 시간을 효과적으로 개선할 수 있다.\r\n\r\n``` javascript\r\n/**\r\n * 재귀 함수\r\n */\r\nfunction recursive()\r\n{\r\n\tconsole.log('recursive');\r\n\r\n\trecursive();\r\n}\r\n```\r\n\r\n``` output\r\nrecursive\r\nrecursive\r\nrecursive\r\nrecursive\r\nrecursive\r\nrecursive\r\n...\r\n```\r\n\r\n위 소스는 재귀의 특성을 간단하게 구현한 예제다. 위 함수를 호출하면 <span class=\"teal-400\">\"recursive\"</span>라는 단어가 끝없이 출력된다.\r\n\r\n`recursive` 함수 내에서 자기 자신을 끝없이 호출하기 때문에 이러한 현상이 일어난다. 겉보기엔 쓸데없는 장난처럼 보이기도 하지만, 재귀의 특징을 잘 활용하면 매우 강력한 도구가 된다.\r\n\r\n## 9-1. 루프 대신 재귀\r\n\r\n지금껏 코드에서 어떤 동작을 반복하기 위해 우리는 루프를 사용한다. `for`, `while` 등과 같은 반복문을 통해 원하는 만큼 동작을 반복한다.\r\n\r\n10부터 0까지 카운트다운을 하는 소스를 설계해보면 아래와 같다.\r\n\r\n``` javascript\r\n/**\r\n * 루프를 활용한 카운트다운 함수\r\n * \r\n * @param {number} start: 시작 숫자\r\n */\r\nfunction countdown(start)\r\n{\r\n\tfor (let i = start; i >= 0; i--)\r\n\t{\r\n\t\tconsole.log(i);\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n0\r\n```\r\n\r\n위 소스는 javascript로 루프를 사용해 작성한 카운트다운 소스다. 하지만, 루프 대신 재귀를 사용하면 아래처럼 구성할 수도 있다.\r\n\r\n``` javascript\r\n/**\r\n * 재귀를 활용한 카운트다운 함수\r\n * \r\n * @param {number} start: 시작 숫자\r\n */\r\nfunction countdown(start)\r\n{\r\n\tconsole.log(start);\r\n\r\n\tcountdown(start - 1);\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n0\r\n-1\r\n-2\r\n...\r\n```\r\n\r\n반대로 위 소스는 루프 대신 재귀를 활용하여 카운트다운을 수행한다. `start`를 출력하고 1을 뺀 값을 다시 자기 자신인 `countdown`에 전달한다.\r\n\r\n대부분의 루프는 재귀로 대체할 수 있다. 단순히 대체되는 것 이상으로 재귀는 루프와 달리 유의미한 성능 향상도 기대할 수 있다.\r\n\r\n그 이전에, 위 소스의 출력을 살펴보자. 통상 카운트다운은 정해진 숫자부터 1 혹은 0까지를 센다. 그런데 위 소스, 0을 넘어서 -1, -2... 한 없이 내려간다. 왜 이러는 걸까?\r\n\r\n## 9-2. 기저 조건\r\n\r\n이전 문단에서 기술한 재귀 함수는 카운트다운이라고 볼 수 없다. 그냥 입력한 숫자부터 끊임없이 숫자를 나열하는 것이나 다름없다. 이런 현상이 발생하는 이유는, 이 재귀 함수에 일종의 브레이크라고 할만한 것이 없기 때문이다.\r\n\r\n우리가 원하는 것은 0까지의 카운트다운이므로, `start`의 값이 0일 경우 더 이상 자기 자신을 호출하지 않도록 바꿔줄 필요가 있다.\r\n\r\n``` javascript\r\n/**\r\n * 재귀를 활용한 완전한 카운트다운 함수\r\n * \r\n * @param {number} start: 시작 숫자\r\n */\r\nfunction countdown(start)\r\n{\r\n\tconsole.log(start);\r\n\r\n\t// 값이 0보다 클 경우\r\n\tif (start > 0)\r\n\t{\r\n\t\tcountdown(start - 1);\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n0\r\n...\r\n```\r\n\r\n위 소스는 이러한 문제를 개선한 소스다. `start`가 0보다 클 경우에만 자기 자신을 다시 호출한다. 0보다 작거나 같을 경우, 재귀가 더 이상 일어나지 않아 동작이 종료된다. 동작에 브레이크가 걸리는 것이다.\r\n\r\n우리가 `for`나 `while`에 특정 조건을 삽입해서 원하는 만큼만 반복문을 수행하는 것처럼 재귀도 이러한 조건을 달아서 원하는 만큼만 반복하게끔 구성해야한다.\r\n\r\n물론 위의 두 반복문은 조건을 어디에 어떤 식으로 입력해야하는지 명확하게 기술되어있다면, 재귀는 코드 내에서 조건을 구성하므로 그 방식이 명확하지 않다. 때문에 재귀를 처음 접하거나, 경험이 없을 경우 이런 방식의 조건 설정이 익숙하지 않아 무한히 동작하는 재귀 함수를 만들기도 한다.\r\n\r\n이렇게 재귀를 멈추는 조건을 <span class=\"primary\">기저 조건</span>이라 한다. 앞서 설명한 예제 `countdown`의 기저 조건은 `start > 0`이라 할 수 있다.\r\n\r\n## 9-3. 재귀 코드 읽기\r\n\r\n앞서 말했듯이, 재귀는 그 조건이 명확하게 보이지 않다. 때문에 경우에 따라선 재귀 코드를 읽는 것초자 어렵기도 하다. 간단한 예제를 통해서 재귀 코드를 읽어보자.\r\n\r\n고등학교 수학에서 배운 내용 중 팩토리얼(Factorial) 연산이 있다. 팩토리얼은 $5!$과 같이 표기하며, 연산 결과는 $5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$이 된다. 즉, 일반식으로 표기하면 아래와 같다.\r\n\r\n$$\r\nn! = n \\times (n - 1) \\times (n - 2) \\times \\dotsb \\times 2 \\times 1\r\n$$\r\n\r\n팩토리얼 연산을 단축하면 $n! = n \\times (n - 1)!$와 같이 표기할 수 있다. 이러한 패턴은 재귀를 적용시키기 매우 용이한 패턴이다.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 팩토리얼 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/07/31/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.02 Mon 22:57:53\r\n */\r\npublic class Factorial\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tint index = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\twriter.write(String.valueOf(factorial(index)));\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 팩토리열 연산 결과 반환 함수\r\n\t *\r\n\t * @param index: [int] 인덱스\r\n\t *\r\n\t * @return [int] 팩토리얼 연산 결과\r\n\t */\r\n\tprivate static int factorial(int index)\r\n\t{\r\n\t\t// 인덱스가 1일 경우\r\n\t\tif (index == 1)\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\t// 인덱스가 1이 아닐 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn index * factorial(index - 1);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n3628800\r\n```\r\n\r\n책에서 설명하는 재귀 코드를 읽는 방법은 아래와 같다.\r\n\r\n1. 기저 조건이 무엇인지 찾는다.\r\n2. 기저 조건을 다룬다는 가정하에 함수를 살펴본다.\r\n3. 기저 조건 바로 **전** 조건을 다룬다는 가정하에 함수를 살펴본다.\r\n4. 한 번에 한 조건씩 올라가면서 계속 분석한다.\r\n\r\n``` java\r\n// 인덱스가 1일 경우\r\nif (index == 1)\r\n{\r\n\treturn 1;\r\n}\r\n\r\n// 인덱스가 1이 아닐 경우\r\nelse\r\n{\r\n\treturn index * factorial(index - 1);\r\n}\r\n```\r\n\r\n위 소스의 구조는 매우 간단하므로, 어렵지 않게 분기를 찾을 수 있다. `index == 1`인 경우와 아닌 경우가 분기다.\r\n\r\n``` java\r\n// 인덱스가 1이 아닐 경우\r\nelse\r\n{\r\n\treturn index * factorial(index - 1);\r\n}\r\n```\r\n\r\n재귀는 자기 자신을 호출하는 것이므로, 분기의 `else` 부분이 재귀가 일어나는 영역이라 추측할 수 있다. 따라서 재귀가 일어나지 않는 영역이 <span class=\"teal-400\">기저 조건</span>이라 할 수 있다.\r\n\r\n``` java\r\n// 인덱스가 1일 경우\r\nif (index == 1)\r\n{\r\n\treturn 1;\r\n}\r\n```\r\n\r\n즉, 위 재귀 함수의 기저 조건은 `index == 1`이다. `factorial(1)`은 1을 반환한다. 이 기저 조건을 토대로 `factorial(4)`의 동작을 전개하면 아래와 같다.\r\n\r\n1. $\\text{factorial(4)} = 4 \\times \\text{factorial(3)}$\r\n2. $\\text{factorial(4)} = 4 \\times 3 \\times \\text{factorial(2)}$\r\n3. $\\text{factorial(4)} = 4 \\times 3 \\times 2 \\times \\text{factorial(1)}$\r\n4. $\\text{factorial(4)} = 4 \\times 3 \\times 2 \\times 1 = 12$\r\n\r\n이와 같이 순차적으로 자기 자신을 호출하여 연산을 수행한다. 재귀 함수의 <span class=\"green-400\">기저 조건은 재귀를 멈추는 요인</span>이므로, 기저 조건을 바탕으로 전개하면 비교적 쉽게 연산을 이해할 수 있다.\r\n\r\n## 9-4. 컴퓨터의 눈으로 바라본 재귀\r\n\r\n우리가 재귀함수를 이해하는 것도 중요하지만, 결국 코드의 실행 주체는 어찌됐든 컴퓨터가 담당하게 된다. 즉, 우리가 이를 이해하는 것 만큼 컴퓨터가 이를 어떻게 이해하는지 아는 것 또한 매우 중요하다.\r\n\r\n이전 장에서, 우리는 <span class=\"amber-400\">스택</span>에 대해 다뤘었다. 컴퓨터가 재귀를 다룰 때 스택을 활용하여 관리한다. `factorial(4)`를 컴퓨터가 스택으로 어떻게 관리하는 지 알아보자.\r\n\r\n1. `factorial(4)`를 호출한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024009-1ee1fc5d-ecce-4711-b729-36a70b8592d1.png\" width=\"200px\" />\r\n\r\n`factorial(4)` 내부에서 `factorial(3)`을 호출하므로, `factorial(4)`를 스택에 삽입하고 `factorial(3)`을 수행한다. 이 때 `factorial(4)`는 종료된 것이 아니라, 재귀 호출로 인해 연산이 중단된 상태다.\r\n\r\n<br />\r\n<br />\r\n\r\n2. `factorial(3)`을 호출한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024019-b76d21a2-24f6-47f6-bf2f-f46350da31e1.png\" width=\"200px\" />\r\n\r\n마찬가지로 재귀로 인해 연산 과정에서 `factorial(2)`를 호출하므로, 마찬가지로 연산을 중단하고 스택에 삽입한다.\r\n\r\n<br />\r\n<br />\r\n\r\n3. `factorial(2)`를 호출한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024025-f96e2b60-943b-4abc-8200-043ffbb63821.png\" width=\"200px\" />\r\n\r\n위와 동일하다.\r\n\r\n<br />\r\n<br />\r\n\r\n4. `factorial(1)`를 호출한다.\r\n\r\n`factorial(1)`는 기저 조건이므로 재귀가 호출되지 않는다. 1을 반환하고 연산을 종료한다. 하지만 스택에 데이터가 남아있으므로, 전체 연산이 종료되지 않았음을 알 수 있다.\r\n\r\n<br />\r\n<br />\r\n\r\n5. `factorial(2)`를 종료한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024038-575615fd-5018-4c32-b205-a0fe3b0a34f2.png\" width=\"200px\" />\r\n\r\n`factorial(2)`의 연산 결과는 `factorial(1)`의 결과와 연관된다. `factorial(1)` 결과가 계산되었으므로, `factorial(2)`를 종료할 수 있다. 연산을 종료하고 스택에서 제거한다.\r\n\r\n<br />\r\n<br />\r\n\r\n6. `factorial(3)`을 종료한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024048-93fcb67e-c73e-4423-ab3f-415f2fa817d4.png\" width=\"200px\" />\r\n\r\n`factorial(3)`의 연산을 종료하고 스택에서 제거한다.\r\n\r\n<br />\r\n<br />\r\n\r\n7. `factorial(4)`을 종료한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024224-c83b0f90-388c-4264-8543-194c56cea310.png\" width=\"200px\" />\r\n\r\n`factorial(4)`의 연산을 종료하고 스택에서 제거한다. 스택에 데이터가 남아있지 않으므로 모든 연산이 종료된다.\r\n\r\n<br />\r\n<br />\r\n\r\n위와 같이 재귀는 스택을 활용하여 연산한다. 만약 기저 조건의 설정을 잘 못 해서 재귀 연산이 끝없이 일어날 수도 있다. 이 경우 스택 역시 끝없이 쌓이게 되서 메모리가 더 이상 감당할 수 없을 때 스택 오버플로우가 발생한다.\r\n\r\n## 9-5. 재귀 다뤄보기\r\n\r\n지금까지 다룬 팩토리얼 연산의 경우 사실 루프를 사용해도 그리 어렵지 않게 풀 수 있으며, 제시된 코드 역시 재귀를 사용했을 때 크게 이점이 있는 것도 아니였다.\r\n\r\n이번엔 좀 더 재귀를 사용했을 때 이점이 있을 법한 주제로 코드를 설계해보자. 재귀는 구조 상 알고리즘 내에서 자기 자신을 호출하는 알고리즘에 가장 적합하다. 즉, 재귀의 사용 여부는 루프의 보다 <span class=\"red-400\">나 자신을 다시 호출해야 하는지 여부</span>에 따라 갈린다.\r\n\r\n코드로 파일 리스트를 불러온 적이 있다면 익숙할 것이다. 우리가 생각하는 것처럼 특정 폴더 내의 파일 리스트 전체를 불러오는 것은 생각보다 까다롭다. 단순히 폴더 바로 밑의 파일 리스트만을 가져온다면 쉽겠지만, 그 하위, 하위의 하위 파일까지 가져오려면 그리 간단하지 않기 때문이다.\r\n\r\n현재 폴더 및 하위 폴더의 모든 폴더 리스트를 출력하는 코드를 작성해보자. 우선은 가장 간단하게, 하위 폴더는 신경쓰지 말고 현재 폴더에 존재하는 폴더 리스트만을 가져와보자.\r\n\r\n폴더 루트 경로는 `D:\\root`와 같으며, 구조는 아래와 같다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/128032026-9ad5c07e-c274-45b2-8865-0164ddd8f618.png)\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 폴더 리스트 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/08/04/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.03 Tue 22:55:59\r\n */\r\npublic class DirectoryList\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"폴더 리스트를 출력할 경로를 입력하세요 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tString path = reader.readLine();\r\n\t\t\r\n\t\tString[] list = getList(path);\r\n\t\t\r\n\t\twriter.write(Arrays.toString(list));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 폴더 리스트 반환 함수\r\n\t *\r\n\t * @param path: [String] 경로\r\n\t *\r\n\t * @return [String[]] 폴더 리스트\r\n\t */\r\n\tprivate static String[] getList(String path)\r\n\t{\r\n\t\treturn Arrays.stream(Objects.requireNonNull(new File(path).listFiles(File::isDirectory))).map(File::getName).toArray(String[]::new);\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nD:\\root\r\n```\r\n\r\n``` output\r\n[a, b, c]\r\n```\r\n\r\n현재 폴더의 직전 하위 폴더 리스트만을 출력한다. 한단계 하위 폴더 리스트를 출력하기 위해 코드를 개선해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 폴더 리스트 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/08/04/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.03 Tue 23:32:46\r\n */\r\npublic class MoreDirectoryList\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"폴더 리스트를 출력할 경로를 입력하세요 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tString path = reader.readLine();\r\n\t\t\r\n\t\tArrayList<String> list = getList(path);\r\n\t\t\r\n\t\twriter.write(String.valueOf(list));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 폴더 리스트 반환 함수\r\n\t *\r\n\t * @param path: [String] 경로\r\n\t *\r\n\t * @return [ArrayList<String>] 폴더 리스트\r\n\t */\r\n\tprivate static ArrayList<String> getList(String path)\r\n\t{\r\n\t\tArrayList<String> list = new ArrayList<>();\r\n\t\t\r\n\t\tFile[] files = new File(path).listFiles(File::isDirectory);\r\n\t\t\r\n\t\t// 파일 배열이 유효할 경우\r\n\t\tif (files != null)\r\n\t\t{\r\n\t\t\tfor (File file : files)\r\n\t\t\t{\r\n\t\t\t\tlist.add(file.getName());\r\n\t\t\t\t\r\n\t\t\t\tFile[] files1 = file.listFiles(File::isDirectory);\r\n\t\t\t\t\r\n\t\t\t\t// 파일 배열이 유효할 경우\r\n\t\t\t\tif (files1 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (File file1 : files1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist.add(file1.getName());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn list;\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nD:\\root\r\n```\r\n\r\n``` output\r\n[a, a1, a2, b, b1, b2, c, c1, c2]\r\n```\r\n\r\n각 폴더의 하위 폴더의 리스트까지 출력해준다. 소스를 봐도 폴더일 경우 동일한 소스가 한 번 더 동작된다. 하지만 이는 매우 제한적이다. 폴더의 깊이가 정해져있다면 이런 식으로 계속 동일한 소스를 반복하면 되겠지만, 이러한 케이스는 거의 존재하지 않아 무의미하다.\r\n\r\n이 경우 재귀를 사용하면 매우 손쉽게 모든 폴더의 하위 리스트를 출력할 수 있다.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 재귀 폴더 리스트 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/08/04/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.03 Tue 23:36:43\r\n */\r\npublic class RecursiveDirectoryList\r\n{\r\n\tprivate static final ArrayList<String> LIST = new ArrayList<>();\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"폴더 리스트를 출력할 경로를 입력하세요 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tString path = reader.readLine();\r\n\t\t\r\n\t\tgetList(path);\r\n\t\t\r\n\t\twriter.write(String.valueOf(LIST));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 폴더 리스트 산출 함수\r\n\t *\r\n\t * @param path: [String] 경로\r\n\t */\r\n\tprivate static void getList(String path)\r\n\t{\r\n\t\tFile[] files = new File(path).listFiles(File::isDirectory);\r\n\t\t\r\n\t\t// 파일 배열이 유효할 경우\r\n\t\tif (files != null)\r\n\t\t{\r\n\t\t\tfor (File file : files)\r\n\t\t\t{\r\n\t\t\t\tLIST.add(file.getName());\r\n\t\t\t\t\r\n\t\t\t\tgetList(file.getPath());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nD:\\root\r\n```\r\n\r\n``` output\r\n[a, a1, a2, b, b1, b11, b2, c, c1, c11, c12, c2]\r\n```\r\n\r\n재귀를 이용하여 하위 폴더의 전체 폴더명을 출력할 수 있다. 동일한 소스를 구태여 반복할 필요도 없고, 하위 깊이가 얼마나 되는지 알 필요 없이 폴더명 전체 리스트를 출력할 수 있다.\r\n\r\n탐색 순서는 아래와 같다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/128036750-4094185e-3e77-4f24-94c7-dd8ccc9428ef.png)\r\n\r\n# 마무리\r\n\r\n이 장의 핵심 내용은 아래와 같다.\r\n\r\n* 재귀는 자기 자신을 호출하는 구조다.\r\n* 대부분의 루프는 재귀로 대체할 수 있다.\r\n* 알고리즘 구조 상 자기 자신을 호출해야할 때 가장 적합하다.\r\n\r\n백준 알고리즘을 풀었을 때도, 재귀를 사용해야하는 문제가 적지 않았을 정도로 재귀는 알고리즘에서 그 쓰임새가 매우 높다. 이번 장을 통해 재귀의 특성을 정리함으로써, 앞으로 알고리즘을 푸는데 많은 도움이 될 것 같다.","url":["2021-08-04-about-algorithm-chapter09","2021","08","04","about-algorithm-chapter09"]},"next":{"header":{"title":"[OOP] 객체지향의 특징 - 캡슐화(Encapsulation)와 정보 은닉","excerpt":"객체. 즉, 클래스의 내부 변수와 메소드를 하나로 패키징하는 특징이다. 객체에 선언된 변수나 메소드가 구분없이 중구난방으로 접근할 수 있다면 정상적인 객체로 보기 어렵다. 캡슐화와 비슷한 개념으로 정보 은닉이라는 개념이 있다. 정보 은닉은 객체의 내부 구현을 숨김으로써 객체가 반드시 정해진 메소드를 통해 상호작용하도록 유도한다. 이 두 개념은 객체의 응집도와 독립성을 높임으로써 객체의 모듈화를 지향한다. 객체의 모듈화가 잘 이루어져있을 경우 모듈 단위의 재사용이 매우 용이하다. 여러 로직에서 중복되는 코드를 모듈로 대체하면 모듈 내부의 소스만 수정하는 것으로 수정사항을 반영할 수 있다. 이는 곧 간편한 유지보수와 직결된다.","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":"2021-08-08T11:05:05","type":"posts","category":"CS","tag":["CS","객체지향","캡슐화","정보 은닉","접근제어자"],"group":"객체지향","comment":true,"publish":true},"name":"2021-08-08-encapulation.md","content":"\r\n# 캡슐화 (Encapsulation)\r\n\r\n객체. 즉, <span class=\"blue-400\">클래스의 내부 변수와 메소드를 하나로 패키징</span>하는 특징이다.\r\n\r\n객체에 선언된 변수나 메소드가 구분없이 중구난방으로 접근할 수 있다면 정상적인 객체로 보기 어렵다.\r\n\r\n<span class=\"primary\">캡슐화</span>와 비슷한 개념으로 <span class=\"primary\">정보 은닉</span>이라는 개념이 있다.\r\n\r\n정보 은닉은 객체의 내부 구현을 숨김으로써 객체가 반드시 정해진 메소드를 통해 상호작용하도록 유도한다.\r\n\r\n이 두 개념은 객체의 응집도와 독립성을 높임으로써 객체의 모듈화를 지향한다. 객체의 모듈화가 잘 이루어져있을 경우 모듈 단위의 재사용이 매우 용이하다. 여러 로직에서 중복되는 코드를 모듈로 대체하면 모듈 내부의 소스만 수정하는 것으로 수정사항을 반영할 수 있다. 이는 곧 간편한 유지보수와 직결된다.\r\n\r\n# 캡슐화의 예제\r\n\r\nJAVA의 경우 <span class=\"orange-700\">접근제어자</span>를 통해 객체의 캡슐화, 은닉화를 구현한다.\r\n\r\n* `public`: 다른 객체에서 해당 객체의 인스턴스를 생성하여 접근할 수 있다.\r\n* `protected`: 해당 객체를 상속받은 객체 내부에서 접근할 수 있다. 단순 인스턴스에선 접근할 수 없다.\r\n* `default`: 동일한 패키지 내의 객체에서 인스턴스를 생성하여 접근할 수 있다.\r\n* `private`: 선언된 객체 내부에서만 사용 가능하며, 외부에선 어떠한 방법으로든 해당 지시자를 가진 변수 혹은 메소드를 사용할 수 없다.\r\n\r\n대표적인 접근제어자는 위와 같으며, 이를 통해 <span class=\"red-400\">객체 내부의 상태와 동작의 접근 방법을 강제</span>할 수 있다.\r\n\r\n``` java\r\npublic class A\r\n{\r\n\tpublic void run()\r\n\t{\r\n\t\t// 동작\r\n\t}\r\n}\r\n```\r\n\r\n``` java\r\npublic class B\r\n{\r\n\tprivate void publicMethod()\r\n\t{\r\n\t\tSystem.out.println(\"public 메소드 접근\");\r\n\t}\r\n\r\n\tdefault void defaultMethod()\r\n\t{\r\n\t\tSystem.out.println(\"default 메소드 접근\");\r\n\t}\r\n\r\n\tprotected void protectedMethod()\r\n\t{\r\n\t\tSystem.out.println(\"protected 메소드 접근\");\r\n\t}\r\n\r\n\tprivate void privateMethod()\r\n\t{\r\n\t\tSystem.out.println(\"private 메소드 접근\");\r\n\t}\r\n}\r\n```\r\n\r\n## public 요소의 접근 방법\r\n\r\n`public`은 접근제어자 중 <span class=\"orange-400\">가장 개방적인 접근제어자</span>다. 이름부터가 공공(public)이니 말 다했다.\r\n\r\n별다른 조건 없이 객체 `A`에서 객체 `B`의 새로운 인스턴스를 생성하면 `A`에서 `B`의 `public` 요소에 접근할 수 있는 권한이 생긴다.\r\n\r\n``` java\r\npublic class A\r\n{\r\n\tpublic void run()\r\n\t{\r\n\t\tB b = new B();\r\n\t\tb.publicMethod();\r\n\t}\r\n}\r\n```\r\n\r\n위 처럼 `publicMethod()`에 정상적으로 접근 가능하다. 반드시 외부의 접근이 필요한 멤버 변수나 메소드에만 사용해야한다. 해당 접근제어자를 <span class=\"red-400\">남용할 경우 불필요한 요소를 개방</span>하게 되어 정보 은닉이 이루어지지 않는다.\r\n\r\n## protected 요소의 접근 방법\r\n\r\n`protected`는 상속과 연관된 접근제어자다. 이 제어자를 가진 요소는 <span class=\"orange-400\">해당 객체를 상속받은 객체만 접근</span>할 수 있다.\r\n\r\n객체 `A`에서 객체 `B`를 상속받는다. 이 때 자식 객체는 `A`, 부모 객체는 `B`가 된다. 상속을 받게 되면 `A`에서 `B`의 `protectedMethod` 요소에 접근할 수 있는 권한이 생긴다.\r\n\r\n``` java\r\npublic class A extends B\r\n{\r\n\tpublic void run()\r\n\t{\r\n\t\tprotectedMethod();\r\n\t}\r\n}\r\n```\r\n\r\n위 처럼 `protectedMethod()`에 정상적으로 접근 가능하다. `public`과 달리 별도의 인스턴스는 받지 않아도 된다. 이는 `A`가 `B`를 상속받기 때문에, `B`의 <span class=\"lightBlue-400\">멤버 변수와 메소드의 접근 권한을 일부 승계</span>하기 때문\r\n\r\n## default 요소의 접근 방법\r\n\r\n`default`는 제한적인 `public` 접근제어자라 할 수 있다. 이 제어자를 가진 요소는 <span class=\"orange-400\">동일한 패키지 내에서만 접근</span>할 수 있다.\r\n\r\n객체 `A`와 `B`가 동일한 패키지에 위치할 때, `A`에서 `B`의 새로운 인스턴스를 할당받으면 `defaultMethod()`에 접근할 수 있다.\r\n\r\n``` java\r\npublic class A\r\n{\r\n\tpublic void run()\r\n\t{\r\n\t\tB b = new B();\r\n\t\tb.publicMethod();\r\n\t}\r\n}\r\n```\r\n\r\n패키지가 같을 경우 `public`을, 패키지가 다를 경우 `private`과 같은 동작을 한다. 동일한 패키지 여부에 따라 개방/폐쇄가 갈린다. 만약 변수나 메소드에 <span class=\"lightBlue-400\">별다른 접근제어자를 지정하지 않았다면 이 제어자가 기본으로 적용</span>된다.\r\n\r\n``` java\r\npublic class Main\r\n{\r\n\tvoid defaultMethod()\r\n\t{\r\n\t\t// 접근제어자를 지정하지 않으면 default로 자동 지정\r\n\t}\r\n}\r\n```\r\n\r\n## private 요소의 접근 방법\r\n\r\n`private`는 반드시 <span class=\"orange-400\">선언된 객체 내부에서만 접근</span>할 수 있다. 즉, `B`가 아닌 어떤 클래스에서도 `privateMethod()`에 접근할 수 없다. 메소드 뿐만 아니라 멤버 변수도 마찬가지다. 은닉화를 위한 접근제어자로, <span class=\"red-400\">해당 접근제어자의 사용을 통해 내부 변수나 메소드를 은닉</span>할 수 있다.\r\n\r\n객체는 기본적으로 은닉화가 이루어져야한다. 객체를 구현할 때 개방/폐쇄의 명세를 디테일하게 명세하지 않았다면 일단은 `private`로 만드는 것이 좋다. 이후 설계 과정에서 적절한 개방이 필요할 경우 해당 메소드나 변수를 개방한다. 이와 같은 방식은 필요 시에 요소를 적절히 개방함으로써, 차후 프로젝트나 객체의 규모가 커짐에 따라 놓칠 수 있는 불필요한 개방을 미연에 방지할 수 있다. 즉, 올바른 캡슐화/은닉화를 구현하는데 용이한 방식이다.\r\n\r\n# 정리\r\n\r\n별다른 생각 없이 모든 메소드를 개방시킨 객체는 모듈이라 보기 어렵다. 반대로 모든 메소드를 은폐시킨 객체 역시 모듈로써의 의미가 전혀 없다. 즉, 객체가 모듈의 의미를 갖기 위해선 적절히 설계된 개방/폐쇄가 필요하다는 뜻이다.\r\n\r\n캡슐화와 정보 은닉을 메소드가 모듈로써의 의미를 갖게 헤주는 중요한 요소이다. 사용하는 언어의 접근제어자에 대한 이해를 통해 올바른 캡슐화, 정보 은닉을 지키는 객체를 구현하자.","url":["2021-08-08-encapulation","2021","08","08","encapulation"]}},"group":[{"header":{"title":"[OOP] 객체지향의 특징 - 캡슐화(Encapsulation)와 정보 은닉","excerpt":"객체. 즉, 클래스의 내부 변수와 메소드를 하나로 패키징하는 특징이다. 객체에 선언된 변수나 메소드가 구분없이 중구난방으로 접근할 수 있다면 정상적인 객체로 보기 어렵다. 캡슐화와 비슷한 개념으로 정보 은닉이라는 개념이 있다. 정보 은닉은 객체의 내부 구현을 숨김으로써 객체가 반드시 정해진 메소드를 통해 상호작용하도록 유도한다. 이 두 개념은 객체의 응집도와 독립성을 높임으로써 객체의 모듈화를 지향한다. 객체의 모듈화가 잘 이루어져있을 경우 모듈 단위의 재사용이 매우 용이하다. 여러 로직에서 중복되는 코드를 모듈로 대체하면 모듈 내부의 소스만 수정하는 것으로 수정사항을 반영할 수 있다. 이는 곧 간편한 유지보수와 직결된다.","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":"2021-08-08T11:05:05","type":"posts","category":"CS","tag":["CS","객체지향","캡슐화","정보 은닉","접근제어자"],"group":"객체지향","comment":true,"publish":true},"name":"2021-08-08-encapulation.md","content":"\r\n# 캡슐화 (Encapsulation)\r\n\r\n객체. 즉, <span class=\"blue-400\">클래스의 내부 변수와 메소드를 하나로 패키징</span>하는 특징이다.\r\n\r\n객체에 선언된 변수나 메소드가 구분없이 중구난방으로 접근할 수 있다면 정상적인 객체로 보기 어렵다.\r\n\r\n<span class=\"primary\">캡슐화</span>와 비슷한 개념으로 <span class=\"primary\">정보 은닉</span>이라는 개념이 있다.\r\n\r\n정보 은닉은 객체의 내부 구현을 숨김으로써 객체가 반드시 정해진 메소드를 통해 상호작용하도록 유도한다.\r\n\r\n이 두 개념은 객체의 응집도와 독립성을 높임으로써 객체의 모듈화를 지향한다. 객체의 모듈화가 잘 이루어져있을 경우 모듈 단위의 재사용이 매우 용이하다. 여러 로직에서 중복되는 코드를 모듈로 대체하면 모듈 내부의 소스만 수정하는 것으로 수정사항을 반영할 수 있다. 이는 곧 간편한 유지보수와 직결된다.\r\n\r\n# 캡슐화의 예제\r\n\r\nJAVA의 경우 <span class=\"orange-700\">접근제어자</span>를 통해 객체의 캡슐화, 은닉화를 구현한다.\r\n\r\n* `public`: 다른 객체에서 해당 객체의 인스턴스를 생성하여 접근할 수 있다.\r\n* `protected`: 해당 객체를 상속받은 객체 내부에서 접근할 수 있다. 단순 인스턴스에선 접근할 수 없다.\r\n* `default`: 동일한 패키지 내의 객체에서 인스턴스를 생성하여 접근할 수 있다.\r\n* `private`: 선언된 객체 내부에서만 사용 가능하며, 외부에선 어떠한 방법으로든 해당 지시자를 가진 변수 혹은 메소드를 사용할 수 없다.\r\n\r\n대표적인 접근제어자는 위와 같으며, 이를 통해 <span class=\"red-400\">객체 내부의 상태와 동작의 접근 방법을 강제</span>할 수 있다.\r\n\r\n``` java\r\npublic class A\r\n{\r\n\tpublic void run()\r\n\t{\r\n\t\t// 동작\r\n\t}\r\n}\r\n```\r\n\r\n``` java\r\npublic class B\r\n{\r\n\tprivate void publicMethod()\r\n\t{\r\n\t\tSystem.out.println(\"public 메소드 접근\");\r\n\t}\r\n\r\n\tdefault void defaultMethod()\r\n\t{\r\n\t\tSystem.out.println(\"default 메소드 접근\");\r\n\t}\r\n\r\n\tprotected void protectedMethod()\r\n\t{\r\n\t\tSystem.out.println(\"protected 메소드 접근\");\r\n\t}\r\n\r\n\tprivate void privateMethod()\r\n\t{\r\n\t\tSystem.out.println(\"private 메소드 접근\");\r\n\t}\r\n}\r\n```\r\n\r\n## public 요소의 접근 방법\r\n\r\n`public`은 접근제어자 중 <span class=\"orange-400\">가장 개방적인 접근제어자</span>다. 이름부터가 공공(public)이니 말 다했다.\r\n\r\n별다른 조건 없이 객체 `A`에서 객체 `B`의 새로운 인스턴스를 생성하면 `A`에서 `B`의 `public` 요소에 접근할 수 있는 권한이 생긴다.\r\n\r\n``` java\r\npublic class A\r\n{\r\n\tpublic void run()\r\n\t{\r\n\t\tB b = new B();\r\n\t\tb.publicMethod();\r\n\t}\r\n}\r\n```\r\n\r\n위 처럼 `publicMethod()`에 정상적으로 접근 가능하다. 반드시 외부의 접근이 필요한 멤버 변수나 메소드에만 사용해야한다. 해당 접근제어자를 <span class=\"red-400\">남용할 경우 불필요한 요소를 개방</span>하게 되어 정보 은닉이 이루어지지 않는다.\r\n\r\n## protected 요소의 접근 방법\r\n\r\n`protected`는 상속과 연관된 접근제어자다. 이 제어자를 가진 요소는 <span class=\"orange-400\">해당 객체를 상속받은 객체만 접근</span>할 수 있다.\r\n\r\n객체 `A`에서 객체 `B`를 상속받는다. 이 때 자식 객체는 `A`, 부모 객체는 `B`가 된다. 상속을 받게 되면 `A`에서 `B`의 `protectedMethod` 요소에 접근할 수 있는 권한이 생긴다.\r\n\r\n``` java\r\npublic class A extends B\r\n{\r\n\tpublic void run()\r\n\t{\r\n\t\tprotectedMethod();\r\n\t}\r\n}\r\n```\r\n\r\n위 처럼 `protectedMethod()`에 정상적으로 접근 가능하다. `public`과 달리 별도의 인스턴스는 받지 않아도 된다. 이는 `A`가 `B`를 상속받기 때문에, `B`의 <span class=\"lightBlue-400\">멤버 변수와 메소드의 접근 권한을 일부 승계</span>하기 때문\r\n\r\n## default 요소의 접근 방법\r\n\r\n`default`는 제한적인 `public` 접근제어자라 할 수 있다. 이 제어자를 가진 요소는 <span class=\"orange-400\">동일한 패키지 내에서만 접근</span>할 수 있다.\r\n\r\n객체 `A`와 `B`가 동일한 패키지에 위치할 때, `A`에서 `B`의 새로운 인스턴스를 할당받으면 `defaultMethod()`에 접근할 수 있다.\r\n\r\n``` java\r\npublic class A\r\n{\r\n\tpublic void run()\r\n\t{\r\n\t\tB b = new B();\r\n\t\tb.publicMethod();\r\n\t}\r\n}\r\n```\r\n\r\n패키지가 같을 경우 `public`을, 패키지가 다를 경우 `private`과 같은 동작을 한다. 동일한 패키지 여부에 따라 개방/폐쇄가 갈린다. 만약 변수나 메소드에 <span class=\"lightBlue-400\">별다른 접근제어자를 지정하지 않았다면 이 제어자가 기본으로 적용</span>된다.\r\n\r\n``` java\r\npublic class Main\r\n{\r\n\tvoid defaultMethod()\r\n\t{\r\n\t\t// 접근제어자를 지정하지 않으면 default로 자동 지정\r\n\t}\r\n}\r\n```\r\n\r\n## private 요소의 접근 방법\r\n\r\n`private`는 반드시 <span class=\"orange-400\">선언된 객체 내부에서만 접근</span>할 수 있다. 즉, `B`가 아닌 어떤 클래스에서도 `privateMethod()`에 접근할 수 없다. 메소드 뿐만 아니라 멤버 변수도 마찬가지다. 은닉화를 위한 접근제어자로, <span class=\"red-400\">해당 접근제어자의 사용을 통해 내부 변수나 메소드를 은닉</span>할 수 있다.\r\n\r\n객체는 기본적으로 은닉화가 이루어져야한다. 객체를 구현할 때 개방/폐쇄의 명세를 디테일하게 명세하지 않았다면 일단은 `private`로 만드는 것이 좋다. 이후 설계 과정에서 적절한 개방이 필요할 경우 해당 메소드나 변수를 개방한다. 이와 같은 방식은 필요 시에 요소를 적절히 개방함으로써, 차후 프로젝트나 객체의 규모가 커짐에 따라 놓칠 수 있는 불필요한 개방을 미연에 방지할 수 있다. 즉, 올바른 캡슐화/은닉화를 구현하는데 용이한 방식이다.\r\n\r\n# 정리\r\n\r\n별다른 생각 없이 모든 메소드를 개방시킨 객체는 모듈이라 보기 어렵다. 반대로 모든 메소드를 은폐시킨 객체 역시 모듈로써의 의미가 전혀 없다. 즉, 객체가 모듈의 의미를 갖기 위해선 적절히 설계된 개방/폐쇄가 필요하다는 뜻이다.\r\n\r\n캡슐화와 정보 은닉을 메소드가 모듈로써의 의미를 갖게 헤주는 중요한 요소이다. 사용하는 언어의 접근제어자에 대한 이해를 통해 올바른 캡슐화, 정보 은닉을 지키는 객체를 구현하자.","url":["2021-08-08-encapulation","2021","08","08","encapulation"]}],"data":{"header":{"title":"[OOP] 객체지향 프로그래밍(Object Oriented Programming)이란?","excerpt":"IT 업계에 종사하게 된다면 십중팔구 JAVA, C++, C# 중 하나는 다루게 된다. 국내 IT의 최다 공급이자 수요인 JAVA를 위시한 위 세 가지 언어의 공통점은 전부 객체지향언어라는 점이다. 물론 지금에 이르러서는 함수형이라는 개념도 나왔지만, C의 단순한 절차지향 이래로 나온 객체지향은 프로그래밍의 새로운 관점을 제시했고, 크고 작은 언어들이 알게 모르게 영향을 받았다. 이렇게 영향력이 큰 개념임에도 불구하고 막상 이와 관련된 질문을 받으면 명확하게 답을 내지 못 하기도 한다.","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":"2021-08-07T12:06:45","type":"posts","category":"CS","tag":["CS","객체지향"],"group":"객체지향","comment":true,"publish":true},"name":"2021-08-07-what-is-oop.md","content":"<h1 id=\"OOP\">OOP <a href=\"#OOP\">🔗</a></h1><p>IT 업계에 종사하게 된다면 십중팔구 <span class=\"amber-400\">JAVA</span>, <span class=\"amber-400\">C++</span>, <span class=\"amber-400\">C#</span> 중 하나는 다루게 된다. 국내 IT의 최다 공급이자 수요인 JAVA를 위시한 위 세 가지 언어의 공통점은 전부 <span class=\"primary\">객체지향</span>언어라는 점이다.</p>\n<p>물론 지금에 이르러서는 함수형이라는 개념도 나왔지만, <span class=\"amber-400\">C</span>의 단순한 절차지향 이래로 나온 객체지향은 프로그래밍의 새로운 관점을 제시했고, 크고 작은 언어들이 알게 모르게 영향을 받았다. 이렇게 영향력이 큰 개념임에도 불구하고 막상 이와 관련된 질문을 받으면 명확하게 답을 내지 못 하기도 한다.</p>\n<h1 id=\"객체지향에-대해 설명해보세요.\">객체지향에 대해 설명해보세요. <a href=\"#객체지향에-대해 설명해보세요.\">🔗</a></h1><p>제목 그대로 위와 같은 질문을 받았다고 가정해보자. 난 이 질문의 명확한 답을 주지 못 한다. 자바 경험이 없지 않음에도 불구하고, 이론에는 크게 관심이 없기도 했고, 비전공자인 난 구태여 찾아보지 않는 이상 이와 같은 내용을 실무에서 습득하긴 어려웠다.</p>\n<p>내가 쓰는 언어가 어떤 방식으로 동작하는지 모른다면 그건 제대로 쓴다고 보긴 어렵다. 이 주제를 통해 객체지향의 개념에 대해 정리해보고자 한다.</p>\n<h2 id=\"객체\">객체 <a href=\"#객체\">🔗</a></h2><p><strong>객체</strong>지향. 말 그대로 <span class=\"teal-400\">객체</span>를 지향하는 언어다. 객체지향에 대해 이해하기 위해선, 일단 이 방법론이 궁극적으로 지향하는 <strong>객체</strong>란 개념에 대해 이해할 필요가 있다.</p>\n<p>객체지향이 말하는 <span class=\"teal-400\">객체</span>란 프로그램 동작의 주체가 되는 요소를 의미한다. 이 객체는 유/무형을 가리지 않는다. 실체가 명확한 것일 수도 있고, 무형의 개념일 수도 있다.</p>\n<p>모든 객체는 상태와 동작을 가진다. 예를 들어, <strong>TV</strong>를 구매한다고 생각해보자. 대부분의 사람들은 TV의 디자인, 성능, 가격 등을 적절히 고려하여 TV를 구매할 것이다.</p>\n<p>TV의 색, 인치, 가격 등은 TV가 가진 상태라고 볼 수 있다. TV 채널 이동, 다시 보기, 넷플릭스 연결 등은 TV의 기능이라고 볼 수 있다.</p>\n<p>이렇게 모든 객체에는 <span class=\"green-400\">상태</span>와 <span class=\"green-400\">동작</span>이 존재한다.</p>\n<p>국내 객체지향 언어의 대표격인 <span class=\"amber-400\">JAVA</span>는 이러한 개념을 아래와 같이 접근한다.</p>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">객체지향</th>\n<th align=\"center\">JAVA</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">객체</td>\n<td align=\"center\">클래스</td>\n</tr>\n<tr>\n<td align=\"center\">상태</td>\n<td align=\"center\">멤버 변수</td>\n</tr>\n<tr>\n<td align=\"center\">동작</td>\n<td align=\"center\">메소드 (함수)</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>여기 <strong>자동차</strong>라는 현실의 객체를 JAVA가 어떻게 클래스로 다루는지 예제를 통해 알아보자.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"window.getSelection().selectAllChildren(this.parentElement.querySelector('pre'));document.execCommand('copy');\">📋</button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token comment\" data-tag=\"new\"> * 자동차 클래스</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token comment\" data-tag=\"new\"> *</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"> * @author RWB</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token comment\" data-tag=\"new\"> * @since 2021.08.05 22:06:24</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8>    <span class=\"token comment\" data-tag=\"new\">// 시동 여부</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> IS_STARTED <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>    </td></tr>\n<tr><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>    <span class=\"token comment\" data-tag=\"new\">// 최대 속력</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAX_SPEED<span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13>    </td></tr>\n<tr><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14>    <span class=\"token comment\" data-tag=\"new\">// 현재 속력</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> speed<span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>    </td></tr>\n<tr><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18><span class=\"token comment\" data-tag=\"new\">     * Car 생성자 함수</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20><span class=\"token comment\" data-tag=\"new\">     * @param maxSpeed: [int] 최대 속도</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxSpeed<span class=\"token punctuation\">)</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23>    <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"24\">24</td><td class=\"line-code\" data-number=24>        MAX_SPEED <span class=\"token operator\">=</span> maxSpeed<span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"25\">25</td><td class=\"line-code\" data-number=25>    <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"26\">26</td><td class=\"line-code\" data-number=26>    </td></tr>\n<tr><td class=\"line-number\" data-number=\"27\">27</td><td class=\"line-code\" data-number=27>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"28\">28</td><td class=\"line-code\" data-number=28><span class=\"token comment\" data-tag=\"new\">     * 시동 결과 반환 함수</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"29\">29</td><td class=\"line-code\" data-number=29><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"30\">30</td><td class=\"line-code\" data-number=30><span class=\"token comment\" data-tag=\"new\">     * @return [boolean] 시동 결과</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"31\">31</td><td class=\"line-code\" data-number=31><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"32\">32</td><td class=\"line-code\" data-number=32>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"33\">33</td><td class=\"line-code\" data-number=33>    <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"34\">34</td><td class=\"line-code\" data-number=34>        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>IS_STARTED<span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"35\">35</td><td class=\"line-code\" data-number=35>    <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"36\">36</td><td class=\"line-code\" data-number=36>    </td></tr>\n<tr><td class=\"line-number\" data-number=\"37\">37</td><td class=\"line-code\" data-number=37>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"38\">38</td><td class=\"line-code\" data-number=38><span class=\"token comment\" data-tag=\"new\">     * 시동 종료 결과 반환 함수</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"39\">39</td><td class=\"line-code\" data-number=39><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"40\">40</td><td class=\"line-code\" data-number=40><span class=\"token comment\" data-tag=\"new\">     * @return [boolean] 시동 종료 결과</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"41\">41</td><td class=\"line-code\" data-number=41><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"42\">42</td><td class=\"line-code\" data-number=42>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"43\">43</td><td class=\"line-code\" data-number=43>    <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"44\">44</td><td class=\"line-code\" data-number=44>        <span class=\"token keyword\">return</span> IS_STARTED<span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"45\">45</td><td class=\"line-code\" data-number=45>    <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"46\">46</td><td class=\"line-code\" data-number=46>    </td></tr>\n<tr><td class=\"line-number\" data-number=\"47\">47</td><td class=\"line-code\" data-number=47>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"48\">48</td><td class=\"line-code\" data-number=48><span class=\"token comment\" data-tag=\"new\">     * 현재 속도 반환 함수</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"49\">49</td><td class=\"line-code\" data-number=49><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"50\">50</td><td class=\"line-code\" data-number=50><span class=\"token comment\" data-tag=\"new\">     * @return [int] 현재 속도</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"51\">51</td><td class=\"line-code\" data-number=51><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"52\">52</td><td class=\"line-code\" data-number=52>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSpeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"53\">53</td><td class=\"line-code\" data-number=53>    <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"54\">54</td><td class=\"line-code\" data-number=54>        <span class=\"token keyword\">return</span> speed<span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"55\">55</td><td class=\"line-code\" data-number=55>    <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"56\">56</td><td class=\"line-code\" data-number=56>    </td></tr>\n<tr><td class=\"line-number\" data-number=\"57\">57</td><td class=\"line-code\" data-number=57>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"58\">58</td><td class=\"line-code\" data-number=58><span class=\"token comment\" data-tag=\"new\">     * 가속 함수</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"59\">59</td><td class=\"line-code\" data-number=59><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"60\">60</td><td class=\"line-code\" data-number=60><span class=\"token comment\" data-tag=\"new\">     * @param amount: [int] 속도</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"61\">61</td><td class=\"line-code\" data-number=61><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"62\">62</td><td class=\"line-code\" data-number=62>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">upSpeed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"63\">63</td><td class=\"line-code\" data-number=63>    <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"64\">64</td><td class=\"line-code\" data-number=64>        <span class=\"token comment\" data-tag=\"new\">// 시동이 걸렸을 경우</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"65\">65</td><td class=\"line-code\" data-number=65>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IS_STARTED<span class=\"token punctuation\">)</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"66\">66</td><td class=\"line-code\" data-number=66>        <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"67\">67</td><td class=\"line-code\" data-number=67>            <span class=\"token comment\" data-tag=\"new\">// 가속된 값이 최대 속도를 넘지 않을 경우</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"68\">68</td><td class=\"line-code\" data-number=68>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MAX_SPEED <span class=\"token operator\">>=</span> speed <span class=\"token operator\">+</span> amount<span class=\"token punctuation\">)</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"69\">69</td><td class=\"line-code\" data-number=69>            <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"70\">70</td><td class=\"line-code\" data-number=70>                speed <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"71\">71</td><td class=\"line-code\" data-number=71>            <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"72\">72</td><td class=\"line-code\" data-number=72>            </td></tr>\n<tr><td class=\"line-number\" data-number=\"73\">73</td><td class=\"line-code\" data-number=73>            <span class=\"token comment\" data-tag=\"new\">// 가속된 값이 최대 속도를 넘을 경우</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"74\">74</td><td class=\"line-code\" data-number=74>            <span class=\"token keyword\">else</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"75\">75</td><td class=\"line-code\" data-number=75>            <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"76\">76</td><td class=\"line-code\" data-number=76>                speed <span class=\"token operator\">=</span> MAX_SPEED<span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"77\">77</td><td class=\"line-code\" data-number=77>            <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"78\">78</td><td class=\"line-code\" data-number=78>        <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"79\">79</td><td class=\"line-code\" data-number=79>    <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"80\">80</td><td class=\"line-code\" data-number=80>    </td></tr>\n<tr><td class=\"line-number\" data-number=\"81\">81</td><td class=\"line-code\" data-number=81>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"82\">82</td><td class=\"line-code\" data-number=82><span class=\"token comment\" data-tag=\"new\">     * 감속 함수</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"83\">83</td><td class=\"line-code\" data-number=83><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"84\">84</td><td class=\"line-code\" data-number=84><span class=\"token comment\" data-tag=\"new\">     * @param amount: [int] 속도</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"85\">85</td><td class=\"line-code\" data-number=85><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"86\">86</td><td class=\"line-code\" data-number=86>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">downSpeed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"87\">87</td><td class=\"line-code\" data-number=87>    <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"88\">88</td><td class=\"line-code\" data-number=88>        <span class=\"token comment\" data-tag=\"new\">// 시동이 걸렸을 경우</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"89\">89</td><td class=\"line-code\" data-number=89>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IS_STARTED<span class=\"token punctuation\">)</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"90\">90</td><td class=\"line-code\" data-number=90>        <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"91\">91</td><td class=\"line-code\" data-number=91>            <span class=\"token comment\" data-tag=\"new\">// 감속된 값이 0보다 클 경우</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"92\">92</td><td class=\"line-code\" data-number=92>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> speed <span class=\"token operator\">-</span> amount<span class=\"token punctuation\">)</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"93\">93</td><td class=\"line-code\" data-number=93>            <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"94\">94</td><td class=\"line-code\" data-number=94>                speed <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"95\">95</td><td class=\"line-code\" data-number=95>            <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"96\">96</td><td class=\"line-code\" data-number=96>            </td></tr>\n<tr><td class=\"line-number\" data-number=\"97\">97</td><td class=\"line-code\" data-number=97>            <span class=\"token comment\" data-tag=\"new\">// 감속된 값이 0보다 작을 경우</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"98\">98</td><td class=\"line-code\" data-number=98>            <span class=\"token keyword\">else</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"99\">99</td><td class=\"line-code\" data-number=99>            <span class=\"token punctuation\">{</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"100\">100</td><td class=\"line-code\" data-number=100>                speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"101\">101</td><td class=\"line-code\" data-number=101>            <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"102\">102</td><td class=\"line-code\" data-number=102>        <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"103\">103</td><td class=\"line-code\" data-number=103>    <span class=\"token punctuation\">}</span></td></tr>\n<tr><td class=\"line-number\" data-number=\"104\">104</td><td class=\"line-code\" data-number=104><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>위의 코드 Car 클래스는 자동차라는 현실의 객체를 매우 간단한 형태로 구현한 클래스다.</p>\n<br />\n\n<ul>\n<li><strong>멤버 변수</strong> (상태)<ul>\n<li><code class=\"inline-code\">IS_STARTED</code> 자동차 시동 여부</li>\n<li><code class=\"inline-code\">MAX_SPEED</code>: 최대 속도</li>\n<li><code class=\"inline-code\">speed</code>: 현재 속도</li>\n</ul>\n</li>\n</ul>\n<br />\n\n<ul>\n<li><strong>메소드</strong> (동작)<ul>\n<li><code class=\"inline-code\">startUp</code>: 엔진 시동</li>\n<li><code class=\"inline-code\">shutdown</code>: 엔진 정지</li>\n<li><code class=\"inline-code\">getSpeed</code>: 현재 속도 표시</li>\n<li><code class=\"inline-code\">upSpeed</code>: 가속</li>\n<li><code class=\"inline-code\">downSpeed</code>: 감속</li>\n</ul>\n</li>\n</ul>\n<br />\n\n<p>Car 클래스의 요소는 위와 같이 구분된다. JAVA에서 이 객체를 사용하려면 메모리에 할당해야하고, 이렇게 할당된 객체를 <span class=\"teal-400\">인스턴스</span>(Instance)라 칭한다.</p>\n<p>Car 클래스를 메모리에 할당하여 새로운 인스턴스를 만드는 것은 현실에서 자동차 하나를 뽑는 것과 동일한 개념이다.</p>\n<h2 id=\"객체지향\">객체지향 <a href=\"#객체지향\">🔗</a></h2><p>객체<strong>지향</strong>이므로, 앞서 언급했듯이 이를 이해하기 위해선 객체를 이해해야한다. 이미 이전 문단에서 객체에 대해 장황하게 설명했으므로, <span class=\"teal-400\">객체지향</span>은 이러한 객체를 통해 코드를 구성하는 방법론이라 정의할 수 있다.</p>\n<p>모든 객체는 각 객체의 특성에 부합하는 상태와 동작을 가지며, 이를 통해 객체 간의 상호작용을 코드로 나타낼 수 있다. 객체지향은 이러한 객체의 상호작용을 코드로 나타낸다.</p>\n<p>일례로 JAVA는 <code class=\"inline-code\">String</code>, <code class=\"inline-code\">HashMap</code> 등, 모든 요소를 객체(Object)로 다룬다. 우리는 JAVA로 필요한 객체를 메모리에 할당하고, 객체가 가진 변수나 메소드를 사용하여 코딩한다. 이러한 JAVA의 프로그래밍 방식은 지금껏 설명한 객체지향의 그 것과 동일함을 알 수 있다.</p>\n<h1 id=\"그래서-이걸 왜 쓰는데?\">그래서 이걸 왜 쓰는데? <a href=\"#그래서-이걸 왜 쓰는데?\">🔗</a></h1><p>객체지향을 차용한 언어는 매우 많다. 대표격인 JAVA 이외에도 C++, C#, Visual Basic, Swift, Python 등이 있다. 또한 이 언어들은 우리에게 매우 익숙한 이름일 뿐만 아니라, 프로그래밍 언어에서 다들 한 자리씩은 차지하는 매우 비중있는 언어들이다.</p>\n<p>그렇다면 객체지향 언어가 개발자들에게 그토록 널리 쓰이며, 사랑받을 수 있었던 이유는 무엇일까?</p>\n<p>객체지향은 절차지향의 후발주자다. 보통 이런 경우의 후발주자는 선발의 단점 혹은 니즈들을 개선하여 출시하므로 기능 혹은 편의성에서 많은 이점을 가진다. 객체지향은 특히 생산성과 유지보수 용이성을 높이는 데 포커스를 두었으며, 덕분에 객체지향 언어를 구사하는 개발자는 개발을 비교적 쉽고 빠르게 수행할 수 있다.</p>\n<h2 id=\"장점\">장점 <a href=\"#장점\">🔗</a></h2><ul>\n<li><p><span class=\"green-400\">코드 재사용성</span><br>모듈화된 객체를 기반으로 코드가 작성되기 때문에, 해당 객체의 특징을 비슷한 다른 로직에도 적용해서 사용하거나, 다른 개발자가 구현한 객체를 가져와 쓰기에도 용이하다.</p>\n</li>\n<li><p><span class=\"green-400\">간편한 유지보수</span><br>객체를 수정할 경우, 해당 객체를 사용하는 모든 로직에 일괄적으로 적용되니, 중복 코드에 대한 관리가 간단해진다. 혹은 객체나 동작이 변경될 경우, 해당 객체나 동작과 연관된 객체만을 찾아 수정하면 된다.</p>\n</li>\n<li><p><span class=\"green-400\">큰 규모의 프로그래밍에 유리</span><br>객체, 모듈 단위로 구분되는 특징으로 인해 업무 분장이 쉽고, 각 모듈의 연관성을 도식하기 용이하다.</p>\n</li>\n</ul>\n<h2 id=\"단점\">단점 <a href=\"#단점\">🔗</a></h2><ul>\n<li><p><span class=\"red-400\">비교적 느린 속도</span><br>절차지향과 달리 객체지향은 각 객체의 의존 관계로 인해 대체적으로 속도가 느리다.</p>\n</li>\n<li><p><span class=\"red-400\">높은 설계역량 요구</span><br>모듈 단위의 상호작용으로 이루어진 방식은, 모듈의 정확한 명세와 상호 간의 연관성이 얼마나 짜임새있게 설계되었는지 중요하다. 잘 못 설계된 객체나 연관성은 라쟈나 코드로 변하기 쉽다.</p>\n</li>\n<li><p><span class=\"red-400\">코드의 잠재적인 복잡성</span><br>높은 수준의 설계역량 요구와 더불어 추상 객체, 상속, 인터페이스 등의 복잡한 개념과 그 활용은 코드의 구조를 파악하기 어렵게 만든다.</p>\n</li>\n</ul>\n<h1 id=\"객체지향을-사용하는 언어들\">객체지향을 사용하는 언어들 <a href=\"#객체지향을-사용하는 언어들\">🔗</a></h1><ul>\n<li>JAVA</li>\n<li>C++</li>\n<li>C#</li>\n<li>Python</li>\n<li>Simula 67</li>\n<li>Delphi</li>\n<li>Swift</li>\n<li>Ruby</li>\n<li>Perl</li>\n</ul>\n<p><del class=\"grey-600\">대부분 아는 얼굴들이구만</del></p>\n<h1 id=\"정리\">정리 <a href=\"#정리\">🔗</a></h1><p>기존의 C언어의 기반인 절차지향도 나름의 장점이 있었다. 컴퓨터의 처리 흐름과 코드의 흐름이 매우 유사하기 때문에 전처리가 적어 실행 속도가 비교적 빨랐다. 또한 코드의 흐름이 일정했으므로, 이를 분석하기도 수월했을 것이다.</p>\n<p>하지만 시대가 지남에 따라 시대가 발전했고, 개발자의 평균 역량 또한 높아졌다. 컴퓨터의 처리 속도는 언급할 필요조차 없었고. 이러한 환경의 발전으로 인해 절차지향의 장점이 주는 메리트가 적어지면서, 반대로 단점이 주는 디메리트가 더더욱 크게 다가왔을 것이다.</p>\n<p>객체지향은 유지보수의 용이성과 개발 편의성을 중요시 여기는 개발 방법론이다. 객체지향이 가지는 장점 덕분에 <span class=\"pink-400\">개발자 간의 코드 공유</span>가 쉬워졌으며, <span class=\"pink-400\">서비스의 규모는 더욱 증가</span>하고, <span class=\"pink-400\">견고한 프로그램</span>을 만들기 쉬워졌다.</p>\n<p>절차지향이 컴퓨터에게 친화적이라면, 객체지향은 개발자에게 친화적이라 할 수 있겠다. 컴퓨터의 성능이 미친듯이 높아짐에 따라, 프로그램의 성능은 자연스레 개발자의 역량에 갈리게 됐다. 이러한 흐름으로 인해 객체지향은 많은 언어, 개발자에게 사랑받을 수 있었을 것이다.</p>\n<p>요즘 AI 기술이 발달함에 따라 <a href=\"https://copilot.github.com/\">Copilot</a> 등 AI가 코딩을 보조해주는 기술이 연구되고, 등장하고 있는 것 같다.</p>\n<p>나중에 시간이 지나 개발자의 역량이 더 이상 중요하지 않게 되면 새로운 방법론이 대세가 되지 않을까?</p>\n","url":["2021-08-07-what-is-oop","2021","08","07","what-is-oop"],"toc":[{"text":"OOP","tag":"OOP","depth":1},{"text":"객체지향에 대해 설명해보세요.","tag":"객체지향에-대해 설명해보세요.","depth":1},{"text":"객체","tag":"객체","depth":2},{"text":"객체지향","tag":"객체지향","depth":2},{"text":"그래서 이걸 왜 쓰는데?","tag":"그래서-이걸 왜 쓰는데?","depth":1},{"text":"장점","tag":"장점","depth":2},{"text":"단점","tag":"단점","depth":2},{"text":"객체지향을 사용하는 언어들","tag":"객체지향을-사용하는 언어들","depth":1},{"text":"정리","tag":"정리","depth":1}]}},"__N_SSG":true}