{"pageProps":{"posts":[{"header":{"title":"IntelliJ(인텔리제이) 시작 시 오류(java.net.BindException: Address already in use: bind)","excerpt":"","coverImage":"https://user-images.githubusercontent.com/50317129/121893356-d6d48480-cd58-11eb-80bb-d4611be3bd40.png","date":"2021-06-14T21:59:16","type":"posts","category":"JAVA","tag":["IntelliJ(인텔리제이)","Hyper-V","오류 해결책"],"comment":true,"publish":true},"name":"2021-06-14-intellij-error-onstart.md","content":"\r\n# 않이 갑자기 왜요ㅠㅠ\r\n\r\n분명히 어제까지만 해도 아무 이상없이 썼던 <span class=\"primary\">IntelliJ</span>를 퇴근 후에 키니 오류를 뱉으며 뻗어버렸다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/121893316-c6bca500-cd58-11eb-9c2a-658c604ee6d1.png\" width=\"600px\" />\r\n</p>\r\n\r\n두 개의 오류창이 떴는데, 하나는 위와 같은 <span class=\"red-A400\">java.net.BindException: Address already in use: bind</span>에러였고 다른 하나는 왠 <span class=\"red-A400\">NullPointerException</span>이 떴었다. 하필 <span class=\"red-A400\">NullPointerException</span>이 맨 위에 뜨는 바람에 엉뚱한걸 찾고 있었는데, 창 옮기니까 뒤에 저 오류창이 숨어있었다.\r\n\r\n# 원인?\r\n\r\nWindows의 가상 OS머신인 <span class=\"lightBlue-A400\">Hyper-V</span>와 연관이 있는 모양이다. Windows 부팅 시 <span class=\"lightBlue-A400\">Hyper-V</span>에서 자신이 사용할 포트를 지정하는데, 이게 <span class=\"primary\">IntelliJ</span>와 겹쳐서 생긴다고 한다. 아니 갑자기 이제와서?\r\n\r\n실제로 난 <span class=\"lightBlue-A400\">Hyper-V</span>를 사용한다. CentOS 8과 Windows 10을 구동하고 있다. CentOS 8은 리눅스도 다뤄볼 겸 DB 하나 설치해서, 집에서 코딩할 때 DB 쓸 일 있으면 전부 저기다가 갖다 붙여서 쓰고 있다. Windows 10은 클린 PC가 필요하거나, 내가 극혐해 마지않는 인터넷뱅킹을 할 때 사용 중 ~~(플러그인 ㅂㄷㅂㄷ.....)~~ 이긴 한데, 거의 3개월 가까이 사용한 적이 없다. 간혹 Windows Update가 설정을 지멋대로 변경하기도 한다는데 그 때문인가.. 갑자기 잘 되던게 어떠한 문제로 인해 안 된다고 하는 경우가 왕왕있다. 지금까지 잘 돌아간 이유는 내가 알지 못 하는 어떤 신비의 힘이라도 작용했는 모양이다.\r\n\r\n# 해결방법\r\n\r\n<span class=\"green-A400\">윈도우 콘솔을 관리자 권한으로 실행</span>한다. <span class=\"primary\">cmd</span>, <span class=\"primary\">PowerShell</span> 등 어떠한 콘솔이든 명령어만 보낼 수 있으면 상관없다. 콘솔에 아래의 명령어를 입력한다.\r\n\r\n``` batch\r\n# Hyper-V 비활성화 (윈도우 재부팅 필요)\r\ndism.exe /Online /Disable-Feature:Microsoft-Hyper-V\r\n\r\n# TCPv6 6942 ~ 6952 포트 예약\r\nnetsh int ipv6 add excludedportrange protocol=tcp startport=6942 numberofports=10\r\n\r\n# Hyper-V 활성화 (윈도우 재부팅 필요)\r\ndism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All\r\n```\r\n\r\n<span class=\"lightBlue-A400\">Hyper-V</span> 활성화/비활성화에 각각 재부팅을 요구한다. 이후 <span class=\"primary\">IntelliJ</span>는 정상적으로 켜지는데, <span class=\"lightBlue-A400\">Hyper-V</span>가 제대로 안 되는 거 같았다. OS를 켜도 \"시작하는 중\"에서 넘어가질 않는다. <span class=\"lightBlue-A400\">Hyper-V</span> 기능 재설치하고 재부팅하고 다시 시도했는데 안 된다.... 싶었는데 냅둬놓고 기다리니 잘 되더라. IntelliJ 계열 프로그램 모두에게 발생 가능성이 있다고 한다.\r\n\r\n개운하진 않지만, 어쨌든 잘 해결됐으니 다행.","url":["2021-06-14-intellij-error-onstart","2021","06","14","intellij-error-onstart"]},{"header":{"title":"[JAVA] split vs StringTokenizer","excerpt":"알고리즘을 풀다보면, 필연적으로 입력값 처리를 하게된다. 다양한 케이스에 대응하기 위해, 사용자의 값을 직접 입력받아 이를 처리하게 된다. 이 때, 우리는 십중팔구 이와 같은 상황이 발생한다. 데이터셋을 보내기 위해 데이터의 모음을 구분자(공백 혹은 쉼표)를 통해 하나의 문자열로 합쳐 전달한다.","coverImage":"https://www.textrazor.com/img/letters3.png","date":"2021-06-14T01:56:01","type":"posts","category":"JAVA","tag":["JAVA(자바)","String(문자열)","split","StringTokenizer"],"comment":true,"publish":true},"name":"2021-06-14-split-and-stringtokenizer.md","content":"\r\n# 개요\r\n\r\n알고리즘을 풀다보면, 필연적으로 입력값 처리를 하게된다. 다양한 케이스에 대응하기 위해, 사용자의 값을 직접 입력받아 이를 처리하게 된다. 이 때, 우리는 십중팔구 이와 같은 상황이 발생한다. 데이터셋을 보내기 위해 데이터의 모음을 구분자(공백 혹은 쉼표)를 통해 하나의 문자열로 합쳐 전달한다.\r\n\r\n$$\r\n[ \"A\", \"B\", \"C\", \"D\" ] -> \"A B C D\"\r\n$$\r\n\r\n이를테면, 위와 같이 $[ \"A\", \"B\", \"C\", \"D\" ]$와 같은 배열을 전달하기 위해, 각 요소를 공백으로 구분하여 $\"A B C D\"$와 같이 전달하게 된다. 보통 내 경우 `split` 메소드를 활용하는데, 알고리즘 풀이를 찾아보다보니 `StringTokenizer`이라는 <span class=\"orange-400\">class</span>를 쓰는 코드들이 더러있었다. 처음보는 <span class=\"orange-400\">class</span>인데다, 접근성이 훨씬 뛰어난 `split`를 굳이 대체해서 쓰는 이유가 있을거라 판단. 직접 퍼포먼스를 비교해보기로 했다. 알고리즘은 수행속도 역시 중요한 지표로 작용하기 때문에, 조금이라도 시간을 줄일 필요가 있다. 안타깝게도 나는 코드 최적화 실력이 최악이라, 이런식으로 줄일 수 있는 자잘한 부분은 줄여야한다. 핵심 코드를 최적화할 생각은 안 하고 이런데서 시간을 단축하는게 꼭 다이어트한답시고 피자 먹으면서 제로콜라 마시는 느낌이긴 하나, `StringTokenizer`이 더 성능이 뛰어나다면 앞으로 푸는 알고리즘에 적용할 가치가 있을 것이다.\r\n\r\n## 테스트 환경\r\n\r\n| 구분  |                                                        내용                                                         |\r\n| :---: | :-----------------------------------------------------------------------------------------------------------------: |\r\n| 언어  | ![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |\r\n|  OS   |                                                  Windows 10 64bit                                                   |\r\n|  CPU  |                                                   Intel i7-10700K                                                   |\r\n|  RAM  |                                                        32GB                                                         |\r\n\r\n# split 메소드\r\n\r\n`split` 메소드는 특정 <span class=\"lightBlue-400\">구분자</span>로 문자열을 분리하는 전통적인 메소드다. 굳이 JAVA가 아니더라도 C(++, #), JavaScript, Python 등 여러 언어에 존재하는 키워드라 어떤 언어든 문자열을 구분할 때 제일 먼저 시도하는 방법이다.\r\n\r\nJAVA의 `split`은 문자열 데이터 형식인 `String` <span class=\"orange-400\">class</span>에 포함된 메소드다. 문자열 데이터라면 `split`를 호출하여 문자열을 구분할 수 있다. 반환값은 `String[]` 객체.\r\n\r\n사용법은 아래와 같다.\r\n\r\n``` java\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 메인 클래스\r\n *\r\n * @author RWB\r\n * @since 2021.06.13 Sun 22:50:57\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tString text = \"A B C D\";\r\n\t\t\r\n\t\tString[] splited = text.split(\" \");\r\n\t\t\r\n\t\tSystem.out.println(Arrays.toString(splited));\r\n\t}\r\n}\r\n```\r\n\r\n출력은 아래와 같다.\r\n\r\n``` tc\r\n[A, B, C, D]\r\n```\r\n\r\n문자열 `A B C D`가 공백을 기준으로 `[A, B, C, D]`로 분리된걸 확인할 수 있다. 그 밖에 한 가지 특이한 점이 있는데, JAVA의 `split` 메소드는 <span class=\"red-A400\">구분자에 정규식을 적용</span>할 수 있다. 이를 잘만 이용하면 복합적인 구분자를 사용할 수도 있다.\r\n\r\n# StringTokenizer\r\n\r\n이 포스팅을 쓰게 만든 직접적인 원인. `StringTokenizer` 역시 문자열을 구분하는데 특화된 <span class=\"orange-400\">class</span>의 일종이다. `String[]`을 반환하는 `split`과 달리 그 자체로 하나의 개별적인 <span class=\"orange-400\">class</span>라는 차이가 있다.\r\n\r\n`StringTokenizer tokenizer = new StringTokenizer(\"문자열\");`과 같은 형태로 초기화해서 사용한다. `StringTokenizer` 인스턴스를 사용하는데 알아두면 좋을법한 메소드는 아래와 같다.\r\n\r\n|    메소드     | 반환값  |         내용          |\r\n| :-----------: | :-----: | :-------------------: |\r\n|  countToken   |   int   |      토큰의 갯수      |\r\n|   nextToken   | String  |       다음 토큰       |\r\n| hasMoreTokens | boolean | 다음 토큰의 존재 유무 |\r\n\r\n`StringTokenizer tokenizer = new StringTokenizer(\"문자열\", \"구분자\");`와 같이 생성자의 인수에 구분자를 추가하여 원하는 구분자로 구분하게 할 수도 있다. 별도로 지정하지 않는다면 구분자는 `\\t\\n\\r\\t`로, 줄바꿈, 공백, 탭을 구분한다. 여기서 주의할 점이 하나 있는데, 기본 구분자 `\\t\\n\\r\\t`는 <span class=\"red-A400\">줄바꿈, 공백, 탭을 전부 포함</span>한다. 즉, `A B C D\\nA B C D`와 같이 공백과 줄바꿈이 혼용되어 있을 경우, 공백과 줄바꿈을 전부 구분하여 `[A, B, C, D, A, B, C, D]`와 같이 출력된다. 생성자에 구분자를 강제로 지정해줄 경우, 이를 막을 수 있다. 직접 지정할 경우 공백이나 줄바꿈이 아니더라도 여러 문자열을 사용할 수 있다.\r\n\r\n``` java\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\n/**\r\n * 메인 클래스\r\n *\r\n * @author RWB\r\n * @since 2021.06.13 Sun 23:48:14\r\n */\r\npublic class Test\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tString text = \"A B C D\";\r\n\t\t\r\n\t\tStringTokenizer tokenizer = new StringTokenizer(text);\r\n\t\t\r\n\t\tString[] splited = new String[tokenizer.countTokens()];\r\n\t\t\r\n\t\tfor (int i = 0; i < splited.length; i++)\r\n\t\t{\r\n\t\t\tsplited[i] = tokenizer.nextToken();\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(Arrays.toString(splited));\r\n\t}\r\n}\r\n```\r\n\r\n출력은 동일하다.\r\n\r\n``` tc\r\n[A, B, C, D]\r\n```\r\n\r\n# 속도 비교\r\n\r\n그렇다면 `split`과 `StringTokenizer`의 성능은 어떨까? 이를 비교하기 위해 간단한 테스트 프로그램을 만들었다.\r\n\r\n1. 반복횟수 `t`가 할당된다.\r\n2. 케이스마다 5 ~ 20자의 랜덤한 문자열을 생성한다. 각 문자 사이엔 공백이 포함된다.\r\n3. 공백을 구분자로 문자열을 구분한다\r\n   1. `split` 사용\r\n   2. `StringTokenizer` 사용\r\n4. 총 소요 시간 및 평균 소요 시간을 계산한다\r\n5. 결과를 표시한다\r\n\r\n소스는 아래와 같다.\r\n\r\n``` java\r\nimport java.text.DecimalFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Random;\r\nimport java.util.StringTokenizer;\r\n\r\n/**\r\n * 메인 클래스\r\n *\r\n * @author RWB\r\n * @since 2021.06.14 Mon 00:06:32\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tint t = 10000;\r\n\t\t\r\n\t\tlong[] timer = { 0, 0 };\r\n\t\t\r\n\t\tint[] sum = { 0, 0 };\r\n\t\t\r\n\t\tfor (int i = 0; i < t; i++)\r\n\t\t{\r\n\t\t\tint random = (int) ((Math.random() * (20 - 5)) + 5);\r\n\t\t\t\r\n\t\t\tString text = getTestString(random);\r\n\t\t\t\r\n\t\t\t// split 로직 ----------------------------------------\r\n\t\t\tlong timeStart = System.nanoTime();\r\n\t\t\t\r\n\t\t\tString[] a1 = useSplit(text);\r\n\t\t\t\r\n\t\t\tlong timeEnd = System.nanoTime() - timeStart;\r\n\t\t\t\r\n\t\t\tsum[0] += a1.length;\r\n\t\t\t\r\n\t\t\ttimer[0] += timeEnd;\r\n\t\t\t\r\n\t\t\tSystem.out.println(Arrays.toString(a1) + \": \" + addComma(timeEnd) + \"ns\");\r\n\t\t\t// split 로직 ----------------------------------------\r\n\t\t\t\r\n\t\t\t// StringTokenizer 로직 ----------------------------------------\r\n\t\t\ttimeStart = System.nanoTime();\r\n\t\t\t\r\n\t\t\tString[] a2 = useStringTokenizer(text);\r\n\t\t\t\r\n\t\t\ttimeEnd = System.nanoTime() - timeStart;\r\n\t\t\t\r\n\t\t\tsum[1] += a2.length;\r\n\t\t\t\r\n\t\t\ttimer[1] += timeEnd;\r\n\t\t\t\r\n\t\t\tSystem.out.println(Arrays.toString(a2) + \": \" + addComma(timeEnd) + \"ns\");\r\n\t\t\t// StringTokenizer 로직 ----------------------------------------\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(addComma(t) + \"개 데이터 그룹 수행\");\r\n\t\t\r\n\t\tSystem.out.println();\r\n\t\t\r\n\t\tSystem.out.println(\"split 결과\");\r\n\t\tSystem.out.println(\" * 총 소요: \" + addComma(timer[0]) + \"ns\");\r\n\t\tSystem.out.println(\" * 평균 소요: \" + addComma((timer[0] / t)) + \"ns\");\r\n\t\tSystem.out.println(\" * 분해한 요소: \" + addComma(sum[0]) + \"개\");\r\n\t\t\r\n\t\tSystem.out.println();\r\n\t\t\r\n\t\tSystem.out.println(\"StringTokenizer 결과\");\r\n\t\tSystem.out.println(\" * 총 소요: \" + addComma(timer[1]) + \"ns\");\r\n\t\tSystem.out.println(\" * 평균 소요: \" + addComma((timer[1] / t)) + \"ns\");\r\n\t\tSystem.out.println(\" * 분해한 요소: \" + addComma(sum[1]) + \"개\");\r\n\t\t\r\n\t\tSystem.out.println();\r\n\t\t\r\n\t\tSystem.out.println(\"split \" + (timer[0] == timer[1] ? \"==\" : (timer[0] > timer[1]) ? \"<\" : \">\") + \" StringTokenizer\");\r\n\t}\r\n\t\r\n\t/**\r\n\t * 구분된 문자열 반환 함수 (split)\r\n\t *\r\n\t * @param text: [String] 대상 문자열\r\n\t *\r\n\t * @return [String[]] 구분된 문자열\r\n\t */\r\n\tprivate static String[] useSplit(String text)\r\n\t{\r\n\t\treturn text.split(\" \");\r\n\t}\r\n\t\r\n\t/**\r\n\t * 구분된 문자열 반환 함수 (StringTokenizer)\r\n\t *\r\n\t * @param text: [String] 대상 문자열\r\n\t *\r\n\t * @return [String[]] 구분된 문자열\r\n\t */\r\n\tprivate static String[] useStringTokenizer(String text)\r\n\t{\r\n\t\tStringTokenizer tokenizer = new StringTokenizer(text, \" \");\r\n\t\t\r\n\t\tint count = tokenizer.countTokens();\r\n\t\t\r\n\t\tString[] result = new String[count];\r\n\t\t\r\n\t\tfor (int i = 0; i < count; i++)\r\n\t\t{\r\n\t\t\tresult[i] = tokenizer.nextToken();\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 무작위 문자열 반환 함수\r\n\t *\r\n\t * @param n: [int] 문자 갯수\r\n\t *\r\n\t * @return [String] 무작위 문자\r\n\t */\r\n\tprivate static String getTestString(int n)\r\n\t{\r\n\t\tRandom random = new Random();\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\r\n\t\tfor (int i = 0; i < n; i++)\r\n\t\t{\r\n\t\t\tbuilder.append((char) ((random.nextInt(26)) + 97)).append(\" \");\r\n\t\t}\r\n\t\t\r\n\t\treturn builder.toString().trim();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 1000 단위 구분 숫자 반환 함수\r\n\t *\r\n\t * @param num: [long] 대상 숫자\r\n\t *\r\n\t * @return [String] 1000 단위 구분 숫자\r\n\t */\r\n\tprivate static String addComma(long num)\r\n\t{\r\n\t\tDecimalFormat format = new DecimalFormat(\",###\");\r\n\t\t\r\n\t\treturn format.format(num);\r\n\t}\r\n}\r\n```\r\n\r\n횟수별로 10번씩 돌린 결과를 아래의 표로 정리했다.\r\n\r\n* $t = 1$\r\n\r\n| 테스트 횟수 | split 총 소요 | StringTokenizer 총 소요 |          속도           |\r\n| :---------: | :-----------: | :---------------------: | :---------------------: |\r\n|      1      |    80.3us     |         44.8us          | split < StringTokenizer |\r\n|      2      |    83.7us     |         46.2us          | split < StringTokenizer |\r\n|      3      |    136.6us    |         31.8us          | split < StringTokenizer |\r\n|      4      |    111.3us    |         40.4us          | split < StringTokenizer |\r\n|      5      |    93.4us     |         32.2us          | split < StringTokenizer |\r\n|      6      |    104.5us    |         28.7us          | split < StringTokenizer |\r\n|      7      |    40.1us     |         42.7us          | split > StringTokenizer |\r\n|      8      |    40.1us     |         42.7us          | split > StringTokenizer |\r\n|      9      |    104.7us    |         28.3us          | split < StringTokenizer |\r\n|     10      |    38.3us     |         29.2us          | split < StringTokenizer |\r\n\r\n한 번만 반복할 경우, 8:2로 `StringTokenizer`이 압승한다.\r\n\r\n* $t = 100$\r\n\r\n| 테스트 횟수 | split 총 소요 | StringTokenizer 총 소요 |          속도           |\r\n| :---------: | :-----------: | :---------------------: | :---------------------: |\r\n|      1      |    1.12ms     |         0.602ms         | split < StringTokenizer |\r\n|      2      |    1.11ms     |         0.612ms         | split < StringTokenizer |\r\n|      3      |    1.06ms     |         0.562ms         | split < StringTokenizer |\r\n|      4      |    1.02ms     |         0.595ms         | split < StringTokenizer |\r\n|      5      |     1.ms      |         0.550ms         | split < StringTokenizer |\r\n|      6      |    1.16ms     |         0.651ms         | split < StringTokenizer |\r\n|      7      |     98ms      |         0.558ms         | split < StringTokenizer |\r\n|      8      |    1.11ms     |         0.627ms         | split < StringTokenizer |\r\n|      9      |    0.981ms    |         0.555ms         | split < StringTokenizer |\r\n|     10      |    1.23ms     |         0.666ms         | split < StringTokenizer |\r\n\r\n100번을 반복할 때 역시 10:0으로 `StringTokenizer`이 압승한다.\r\n\r\n* $t = 1,000$\r\n\r\n| 테스트 횟수 | split 총 소요 | StringTokenizer 총 소요 |          속도           |\r\n| :---------: | :-----------: | :---------------------: | :---------------------: |\r\n|      1      |    3.00ms     |         3.17ms          | split > StringTokenizer |\r\n|      2      |    2.53ms     |         2.71ms          | split > StringTokenizer |\r\n|      3      |    2.79ms     |         2.84ms          | split > StringTokenizer |\r\n|      4      |    2.53ms     |         2.67ms          | split > StringTokenizer |\r\n|      5      |    2.67ms     |         2.97ms          | split > StringTokenizer |\r\n|      6      |    2.58ms     |         2.87ms          | split > StringTokenizer |\r\n|      7      |    2.48ms     |         2.65ms          | split > StringTokenizer |\r\n|      8      |    2.69ms     |         3.01ms          | split > StringTokenizer |\r\n|      9      |    2.50ms     |         2.90ms          | split > StringTokenizer |\r\n|     10      |    2.62ms     |         2.94ms          | split > StringTokenizer |\r\n\r\n$2^1$, $2^3$처럼 끊어가다가 뜬금없이 1000을 넣은 이유는, 이상하게 $t = 1,000$일 땐 `split`이 압승한다.\r\n\r\n* $t = 10,000$\r\n\r\n| 테스트 횟수 | split 총 소요 | StringTokenizer 총 소요 |          속도           |\r\n| :---------: | :-----------: | :---------------------: | :---------------------: |\r\n|      1      |    9.91ms     |         9.27ms          | split < StringTokenizer |\r\n|      2      |    9.49ms     |         9.19ms          | split < StringTokenizer |\r\n|      3      |    9.02ms     |         8.61ms          | split < StringTokenizer |\r\n|      4      |    9.95ms     |         9.25ms          | split < StringTokenizer |\r\n|      5      |    9.03ms     |         8.87ms          | split < StringTokenizer |\r\n|      6      |    8.83ms     |         9.08ms          | split > StringTokenizer |\r\n|      7      |    9.14ms     |         8.68ms          | split < StringTokenizer |\r\n|      8      |    9.28ms     |         9.07ms          | split < StringTokenizer |\r\n|      9      |    9.49ms     |         9.66ms          | split > StringTokenizer |\r\n|     10      |    11.79ms    |         11.20ms         | split < StringTokenizer |\r\n\r\n다시 8:2로 `StringTokenizer`이 압승한다.\r\n\r\n* $t = 1,000,000$\r\n\r\n| 테스트 횟수 | split 총 소요 | StringTokenizer 총 소요 |          속도           |\r\n| :---------: | :-----------: | :---------------------: | :---------------------: |\r\n|      1      |   306.86ms    |        373.06ms         | split > StringTokenizer |\r\n|      2      |   287.26ms    |        262.05ms         | split < StringTokenizer |\r\n|      3      |   289.92ms    |        255.51ms         | split < StringTokenizer |\r\n|      4      |   272.43ms    |        267.96ms         | split < StringTokenizer |\r\n|      5      |   278.35ms    |        322.28ms         | split > StringTokenizer |\r\n|      6      |   285.23ms    |        264.57ms         | split < StringTokenizer |\r\n|      7      |   273.37ms    |        268.18ms         | split < StringTokenizer |\r\n|      8      |   278.65ms    |        264.34ms         | split < StringTokenizer |\r\n|      9      |   278.56ms    |        266.62ms         | split < StringTokenizer |\r\n|     10      |   306.00ms    |        256.56ms         | split < StringTokenizer |\r\n\r\n8:2로 `StringTokenizer`이 압승한다.\r\n\r\n$t = 1,000$이라는 특수한 상황을 제외하고는 보편적으로 `StringTokenizer`가 성능이 더 우수하다. 저런 현상이 왜 발생하는지 이해는 잘 안 된다. 물론 통계라는게 숫자가 클 수록 의미가 커지므로 10번이라는 작은 횟수만으로 단정짓긴 어렵다.\r\n\r\n회사 컴퓨터(AMD Ryzen 2700X)에서는 모든 케이스에서 `StringTokenizer`의 속도가 빨랐다. CPU에 따라 연산 결과나 방식에 조금씩 차이가 있을 순 있겠다.\r\n\r\n[JAVA API](https://docs.oracle.com/javase/6/docs/api/java/util/StringTokenizer.html)에 의하면, `StringTokenizer`은 하위 호환성을 보장하기 위한 레거시 클래스라고 한다. JAVA API는 가급적 `StringTokenizer`보다 `split` 내지는 `regex` <span class=\"orange-400\">패키지</span>를 활용하도록 권고하고 있다.\r\n\r\n> **원문**  \r\n> `StringTokenizer` is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the `split` method of String or the `java.util.regex` package instead.\r\n\r\n# 결론\r\n\r\n표의 수치 상 `StringTokenizer`가 `split`에 비해 최대 약 20% 정도 더 빠르다. 하지만 JAVA API에서 가급적 다른 대체제를 사용하도록 권고하고 있고, 백만번의 연산에도 $ms$ 단위에서 움직인다. 상대적으론 차이가 있어도 객관적인 지표로 봤을땐 별다른 차이가 없는 셈. 문자열 분리하자고 새로운 <span class=\"orange-400\">class</span>를 다룰 바에 그냥 문자열 자체를 다루는 `split`을 사용하는 게 더 효율적이라 생각한다.","url":["2021-06-14-split-and-stringtokenizer","2021","06","14","split-and-stringtokenizer"]},{"header":{"title":"Unsupported major.minor version 에러 해결하기 (+Servlet 404 에러)","excerpt":"간혹 JAVA 프로그램을 실행하다보면 Unsupported major.minor version 52(숫자는 class 버전에 따라 다름) 오류가 출력되면서 정상적으로 동작하지 않는 오류가 발생한다. Unsupported major.minor version 오류는 직역하면 \"지원하지 않는 주/부 버전\"이다. JAVA 버전관련 오류라고 보면 된다.","coverImage":"https://user-images.githubusercontent.com/50317129/120079117-78b76880-c0ed-11eb-944d-c0d020228db3.png","date":"2021-05-30T02:16:35","type":"posts","category":"JAVA","tag":["JAVA","WAS","Tomcat(톰캣)","오류 해결책"],"comment":true,"publish":true},"name":"2021-05-30-unsupported-version-error.md","content":"\r\n# Unsupported major.minor version\r\n\r\n간혹 JAVA 프로그램을 실행하다보면 <span class=\"error\">Unsupported major.minor version 52</span>(숫자는 class 버전에 따라 다름) 오류가 출력되면서 정상적으로 동작하지 않는 오류가 발생한다.  \r\n<span class=\"error\">Unsupported major.minor version</span> 오류는 직역하면 \"지원하지 않는 주/부 버전\"이다. JAVA 버전관련 오류라고 보면 된다.\r\n\r\n# 원인\r\n\r\nJAVA는 컴파일 언어로, 개발자가 작성한 코드는 `.java` 파일이다. 이를 컴파일하면 JVM(Java Virtual Machine, 자바 가상머신)이 읽을 수 있는 `.class` 파일로 번역한다. 코딩은 사람이 이해할 수 있는 언어로 작성하고, 실제 동작은 컴파일을 통해 컴퓨터가 이해할 수 있는 언어를 사용하는 셈이다.  \r\nJAVA는 작성일 기준으로 16까지 릴리즈됐다. JAVA의 역사가 짧지 않고, 이 시간동안 크고작은 버전 업데이트가 지속적으로 이루어졌다.  \r\n문제는 이 과정에서 생긴 호환성 문제다. 1.5 버전으로 컴파일한 `.class` 파일을 1.8 버전의 환경에서 구동한다거나, 그 반대의 경우가 그 예시다. 다행스럽게도, JAVA는 하위 버전에 대한 호환성을 보장한다. 1.8 버전의 환경에서는 1.8 이하로 컴파일된 `.class` 파일의 실행을 보장한다. 하지만 반대로 상위 버전에 대한 호환성은 제공하지 않는다. 그도 그럴 것이, 호환성을 지키기 위해선, 각 버전 간의 구성을 알맞게 변환해야 하는데, 아직 개발되지 않은 미래 버전의 구성을 알 순 없는 노릇이니...\r\n\r\n| 프로그램 JAVA 버전 | PC JAVA 버전 | Unsupported 오류 발생여부 |              해결책              |\r\n| :----------------: | :----------: | :-----------------------: | :------------------------------: |\r\n|         14         |     1.8      |             O             | JAVA 14 버전 이상으로 업그레이드 |\r\n|        1.6         |     1.7      |             X             |              칼퇴근              |\r\n\r\n즉, <span class=\"green-A400\">Unsupported major.minor version 오류는 내가 실행하려는 JAVA 코드가 내 PC의 JAVA 환경보다 높은 버전에서 컴파일된 경우 발생</span>한다.\r\n\r\n# 해결\r\n\r\n결과적으로, JAVA 버전을 동등 혹은 그 이상의 상위버전으로 업그레이드하면 된다. 크게 두 가지 방법이 있다.\r\n\r\n## 프로그램 코드의 버전 다운그레이드\r\n\r\n만약 본인이 온전한 프로그램 코드를 갖고 있을 경우, 시도해볼 수 있는 방법이다.  \r\n<span class=\"green-A400\">JAVA 버전을 다운그레이드하고 컴파일을 진행</span>하면, 프로그램의 JAVA 버전이 낮아져 기존의 버전보다 훨씬 낮은 버전의 환경에서 구동이 가능하다.\r\n\r\n단, 조건이 있다. JAVA 버전이 업그레이드됨에 따라 여러 신규 패턴, 문법 등이 추가됐다. 만약 <span class=\"red-A400\">1.8 버전부터 새로 생긴 기능을 적극적으로 활용했다면, 1.7 이하의 버전에선 컴파일 오류가 발생</span>한다.  \r\n그도 그럴것이, 1.8 부터 생긴 기능은 1.7에서는 구현되지 않은 기능이기 때문.\r\n\r\n이 경우 프로그램의 코드를 좀더 범용적인 방식으로 리팩토링해야한다.\r\n\r\n## PC의 버전 업그레이드\r\n\r\n만약 본인이 `.class` 파일만 갖고있다거나, 상기한 문제로 다운그레이드가 어려울 경우 혹은 간단한 방법을 찾을 경우 시도해볼 수 있는 방법이다.\r\n<span class=\"green-A400\">PC의 JAVA 버전을 업그레이드하고 프로그램을 실행</span>하면 된다.\r\n\r\nJAVA는 하위 호환성을 지키기 때문에, 별다른 조건이 존재하지 않는다.\r\n\r\n# 아니 버전 맞췄다고 아ㅋㅋ\r\n\r\n톰캣을 사용하다보면, 이 오류가 뜨는 경우가 있다. 그런데 간혹 PC에 설치된 JAVA 버전에 맞게 컴파일을 해줬음에도 오류가 사라지지 않는 현상이 발생하기도 한다.  \r\n이 경우 동반되는 증상이, Servlet Context에 접근할 경우, 첫 접속시 500 에러(Unsupported major.minor version 오류로 인해 발생)가 발생하고, 이후부터는 404 에러만 발생한다. 이러한 현상을 겪어보지 않았거나, 경험이 적은 개발자가 이러한 문제에 부딪히면 십중팔구 고생한다. 원인인 Unsupported major.minor version 오류가 보이지 않아 Servlet 동작의 404 오류와 관련된 정보를 검색하거나 질문하기 때문. 당연히 이러한 사정을 모르는 다른 사람들은 404 오류에 관한 답변을 줄 수 밖에 없다. 이런 경우 정말 난감하기 그지없다. 절대 경험담이라서가 아니다.\r\n\r\n혹시 위 처럼 정상적인 Servlet(서블릿)임에도 불구하고 404 오류가 뜰 경우 아래의 환경변수에서 JRE_HOME이 설정돼있는지 확인해보자.  \r\n간혹 개발 프로그램 중 임의로 JRE_HOME을 설정해버리는 프로그램이 존재한다. 문제는 여기서 발생하는데, JAVA_HOME과 JRE_HOME 환경변수가 둘 다 설정되어있을 경우, <span class=\"red-A400\">톰캣은 JRE_HOME을 우선</span>한다. 즉 JRE의 버전이 적용된다.\r\n\r\n예를 들어, JAVA_HOME이 1.8 버전, JRE_HOME이 1.6 버전이라 가정하자. 컴파일은 반드시 JDK가 필요하므로 JAVA_HOME의 버전인 1.8로 컴파일이 수행된다. 그러나 톰캣 실행 시, JRE_HOME을 우선하는 특징으로 인해 1.6 버전으로 실행된다. 결과적으로 **1.8 버전으로 컴파일된 코드를 1.6으로 실행하는 셈**이니, 버전이 맞지 않아 오류가 발생한다.","url":["2021-05-30-unsupported-version-error","2021","05","30","unsupported-version-error"]}],"categories":{"WEB":{"count":3,"flag":true},"CS":{"count":10,"flag":true},"알고리즘":{"count":30,"flag":false},"React":{"count":1,"flag":false},"JAVA":{"count":3,"flag":false},"Jekyll":{"count":4,"flag":false},"WAS":{"count":2,"flag":false},"잡담":{"count":1,"flag":false}},"images":["celeb1.gif","celeb10.gif","celeb11.gif","celeb12.gif","celeb13.gif","celeb14.gif","celeb15.gif","celeb16.gif","celeb2.gif","celeb3.gif","celeb4.gif","celeb5.gif","celeb6.gif","celeb7.gif","celeb8.gif","celeb9.gif","city1.gif","city10.gif","city11.gif","city12.gif","city13.gif","city14.gif","city15.gif","city2.gif","city3.gif","city4.gif","city4.jpg","city5.gif","city6.gif","city7.gif","city8.gif","city9.gif","code1.gif","code2.gif","code3.gif","funk1.gif","funk2.gif","funk3.gif","funk4.gif","funk5.gif","funk6.gif","game1.gif","signal.gif"],"category":"JAVA","page":1},"__N_SSG":true}