{"pageProps":{"page":{"type":"posts","prev":{"title":"Tomcat(톰캣) 콘솔창 한글 인코딩 깨짐 현상 해결하기","excerpt":"톰캣을 구동하다보면 심심치않게 마주하는 오류(?)는 아니고 현상. Windows Console의 기본 인코딩과 Tomcat이 출력하는 인코딩이 서로 달라서 생긴다.","coverImage":"https://user-images.githubusercontent.com/50317129/119212068-1b218b80-baf1-11eb-9a42-85945bceb7d9.png","date":"2021-05-22T12:52:51","type":"posts","category":"WAS","tag":["WAS","Tomcat(톰캣)","Console(콘솔)"],"comment":true,"publish":true,"slug":"tomcat-encoding-euckr","content":"\r\n# 와장창!\r\n\r\n![Encoding Broken](https://user-images.githubusercontent.com/50317129/119212087-342a3c80-baf1-11eb-89bc-06829a5f7c16.png)\r\n\r\n톰캣을 구동하다보면 심심치않게 마주하는 오류(?)는 아니고 현상.  \r\nWindows Console의 기본 인코딩과 Tomcat이 출력하는 인코딩이 서로 달라서 생긴다.\r\n\r\n# 도대체 왜?\r\n\r\n실력 좋은 개발자가 아니더라도, 컴퓨터와 친분이 있다면 언어가 깨짐은 곧 인코딩의 불일치라는 걸 개괄적으로 이해하고 있다. 이러한 현상이 일어나는 이유는 아래와 같은데,\r\n\r\n* <span class=\"primary\">Windows Console</span>: Windows OS 설정 언어의 기본 인코딩 (한국어는 **EUC-KR**)\r\n* <span class=\"primary\">Tomcat Console</span>: 설정파일의 인코딩 (**기본 UTF-8**)\r\n\r\n이 처럼, 기본 인코딩이 서로 다르다.\r\n\r\n# 해결책\r\n\r\n이를 해결하는 방법은 크게 두 가지가 존재한다. 개인적으로 <span class=\"red-300\">두 번째 방법을 추천</span>한다.\r\n\r\n### Windows Console 인코딩 변경하기\r\n\r\n첫 번째로, Windows Console의 인코딩을 변경한다. Windows 10 기준으로 OS의 기본 콘솔은 <span class=\"green-500\">cmd</span>와 <span class=\"green-500\">PowerShell</span> 두 가지다. **사용할 콘솔의 기본 인코딩을 EUC-KR에서 UTF-8로 변경**해주면 된다.\r\n\r\n애석하게도, 두 콘솔 모두 인코딩을 변경하는 옵션을 제공하지 않는다. 그렇다고 방법이 없는 건 아니고, 레지스트리 수정을 통해 문제를 해결할 수 있다.\r\n\r\n<br />\r\n\r\n1. 작업표시줄에서 `regedit`을 입력하여 <span class=\"blue-500\">레지스트리 편집기</span>를 띄운다.\r\n2. `HKEY_CURRENT_USER\\Console` 경로에 접근한다. 사용자 계정에 설치된 콘솔들이 출력된다. (cmd, PowerShell, Git 등)\r\n\r\n![Registry](https://user-images.githubusercontent.com/50317129/119212160-83706d00-baf1-11eb-92c8-b41458950f20.png)\r\n\r\n3. 인코딩을 변경하려는 콘솔의 폴더를 클릭한다.\r\n   * **%SystemRoot%_system32_cmd.exe**: cmd\r\n   * **%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe**: 32비트 PowerShell\r\n   * **%SystemRoot%_SysWOW64_WindowsPowerShell_v1.0_powershell.exe**: 64비트 PowerShell\r\n4. `CodePage` 키를 더블클릭하여 편집을 수행한다.\r\n   `CodePage`가 없을 경우, 오른쪽 마우스 버튼을 클릭하여 새 DWORD(32비트) 키를 동일한 이름으로 생성한다.\r\n5. 값 데이터를 10진수 `65001`로 변경한다.\r\n\r\n![Registry](https://user-images.githubusercontent.com/50317129/119212198-ab5fd080-baf1-11eb-981b-82599148c8f8.png)\r\n\r\n6. 앞으로 실행되는 Windows Console은 해당 인코딩이 적용된다.\r\n\r\n이렇게 하면 Windows Console과 Tomcat의 기본 인코딩이 UTF-8로 서로 일치하므로, 한글이 정상적으로 출력된다.  \r\n하지만 이 방법은 Windows Console의 인코딩을 바꾸므로, 차후 해당 <span class=\"red-500\">콘솔을 통해 다른 작업이나 프로그램이 실행될 경우 엉뚱한 프로그램의 한글이 깨질 우려</span>가 있다.  \r\n(대부분은 OS 언어의 기본 인코딩을 따라가도록 설계함)\r\n\r\nWindows Console은 범용적으로 사용되는 프로그램이므로, 다른 작업에 영향을 줄 수 있다. 내가 이 방법을 굳이 추천하지 않는 이유이기도 하다.  \r\n\r\n### Tomcat Console 인코딩 변경하기\r\n\r\n두 번째로, Tomcat Console의 인코딩을 변경한다. 첫 번째 방법보다 이 방법이 나은 이유는, Tomcat이라는 제한적인 용도의 콘솔에만 영향을 미치기 때문. 어차피 Tomcat Console의 인코딩이 불일치해서 생기는 문제이므로, 이쪽을 바꾸는게 상식적으로도 맞다.\r\n\r\n대부분 마찬가지로 위 방법처럼 레지스트리를 수정하라고 안내할텐데, Tomcat은 굳이 그렇게 바꿔줄 필요 없다.\r\n\r\n1. `%TOMCAT_HOME%\\conf\\logging.properties`을 연다.\r\n2. **java.util.logging.ConsoleHandler.encoding**의 값을 **EUC-KR**로 변경한다.\r\n   별다른 설정이 없었다면, UTF-8이 기본으로 설정되어 있다.\r\n3. 앞으로 실행되는 Tomcat은 해당 인코딩이 적용된다.\r\n\r\nTomcat을 실행하면 한글이 정상적으로 출력된다."},"next":-1},"group":[],"post":{"title":"URI? URL? URN? 리소스 식별자 구분하기","excerpt":"우리가 인터넷 상에서 특정한 데이터에 접근할 때 URL이라는 것을 활용하여 접근한다. 원하는 자료의 URL을 얻으면, 브라우저 같은 HTTP 통신 프로그램에 해당 URL을 호출하여 응답을 얻는 것이다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028437-a63ddc80-c02f-11eb-9d41-7c50d7002a42.png","date":"2021-05-29T03:30:17","type":"posts","category":"WEB","tag":["WEB(웹)","URI","URL","URN"],"comment":true,"publish":true,"slug":"uri-url-urn","content":"<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" class=\"head-link\"><span>🔗</span></a>Table of Contents</h2>\n<ul>\n<li>\n<p><a href=\"#url-uri-urn\">URL! URI... URN??</a></p>\n</li>\n<li>\n<p><a href=\"#ur-%ED%86%B1%EC%95%84%EB%B3%B4%EA%B8%B0\">UR* 톱아보기</a></p>\n<ul>\n<li><a href=\"#uriuniform-resource-identifier-%ED%86%B5%ED%95%A9-%EC%9E%90%EC%9B%90-%EC%8B%9D%EB%B3%84%EC%9E%90\">URI(Uniform Resource Identifier, 통합 자원 식별자)</a></li>\n<li><a href=\"#urluniform-resource-locater-%ED%86%B5%ED%95%A9-%EC%9E%90%EC%9B%90-%EC%A7%80%EC%8B%9C%EC%9E%90\">URL(Uniform Resource Locater, 통합 자원 지시자)</a></li>\n<li><a href=\"#urnuniform-resource-name-%ED%86%B5%ED%95%A9-%EC%9E%90%EC%9B%90-%EC%9D%B4%EB%A6%84\">URN(Uniform Resource Name, 통합 자원 이름)</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B5%AC%EC%A1%B0\">구조</a></p>\n<ul>\n<li>\n<p><a href=\"#url-%EA%B5%AC%EC%A1%B0\">URL 구조</a></p>\n<ul>\n<li>\n<p><a href=\"#protocol%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\">Protocol(프로토콜)</a></p>\n</li>\n<li>\n<p><a href=\"#sldsecond-level-domain-%EC%84%9C%EB%B8%8C%EB%8F%84%EB%A9%94%EC%9D%B8-%ED%98%B8%EC%8A%A4%ED%8A%B8\">SLD(Second Level Domain, 서브도메인, 호스트)</a></p>\n</li>\n<li>\n<p><a href=\"#domain%EB%8F%84%EB%A9%94%EC%9D%B8\">Domain(도메인)</a></p>\n</li>\n<li>\n<p><a href=\"#tldtop-level-domain-%EC%B5%9C%EC%83%81%EC%9C%84-%EB%8F%84%EB%A9%94%EC%9D%B8\">TLD(Top Level Domain, 최상위 도메인)</a></p>\n<ul>\n<li><a href=\"#cctldcountry-code-tld-%EA%B5%AD%EA%B0%80-%EC%BD%94%EB%93%9C-%EC%B5%9C%EC%83%81%EC%9C%84-%EB%8F%84%EB%A9%94%EC%9D%B8\">ccTLD(country code TLD, 국가 코드 최상위 도메인)</a></li>\n<li><a href=\"#gtldgeneric-tld-%EC%9D%BC%EB%B0%98-%EC%B5%9C%EC%83%81%EC%9C%84-%EB%8F%84%EB%A9%94%EC%9D%B8\">gTLD(generic TLD, 일반 최상위 도메인)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#port%ED%8F%AC%ED%8A%B8\">Port(포트)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%9E%98-%EC%95%8C%EB%A0%A4%EC%A7%84-%ED%8F%AC%ED%8A%B8well-known-port\">잘 알려진 포트(well-known Port)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%93%B1%EB%A1%9D%EB%90%9C-%ED%8F%AC%ED%8A%B8registered-port\">등록된 포트(registered Port)</a></p>\n<ul>\n<li><a href=\"#%EC%99%9C-%ED%95%98%ED%95%84-%EA%B0%9C%EB%B0%9C-%EA%B4%80%EB%A0%A8-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EB%93%A4%EB%A7%8C\">왜? 하필 개발 관련 프로그램들만?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8F%99%EC%A0%81-%ED%8F%AC%ED%8A%B8dynamic-port\">동적 포트(dynamic Port)</a></p>\n</li>\n<li>\n<p><a href=\"#path%EA%B2%BD%EB%A1%9C\">Path(경로)</a></p>\n</li>\n<li>\n<p><a href=\"#query-string%EC%BF%BC%EB%A6%AC-%EB%AC%B8%EC%9E%90%EC%97%B4\">Query String(쿼리 문자열)</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#urn-%EA%B5%AC%EC%A1%B0\">URN 구조</a></p>\n<ul>\n<li><a href=\"#protocol%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-1\">Protocol(프로토콜)</a></li>\n<li><a href=\"#nidnamespace-identifier-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A7%80%EC%8B%9C%EC%9E%90\">NID(Namespace Identifier, 네임스페이스 지시자)</a></li>\n<li><a href=\"#nssnamespace-specific-string-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90\">NSS(Namespace Specific String, 네임스페이스 특정 문자)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"url-uri-urn\"><a href=\"#url-uri-urn\" class=\"head-link\"><span>🔗</span></a>URL! URI... URN??</h1>\n<p>우리가 인터넷 상에서 <strong>특정한 데이터</strong>에 접근할 때 <span class=\"primary\">URL</span>이라는 것을 활용하여 접근한다.<br>\n원하는 자료의 <span class=\"primary\">URL</span>을 얻으면, 브라우저 같은 HTTP 통신 프로그램에 해당 <span class=\"primary\">URL</span>을 호출하여 응답을 얻는 것이다.</p>\n<p>개발자나, 굳이 개발자가 아니더라도 관련 정보를 찾다보면 심심치않게 <span class=\"primary\">URI</span>라는 용어를 접하게 된다.<br>\nI와 L의 오묘한 유사성 때문에 아예 <span class=\"primary\">URI</span>를 <span class=\"primary\">URL</span>로 오독하는가 하면, 오타라고 생각하는 사람도 더러 있을 것이다.<br>\n하지만 <span class=\"primary\">URL</span>과 <span class=\"primary\">URI</span>는 그 의미가 비슷하면서도 살짝 다르다.</p>\n<p>누구나 알고있는 <span class=\"primary\">URL</span>과 아리까리한 <span class=\"primary\">URI</span>, 생소한 <span class=\"primary\">URN</span>. 이들에 대해 알아보자</p>\n<h1 id=\"ur-톱아보기\"><a href=\"#ur-%ED%86%B1%EC%95%84%EB%B3%B4%EA%B8%B0\" class=\"head-link\"><span>🔗</span></a>UR* 톱아보기</h1>\n<p><span class=\"primary\">URI</span>, <span class=\"primary\">URL</span>, <span class=\"primary\">URN</span>은 구조상 서로 연관이 있다.</p>\n<h2 id=\"uriuniform-resource-identifier-통합-자원-식별자\"><a href=\"#uriuniform-resource-identifier-%ED%86%B5%ED%95%A9-%EC%9E%90%EC%9B%90-%EC%8B%9D%EB%B3%84%EC%9E%90\" class=\"head-link\"><span>🔗</span></a>URI(Uniform Resource Identifier, 통합 자원 식별자)</h2>\n<p><span class=\"primary\">URI</span>는 우리말로 <strong>통합 자원 식별자</strong>라고 한다. <span class=\"primary\">URI</span>는 앞서 말한 <span class=\"primary\">URL</span>, <span class=\"primary\">URN</span>을 포함하는 상위 개념으로, <span class=\"orange-400\">인터넷 상에 존재하는 <strong>자원을 구분</strong>하는 식별자</span>라 할 수 있다. 웹 상에서 자원을 식별하는 모든 수단이 곧 <span class=\"primary\">URI</span>이라 할 수 있다.</p>\n<h2 id=\"urluniform-resource-locater-통합-자원-지시자\"><a href=\"#urluniform-resource-locater-%ED%86%B5%ED%95%A9-%EC%9E%90%EC%9B%90-%EC%A7%80%EC%8B%9C%EC%9E%90\" class=\"head-link\"><span>🔗</span></a>URL(Uniform Resource Locater, 통합 자원 지시자)</h2>\n<p><span class=\"primary\">URL</span>은 굳이 우리말로 하자면 <strong>통합 자원 지시자</strong>라고 할 수 있겠지만, 흔히 인터넷 상에서 <strong>주소</strong>라 함은 99% 이 <span class=\"primary\">URL</span>을 의미한다. 1994년 <strong>RFC-1738</strong>에 정의되어있다.<br>\n<span class=\"primary\">URL</span>은 <strong>Locater</strong>라는 키워드에 걸맞게 <span class=\"orange-400\">인터넷 상에 존재하는 자원의 <strong>위치</strong>를 나타내는 식별자</span>라 할 수 있다. 여기서 <strong>위치</strong>라는 키워드에 주목하자. <span class=\"primary\">URL</span>은 자원의 위치정보를 가지므로, 어떠한 이유로든 자원의 위치가 변경되면 <span class=\"primary\">URL</span>은 자원을 찾을 수 없으며, 변경된 위치를 추적할 수도 없다. 이 때 맞이하게 되는 HTTP 오류가 누구나 알고있는 404 Not Found다.<br>\n당장 내가 이 게시물의 이름을 한 글자만 변경해도, 지금까지의 <span class=\"primary\">URL</span>은 아무 쓸모가 없어지며, 사용자들 또한 해당 <span class=\"primary\">URL</span>로 이 게시물에 접근할 수 없다. 또한, 이 <span class=\"primary\">URL</span>을 통해 원래 있던 게시물의 <span class=\"primary\">URL</span>을 논리적으로 유추할 수도 없다.</p>\n<h2 id=\"urnuniform-resource-name-통합-자원-이름\"><a href=\"#urnuniform-resource-name-%ED%86%B5%ED%95%A9-%EC%9E%90%EC%9B%90-%EC%9D%B4%EB%A6%84\" class=\"head-link\"><span>🔗</span></a>URN(Uniform Resource Name, 통합 자원 이름)</h2>\n<p><span class=\"primary\">URN</span>은 <strong>통합 자원 이름</strong>이다. 눈치가 빠른 분들은 아시겠지만, <span class=\"primary\">URN</span>은 <span class=\"orange-400\">인터넷 상에 존재하는 자원의 <strong>이름</strong>을 나타내는 식별자</span>다. 자원의 이름은 고유한 값을 가지므로, 인터넷 상의 수 많은 자원들 중 특정 자원을 식별할 수 있는 것이다.<br>\n<span class=\"primary\">URN</span>은 대부분 위에 언급한 두 개념에 비해 생소할 것이다. 그도 그럴 것이, <span class=\"primary\">URN</span>은 위 두 개념보다 훨씬 뒤에 나온 개념이기 때문이다. 1997년 <strong>RFC-2141</strong>에 정의되어있다. <span class=\"primary\">URL</span>보다 3년 뒤에 출범하여 그 역사가 상대적으로 짧다.</p>\n<p><span class=\"primary\">URL</span>의 치명적인 단점은 <strong>위치</strong>정보 외에 다른 정보를 저장하지 않는다. 이 상황에서 해당 자원을 찾아야 한다면? 안타깝게도 <span class=\"primary\">URL</span>만으로는 찾아낼 수 없다. 구글링해서 운 좋게 찾아낸다면 모를까.<br>\n반면 <span class=\"primary\">URN</span>을 사용한다면 어떨까? 위치가 아무리 변경된다 하더라도, 자원의 고유한 이름을 통해 찾기 때문에 자원이 웹 상에서 완전히 삭제된 게 아니라면 손쉽게 찾아낼 수 있을 것이다.</p>\n<h2 id=\"정리\"><a href=\"#%EC%A0%95%EB%A6%AC\" class=\"head-link\"><span>🔗</span></a>정리</h2>\n<p>난 어려운 개념을 이해할 때 현실세계와 연관지어 이해하는 걸 좋아한다. 위 세 개념을 현실에서 특정 사람의 신원을 확인하는 과정과 접목해서 정리하면 아래와 같이 정리할 수 있을 것 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">현실</th>\n<th align=\"center\">값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">자원</td>\n<td align=\"center\">나 자신</td>\n<td align=\"center\">나</td>\n</tr>\n<tr>\n<td align=\"center\">URI</td>\n<td align=\"center\">나를 식별할 수 있는 모든 식별자</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">URL</td>\n<td align=\"center\">내가 사는 주소</td>\n<td align=\"center\">서울특별시 A구 가동</td>\n</tr>\n<tr>\n<td align=\"center\">URN</td>\n<td align=\"center\">내 주민등록번호</td>\n<td align=\"center\">000000-0000000</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"small red-A400\">※ URN은 모든 자원의 고유값이므로, 사람과 연관지었을 때, 중복 가능성이 있는 이름 보다는 고유값인 주민등록번호가 더 적합하다.</span></p>\n<p>예를 들어, 내 정보가 위와 같다고 가정해보자. 내가 사는 주소 및 내 주민등록번호 모두 내 신원을 확인할 수 있는 방식(<span class=\"primary\">URI</span>)이므로, 나를 찾기에 적합하다.<br>\n만약 내 주소(<span class=\"primary\">URL</span>)를 통해 확인할 경우, 내가 이사(자원의 이동)를 가게 되면 해당 주소엔 아무것도 없으며, 날 찾을 수도 없다(404 HTTP 에러). 또한, 내가 예전에 살던 주소만으로 내가 이사간 주소를 유추해낼 수도 없을 것이다.</p>\n<p>반면, 내 주민등록번호(<span class=\"primary\">URN</span>)을 통해 확인할 경우, 내 주민등록번호와 매칭되는 사람을 찾는 것으로 나를 식별할 수 있다. 이 과정에서 내가 어디에 있는지는 전혀 중요치 않은 것이다. 주민등록번호 자체가 말소(자원 삭제)되지 않는 한, 내가 어디에서 무엇을 하고있든 내 신원을 확인할 수 있다.</p>\n<h1 id=\"구조\"><a href=\"#%EA%B5%AC%EC%A1%B0\" class=\"head-link\"><span>🔗</span></a>구조</h1>\n<p>그렇다면 이들은 어떻게 생겼는지 알아보자. <span class=\"primary\">URI</span>는 자원의 식별자를 포괄하여 지칭하는 개념 그 자체이므로, 구조라고 할 건 없다. 하위 개념인 <span class=\"primary\">URL</span>, <span class=\"primary\">URN</span>에 대해 알아보자.</p>\n<h2 id=\"url-구조\"><a href=\"#url-%EA%B5%AC%EC%A1%B0\" class=\"head-link\"><span>🔗</span></a>URL 구조</h2>\n<p><span class=\"primary\">URL</span>은 아래와 같은 구조로 이루어진다. 매우 익숙할 것이다.</p>\n<p class=\"large\" align=\"center\"><span class=\"lightBlue-400\">https</span>://<span class=\"green-400\">rwb0104</span>.<span class=\"yellow-400\">github</span>.<span class=\"pink-400\">com</span>:<span class=\"amber-400\">443</span>/<span class=\"cyan-400\">posts</span><span class=\"teal-400\">?category=WEB&page=1</span></p>\n<p>구조별로 색상을 입혔으며, 순서대로 기술한다.</p>\n<h3 id=\"protocol프로토콜\"><a href=\"#protocol%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" class=\"head-link\"><span>🔗</span></a>Protocol(프로토콜)</h3>\n<p><span class=\"primary\">URL</span>상의 <span class=\"lightBlue-400\">https</span> 부분.</p>\n<p>통신규약을 의미한다. 작성일 기준으로, 이 규약엔 계층별로 많은 <span class=\"lightBlue-400\">프로토콜</span>이 존재하는데, 웹 통신을 수행할 땐 크게 두 가지로 나뉜다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">HTTP</td>\n<td align=\"center\">W3 상에서의 HTML 문서 통신규약</td>\n</tr>\n<tr>\n<td align=\"center\">HTTPS</td>\n<td align=\"center\">암호화된 HTTP 통신 규약</td>\n</tr>\n</tbody>\n</table>\n<p>현재는 포털, 쇼핑몰같은 대형 비즈니스 사이트나 블로그, 카페 등 중소규모의 개인 사이트까지 <span class=\"red-A400\">HTTPS의 사용이 반 강제적으로 권장</span>되어 있다. 특히 전자상거래가 접목된 비즈니스 사이트의 경우 필수로 적용해야 한다. 더군다나 <span class=\"red-A400\">HTTPS가 적용되지 않는 사이트(localhost 제외)에 접근할 경우 브라우저 측에서 보안 관련 경고 메시지</span>를 띄우니, 규모에 관계없이 웹 사이트를 운영할 경우 HTTPS는 필수로 적용하는 편이다.</p>\n<h3 id=\"sldsecond-level-domain-서브도메인-호스트\"><a href=\"#sldsecond-level-domain-%EC%84%9C%EB%B8%8C%EB%8F%84%EB%A9%94%EC%9D%B8-%ED%98%B8%EC%8A%A4%ED%8A%B8\" class=\"head-link\"><span>🔗</span></a>SLD(Second Level Domain, 서브도메인, 호스트)</h3>\n<p><span class=\"primary\">URL</span>상의 <span class=\"green-400\">rwb0104</span> 부분.</p>\n<p>도메인 앞에 붙으며, <span class=\"green-400\">서브도메인</span>을 통해 하나의 <span class=\"yellow-400\">도메인</span>으로 다중 서비스를 제공할 수 있다. 하나의 <span class=\"yellow-400\">도메인</span>에 여러 <span class=\"green-400\">서브도메인</span>을 생성할 수 있으며, 우리가 흔히 아는 <code>www</code> 외에도 <code>dev</code>, <code>admin</code>, <code>m</code> 용도에 따라 다양한 문자열을 지정할 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">URL</th>\n<th align=\"center\">내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><a href=\"https://naver.com\">naver.com</a></td>\n<td align=\"center\">기본 네이버 홈페이지. 각 플랫폼(데스크탑, 모바일 등)에 가장 적합한 사이트로 리다이렉트</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://www.naver.com\">www.naver.com</a></td>\n<td align=\"center\">데스크탑용 네이버 홈페이지</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://m.naver.com\">m.naver.com</a></td>\n<td align=\"center\">모바일용 네이버 홈페이지</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://map.naver.com\">map.naver.com</a></td>\n<td align=\"center\">네이버 지도</td>\n</tr>\n</tbody>\n</table>\n<p>위는 네이버 서비스의 <span class=\"green-400\">서브도메인</span>으로, <code>naver.com</code> <span class=\"yellow-400\">도메인</span>을 중심으로 각기 다른 서비스를 제공하는 것을 확인할 수 있다.</p>\n<h3 id=\"domain도메인\"><a href=\"#domain%EB%8F%84%EB%A9%94%EC%9D%B8\" class=\"head-link\"><span>🔗</span></a>Domain(도메인)</h3>\n<p><span class=\"primary\">URL</span>상의 <span class=\"yellow-400\">github</span> 부분.</p>\n<p>URL의 중심이 되는 부분으로, 제공하는 웹 서비스의 아이덴티티 역할을 겸한다. 때문에 <span class=\"yellow-400\">도메인</span>에는 대부분 해당 웹 서비스의 이름이 들어간다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">서비스</th>\n<th align=\"center\">URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">네이버</td>\n<td align=\"center\"><a href=\"https://naver.com\">naver.com</a></td>\n</tr>\n<tr>\n<td align=\"center\">다음</td>\n<td align=\"center\"><a href=\"https://www.daum.com\">www.daum.com</a></td>\n</tr>\n<tr>\n<td align=\"center\">GitHub</td>\n<td align=\"center\"><a href=\"https://github.com\">github.com</a></td>\n</tr>\n<tr>\n<td align=\"center\">Instagram</td>\n<td align=\"center\"><a href=\"https://instagram.com\">instagram.com</a></td>\n</tr>\n</tbody>\n</table>\n<p>대부분의 서비스가 <span class=\"yellow-400\">도메인</span>으로 서비스의 이름을 사용하고 있다.</p>\n<h3 id=\"tldtop-level-domain-최상위-도메인\"><a href=\"#tldtop-level-domain-%EC%B5%9C%EC%83%81%EC%9C%84-%EB%8F%84%EB%A9%94%EC%9D%B8\" class=\"head-link\"><span>🔗</span></a>TLD(Top Level Domain, 최상위 도메인)</h3>\n<p><span class=\"primary\">URL</span>상의 <span class=\"pink-400\">com</span> 부분.</p>\n<p><span class=\"pink-400\">최상위 도메인</span>이란, 앞서 언급한 <span class=\"green-400\">서브도메인</span>, <span class=\"yellow-400\">도메인</span>을 관리하는 업체 혹은 기관이라고 볼 수 있다.<br>\n앞서 언급한 개념의 경우, 중복되지 않는 선에서 사용자가 임의로 지정할 수 있다. 하지만 <span class=\"pink-400\">최상위 도메인</span>의 경우 현재 운영 중인 업체나 기관 중 하나를 <strong>선택</strong>해서 등록해야 한다. <span class=\"pink-400\">최상위 도메인</span>을 선택할 경우, 당신의 도메인은 해당 <span class=\"pink-400\">최상위 도메인</span>을 운영하는 곳에서 관리하게 된다.</p>\n<p><span class=\"pink-400\">최상위 도메인</span>은 운영 주체에 따라 두 가지로 나뉜다.</p>\n<h4 id=\"cctldcountry-code-tld-국가-코드-최상위-도메인\"><a href=\"#cctldcountry-code-tld-%EA%B5%AD%EA%B0%80-%EC%BD%94%EB%93%9C-%EC%B5%9C%EC%83%81%EC%9C%84-%EB%8F%84%EB%A9%94%EC%9D%B8\" class=\"head-link\"><span>🔗</span></a>ccTLD(country code TLD, 국가 코드 최상위 도메인)</h4>\n<p>국가를 나타내는 <span class=\"pink-400\">최상위 도메인</span>이다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">ccTLD</th>\n<th align=\"center\">내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">.kr</td>\n<td align=\"center\">한국(KISA)</td>\n</tr>\n<tr>\n<td align=\"center\">.us</td>\n<td align=\"center\">미국(LLC)</td>\n</tr>\n<tr>\n<td align=\"center\">.jp</td>\n<td align=\"center\">일본</td>\n</tr>\n<tr>\n<td align=\"center\">.io</td>\n<td align=\"center\">영국령 인도양</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"pink-400\">ccTLD</span>는 위 표와 같이 국가 코드 형태이며, 각 국가기관이 직접 관리한다. 즉, <code>.kr</code>을 가진 모든 도메인은 <strong>한국의 KISA(한국 인터넷 진흥원)에서 관리</strong>한다.</p>\n<h4 id=\"gtldgeneric-tld-일반-최상위-도메인\"><a href=\"#gtldgeneric-tld-%EC%9D%BC%EB%B0%98-%EC%B5%9C%EC%83%81%EC%9C%84-%EB%8F%84%EB%A9%94%EC%9D%B8\" class=\"head-link\"><span>🔗</span></a>gTLD(generic TLD, 일반 최상위 도메인)</h4>\n<p>사이트 혹은 사이트를 소유한 조직, 기관의 특성에 따라 사용하는 <span class=\"pink-400\">최상위 도메인</span>이다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">gTLD</th>\n<th align=\"center\">내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">.com</td>\n<td align=\"center\">영리 단체 및 기관</td>\n</tr>\n<tr>\n<td align=\"center\">.net</td>\n<td align=\"center\">네트워크 관리기관</td>\n</tr>\n<tr>\n<td align=\"center\">.org</td>\n<td align=\"center\">비영리 기관</td>\n</tr>\n<tr>\n<td align=\"center\">.gov</td>\n<td align=\"center\">정부 기관</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"pink-400\">gTLD</span>는 위 표와 같이 다양한 종류가 있으며, 그 중 몇몇은 자주 접했을 것이다. 정부기관이 왜 여기있나 생각할 수도 있는데, <span class=\"pink-400\">ccTLD</span>는 <strong>국가 코드</strong>만 해당된다. 국가 예하의 정부기관, 군사조직 등은 구분 상 <span class=\"pink-400\">gTLD</span>로 분류된다.<br>\n마찬가지로, 각 <span class=\"pink-400\">최상위 도메인</span>은 <strong>해당 <span class=\"pink-400\">최상위 도메인</span>을 소유한 기관 혹은 기업에서 관리</strong>한다.</p>\n<blockquote>\n<p>현재 운영 중인 <span class=\"pink-400\">최상위 도메인</span>은 <a href=\"https://www.iana.org/domains/root/db\">IANA</a>에서 확인할 수 있다.</p>\n</blockquote>\n<p>여담으로, <span class=\"pink-400\">최상위 도메인</span>에 중복된 <span class=\"yellow-400\">도메인</span>을 등록할 수 없다. 예를 들어, 내가 <code>aaa.com</code> URL을 등록한다고 가정해보자.<br>\n우선 제일 먼저 <code>.com</code>을 관리하는 업체에 <code>aaa</code>라는 <span class=\"yellow-400\">도메인</span>을 등록해야 한다. 하지만, 이미 누군가가 <code>aaa.com</code>을 등록했다면 해당 소유주가 <span class=\"yellow-400\">도메인</span>의 소유권을 포기하기 전까진 <code>aaa.com</code> <span class=\"yellow-400\">도메인</span>을 소유할 수 없다.<br>\n물론 <code>.com</code>이 아닌 <code>.kr</code>이나 <code>.net</code>에는 등록할 수 있다. 하지만 <code>socket.io</code> 처럼 <span class=\"yellow-400\">도메인</span>과 <span class=\"pink-400\">최상위 도메인</span>까지 의미론적으로 구성했다면, 이러한 상황이 달갑지 않을 것이다. 때문에 일전에 이슈됐던 <span class=\"primary\">덮죽 상표권 선점</span>과 비슷한 일이 일어나기도 한다.</p>\n<h2 id=\"port포트\"><a href=\"#port%ED%8F%AC%ED%8A%B8\" class=\"head-link\"><span>🔗</span></a>Port(포트)</h2>\n<p><span class=\"primary\">URL</span>상의 <span class=\"amber-400\">443</span> 부분. 앞에 반드시 <code>:</code>이 붙는다.</p>\n<p>인터넷에 연결된 모든 디바이스는 사용하는 네트워크의 IP를 할당받는다. 할당받은 IP 내에서 해당 디바이스가 수행 중인 모든 프로세스의 통신이 이루어진다. <span class=\"amber-400\">포트</span>는 프로세스의 데이터가 IO되는 통로다. 작업 시, 각 프로세스 별로 고유한 <span class=\"amber-400\">포트</span>를 할당받으며, 하나의 <span class=\"amber-400\">포트</span>는 반드시 하나의 프로세스와 1:1 매칭된다. 반면, 하나의 프로세스는 여러 <span class=\"amber-400\">포트</span>를 할당받을 수 있다.<br>\n<strong>특정 프로세스와 통신하기 위해선 반드시 해당 프로세스가 할당받은 <span class=\"amber-400\">포트</span>에 데이터를 전송</strong>해야 한다. 때문에 <span class=\"amber-400\">포트</span> 통신은 어떤 <span class=\"amber-400\">포트</span>가 보내는지는 크게 중요하지 않으며, 어떤 <span class=\"amber-400\">포트</span>로 보내는지가 중요하다.</p>\n<p>웹 통신에서의 기본<span class=\"amber-400\">포트</span>는 아래와 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">포트</th>\n<th align=\"center\">내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">80</td>\n<td align=\"center\">HTTP 기본 포트</td>\n</tr>\n<tr>\n<td align=\"center\">443</td>\n<td align=\"center\">HTTPS 기본 포트</td>\n</tr>\n</tbody>\n</table>\n<p>아마 이러한 숫자를 처음 볼 수도 있는데, 대부분의 웹 사이트 <span class=\"primary\">URL</span>에는 <span class=\"amber-400\">포트</span>를 확인할 수 없다. 사이트가 <strong>각 프로토콜의 기본 <span class=\"amber-400\">포트</span>로 서비스될 경우, <span class=\"primary\">URL</span>에서 <span class=\"amber-400\">포트</span>를 생략</strong>할 수 있다. 즉, <code>https://naver.com</code>의 <span class=\"amber-400\">포트</span>번호는 <code>443</code>이지만, <code>443</code>은 HTTPS의 기본 <span class=\"amber-400\">포트</span>이므로 생략된다. 만약, <code>443</code>이 아닌 <code>8080</code>, <code>9200</code>과 같은 <strong>임의의 <span class=\"amber-400\">포트</span>로 서비스를 제공할 경우, <span class=\"amber-400\">포트</span>를 반드시 명시해야하므로 생략이 불가능</strong>하다. 이 경우 <span class=\"primary\">URL</span>은 <code>https://naver.com:8080</code>이 될 것이다.<br>\n위와 같은 이유로, 대부분의 웹 사이트는 서비스하는 프로토콜에 맞는 기본 <span class=\"amber-400\">포트</span>를 사용한다.</p>\n<p><span class=\"amber-400\">포트</span>는 <strong>0 ~ 65535</strong>의 범위를 가지며, 크게 세 가지로 구분할 수 있다.</p>\n<h3 id=\"잘-알려진-포트well-known-port\"><a href=\"#%EC%9E%98-%EC%95%8C%EB%A0%A4%EC%A7%84-%ED%8F%AC%ED%8A%B8well-known-port\" class=\"head-link\"><span>🔗</span></a>잘 알려진 포트(well-known Port)</h3>\n<p><strong>0 ~ 1023</strong>의 범위에 해당하는 <span class=\"amber-400\">포트</span>. 이 <span class=\"amber-400\">포트</span>들은 컴퓨터에서 기본적으로 사용되는 주요 프로세스에 기본적으로 할당되는 포트로, ICANN(Internet Corporation for Assigned Names and Numbers, 국제 인터넷주소 관리기구)에 의해 통제된다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">포트</th>\n<th align=\"center\">기능</th>\n<th align=\"center\">용도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">20, 21</td>\n<td align=\"center\">FTP</td>\n<td align=\"center\">파일 송수신</td>\n</tr>\n<tr>\n<td align=\"center\">22</td>\n<td align=\"center\">SFTP</td>\n<td align=\"center\">파일 암호화 송수신</td>\n</tr>\n<tr>\n<td align=\"center\">23</td>\n<td align=\"center\">Telnet</td>\n<td align=\"center\">터미널 통신</td>\n</tr>\n<tr>\n<td align=\"center\">25</td>\n<td align=\"center\">SMTP</td>\n<td align=\"center\">메일 전송</td>\n</tr>\n<tr>\n<td align=\"center\">53</td>\n<td align=\"center\">DNS</td>\n<td align=\"center\">DNS 통신</td>\n</tr>\n<tr>\n<td align=\"center\">67</td>\n<td align=\"center\">DHCP</td>\n<td align=\"center\">DHCP 통신</td>\n</tr>\n<tr>\n<td align=\"center\">80</td>\n<td align=\"center\">HTTP</td>\n<td align=\"center\">HTML 통신</td>\n</tr>\n<tr>\n<td align=\"center\">443</td>\n<td align=\"center\">HTTPS</td>\n<td align=\"center\">HTML 암호화 통신</td>\n</tr>\n</tbody>\n</table>\n<p>어디까지나 초기에 지정되는 <span class=\"amber-400\">포트</span>이므로, 추후 <strong>사용자의 의도에 따라 비어있는 다른 포트로 변경</strong>할 수도 있다. 즉, 초기값일뿐, 강제는 아니다.</p>\n<h3 id=\"등록된-포트registered-port\"><a href=\"#%EB%93%B1%EB%A1%9D%EB%90%9C-%ED%8F%AC%ED%8A%B8registered-port\" class=\"head-link\"><span>🔗</span></a>등록된 포트(registered Port)</h3>\n<p><strong>1024 ~ 49151</strong>의 범위에 해당하는 <span class=\"amber-400\">포트</span>. 이 <span class=\"amber-400\">포트</span>들은 컴퓨터의 기본 프로세스는 아니지만, 주요 프로그램들이 기본으로 사용하고자 ICANN에 등록한 <span class=\"amber-400\">포트</span>다. <span class=\"amber-400\">잘 알려진 포트</span>와 마찬가지로 프로그램의 설정을 통해 <strong>사용자의 의도에 따라 비어있는 다른 포트로 변경</strong>할 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">포트</th>\n<th align=\"center\">기능</th>\n<th align=\"center\">용도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1433</td>\n<td align=\"center\">MSSQL</td>\n<td align=\"center\">MSSQL DB 통신</td>\n</tr>\n<tr>\n<td align=\"center\">3306</td>\n<td align=\"center\">MySQL</td>\n<td align=\"center\">MySQL DB 통신</td>\n</tr>\n<tr>\n<td align=\"center\">3389</td>\n<td align=\"center\">RDP</td>\n<td align=\"center\">원격 데스크톱 접근 (Windows)</td>\n</tr>\n<tr>\n<td align=\"center\">5432</td>\n<td align=\"center\">PostgreSQL</td>\n<td align=\"center\">PostgreSQL DB 통신</td>\n</tr>\n<tr>\n<td align=\"center\">8080</td>\n<td align=\"center\">HTTP 통신(Tomcat 등)</td>\n<td align=\"center\">HTTP 통신 (80포트 대용)</td>\n</tr>\n<tr>\n<td align=\"center\">27017</td>\n<td align=\"center\">MongoDB</td>\n<td align=\"center\">MongoDB 통신</td>\n</tr>\n</tbody>\n</table>\n<p>주로 <span class=\"primary\">DB</span>같은 개발 관련 프로그램들이 많이 등록돼있다.</p>\n<h4 id=\"왜-하필-개발-관련-프로그램들만\"><a href=\"#%EC%99%9C-%ED%95%98%ED%95%84-%EA%B0%9C%EB%B0%9C-%EA%B4%80%EB%A0%A8-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EB%93%A4%EB%A7%8C\" class=\"head-link\"><span>🔗</span></a>왜? 하필 개발 관련 프로그램들만?</h4>\n<p>개발 관련 프로그램들은 그 특성 상 통신의 방식이 <strong>항상 일정</strong>해야 한다. 만약 DB의 <span class=\"amber-400\">포트</span>가 기동할 때마다 수시로 변경된다면 어떨까? 이유를 막론하고 DB가 재기동될 경우, 개발자는 DB가 사용 중인 임의의 <span class=\"amber-400\">포트</span>를 추적하여 프로그램의 DB 통신 코드를 변경해야하는 매우 불합리한 상황이 발생하게 된다.</p>\n<p>이에 비해 게임이나 IDE 같은 일반적인 프로그램들은 굳이 통신의 방식이 일정할 필요는 없다. 어찌됐든 <strong>서버에 정보를 요청하는 순간, 서버는 자연스레 내 통신 정보를 알게되기 때문</strong>이다. 서버는 요청했던 경로로 다시 데이터를 반환해주면 된다. 어떤 <span class=\"amber-400\">포트</span>가 보내는지는 별로 중요하지 않는 이유가 여기에 있다.</p>\n<h3 id=\"동적-포트dynamic-port\"><a href=\"#%EB%8F%99%EC%A0%81-%ED%8F%AC%ED%8A%B8dynamic-port\" class=\"head-link\"><span>🔗</span></a>동적 포트(dynamic Port)</h3>\n<p><strong>49152 ~ 65535</strong>의 범위에 해당하는 <span class=\"amber-400\">포트</span>. 대다수의 프로그램들은 <span class=\"amber-400\">포트</span> 기본값이 지정되지 않는 경우가 대부분이다. 이러한 프로그램들은 <span class=\"amber-400\">동적 포트</span> 중 사용 가능한 임의의 빈 <span class=\"amber-400\">포트</span>를 자동으로 점유한다. 때문에 ICANN이 관리하지도 않으며, 특정 프로그램이 고유한 <span class=\"amber-400\">포트</span>로 등록되어있지도 않다. 자유석을 생각하면 편하다.</p>\n<h3 id=\"path경로\"><a href=\"#path%EA%B2%BD%EB%A1%9C\" class=\"head-link\"><span>🔗</span></a>Path(경로)</h3>\n<p><span class=\"primary\">URL</span>상의 <span class=\"cyan-400\">posts</span> 부분. 웹 사이트의 하위 경로를 의미한다. <span class=\"cyan-400\">경로</span>는 <code>/</code>로 구분하며, 경로 입력을 통해 서버 내의 원하는 자원에 접근할 수 있다.</p>\n<ul>\n<li><a href=\"https://rwb0104.github.io\">https://rwb0104.github.io</a>\n<ul>\n<li>posts\n<ul>\n<li>index.html</li>\n<li>A1000\n<ul>\n<li>index.html</li>\n</ul>\n</li>\n<li>A1001\n<ul>\n<li>index.html</li>\n</ul>\n</li>\n<li>uri-url-urn\n<ul>\n<li>index.html</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>project\n<ul>\n<li>index.html</li>\n</ul>\n</li>\n<li>index.html</li>\n</ul>\n</li>\n</ul>\n<p>위 트리는 이 블로그의 단편적인 디렉토리 예시다. 이 중 해당 게시물에 접근하려면 <span class=\"cyan-400\">경로</span>는 <code>/posts/uri-url-urn/index.html</code>와 같이 구성할 수 있다. <span class=\"primary\">index.html은 생략이 가능</span>하므로 <code>/posts/uri-url-urn</code>로 접근해도 무방하다.</p>\n<blockquote>\n<p><strong>아시나요?</strong><br>\n<strong>index.html</strong> 경로의 기본 HTML을 의미함. 더이상의 하위 경로를 표시하지 않을 경우, 해당 경로의 index.html를 응답한다.</p>\n</blockquote>\n<p><span class=\"cyan-400\">경로</span>는 서버의 구조에 따라 결정되므로, 사이트마다 천차만별이다.</p>\n<h3 id=\"query-string쿼리-문자열\"><a href=\"#query-string%EC%BF%BC%EB%A6%AC-%EB%AC%B8%EC%9E%90%EC%97%B4\" class=\"head-link\"><span>🔗</span></a>Query String(쿼리 문자열)</h3>\n<p><span class=\"primary\">URL</span>상의 <span class=\"teal-400\">?category=WEB&#x26;page=1</span> 부분. 해당 <span class=\"cyan-400\">경로</span>에 임의의 데이터를 같이 전송할 때 사용한다.<br>\n<span class=\"primary\">key=value</span> 형태로 이루어지며, 각 <code>key</code>는 <span class=\"purple-400\">Parameter(파라미터)</span>라 칭한다. 첫 <span class=\"purple-400\">파라미터</span>는 <code>?</code>로 시작하며, 이후 각 <span class=\"purple-400\">파라미터</span>들은 <code>&#x26;</code>으로 구분된다. 즉 <code>?key1=value1&#x26;key2=value2&#x26;key3=value3</code>과 같은 양식으로 전개된다.</p>\n<p>임의의 키워드를 전달하여 페이지의 동작을 제어할 수 있다. <span class=\"primary\">URL</span> 중 <strong>사용자의 니즈가 가장 활발하게 반영</strong>되는 부분. <span class=\"teal-400\">쿼리 문자열</span>은 각각의 <code>key</code>에 대한 역할을 정의해야 하므로, 개발자가 각 <span class=\"purple-400\">파라미터</span>의 <code>key</code>가 동작하는 로직을 작성했을 때 그 의미가 있다.</p>\n<h2 id=\"urn-구조\"><a href=\"#urn-%EA%B5%AC%EC%A1%B0\" class=\"head-link\"><span>🔗</span></a>URN 구조</h2>\n<p>지금까지 <span class=\"primary\">URL</span>에 대해선 상당히 장황하게 설명했지만, <span class=\"primary\">URN</span>의 경우 <span class=\"primary\">URL</span>보다 역사가 짧다. 또한 <span class=\"primary\">URN</span>이 상당수 활성화된 후 생긴 탓에, 현재까지도 비주류를 면치 못 해 구현된 예시도 그리 많지 않은게 현실이다.<br>\n<span class=\"primary\">URL</span>이 위치만 바뀌어도 찾을 수 없다는 단점은, 오히려 제공중인 데이터를 은닉하는 측면 등 상황에 따라 오히려 이득이기도 하다. 즉, <span class=\"primary\">URL</span>의 단점이 사용에 있어서 크리티컬하지 않는다는 것이다. 이는 곳 <span class=\"primary\">URN</span>의 장점이 현재 구축된 <span class=\"primary\">URL</span>체계를 갈아 엎을 정도로 매력적이지 않다는 주장이 된다.</p>\n<p><span class=\"primary\">URN</span>은 아래와 같은 구조로 이루어진다. 각 요소는 <code>:</code>으로 구분한다.</p>\n<p class=\"large\" align=\"center\"><span class=\"lightBlue-400\">urn</span>:<span class=\"green-400\">isbn</span>:<span class=\"yellow-400\">1234567890</span></p>\n<h3 id=\"protocol프로토콜-1\"><a href=\"#protocol%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-1\" class=\"head-link\"><span>🔗</span></a>Protocol(프로토콜)</h3>\n<p><span class=\"primary\">URN</span>상의 <span class=\"lightBlue-400\">urn</span> 부분. <code>urn</code>으로 시작하면 <span class=\"primary\">URN</span>체계로 보면 된다.</p>\n<h3 id=\"nidnamespace-identifier-네임스페이스-지시자\"><a href=\"#nidnamespace-identifier-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A7%80%EC%8B%9C%EC%9E%90\" class=\"head-link\"><span>🔗</span></a>NID(Namespace Identifier, 네임스페이스 지시자)</h3>\n<p><span class=\"primary\">URN</span>상의 <span class=\"green-400\">isbn</span> 부분. <strong>자원이 저장된 저장소</strong>를 표시한다.<br>\n<code>isbn</code>은 서지정보유통지원시스템으로 도서 일련번호에 대한 정보를 저장하는 저장소이다. 즉, <code>isbn</code>을 <span class=\"green-400\">NID</span>로 지정하면 도서 관련 자원을 식별할 수 있다.</p>\n<h3 id=\"nssnamespace-specific-string-네임스페이스-특정-문자\"><a href=\"#nssnamespace-specific-string-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%ED%8A%B9%EC%A0%95-%EB%AC%B8%EC%9E%90\" class=\"head-link\"><span>🔗</span></a>NSS(Namespace Specific String, 네임스페이스 특정 문자)</h3>\n<p><span class=\"primary\">URN</span>상의 <span class=\"yellow-400\">1234567890</span> 부분. <strong>자원을 식별할 수 있는 고유값</strong>이다.<br>\n<span class=\"green-400\">NID</span>가 <code>isbn</code>으로 지정되어 있으므로, ISBN의 일련번호가 1234567890인 도서를 식별하는 <span class=\"primary\">URN</span>이라 볼 수 있다.</p>\n"}},"__N_SSG":true}