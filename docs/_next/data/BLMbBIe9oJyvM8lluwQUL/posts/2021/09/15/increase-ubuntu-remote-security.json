{"pageProps":{"page":{"type":"posts","prev":{"header":{"title":"[라즈베리파이 4] MariaDB 구축하기","excerpt":"드디어 라즈베리파이 개발환경 구축의 마지막 장이다. DBMS는 다양한 데이터를 저장하는 저장소인 DB(Database)를 관리하는 시스템이다. 필요한 데이터를 DB에 저장하고, 이를 적재적소에 꺼내어 데이터를 다룰 수 있도록 해준다. 웹 서버와 DBMS를 연동하면 사용자의 계정 정보, 설정 등을 저장하고 활용할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/131238727-666f2aaa-d759-4f62-af73-3856086da73d.png","date":"2021-09-14T02:04:02","type":"posts","category":"RaspberryPi","tag":["라즈베리파이","Ubuntu","MariaDB","RDBMS"],"group":"라즈베리파이","comment":true,"publish":true},"name":"2021-09-14-ubuntu-in-mariadb.md","content":"\r\n# 개요\r\n\r\n드디어 라즈베리파이 개발환경 구축의 마지막 장이다. 라즈베리파이에 DBMS를 구축한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/133107200-6b527196-5ee8-41fb-a74d-3faf70e97dda.png)\r\n\r\n<span class=\"primary\">DBMS</span>는 다양한 데이터를 저장하는 저장소인 DB(Database)를 관리하는 시스템이다. 필요한 데이터를 DB에 저장하고, 이를 적재적소에 꺼내어 데이터를 다룰 수 있도록 해준다. 웹 서버와 DBMS를 연동하면 사용자의 계정 정보, 설정 등을 저장하고 활용할 수 있다.\r\n\r\n# if (!storage.equals(\"dbms\"))\r\n\r\nHTTP 소켓 통신은 기본적으로 요청이 끝나는 순간 모든 데이터가 소멸된다. 즉, 내 <span class=\"red-400\">브라우저와 웹 사이에서 일어나는 모든 상호작용은 해당 페이지가 닫히는 순간 사라진다</span>는 뜻이다. 때문에 이러한 데이터들의 보관해야 할 경우 별도의 영구적인 보관소가 필요하다.\r\n\r\n## else if (storage.equals(\"browser\"))\r\n\r\n이를 해소하기 위한 가장 간단한 방법으로, <span class=\"indigo-400\">브라우저에선 쿠키와 로컬/세션 스토리지라는 저장소를 제공</span>한다. JavaScript에서 간단한 API를 통홰 데이터를 저장, 추출할 수 있지만, 주력으로 쓰기엔 여러 제약이 있다.\r\n\r\n1. <span class=\"red-400\">용량 제한</span>이 있으며, 제한 또한 작다.\r\n2. 모든 데이터가 문자열로 저장되므로, <span class=\"red-400\">데이터의 형태에 제약</span>이 생긴다.\r\n3. 브라우저에 저장하므로, <span class=\"red-400\">브라우저나 컴퓨터가 바뀌면 데이터가 소실</span>된다.\r\n4. 동일한 PC의 동일한 브라우저로 다른 사람이 데이터를 저장하면 <span class=\"red-400\">이전 데이터는 덮어씌워진다.</span>\r\n5. 동일한 PC의 동일한 브라우저를 사용하는 <span class=\"red-400\">모든 구성원이 데이터에 제약없이 접근, 수정, 삭제</span>할 수 있다.\r\n6. 저장소에 별도의 <span class=\"red-400\">보안장치가 마련되지 않는다.</span>\r\n\r\n위와 같은 여러 문제점이 존재한다. 데이터의 보안이 제대로 이루어지지도 않으며, 유저별로 데이터를 저장할 수도 없다. 즉, 주요 데이터를 저장하기엔 적합하지 않은 셈.\r\n\r\n## else if (storage.equals(\"system\"))\r\n\r\n즉, 브라우저에 영향을 받지않는 외부의 공간에 데이터를 저장해야한다. 가장 간단한 방법으로 서버 파일시스템 내부에 txt나 csv같은 <span class=\"indigo-400\">파일 형태로 저장소를 구성하는 방법</span>을 생각해볼 수 있다. 하지만 이 경우도 어딘가 하나씩 나사가 빠져있다.\r\n\r\n1. 데이터 쓰기 작업이 <span class=\"red-400\">쓰레드에 매우 취약</span>해진다.\r\n2. 읽기, 쓰기 작업의 경우 <span class=\"red-400\">데이터의 검색 로직이 필요</span>하며, 조건의 복잡도에 따라 검색 로직이 기하급수적으로 복잡해진다.\r\n3. 데이터 검색 시 전체 데이터를 호출해야하며, <span class=\"red-400\">데이터의 양이 많아질수록 검색에 요구되는 자원 소요량이 많아진다.</span>\r\n\r\n쿠키나 브라우저 스토리지가 가진 대다수의 문제들이 해소됐지만, 데이터 관리 영역의 문제들은 여전히 존재하며, 그 규모 또한 무시할 수 없는 수준이다. 즉, 필요한 데이터만을 특정하는 데 많은 자원이 소요되며, 대용량 데이터를 다루는 데 적합하지 않다.\r\n\r\n# else if (storage.equals(\"dbms\"))\r\n\r\nDBMS는 위 저장소들의 문제 대부분을 매우 깔끔하게 해소시켜준다.\r\n\r\n1. <span class=\"green-A400\">하나의 DBMS에 여러 저장소</span>를 생성할 수 있다.\r\n2. <span class=\"green-A400\">인가된 요청만 DBMS에 접근</span>이 가능하다.\r\n3. 데이터의 읽기, 쓰기가 <span class=\"green-400\">쓰레드에 구애받지 않는다.</span>\r\n4. 관계형 데이터베이스(RDBMS)의 경우 <span class=\"green-400\">SQL 스크립트</span>를 통해 데이터의 읽기, 쓰기를 효과적으로 수행할 수 있다.\r\n5. <span class=\"green-400\">PL/SQL</span>을 통해 DBMS 자체적으로 함수나, 스케쥴링을 수행할 수 있다.\r\n\r\n그 밖에도 여러 장점이 있으나, 앞서 언급한 스토리지와 연관된 특징만 나열하면 위와 같이 정리할 수 있다.\r\n\r\n이처럼 DBMS의 존재는 웹 서비스가 좀 더 다채로운 서비스를 제공하는 데 있어서 필수적인 요소나 다름없다.\r\n\r\n# MariaDB 설치하기\r\n\r\n이 장에서는 MariaDB를 설치한다. 여러 DBMS를 사용해봤지만, 대표적인 RDBMS인 ORACLE은 조금 무겁다는 느낌을 받았다. 또한 Linux 환경에 그리 친절하지도 않다. 설치에 반드시 GUI 환경을 요구하거나, 커널 변수의 수정을 요구하는 것은 확실히 부담인 부분. MySQL의 경우 개발진 대부분이 MariaDB로 넘어가기도 했고, 업데이트도 MariaDB가 훨씬 자주 일어나므로 MariaDB의 하위호환이라는 느낌이 강했다.\r\n\r\nNoSQL의 경우 RDBMS와 결이 다르고, 현재 개발 구상 중인 대부분의 서비스가 비정형 데이터를 다루지 않으므로 논외.\r\n\r\n또한 애초에 ORACLE이든 MariaDB든 <span class=\"orange-600\">RDBMS는 기본 기능이 거의 비슷</span>하므로, 단순 데이터 CRUD나 간단한 PL/SQL를 사용하는데 차이가 없다.\r\n\r\n> <b class=\"teal-400\">CRUD?</b>  \r\n> Create, Read, Update, Delete의 이니셜로, 데이터에서 할 수 있는 작업인 생성, 읽기, 수정, 삭제를 통칭하는 단어.\r\n\r\n## MariaDB 설치하기\r\n\r\n``` bash\r\nsudo apt-get -y mariadb-server\r\n```\r\n\r\n위 명령어를 입력하여 MariaDB를 설치한다. 간단하다. 이게 끝이다.\r\n\r\n만약 궁금하다면 Linux에 ORACLE 설치 과정을 찾아보라. MariaDB가 얼마나 간단한지 체감할 수 있을 것이다.\r\n\r\n## MariaDB 접속 테스트\r\n\r\n``` bash\r\nsudo mariadb\r\n\r\n# 혹은\r\nsudo mysql\r\n```\r\n\r\n위 명령어를 입력하여 MariaDB에 접속해보자. 비교적 최신 버전(10 이상)이라면 <span class=\"lightBlue-600\">MariaDB는 시스템 계정을 MariaDB root 계정과 대응</span>되도록 설정한다. 위 명령어를 입력하면 별도의 비밀번호 입력 없이 MariaDB를 연결할 수 있다.\r\n\r\n`sudo mysql`을 사용해도 접속할 수 있다. MariaDB와 MySQL의 유사성을 체감할 수 있는 부분.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/133102225-7d63de47-0b70-49e4-9452-c202fad098c4.png)\r\n\r\n위와 같이 접속되면 MariaDB가 정상적으로 동작하는 것이다.\r\n\r\n## Windows에서 MariaDB 관리 툴 설치하기\r\n\r\nDBMS는 Linux와 같이 명령어 기반으로 동작한다. 하지만 모든 명령어 기반이 그렇듯 사용자에게 편안함을 주는 환경이 아니다보니, 명령어를 일일히 치고 있긴 좀 귀찮다. 더군다나 이런 CLI 환경은 데이터 조회할 때 그 단점이 극명하게 드러나는데, 출력한 데이터를 어떻게든 표 형식으로 보여주기 위해 안간힘을 쓴다. 그러나 그 노력에도 불구하고 콘솔은 텍스트가 화면 길이를 넘어갈 경우 강제로 줄바꿈해서 보여준다. 수평 스크롤의 개념이 아예 없어 데이터가 일정량 이상 길어질 경우 극악의 가독성을 보여준다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/133102630-3a33dd50-18d6-4b16-848b-919000c75f2e.png)\r\n\r\n이러한 특징으로 DBMS는 서버에서 돌리더라도 그 관리는 Window같은 GUI 환경에서 관리 툴을 사용하는 것이 보편적이다. 적어도 위와 같은 꼴은 보기 싫다면 더더욱.\r\n\r\nMariaDB 전용 관리 툴은 대표적으로 두 가지가 존재하는데, <span class=\"lightBlue-600\">MySQL Workbench</span>와 <span class=\"lightBlue-600\">SQLyog</span>다. 둘 중 어느 툴을 사용해도 상관없으나, 이 장에서는 MySQL Workbench를 기준으로 설명한다. 이름은 MySQL이라고 명시되어있지만, 앞서 언급했듯이 <span class=\"green-600\">MariaDB가 MySQL 기반이므로 접속 인터페이스가 동일한 모양인지 지장없이 사용</span>할 수 있다.\r\n\r\nSQLyog는 커뮤니티 버전과 Ultimate 버전이 나누어져 있으며, 커뮤니티 버전에선 일부 심화기능이 제한된다. 데이터베이스의 간편 백업이나 다른 데이터베이스로 연결하여 복사하는 등의 심화적인 기능같은 것들이 대부분이다. DBMS의 기능을 제한하는 것이 아니라 관리 도구 단계에서 제공하는 디테일한 편의기능이므로, 일반적인 DBMS 사용에는 전혀 영향이 없으니 걱정하지 않아도 된다.\r\n\r\n이 사이트에 접속하여 MySQL Workbench를 다운로드한다.\r\n\r\n설치가 완료된다. 아직은 라즈베리파이의 IP를 입력해도 포트가 열려있지 않다면 접근할 수 없을 것이다.\r\n\r\n## MariaDB 외부접속 허용하기\r\n\r\n포트가 막혀있다면 Windows에서 MariaDB로 접속할 수 없다. <span class=\"primary\">서비스 포트를 허용하여 외부 통신을 수행</span>하자.\r\n\r\n우선 서비스하는 포트를 확인하자. MariaDB의 기본 서비스포트는 3306이며, MariaDB에서 아래의 SQL을 입력하면 서비스 포트를 확인할 수 있다.\r\n\r\n``` bash\r\nmariadb -u root -p\r\n```\r\n\r\n콘솔에서 위 명령어를 입력하여 MariaDB로 접근하자.\r\n\r\n``` sql\r\nSHOW GLOBAL VARIABLES LIKE 'PORT';\r\n```\r\n\r\nMariaDB를 접속한 상태에서 위 SQL을 입력하면 포트를 확인할 수 있다. 포트를 변경하지 않았다면 3306이 표시될 것이다.\r\n\r\n``` bash\r\nsudo ufw allow 3306\r\n```\r\n\r\n위 명령어를 입력하여 3306 포트를 허용하자.\r\n\r\n이후 MySQL Workbench에서 접속정보를 입력하고 연결을 시도해보자. 위와 같이 뜬다면 성공이다.\r\n\r\n# 목표\r\n\r\n* <del class=\"grey-400\">라즈베리파이에 Ubuntu 서버를 구축한다.</del>\r\n* <del class=\"grey-400\">Tomcat을 구동하여 페이지를 호스팅한다.</del>\r\n* <del class=\"grey-400\">도메인을 입힌다.</del>\r\n* <del class=\"grey-400\">SSL 인증서를 발급하여 HTTPS 통신을 제공한다.</del>\r\n* <del class=\"grey-400\">SSH, RDP 등의 원격 통신환경을 구축한다.</del>\r\n* <del class=\"grey-400\">MariaDB를 설치하여 DB 통신을 수행한다.</del>\r\n\r\n이로써 라즈베리파이의 웹 개발환경의 구축이 끝났다. 이젠 내가 원하는대로 서비스를 개발/배포할 수 있을 것이다.\r\n","url":["2021-09-14-ubuntu-in-mariadb","2021","09","14","ubuntu-in-mariadb"]},"next":{"header":{"title":"[NextJS] 블로그 개편기 - 1. Record One","excerpt":"인터넷으로 알음알음 React를 배워, 뭣도 모르고 호기롭게 블로그를 개발한지가 5월이였다. 그 때만 해도 이 재밌는 걸 가지고 뭐라도 만들어보고 싶다는 강한 열망에 사로잡혔었는데, 그 때 눈에 보였던 게 개발 블로그였다. 그 때 내가 사용하던 블로그는 Jekyll 기반의 GitHub 블로그였는데, 재밌어보여서 시작했다가 며칠 안 가 관둔지가 1년이 넘었었다. 블로그에 흥미가 떨어진 이유 중 하나가 뭐 좀 할라치면 남이 작성한 코드를 일일히 분석한다는 스트레스였다. 개발 블로그를 보자마자 떠오른 내 머릿속의 흐름은 대충 저랬다.","coverImage":"https://user-images.githubusercontent.com/50317129/134931033-89954c3d-5e00-4b3b-85aa-54a1dfa29e46.png","date":"2021-09-21T03:22:35","type":"posts","category":"NextJS","tag":["NextJS","React"],"group":"블로그 개편기","comment":true,"publish":true},"name":"2021-09-21-nextjs-reorganization-1.md","content":"\r\n# 개요\r\n\r\n인터넷으로 알음알음 <span class=\"lightBlue-600\">React</span>를 배워, 뭣도 모르고 호기롭게 블로그를 개발한지가 5월이였다. 그 때만 해도 이 재밌는 걸 가지고 뭐라도 만들어보고 싶다는 강한 열망에 사로잡혔었는데, 그 때 눈에 보였던 게 개발 블로그였다.\r\n\r\n그 때 내가 사용하던 블로그는 <span class=\"pink-600\">Jekyll</span> 기반의 GitHub 블로그였는데, 재밌어보여서 시작했다가 며칠 안 가 관둔지가 1년이 넘었었다. 블로그에 흥미가 떨어진 이유 중 하나가 뭐 좀 할라치면 남이 작성한 코드를 일일히 분석한다는 스트레스였다. 개발 블로그를 보자마자 떠오른 내 머릿속의 흐름은 대충 저랬다.\r\n\r\n1. 나 빼고 다 하는 개발 블로그 나도 다시 해야하지 않나?\r\n2. 저번에 테마 받아서 만들어둔거, 여기서기 수정해서 소스도 개판이라 다시 쳐다보기 싫은데....\r\n3. 정적 블로그는 백엔드 롤도 없어서 간단하니 내 React 지식 정도로도 만들 수 있지 않을까?\r\n4. 내 개발 블로그를 내가 직접 만들면 개발자로써의 보람도 있을 것 같은데..\r\n5. 내가 만들었으니 꾸준히 관리할 수 있지 않을까? 어차피 다 내가 짠거잖아?\r\n\r\n거기까지 생각이 미친 난 블로그 개발을 시작했고, 퇴근 후 틈틈히 만들다보니 기간은 한 두달? 정도 걸리지 않았나 싶다.\r\n\r\n나름 머릿속에 구상한 디자인은 얼추 잘 나온 것 같았는데, 문제가 생겼다. <span class=\"red-600\">블로그가 느려도 너무 느렸다.</span> HTML 레이아웃이 뜨고 난 뒤, CSS가 입혀 렌더링되기까지 과정이 눈에 보일 정도였다. 더군다나 정적임에도 불구하고 라우팅엔 뭐가 그리 시간이 필요한지...\r\n\r\n참고 쓰다가, 이렇게 놔뒀다가는 <span class=\"blue-500\">\"내가 직접 개발했어요!\"</span>라는 말이 <span class=\"blue-500\">\"내가 이렇게 실력이 병x신 같습니다 엌ㅋㅋㅋㅋㅋ\"</span>이나 마찬가질거란 생각이 들었다. 더군다나 구글이나 네이버에 검색 등록도 해야하는데 이러면 전세계 사람들에게까지 광고하는 꼴이니 이대로는 안 됐다.\r\n\r\n그렇게 난 첫 배포 두 달만에 대대적인 개편을 시작했다. 개편 과정에서 처음 접해보는 언어나 여러 시행착오가 있었기에, 혹시 나와 비슷한 문제로 고통받는 영혼들이 조금이나마 쉴 수 있도록 개발기를 작성한다.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n\r\n<del class=\"grey-500\">사실 추석이라 심심하다.</del>","url":["2021-09-21-nextjs-reorganization-1","2021","09","21","nextjs-reorganization-1"]}},"group":[],"data":{"header":{"title":"[Ubuntu] Ubuntu 원격 프로토콜 보안 강화하기","excerpt":"SSH, SFTP와 같은 원격 프로토콜은 서버의 접근성을 향상시켜주지만, 서버의 보안성을 극도로 훼손한다. 공격자가 특정 서버의 IP를 알아냈을 경우, 해당 IP로 SSH 접속 시도를 할 수 있다. 굳이 IP가 아니더라도 해당 IP와 연결된 도메인을 통해서도 얼마든지 가능하다. 특정 도메인의 정보를 DNS서버에 요청하여 IP는 물론 소유자 정보까지 쉽게 취득할 수 있기 때문이다. 따라서 누군가가 내가 접속하려는 서버의 IP 혹은 도메인, SSH 서비스 포트, 계정정보를 알고 있다면 얼마든지 SSH 접속 시도를 하거나 서버에 피해를 줄 수 있다. 외부에 도메인을 공개하는 순간 국내는 물론 외국에서 여러 접속 시도가 들어오기도 한다. 특히 중국에서의 공격이 많이 들어오며, 인터넷에서 이와 관련된 경험담이나 피해사례를 쉽게 찾아볼 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/133300948-2ee9b77a-1589-4afc-8489-fb402a13520f.png","date":"2021-09-15T01:53:21","type":"posts","category":"Ubuntu","tag":["Ubuntu","SSH","SFTP"],"comment":true,"publish":true},"name":"2021-09-15-increase-ubuntu-remote-security.md","content":"<h1 id=\"개요\">개요 <a href=\"#개요\">🔗</a></h1><p>SSH, SFTP와 같은 원격 프로토콜은 <span class=\"green-600\">서버의 접근성을 향상</span>시켜주지만, <span class=\"red-600\">서버의 보안성을 극도로 훼손</span>한다.</p>\n<p>공격자가 특정 서버의 IP를 알아냈을 경우, 해당 IP로 SSH 접속 시도를 할 수 있다. 굳이 IP가 아니더라도 해당 IP와 연결된 도메인을 통해서도 얼마든지 가능하다. 특정 도메인의 정보를 DNS서버에 요청하여 IP는 물론 소유자 정보까지 쉽게 취득할 수 있기 때문이다.</p>\n<p>따라서 누군가가 내가 접속하려는 서버의 IP 혹은 도메인, SSH 서비스 포트, 계정정보를 알고 있다면 얼마든지 SSH 접속 시도를 하거나 서버에 피해를 줄 수 있다.</p>\n<p>외부에 도메인을 공개하는 순간 국내는 물론 외국에서 여러 접속 시도가 들어오기도 한다. 특히 중국에서의 공격이 많이 들어오며, 인터넷에서 이와 관련된 경험담이나 피해사례를 쉽게 찾아볼 수 있다.</p>\n<p>단순히 재미삼아 내가 접속한 도메인에 접속시도를 하는 어중이떠중이들도 있겠지만, 그 중 몇몇은 공격자로 취급할 수 있을 정도의 실력을 가지기도 하며, 그 중에서도 극소수의 몇몇은 내 서버의 보안을 우회할 수 있을 정도의 실력을 가지고 있을 수도 있다.</p>\n<p>서버의 특성 상 여러 내부 시스템 및 네트워크와 연결되어 있으므로, 서버가 뜷리는 것은 그 서버와 연관된 각종 정보들의 안전을 보장할 수 없음을 의미한다. 심지어 <span class=\"red-600\">항상 최상의 보안대책을 강구하는 기업에서조차 피해를 입기도 한다.</span> 우스갯소리로 이미 대다수의 자국민 주민등록번호는 인터넷에 나뒹굴고 있을거라고 얘기하기도 할 정도니.</p>\n<p>기업처럼 높은 수준의 보안과 수준에 맞는 지식을 가진 담당자가 있을 경우 피해 확인 및 보완이라도 할 수 있겠지만, 보안에 무감각하거나 관련 지식이 미흡한 <span class=\"orange-400\">소규모 사업장이나 개인의 경우 자신의 서버가 피해를 입었다는 사실조차 인지하지 못 하기도 한다.</span> 심할 경우 서버 관리조차 이루어지지 않아 공격자의 개인 서버로 사용되기까지 한다.</p>\n<p>그 어떤 보안대첵을 강구해도 보안은 언제나 부족하다. 하지만 간단한 조치만으로도 앞서 언급한 위협의 상당부분을 차단할 수 있다. 말했듯이 대부분은 공격자라고 부르기도 뭐한 장난섞인 시도이며, <span class=\"blue-400\">상대적으로 낮은 가치의 데이터가 대다수인 개인 서버가 일정 수준의 보안을 갖추고 있을 경우 이를 우회하는 것은 시간낭비</span>이기 때문이다.</p>\n<p>간단히 말해 여러분이 게임을 하는데 체력은 많고 패턴도 귀찮은데다, 보상은 잡몹 수준인 보스가 있다고 가정하자. 해당 구간에 도달할 때마다 한숨만 나올 것이며, 게임 커뮤니티엔 해당 보스를 삭제해달라는 요구가 빗발칠 것이다. 유튜브를 보다보면 인기 급상승 5위로 올라온 \"역대 최악의 게임 보스 TOP 10\" 영상에 당당히 이름이 올라가있다. 또한 DC의 해당 게임 갤러리나 인벤에선 그 보스의 이름을 비하의 의미로 사용하고 있을 것이며, 해당 보스를 스킵할 수 있는 각종 연구들이 활발하게 진행되고 있을 것이다.</p>\n<p>이 장에선 우리의 서버를 이런 \"<span class=\"pink-600\">보상은 없고 패턴은 귀찮은 체력돼지</span>\" 보스로 만들어 공격자들이 드러워서 피하도록 만들어 볼 것이다.</p>\n<h1 id=\"서비스-포트 변경하기\">서비스 포트 변경하기 <a href=\"#서비스-포트 변경하기\">🔗</a></h1><p>파일 시스템에 직접적으로 영향을 주는 통신은 <span class=\"primary\">SSH</span>, <span class=\"primary\">SFTP</span>가 존재한다. 각 프로토콜의 전신인 Telnet과 FTP는 SSL의 미적용으로 OS 설치 시 비활성화 되어있다. 굳이 해당 프로토콜을 쓸 이유조차 없으니, 여기서는 논외로 한다.</p>\n<p>각 서비스 포트는 동일하게 SSH 데몬에서 관리하므로 22다. 기본 프로토콜의 포트는 기본 포트가 고정적이므로, 대부분의 공격 시도는 이런 불변성을 악용하여 이루어진다. 반대로 말하자면, <span class=\"green-600\">서비스 포트를 변경하는 것만으로도 간단한 공격 시도를 손쉽게 차단</span>할 수 있다.</p>\n<p>기본으로 설정된 포트와 달리, 서버 담당자가 임의로 바꾼 포트는 추적할 방법이 없기 때문. 포트의 최대값은 65,535개이므로, 임의의 포트로 변경했다면 공격자는 모든 포트에 통신을 시도하여 SSH 포트를 찾아내야만 한다.</p>\n<p>SSH와 SFTP의 서비스 포트를 변경하거나, <code class=\"inline-code\">iptables</code>이나 공유기 설정을 통해 포트포워딩을 시켜 임의의 외부 포트와 22번 포트를 매칭시켜줄 수도 있다.</p>\n<h2 id=\"서비스-포트 변경을 통한 접근 제어\">서비스 포트 변경을 통한 접근 제어 <a href=\"#서비스-포트 변경을 통한 접근 제어\">🔗</a></h2>\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/ssh/sshd_config</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>파일 내용을 보면 <code class=\"inline-code\">#Port 22</code>로 주석처리된 구문을 확인할 수 있는데, 해당 주석을 제거하여 원하는 포트로 입력해준 뒤 저장하면 된다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>systemctl restart <span class=\"token function\">ssh</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>SSH 서비스를 재시작함을 잊지 말자.</p>\n<h2 id=\"포트포워딩을-통한 접근 제어\">포트포워딩을 통한 접근 제어 <a href=\"#포트포워딩을-통한 접근 제어\">🔗</a></h2><p>SSH의 포트 변경이 꺼려진다면, 포트포워딩을 통해 외부에서 접속하는 임의의 포트 하나와 매칭하자. <code class=\"inline-code\">iptables</code>를 활용하여 구성할 수 있다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\"># 포트포워딩 추가</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>iptables -t nat -A PREROUTING -p tcp --dport <span class=\"token number\">22</span> -j REDIRECT --to-port <span class=\"token punctuation\">[</span>PORT NUMBER<span class=\"token punctuation\">]</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"># 포트포워딩 삭제</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>iptables -t nat -D PREROUTING -p tcp --dport <span class=\"token number\">22</span> -j REDIRECT --to-port <span class=\"token punctuation\">[</span>PORT NUMBER<span class=\"token punctuation\">]</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\"># 포트포워딩 상태 확인</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>iptables -L</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>공유기를 사용하고 있다면 공유기에서 포트포워딩을 진행할 수도 있다.</p>\n<p><code class=\"inline-code\">iptables</code>를 활용하면 특정 IP만 해당 포트에 접근할 수 있도록 제한할 수도 있다. <span class=\"primary\">geoIP</span> 플러그인과 연동하면 국가별 IP 대역별로 관리할 수도 있으니, 관심이 있다면 찾아보길 바란다. 적용이 마냥 간단하지는 않으니 참고할 것.</p>\n<h1 id=\"RSA-Key 파일로만 접근 허용하기\">RSA Key 파일로만 접근 허용하기 <a href=\"#RSA-Key 파일로만 접근 허용하기\">🔗</a></h1><p>공격자가 꽤나 근성이 있어서, 혹은 운이 좋아서 내가 임의로 변경한 SSH 서비스 포트를 알아내어 공격을 시도한다고 가정해보자.</p>\n<p>계정정보의 경우 보통 Brute Force 기법을 통해 가능한 모든 조합의 계정정보를 입력하여 로그인을 시도할 것이다. 이를 막기 위해 일정량의 <span class=\"blue-400\">로그인 실패가 감지되면 잠시 동안 접근을 제한</span>하거나, <span class=\"blue-400\">계정을 잠궈 관리자가 해제해야 다시 활성화</span>되게끔 시스템을 구성하기도 한다.</p>\n<p>위 방법도 충분히 좋은 방법이지만, 오로지 <span class=\"blue-600\">RSA Key로만 로그인할 수 있도록 서버 설정을 구성</span>하면 로그인의 보안을 대폭 강화할 수 있다.</p>\n<p>내가 사용자의 계정정보, 심지어 비밀번호까지 알고 있더라도 <span class=\"amber-600\">서버에 등록된 공개키와 매칭되는 개인키가 없을 경우 로그인을 시도할 수 없다.</span></p>\n<br />\n\n<p>절차는 아래와 같다.</p>\n<ol>\n<li>RSA 키쌍 생성</li>\n<li>서버에 공개키 등록</li>\n<li>SSH, SFTP 프로토콜 접속 시 개인키 파일을 제공하여 로그인 수행</li>\n</ol>\n<p>RSA 키 생성 시 키 파일에 암호를 설정할 수 있다. 이 경우, 로그인 시 해당 키 파일에 설정된 비밀번호를 요구한다. 키 파일의 비밀번호는 서버의 계정정보와 별개이므로, 키 파일이 유출되었다 하더라도 키 파일의 사용을 막아 실질적인 피해를 방지할 수 있다.</p>\n<h2 id=\"RSA-키쌍 생성하기\">RSA 키쌍 생성하기 <a href=\"#RSA-키쌍 생성하기\">🔗</a></h2>\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>ssh-keygen -t rsa</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>위 명령어를 사용하여 <span class=\"indigo-400\">RSA 비대칭키를 생성</span>하자. 생성 과정에서 키 파일의 비밀번호를 요구하는데, 빈 칸인 채로 Enter를 누르면 비밀번호 없이 생성된다. 이 경우, 키 파일만 획득하면 키 파일을 사용할 수 있다. 반대로 비밀번호를 입력하면 해당 키 파일을 사용하기 위해 지정한 비밀번호를 입력하여 디코딩해야한다.</p>\n<ul>\n<li>개인키 <code class=\"inline-code\">/home/username/.ssh/id_rsa</code></li>\n<li>공개키 <code class=\"inline-code\">/home/username/.ssh/id_rsa.pub</code></li>\n</ul>\n<p>기본적으로 위 경로에 바로 생성된다.</p>\n<h2 id=\"RSA-키를 서버에 등록하기\">RSA 키를 서버에 등록하기 <a href=\"#RSA-키를 서버에 등록하기\">🔗</a></h2>\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>ssh-copy-id username@xxx.xxx.xxx.xxx</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>위 명령어를 입력하여 <span class=\"indigo-400\">키 파일을 서버에 등록</span>하자. <code class=\"inline-code\">/home/username/.ssh/id_rsa.pub</code>를 자동으로 등록한다.</p>\n<h2 id=\"키-파일로 SSH 접속하기\">키 파일로 SSH 접속하기 <a href=\"#키-파일로 SSH 접속하기\">🔗</a></h2>\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token function\">ssh</span> -i <span class=\"token punctuation\">[</span>PRIVATE KEY<span class=\"token punctuation\">]</span> username@xxx.xxx.xxx.xxx</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>위 명령어를 입력하여 SSH를 접속할 수 있다. <code class=\"inline-code\">-i</code> 옵션으로 개인키 경로를 입력할 수 있다. 키 생성 시 비밀번호를 입력했다면 비밀번호 입력이 필요하며, 따로 생성하지 않았을 경우 즉시 로그인이 된다.</p>\n<h3 id=\"저-Windows에서 쓰고있는데, 개인키 사용시 오류떠요!\">저 Windows에서 쓰고있는데, 개인키 사용시 오류떠요! <a href=\"#저-Windows에서 쓰고있는데, 개인키 사용시 오류떠요!\">🔗</a></h3><p>아마 대부분 Ubuntu에서 RSA 키를 생성하고, 생성한 개인키를 Windows로 전송하여 SSH 접근하는데 사용할 것이다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>OUTPUT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-output\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>Permissions for 'C:\\\\id_rsa' are too open.</td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>It is required that your private key files are NOT accessible by others.</td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>This private key will be ignored.</td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6>Load key \"C:\\\\id_rsa\": bad permissions</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>하지만 막상 Windows에서 키 파일 사용 시, 키 파일이 너무 많은 유저에게 허용되면 보안 상의 이유로 키 파일의 사용을 제한한다. 해결책은 하나다. 해당 키 파일을 사용할 유저에게만  권한을 부여해주면 된다.</p>\n<p>문제는 Windows의 편의성으로 인해, 파일 전송 완료 시 필요한 권한을 자동으로 부여해주기 때문에, 수동으로 제거해야한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/50317129/133301005-c4c5a2df-f878-4ff5-8dc0-63366e28b59b.png\" alt=\"image\"></p>\n<p>키 파일의 [속성] - [보안] 탭에서 파일에 부여된 접근권한을 확인할 수 있다. 보다시피 현재는 너무 많은 사용자에게 접근이 허가되어 있으므로, 오직 나만 접근할 수 있도록 변경한다. 안타깝게도 파일에 상속이 적용되어있어서 그냥 삭제되지 않는다. 하단의 [고급] 탭을 누르자.</p>\n<p><img src=\"https://user-images.githubusercontent.com/50317129/133299523-ec1af2cc-44e2-4b39-b5ae-d7e04425500f.png\" alt=\"image\"></p>\n<p>하단의 [상속 사용 안 함] 버튼을 클릭하여 상속 관계를 제거한다. 메시지 하나가 뜰텐데, [명시적 사용 권한으로 변환]을 선택한다. 제거하면 사용자를 직접 지정해야해서 번거롭다.</p>\n<p>이후 내 계정을 제외한 모든 권한 항목은 제거한다. 이후 저장하고 다시 시도하면 정상적으로 로그인을 수행할 수 있다.</p>\n<h1 id=\"SSH-접근 시 키 파일 방식만 허용하기\">SSH 접근 시 키 파일 방식만 허용하기 <a href=\"#SSH-접근 시 키 파일 방식만 허용하기\">🔗</a></h1><p>여기까지 왔다면 로그인은 잘 됐다는 뜻인데, 키 파일로 로그인할 수 있는 건 좋지만, <span class=\"red-400\">문제는 그냥 계정 정보를 입력해도 로그인이 된다.</span></p>\n<p>이래서야 키 파일의 높은 보안성을 활용하기 어렵다. 로그인 시 반드시 <span class=\"blue-400\">키 파일 로그인만을 허용</span>하여, 내 서버의 개인키를 가진 인원만 접속할 수 있도록 제한해보자.</p>\n<p class=\"red-600\">※ 무턱대고 설정했다간 본인조차 SSH에 접속하지 못하는 상황이 생기기도 하니 주의할 것</p>\n\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/ssh/sshd_config</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>SSH 설정 파일을 열어 아래의 값을 수정하자. <span class=\"green-400\">비밀번호 입력 로그인 방식을 사용하지 않도록 설정</span>하는 것이다.</p>\n<ul>\n<li><code class=\"inline-code\">PasswordAuthentication yes</code> -> <code class=\"inline-code\">PasswordAuthentication no</code></li>\n</ul>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>systemctl restart <span class=\"token function\">ssh</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>재부팅 후 로그인을 수행해보자.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\"># 일반 로그인 방식의 SSH</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token function\">ssh</span> username@xxx.xxx.xxx.xxx</td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"># 키 파일 방식의 SSH</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token function\">ssh</span> -i <span class=\"token punctuation\">[</span>PRIVATE KEY<span class=\"token punctuation\">]</span> username@xxx.xxx.xxx.xxx</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>일반로그인은 계정 정보를 제대로 입력했다 하더라도 로그인에 실패할 것이다.</p>\n<h1 id=\"정리\">정리 <a href=\"#정리\">🔗</a></h1><p>SSH와 SFTP를 반드시 개인키로만 로그인할 수 있도록 구성을 변경했다.</p>\n<p>생각보다 간단한 수준의 보안 작업이라도, 실제로 이루어지는 공격의 대다수를 무력화시킬 수 있다.</p>\n<p>키를 통해 더욱 안전하게 서버의 보안을 지킬 수 있지만, 키 파일을 분실하지 않도록 주의하자.</p>\n","url":["2021-09-15-increase-ubuntu-remote-security","2021","09","15","increase-ubuntu-remote-security"],"toc":[{"text":"개요","tag":"개요","depth":1},{"text":"서비스 포트 변경하기","tag":"서비스-포트 변경하기","depth":1},{"text":"서비스 포트 변경을 통한 접근 제어","tag":"서비스-포트 변경을 통한 접근 제어","depth":2},{"text":"포트포워딩을 통한 접근 제어","tag":"포트포워딩을-통한 접근 제어","depth":2},{"text":"RSA Key 파일로만 접근 허용하기","tag":"RSA-Key 파일로만 접근 허용하기","depth":1},{"text":"RSA 키쌍 생성하기","tag":"RSA-키쌍 생성하기","depth":2},{"text":"RSA 키를 서버에 등록하기","tag":"RSA-키를 서버에 등록하기","depth":2},{"text":"키 파일로 SSH 접속하기","tag":"키-파일로 SSH 접속하기","depth":2},{"text":"저 Windows에서 쓰고있는데, 개인키 사용시 오류떠요!","tag":"저-Windows에서 쓰고있는데, 개인키 사용시 오류떠요!","depth":3},{"text":"SSH 접근 시 키 파일 방식만 허용하기","tag":"SSH-접근 시 키 파일 방식만 허용하기","depth":1},{"text":"정리","tag":"정리","depth":1}]},"hash":"a0a3c1cb678"},"__N_SSG":true}