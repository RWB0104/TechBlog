{"pageProps":{"page":{"type":"posts","prev":{"header":{"title":"[NextJS] 블로그 개편기 - 1. Record One","excerpt":"인터넷으로 알음알음 React를 배워, 뭣도 모르고 호기롭게 블로그를 개발한지가 5월이였다. 그 때만 해도 이 재밌는 걸 가지고 뭐라도 만들어보고 싶다는 강한 열망에 사로잡혔었는데, 그 때 눈에 보였던 게 개발 블로그였다. 그 때 내가 사용하던 블로그는 Jekyll 기반의 GitHub 블로그였는데, 재밌어보여서 시작했다가 며칠 안 가 관둔지가 1년이 넘었었다. 블로그에 흥미가 떨어진 이유 중 하나가 뭐 좀 할라치면 남이 작성한 코드를 일일히 분석한다는 스트레스였다. 개발 블로그를 보자마자 떠오른 내 머릿속의 흐름은 대충 저랬다.","coverImage":"https://user-images.githubusercontent.com/50317129/134931033-89954c3d-5e00-4b3b-85aa-54a1dfa29e46.png","date":"2021-09-21T03:22:35","type":"posts","category":"NextJS","tag":["NextJS","React"],"group":"블로그 개편기","comment":true,"publish":true},"name":"2021-09-21-nextjs-reorganization-1.md","content":"\r\n# 개요\r\n\r\n인터넷으로 알음알음 <span class=\"lightBlue-600\">React</span>를 배워, 뭣도 모르고 호기롭게 블로그를 개발한지가 5월이였다. 그 때만 해도 이 재밌는 걸 가지고 뭐라도 만들어보고 싶다는 강한 열망에 사로잡혔었는데, 그 때 눈에 보였던 게 개발 블로그였다.\r\n\r\n그 때 내가 사용하던 블로그는 <span class=\"pink-600\">Jekyll</span> 기반의 GitHub 블로그였는데, 재밌어보여서 시작했다가 며칠 안 가 관둔지가 1년이 넘었었다. 블로그에 흥미가 떨어진 이유 중 하나가 뭐 좀 할라치면 남이 작성한 코드를 일일히 분석한다는 스트레스였다. 개발 블로그를 보자마자 떠오른 내 머릿속의 흐름은 대충 저랬다.\r\n\r\n1. 나 빼고 다 하는 개발 블로그 나도 다시 해야하지 않나?\r\n2. 저번에 테마 받아서 만들어둔거, 여기서기 수정해서 소스도 개판이라 다시 쳐다보기 싫은데....\r\n3. 정적 블로그는 백엔드 롤도 없어서 간단하니 내 React 지식 정도로도 만들 수 있지 않을까?\r\n4. 내 개발 블로그를 내가 직접 만들면 개발자로써의 보람도 있을 것 같은데..\r\n5. 내가 만들었으니 꾸준히 관리할 수 있지 않을까? 어차피 다 내가 짠거잖아?\r\n\r\n거기까지 생각이 미친 난 블로그 개발을 시작했고, 퇴근 후 틈틈히 만들다보니 기간은 한 두달? 정도 걸리지 않았나 싶다.\r\n\r\n나름 머릿속에 구상한 디자인은 얼추 잘 나온 것 같았는데, 문제가 생겼다. <span class=\"red-600\">블로그가 느려도 너무 느렸다.</span> HTML 레이아웃이 뜨고 난 뒤, CSS가 입혀 렌더링되기까지 과정이 눈에 보일 정도였다. 더군다나 정적임에도 불구하고 라우팅엔 뭐가 그리 시간이 필요한지...\r\n\r\n참고 쓰다가, 이렇게 놔뒀다가는 <span class=\"blue-500\">\"내가 직접 개발했어요!\"</span>라는 말이 <span class=\"blue-500\">\"내가 이렇게 실력이 병x신 같습니다 엌ㅋㅋㅋㅋㅋ\"</span>이나 마찬가질거란 생각이 들었다. 더군다나 구글이나 네이버에 검색 등록도 해야하는데 이러면 전세계 사람들에게까지 광고하는 꼴이니 이대로는 안 됐다.\r\n\r\n그렇게 난 첫 배포 두 달만에 대대적인 개편을 시작했다. 개편 과정에서 처음 접해보는 언어나 여러 시행착오가 있었기에, 혹시 나와 비슷한 문제로 고통받는 영혼들이 조금이나마 쉴 수 있도록 개발기를 작성한다.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n\r\n<del class=\"grey-500\">사실 추석이라 심심하다.</del>","url":["2021-09-21-nextjs-reorganization-1","2021","09","21","nextjs-reorganization-1"]},"next":{"header":{"title":"[NextJS] 블로그 개편기 - 3. SCSS 입히기","excerpt":"원래 내 블로그는 JS-in-CSS 스타일 방식을 사용하고 있었다. 그 이유는 Material-UI 때문. Material-UI의 공식 예제에서 대놓고 JS-in-CSS 방식으로 설명하기 때문에, React 기초 수준이였던 난 당연히 이렇게 해야하는 줄 알고 있었다. 하지만 개발을 거듭하며, 그 중 몇몇은 복잡한 스타일을 강요받기도 하며 점점 스타일 구문이 비대해지는 컴포넌트가 생겨나기 시작했다. 이에 따라 JS-in-CSS의 단점이 점점 대두되기 시작했다. 대표적인 문제점으로 FOCU(Flash Of Unstyled Content). 스타일 렌더링에 시간이 소요되어, 사용자가 렌더링 이전의 페이지를 보게 되는 현상이다. 내 페이지의 경우 약 1초가 조금 안 되게 FOUC가 발생했는데, 사용자 경험을 극도로 해치는 일이였다. 블로그 개편을 마음먹게 된 가장 큰 이유 역시 이 FOCU 현상 때문이였으며, 관련 정보 조사 결과 CSS-in-CSS의 성능이 월등히 뛰어나다는 점을 확인했다.","coverImage":"https://user-images.githubusercontent.com/50317129/134931033-89954c3d-5e00-4b3b-85aa-54a1dfa29e46.png","date":"2021-09-24T13:17:24","type":"posts","category":"NextJS","tag":["NextJS","React","SCSS","CSS"],"group":"블로그 개편기","comment":true,"publish":true},"name":"2021-09-24-nextjs-reorganization-3.md","content":"\r\n# 개요\r\n\r\n원래 내 블로그는 JS-in-CSS 스타일 방식을 사용하고 있었다. 그 이유는 Material-UI 때문. Material-UI의 공식 예제에서 대놓고 JS-in-CSS 방식으로 설명하기 때문에, React 기초 수준이였던 난 당연히 이렇게 해야하는 줄 알고 있었다.\r\n\r\n하지만 개발을 거듭하며, 그 중 몇몇은 복잡한 스타일을 강요받기도 하며 점점 스타일 구문이 비대해지는 컴포넌트가 생겨나기 시작했다. 이에 따라 JS-in-CSS의 단점이 점점 대두되기 시작했다. 대표적인 문제점으로 FOCU(Flash Of Unstyled Content). 스타일 렌더링에 시간이 소요되어, 사용자가 렌더링 이전의 페이지를 보게 되는 현상이다. 내 페이지의 경우 약 1초가 조금 안 되게 FOUC가 발생했는데, 사용자 경험을 극도로 해치는 일이였다.\r\n\r\n블로그 개편을 마음먹게 된 가장 큰 이유 역시 이 FOCU 현상 때문이였으며, 관련 정보 조사 결과 CSS-in-CSS의 성능이 월등히 뛰어나다는 점을 확인했다.\r\n\r\n``` javascript\r\n/**\r\n * 스타일 객체 반환 함수\r\n *\r\n * @returns {JSON} 스타일 객체\r\n */\r\nfunction getStyles()\r\n{\r\n\treturn makeStyles((theme) => ({\r\n\t\tfab_bright: {\r\n\t\t\tposition: \"fixed\",\r\n\t\t\tbottom: 50,\r\n\t\t\tright: 50,\r\n\t\t\tbackgroundColor: grey[800],\r\n\t\t\tcolor: grey[200],\r\n\t\t\t\"&:hover\": {\r\n\t\t\t\tbackgroundColor: grey[700]\r\n\t\t\t},\r\n\t\t\t\"& svg\": {\r\n\t\t\t\tcolor: orange[600]\r\n\t\t\t},\r\n\t\t\t[theme.breakpoints.up(\"md\")]: {\r\n\t\t\t\t\"& span\": {\r\n\t\t\t\t\tmarginLeft: theme.spacing(1)\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[theme.breakpoints.down(\"sm\")]: {\r\n\t\t\t\tbottom: 70,\r\n\t\t\t\tright: 20\r\n\t\t\t}\r\n\t\t},\r\n\t\tfab_dark: {\r\n\t\t\tposition: \"fixed\",\r\n\t\t\tbottom: 50,\r\n\t\t\tright: 50,\r\n\t\t\tbackgroundColor: grey[200],\r\n\t\t\tcolor: grey[900],\r\n\t\t\t\"&:hover\": {\r\n\t\t\t\tbackgroundColor: grey[300]\r\n\t\t\t},\r\n\t\t\t\"& svg\": {\r\n\t\t\t\tcolor: blue[600]\r\n\t\t\t},\r\n\t\t\t[theme.breakpoints.up(\"md\")]: {\r\n\t\t\t\t\"& span\": {\r\n\t\t\t\t\tmarginLeft: theme.spacing(1)\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[theme.breakpoints.down(\"sm\")]: {\r\n\t\t\t\tbottom: 70,\r\n\t\t\t\tright: 20\r\n\t\t\t}\r\n\t\t},\r\n\t\tdiv: {\r\n\t\t\theight: 24\r\n\t\t}\r\n\t}))();\r\n}\r\n```\r\n\r\n심지어 JS-in-CSS 시절의 스타일 구현 코드를 보면, 요소의 중첩이 적용되어있어 일반적인 CSS로는 그대로 옮기기 어려운 형태였다. 또한 CSS의 중첩을 접하게 되면서, 중첩이 주는 편의성에 익숙해진 터라 스타일만 CSS로 옳기면서 그 편의성만 그대로 유지하고 싶었다.\r\n\r\n결국 프로젝트에 CSS 전처리기를 적용하기로 결정했다.\r\n\r\n# CSS의 전처리기\r\n\r\nCSS의 전처리기는 여러 종류가 있다.\r\n\r\n* [SASS/SCSS](https://sass-lang.com)\r\n* [LESS](https://lesscss.org)\r\n* [Stylus](https://www.stylus.com)\r\n* [PostCSS](https://postcss.org)\r\n\r\nCSS 전처리기의 궁극적인 목표는 CSS의 확장성을 통해 개발에서의 여러 이점을 확보하는 것이다.\r\n\r\nCSS 전처리기를 사용하면 무려 파일에서 `@for`나 `@mixin`, 변수와 같은 동적 코딩이 가능해진다. 아쉽게도 전처리기 파일을 그대로 브라우저에서 사용할 순 없다. 역시나 이런 류의 다른 언어와 마찬가지로 컴파일이 필요하며, 컴파일의 결과물은 CSS 파일로 출력된다.\r\n\r\n즉, 컴파일 단계에서 CSS 전처리기 파일에 선언된 명령문이 동작하여 평범한 CSS로 출력되는 것이다.\r\n\r\n## 장점\r\n\r\n1. 반복적인 CSS 구문 축소\r\n2. 변수를 통한 일괄 관리\r\n3. 중첩을 통한 CSS 구문 가독성 확보\r\n4. 파일 분리를 통한 컴포넌트화 용이\r\n\r\n## 단점\r\n\r\n1. 전처리기별로 학습곡선 존재\r\n2. 별도의 개발환경 구축 필요\r\n\r\n# SCSS\r\n\r\n이 블로그에서 나는 SCSS를 차용했다. CSS 전처리기에 걸맞는 다양한 확장 구문을 사용할 수 있으면서도, 기존의 CSS 문법과 거의 차이가 없기 때문이다.\r\n\r\n원래 SCSS의 전신은 SASS로, Syntactically Awesome Style Sheets의 약자다. 한글로 직역하면 대충 문법적으로 개쩌는 스타일 시트 정도로 표현할 수 있다.\r\n\r\nSASS는 가장 처음으로 나온 전처리기로, Ruby 언어에 기반한 문법을 가지고 있어 CSS에서 바로 선회하기 어려운 부분이 많았다. 표현식이 달랐고, 문법에도 차이가 있었다.\r\n\r\n이후 SASS의 단점을 해소한 SCSS(Sassy CSS)나 나왔는데, CSS 전처리기의 확장성을 지니면서도 CSS의 문법과 매우 유사하다. 덕분에 전처리기 중에서도 러닝커브가 상당히 낮은 편이다.\r\n\r\n<br />\r\n<br />\r\n\r\nSCSS와 SASS의 차이는 아래의 예시에서 극명하게 드러난다.\r\n\r\n``` css\r\ndiv {\r\n\tcolor: grey;\r\n\r\n\twidth: 80px;\r\n\theight: 160px;\r\n}\r\n\r\ndiv h1 {\r\n\tcolor: dodgerblue;\r\n}\r\n```\r\n\r\n``` sass\r\n$length: 80px\r\n\r\ndiv\r\n\tcolor: grey\r\n\r\n\twidth: $length\r\n\theight: $length * 2\r\n\r\n\th1\r\n\t\tcolor: dodgerblue\r\n```\r\n\r\n``` scss\r\n$length: 80px;\r\n\r\ndiv {\r\n\tcolor: grey;\r\n\r\n\twidth: $length;\r\n\theight: $length * 2;\r\n\r\n\th1 {\r\n\t\tcolor: dodgerblue;\r\n\t}\r\n}\r\n```\r\n\r\n위 차이에서 알 수 있듯이, SASS는 CSS와 SCSS에 비해 표현식이 좀 다르다. 모티브로 삼은 언어가 서로 달라서 생긴 차이다.\r\n\r\n다행히도 후에 나온 SCSS는 SASS의 장점과 CSS의 문법을 그대로 흡수하여 흡사 CSS를 작성하는 것과 별반 차이가 없기에, 대부분 SCSS를 많이 차용하는 편이다. 실제로 SASS로 구현 가능한 건 SCSS로 전부 구현할 수 있으며, 심지어 공식 홈페이지에서도 SCSS를 권장하고 있다. 또한 SASS와 SCSS의 개발환경 역시 동일하다.\r\n\r\nSASS가 CSS 전처리기의 선두주자지만, 여러 이유로 후발주자인 SCSS가 더 많이 사용되고 있다. 하지만 이러한 상징성 및 이름의 유사성으로 인해 SASS와 SCSS를 구분없이 혼용하거나 그냥 둘 다 뭉뚱그려 SASS라고 표현하기도 한다.\r\n\r\n즉, `SASS = SCSS`라 봐도 무방하다.\r\n\r\n이렇게 다양한 장점들로 인해 SCSS를 차용하기로 결정했다.\r\n\r\n# 프로젝트에 SCSS 적용하기\r\n\r\nSCSS는 Typescript와 같이 별도의 템플릿은 없으므로, 직접 설정해야한다. 매우 쉬우니 겁먹지 않아도 된다.\r\n\r\n## SCSS Loader 설치하기\r\n\r\n``` bash\r\n# NPM 기반\r\nnpm install @zeit/next-sass --save-dev\r\n\r\n# Yarn 기반\r\nyarn add @zeit/next-sass --dev\r\n```\r\n\r\n위 명령어를 이용하여 SASS Loader를 설치한다. 내가 쓴 건 SCSS 아니냐고? 위에 언급했다시피 SASS와 SCSS의 개발환경이 동일하다. 컴파일러 역시 동일하므로, SASS Loader를 설치해도 아무 문제가 없다.\r\n\r\n## SCSS Loader 설정하기\r\n\r\n``` javascript\r\nconst withSass = require('@zeit/next-sass');\r\n\r\nmodule.exports = withSass();\r\n\r\n// 기존 next.config.js 내용 ...\r\n```\r\n\r\nNextJS의 설정파일인 `next.config.js`에 위 구문을 추가한다. `withSass()` 안엔 JSON 형태로 추가적인 옵션을 지정할 수 있다. 예를 들어, `@zeit/next-sass` 로더를 적용하면 CSS 파일들은 전부 SASS/SCSS로 변경하라는 문구와 함께 오류를 띄운다. 이 때, 아래와 같이 옵션을 주면 CSS도 병행해서 사용할 수 있다.\r\n\r\n``` javascript\r\nmodule.exports = withSass({\r\n\tcssModules: true\r\n});\r\n```\r\n\r\n[@zeit/next-sass NPM 저장소](https://www.npmjs.com/package/@zeit/next-sass)에서 자세한 옵션을 확인할 수 있다.\r\n\r\n이후 프로젝트에서의 사용은 CSS와 동일하다.\r\n\r\n# ScSS 톺아보기\r\n\r\nSCSS는 CSS의 전처리기로써 CSS에 없던 강력한 기능들을 제공한다. 보다보면 CSS 코딩하다 느낀 불편함을 해소해주거나, CSS에는 이런거 안 되나? 싶었던 기능들이 많다.\r\n\r\n## 변수 선언하기\r\n\r\n프로그래밍에서의 변수는 다양한 의미를 갖지만, 그 중에서도 특정 값을 하나의 변수에 할당하여 관리할 수 있다는 장점이 있다. 만약 해당 값을 바꿔야 할 경우, 변수가 없다면 해당 값을 쓰는 모든 코드를 변경했어야 한다.\r\n\r\n하지만 변수를 사용한다면 다 필요없이 변수에 할당된 값만 변경해주는 것으로 끝난다.\r\n\r\nCSS에는 본디 이런 기능이 없었으나, SCSS에선 변수의 존재로 인해 CSS를 좀 더 프로그래밍적인 측면에서 다가갈 수 있다.\r\n\r\n``` scss\r\n$base: 16px;\r\n\r\n.font-1 {\r\n\tfont-size: $base;\r\n}\r\n\r\n.font-2 {\r\n\tfont-size: $base + 2px;\r\n}\r\n\r\n.font-3 {\r\n\t$color: dodgerblue;\r\n\r\n\tfont-size: $base + 4px;\r\n\r\n\tbackground-color: $color;\r\n\tborder: 1px solid $color;\r\n}\r\n```\r\n\r\n``` css\r\n.font-1 {\r\n\tfont-size: 16px;\r\n}\r\n\r\n.font-2 {\r\n\tfont-size: 18px;\r\n}\r\n\r\n.font-3 {\r\n\tfont-size: 20px;\r\n\tbackground-color: dodgerblue;\r\n\tborder: 1px solid dodgerblue;\r\n}\r\n```\r\n\r\n이와 같이 $ 기호를 통해 변수를 사용할 수 있다. 일반적인 할당은 물론, 사칙연산도 가능하다. 변수의 값은 CSS에서 사용할 수 있는 모든 값(#05A46B, skyblue, \"나눔고딕\", 38px 등)을 할당할 수 있다.\r\n\r\nSCSS의 `base`는 전역변수로 어디서나 호출할 수 있다. `color`는 지역변수로 `.font-3` 블럭과 중첩된 하위 블럭에서만 호출할 수 있다.\r\n\r\n> <b class=\"orange-400\">🔍변수의 범위(scope)</b>  \r\n> SCSS의 변수는 자신만의 범위를 가진다. 블럭 내부에 선언된 변수는 중첩된 하위 블럭에서 호출할 수 있다. 반대로 하위 블럭에서 선언된 변수는 상위 블럭에서 호출할 수 없다. 블럭이 아닌 파일 자체에 선언될 경우 <span class=\"primary\">전역변수</span>로 지정되어 파일에 선언된 모든 곳에서 호출할 수 있다.\r\n\r\n### 전역변수 선언하기\r\n\r\n``` scss\r\n.font-1 {\r\n    $base: 16px !global;\r\n\tfont-size: $base;\r\n}\r\n\r\n.font-2 {\r\n\tfont-size: $base + 2px;\r\n}\r\n\r\n.font-3 {\r\n\t$color: dodgerblue;\r\n\r\n\tfont-size: $base + 4px;\r\n\r\n\tbackground-color: $color;\r\n\tborder: 1px solid $color;\r\n}\r\n```\r\n\r\n파일 외부에서 쓰는 것 외에도, `!global` 지시어를 사용하면 어디서나 전역변수를 선언할 수 있다. 단, 이렇게 블럭 내부에서 `!global`로 선언된 전역변수는 <span class=\"red-400\">해당 블럭 이후의 코드에서만 접근 가능</span>하다.\r\n\r\n만약 `base` 변수가 `.font-2`에서 전역변수로 선언되었다면, `.font-1` 블럭에서는 접근할 수 없다.\r\n\r\n## 리스트 선언하기\r\n\r\n단순 값 뿐만 아니라 리스트도 선언할 수 있다.\r\n\r\n``` scss\r\n$bright: #000000, #444444, #888888, #BBBBBB, #FFFFFF;\r\n\r\n$list: red, #FF00FF, \"Arial\", 16px;\r\n```\r\n\r\n리스트는 쉼표로 구분한다. 리스트 데이터의 타입이 동일할 필요는 없다.\r\n\r\n### 리스트 다루기\r\n\r\n``` scss\r\n$bright: #000000, #444444, #888888, #BBBBBB, #FFFFFF;\r\n\r\n// => #888888\r\nnth($bright, 3);\r\n\r\n// => #888888이 #777777로 교체됨\r\nset-nth($bright, 3, #777777);\r\n\r\n// => bright에 #EEEEEE가 추가됨\r\nappend($bright, #EEEEEE);\r\n```\r\n\r\n리스트의 기초적인 문법은 위와 같다. 또한 `@each`를 통해 타 언어의 `foreach`를 구현할 수 있다.\r\n\r\n``` scss\r\n$color: white, red, green, blue, black;\r\n\r\n@each $item in $color {\r\n\t.font-#{$item} {\r\n\t\tcolor: $item;\r\n\t}\r\n}\r\n```\r\n\r\n``` css\r\n.font-white {\r\n\tcolor: white;\r\n}\r\n\r\n.font-red {\r\n\tcolor: red;\r\n}\r\n\r\n.font-green {\r\n\tcolor: green;\r\n}\r\n\r\n.font-blue {\r\n\tcolor: blue;\r\n}\r\n\r\n.font-black {\r\n\tcolor: black;\r\n}\r\n```\r\n\r\n`@each`를 이용하면 반복적인 구문을 쉽게 만들 수 있다.\r\n\r\n## Map 선언하기\r\n\r\n위의 리스트가 단순한 요소만으로 이루어졌다면, Map은 우리가 흔히 아는 key-value 형태의 변수다.\r\n\r\n``` scss\r\n$map: (shorter: 20px, short: 40px, normal: 60px, long: 80px, longer: 100px);\r\n\r\n$map: (a: 20px, b: red, c: #00DE00, d: \"Arial\", e: center);\r\n```\r\n\r\nMap의 key-value는 위와 같이 표기한다. 리스트와 마찬가지로 요소의 타입은 자유롭게 선언 가능하다.\r\n\r\n### Map 다루기\r\n\r\n``` scss\r\n$map: (shorter: 20px, short: 40px, normal: 60px, long: 80px, longer: 100px);\r\n\r\n// => 20px\r\nmap-get($map, shorter);\r\n\r\n// => longer의 100px가 120px로 교체됨\r\nmap-set($bright, longer, 120px);\r\n\r\n// => shorter, short, ..., longer 순으로 맵의 키 리스트 배열 반환\r\nmap-keys($bright);\r\n\r\n// => 20px, 40px, ..., 100px 순으로 맵의 값 리스트 배열 반환\r\nmap-values($bright);\r\n```\r\n\r\n위와 같이 Map을 다룰 수 있다.\r\n\r\n## @if, @else if, @else 사용하기\r\n\r\n익숙한 조건문이다. SCSS는 위와 같은 지시어로 조건문을 구현할 수 있으며, 우리가 흔히 아는 방식과 매우 유사하다.\r\n\r\n``` scss\r\n@mixin box($size, $platform) {\r\n\twidth: $size;\r\n\theight: $size;\r\n\r\n\t@if $platform == \"naver\" {\r\n\t\tbackground-color: #03C75A;\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t@else if $platform == \"kakao\" {\r\n\t\tbackground-color: #FEE500;\r\n\t\tcolor: black;\r\n\t}\r\n\r\n\t@else {\r\n\t\tbackground-color: white;\r\n\t\tcolor: black;\r\n\t}\r\n}\r\n\r\n$box-size: 50px;\r\n\r\n.auth[data-platform=naver] {\r\n\t@include box($box-size, \"naver\");\r\n}\r\n\r\n.auth[data-platform=kakao] {\r\n\t@include box($box-size, \"kakao\");\r\n}\r\n\r\n.auth[data-platform=google] {\r\n\t@include box($box-size, \"google\");\r\n}\r\n```\r\n\r\n``` css\r\n.auth[data-platform=naver] {\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color: #03C75A;\r\n  color: white;\r\n}\r\n\r\n.auth[data-platform=kakao] {\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color: #FEE500;\r\n  color: black;\r\n}\r\n\r\n.auth[data-platform=google] {\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color: white;\r\n  color: black;\r\n}\r\n```\r\n\r\n이와 같이 값에 따라 SCSS를 다르게 적용할 수 있다. 이를 응용하여 특정 조건에서는 추가적인 스타일을 지정하거나 제외하는 방식도 구성할 수 있다.\r\n\r\n사용법은 우리가 흔히 아는 조건문과 매우 유사하니 어렵지 않을 것이다.\r\n\r\n## @for 사용하기\r\n\r\n무릇 프로그래밍 언어라면 하나쯤은 제공하는 반복문이다. SCSS는 `@for`의 형태로 제공한다.\r\n\r\n``` scss\r\n$base-color: #036;\r\n\r\n@for $i from 1 through 3 {\r\n  ul:nth-child(3n + #{$i}) {\r\n    background-color: lighten($base-color, $i * 5%);\r\n  }\r\n}\r\n```\r\n\r\n``` css\r\nul:nth-child(3n + 1) {\r\n  background-color: #004080;\r\n}\r\n\r\nul:nth-child(3n + 2) {\r\n  background-color: #004d99;\r\n}\r\n\r\nul:nth-child(3n + 3) {\r\n  background-color: #0059b3;\r\n}\r\n```\r\n\r\n위와 같이 사용 가능하다. `$i`는 임의로 지정하는 키 인덱스 변수이며, 1 부터 3까지 반복한다.\r\n\r\n## @mixin와 @include\r\n\r\nCSS를 쓰다보면 한 번 쯤 타 언어의 함수 개념을 적용하고 싶다는 생각이 들 것이다.\r\n\r\n기존의 CSS는 함수 개념이 존재하지 않아, 동일한 코드를 쓰기 위해선 동일한 선택자를 사용하거나, 어쩔 수 없이 중복 코드를 사용해야만 했다.\r\n\r\n하지만 SCSS에선 `@mixin` 문법을 통해 코드의 스니펫을 저장하고 이를 적재적소에 사용할 수 있다.\r\n\r\n``` scss\r\n@mixin square($size, $color) {\r\n\twidth: $size;\r\n\theight: $size;\r\n\r\n\tbackground-color: $color;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: transparent;\r\n\r\n\t\tborder: 1px solid $color;\r\n\t}\r\n}\r\n\r\n.box {\r\n\t@include square(20px, red);\r\n\t\r\n\tbox-shadow: 1px 1px 10px grey;\r\n}\r\n```\r\n\r\n``` css\r\n.box {\r\n\twidth: 20px;\r\n\theight: 20px;\r\n\tbackground-color: red;\r\n\tbox-shadow: 1px 1px 10px grey;\r\n}\r\n\r\n.box:hover {\r\n\tbackground-color: transparent;\r\n\tborder: 1px solid red;\r\n}\r\n```\r\n\r\n위와 같이 `@mixin`으로 `square()`라는 스니펫을 선언했다. 이 스니펫은 `size`, `color`라는 인수를 받는다.\r\n\r\n원하는 블럭에서 `@include`를 통해 해당 스니펫을 호출하면 그 블럭에 호출한 스니펫이 포함된다. 코드의 중복을 효과적으로 없애주어 유지보수의 난이도를 낮출 수 있으며, 이러한 패턴은 컴포넌트별로 스타일을 관리하기에도 매우 용이하다.\r\n\r\n`@include` 사용 시 `@mixin`이 별도의 인수를 받지 않을 경우 괄호를 생략해도 무관하다.\r\n\r\n## @import로 파일 합치기\r\n\r\n`@import`는 다른 SCSS 파일을 삽입하여 해당 파일의 내용에 덧대어 SCSS를 작성할 수 있다.\r\n\r\n공통 혹은 모듈화된 SCSS를 별도의 파일로 관리하며, 해당 모듈이 필요한 SCSS에 `@import`를 통해 삽입함으로써 SCSS의 모듈화를 구현할 수 있다.\r\n\r\n``` scss\r\n// box.scss\r\n@mixin square($size, $color) {\r\n\twidth: $size;\r\n\theight: $size;\r\n\r\n\tbackground-color: $color;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: transparent;\r\n\r\n\t\tborder: 1px solid $color;\r\n\t}\r\n}\r\n\r\n.box {\r\n\t@include square(20px, red);\r\n\t\r\n\tbox-shadow: 1px 1px 10px grey;\r\n}\r\n```\r\n\r\n``` scss\r\n@import \"./box.scss\";\r\n\r\n// require-box.scss\r\n.require-box {\r\n\t@include square(20px, dodgerblue);\r\n\t\r\n\tbackground-color: grey;\r\n}\r\n```\r\n\r\n``` css\r\n/* require-box.css */\r\n.box {\r\n\twidth: 20px;\r\n\theight: 20px;\r\n\tbackground-color: red;\r\n\tbox-shadow: 1px 1px 10px grey;\r\n}\r\n\r\n.box:hover {\r\n\tbackground-color: transparent;\r\n\tborder: 1px solid red;\r\n}\r\n\r\n.require-box {\r\n\twidth: 20px;\r\n\theight: 20px;\r\n\tbackground-color: dodgerblue;\r\n\tbox-shadow: 1px 1px 10px grey;\r\n}\r\n\r\n.require-box:hover {\r\n\tbackground-color: transparent;\r\n\tborder: 1px solid dodgerblue;\r\n}\r\n```\r\n\r\n`@import` 지시어 뒤에 삽입할 파일의 경로를 입력하면 된다.\r\n\r\n임의의 SCSS인 `box.scss`와 이를 삽입하여 작성한 `require-box.scss`가 있다고 가정하자. 컴파일 결과물인 `require-box.css`에는 위와 같이 `box.scss`와 `require-box.scss`의 내용이 합쳐진 결과물이 컴파일된다.\r\n\r\n`require-box.scss`는 `box.scss`를 삽입함으로써 `box.scss`에 선언된 전역 변수 혹은 스니펫 등을 사용할 수 있다. 그러나 `box.scss`에 선언된 내용으로 인해 원하지 않는 영향을 받을 가능성이 있으니 설계시 유의하자.\r\n\r\n# 예시\r\n\r\n``` scss\r\n@mixin oneline {\r\n\tdisplay: block;\r\n\twhite-space: nowrap;\r\n\toverflow: hidden;\r\n\ttext-overflow: ellipsis;\r\n\ttransition: 0.5s;\r\n}\r\n\r\n.category {\r\n\t@include oneline;\r\n\r\n\twidth: 50%;\r\n\tfont-size: 20px !important;\r\n\tmargin-bottom: 0px !important;\r\n\r\n\ttransition: 0.5s;\r\n\r\n\tcolor: map-get($map: $amber, $key: \"700\");\r\n\r\n\t@media (max-width: 960px) {\r\n\t\tfont-size: 16px !important;\r\n\r\n\t\ttransition: 0.5s;\r\n\t}\r\n}\r\n```\r\n\r\n컨텐츠의 카테고리를 표시하는 SCSS의 일부다. `@mixin`, `@include` 구문을 통해 코드를 함수화하여 필요한 곳에서 호출하여 사용할 수 있었다.\r\n\r\n``` scss\r\n@mixin genColor($map, $str) {\r\n\t@each $key, $val in $map {\r\n\t\t.#{$str}-#{$key} {\r\n\t\t\tcolor: $val;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@include genColor($red, red);\r\n@include genColor($pink, pink);\r\n@include genColor($purple, purple);\r\n@include genColor($deepPurple, deepPurple);\r\n@include genColor($indigo, indigo);\r\n@include genColor($blue, blue);\r\n@include genColor($lightBlue, lightBlue);\r\n@include genColor($cyan, cyan);\r\n@include genColor($teal, teal);\r\n@include genColor($green, green);\r\n@include genColor($lightGreen, lightGreen);\r\n@include genColor($lime, lime);\r\n@include genColor($yellow, yellow);\r\n@include genColor($amber, amber);\r\n@include genColor($orange, orange);\r\n@include genColor($deepOrange, deepOrange);\r\n@include genColor($brown, brown);\r\n@include genColor($grey, grey);\r\n@include genColor($blueGrey, blueGrey);\r\n```\r\n\r\n`@mixin`은 타 언어의 메소드와 개념이 매우 유사하여, 코드의 중복을 효과적으로 방지할 수 있는 매력적인 예약어다.\r\n\r\n``` scss\r\n@import \"./fonts/apple.module.scss\";\r\n@import \"./fonts/blacksword.module.scss\";\r\n\r\n@import \"./common/color.module.scss\";\r\n@import \"./common/icons.scss\";\r\n\r\n@import \"./components/global/markdown.scss\";\r\n```\r\n\r\n`@import`로 다른 SCSS 파일을 삽입할 수 있다. 이러한 패턴으로 SCSS을 컴포넌트별로 관리할 수 있었으며, 코드의 길이가 늘어남을 방지하여 더 나은 유지보수 용이성을 제공했다.\r\n\r\n더 자세한 정보는 [SASS 공식 Document](https://sass-lang.com/documentation)에서 자세히 확인할 수 있다.\r\n\r\n# 정리\r\n\r\n큰 장점과 동반되는 여러 자잘한 단점들이 있었던 Typescript와 다르게, SCSS의 많은 장점에도 불구하고 그 단점은 거의 체감되지 않았다.\r\n\r\n앞으로의 모든 프로젝트에 SCSS를 적용시키고 싶을 정도로 개발 편의성이나 생산성을 향상시켜주지 않았나 싶다.\r\n\r\nSCSS의 개발환경 구축 필요성도, 어차피 내 블로그는 NextJS로 구성됐기 때문에 설정에서 몇 줄 추가하는 것 만으로 해결. 여러모로 만족스러운 경험이였다.","url":["2021-09-24-nextjs-reorganization-3","2021","09","24","nextjs-reorganization-3"]}},"group":[{"header":{"title":"[NextJS] 블로그 개편기 - 5. marked를 응용하여 코드블럭 디자인 개선하기","excerpt":"이전 장에서 marked를 활용하여 이 블로그만의 마크다운 변환기를 구현했다. 이 변환기를 활용하여 밋밋한 코드블럭을 좀 더 IDE 같게 개선해보자.","coverImage":"https://user-images.githubusercontent.com/50317129/134931033-89954c3d-5e00-4b3b-85aa-54a1dfa29e46.png","date":"2021-11-07T21:13:57","type":"posts","category":"NextJS","tag":["NextJS","React","Markdown","HTML","SCSS","TypeScript"],"group":"블로그 개편기","comment":true,"publish":true},"name":"2021-11-07-nextjs-reorganization-5.md","content":"\r\n# 개요\r\n\r\n이전 장에서 marked를 활용하여 이 블로그만의 마크다운 변환기를 구현했다. 이 변환기를 활용하여 밋밋한 코드블럭을 좀 더 IDE 같게 개선해보자.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 마크다운의 코드블럭\r\n\r\n마크다운은 백틱(backtick)을 통해 코드블럭을 작성한다. 코드블럭의 종류는 인라인(inline) 형태와 블럭(block) 형태가 있다.\r\n\r\n\r\n\r\n\r\n\r\n## 인라인형 코드블럭\r\n\r\n인라인형 코드블럭은 백틱을 한 번 사용하여 표기하며, 아래와 같은 특징이 있다.\r\n\r\n* 인라인 형태로 글 중간에 삽입하여 이어 쓰는 것이 가능\r\n* 리스트, 표 등 어느 형태에서든 사용이 가능\r\n\r\n`inline code block의 예시`는 이와 같다.\r\n\r\n\r\n\r\n\r\n\r\n## 블럭형 코드블럭\r\n\r\n블럭형 코드블럭은 백틱을 세 번 사용하여 표기하며, 아래와 같은 특징이 있다.\r\n\r\n* 블럭 형태로 온전히 한 공간을 차지함\r\n* 공간을 차지하므로, 글 중간에 이어 쓰거나, 리스트나 표에 쓰는 것이 불가능\r\n* `html`, `markdown` 등의 언어 지정을 지원하므로, 언어별로 디테일한 코드 표현이 가능\r\n\r\n``` javascript\r\nconst test = 'block codeblock test';\r\n\r\nalert(test);\r\n```\r\n\r\n블럭형 코드블럭의 예시는 위와 같다. GitHub와 같이 마크다운을 지원하는 사이트의 경우, 코드블럭을 통해 해당하는 언어의 하이라이팅을 지원하기도 한다.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 블럭형 코드블럭 디자인 개선하기\r\n\r\n인라인형과 코드형 중에서 블럭형 코드블럭의 디자인을 개선해보자. 블럭형의 경우 인라인형과 달리 블럭 형태로 하나의 구역을 차지하며, 코드를 표기하기 때문에 디자인할 요소가 많은 편이다.\r\n\r\n개선할 항목은 아래와 같다.\r\n\r\n* 기본적인 디자인 프레임 변경\r\n* 사용된 언어(JAVA, C# 등) 표시\r\n* 내용 복사 버튼 추가\r\n* 라인 숫자 표시\r\n* 라인별 색상 구분 표시\r\n* 마우스 오버 시 해당 라인 하이라이팅 구현\r\n\r\n순차적으로 기능을 추가해보자\r\n\r\n\r\n\r\n\r\n\r\n## 기본적인 디자인 프레임 변경하기\r\n\r\n밋밋한 형태의 코드블럭 디자인을 변경하자. 외국 블로그에서 봤었던 코드블럭 형태 중 이쁘다고 생각했던 디자인을 모티브로 만들었다.\r\n\r\n원랜 직접 보면서 디자인하려 했는데, 막상 찾으려고 하니 나오질 않아서 기억속에 어렴풋이 남아있는 디자인을 되짚어보며 구상했다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/140773168-5d03d708-dfd1-4f96-8aaa-0da1c0ab1a84.png)\r\n\r\n위와 같이 창 형태의 디자인을 취하며, 좌측 상단에 매킨토시의 창 컨텍스트가 달려있다.\r\n\r\n이미지를 사용할 수도 있겠지만, 태그로 구현할 수 있는건 가급적 태그로 구현하거나 정 여의치 않는다면 SVG로 구현하고자 하는 편이다. 이 디자인의 경우 복잡한 문양이 없으므로 HTML 태그 단계에서 모두 구현할 수 있을 것 같다.\r\n\r\n-- 사진 --\r\n\r\n적용할 레이아웃은 위와 같다. 이를 HTML로 나타내면 아래와 같다.\r\n\r\n``` html\r\n<div>\r\n\t<!-- 헤더 -->\r\n\t<div>\r\n\t\t<div><!-- 적색 버튼 --></div>\r\n\t\t<div><!-- 황색 버튼 --></div>\r\n\t\t<div><!-- 녹색 버튼 --></div>\r\n\t</div>\r\n\r\n\t<pre>\r\n\t\t<!-- 코드 내용 -->\r\n\t</pre>\r\n</div>\r\n```\r\n\r\n렌더러가 코드블럭을 위와 같은 디자인으로 렌더링하도록 변경하자.\r\n\r\n`marked`에서 블럭형 코드 블럭의 렌더러는 `renderer.code`로 정의된다. 해당 객체의 함수를 오버라이딩하면 된다.\r\n\r\n| 파라미터 |   형식   | 필수  | 내용  |\r\n| :------: | :------: | :---: | :---: |\r\n|  `code`  | `string` |   Y   | 코드  |\r\n|  `lang`  | `string` |   N   | 언어  |\r\n\r\n|   형식   |    내용     |\r\n| :------: | :---------: |\r\n| `string` | 렌더링 결과 |\r\n\r\n`renderer.code`의 파라미터와 반환값의 정의는 위 표와 같다. 위 정의에 부합하는 함수를 작성하면 된다.\r\n\r\n``` typescript\r\nloadLanguage([ 'javascript', 'typescript', 'java', 'html', 'css', 'json', 'scss', 'sass', 'sql', 'batch', 'bash' ]);\r\n\r\nconst renderer = new marked.Renderer();\r\n\r\n// 코드블럭 렌더링\r\nrenderer.code = (code: string, lang: string | undefined): string =>\r\n{\r\n\t// 유효한 언어가 있을 경우\r\n\tif (lang && renderer?.options?.highlight)\r\n\t{\r\n\t\tcode = renderer.options.highlight(code, lang as string) as string;\r\n\r\n\t\tconst langClass = 'language-' + lang;\r\n\r\n\t\treturn `\r\n\t\t\t<div class=\"codeblock\">\r\n\t\t\t\t<div class=\"top\">\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<pre class=\"${langClass}\">\r\n\t\t\t\t\t${code}\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\t// 없을 경우\r\n\telse\r\n\t{\r\n\t\tlang = 'unknown';\r\n\r\n\t\tconst langClass = 'language-' + lang;\r\n\r\n\t\treturn `\r\n\t\t\t<div class=\"codeblock\">\r\n\t\t\t\t<div class=\"top\">\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<pre class=\"${langClass}\">\r\n\t\t\t\t\t${code}\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n};\r\n```\r\n\r\n위와 같이 함수를 오버라이딩해서 블럭형 코드 블럭의 렌더링 결과를 변경한다.\r\n\r\n만약 언어가 같이 표기될 경우 `PrismJS`로 하이라이팅을 적용하고, 언어가 미표기될 경우 텍스트 그대로 코드 블럭에 지정하는 방식이다.\r\n\r\n각 태그가 레이아웃대로 위치하도록 스타일 코드를 지정한다.\r\n\r\n``` scss\r\n$fd: 18px;\r\n$fm: 14px;\r\n\r\npre[class*=\"language-\"],\r\ncode[class*=\"language-\"] {\r\n\t@include gutter;\r\n\r\n\tbackground-color: #161d2c;\r\n\tpadding: 55px 20px 20px 20px !important;\r\n\r\n\tborder-radius: 10px;\r\n\r\n\tfont-family: Hack, AppleSDGothicNeo, sans-serif;\r\n\tcolor: white;\r\n\r\n\ttext-align: left;\r\n\twhite-space: pre;\r\n\tword-spacing: normal;\r\n\tword-break: normal;\r\n\tword-wrap: normal;\r\n\r\n\t-webkit-hyphens: none;\r\n\t-moz-hyphens: none;\r\n\t-ms-hyphens: none;\r\n\thyphens: none;\r\n\r\n\toverflow: auto;\r\n}\r\n\r\ncode:not([class*=\"language-\"]) {\r\n\tcolor: white;\r\n\r\n\tfont-family: Hack, AppleSDGothicNeo, sans-serif;\r\n\tfont-size: $fd - 4px;\r\n\r\n\tdisplay: inline-block;\r\n\r\n\tpadding: 0px 4px;\r\n\tmargin: 0px 3px;\r\n\r\n\tborder-radius: 5px;\r\n\r\n\t@media (max-width: 960px) {\r\n\t\tfont-size: $fm - 4px;\r\n\t}\r\n}\r\n\r\n.codeblock {\r\n\tposition: relative;\r\n\r\n\t.top {\r\n\t\tposition: absolute;\r\n\r\n\t\ttop: 0px;\r\n\t\tleft: 0px;\r\n\r\n\t\twidth: 100%;\r\n\t\tpadding: 5px 20px;\r\n\r\n\t\tbackground-color: #2b3445;\r\n\r\n\t\tborder-top-left-radius: 10px;\r\n\t\tborder-top-right-radius: 10px;\r\n\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\r\n\t\talign-items: center;\r\n\r\n\t\tdiv {\r\n\t\t\twidth: 15px;\r\n\t\t\theight: 15px;\r\n\r\n\t\t\tborder-radius: 50%;\r\n\r\n\t\t\tmargin: 0px 5px;\r\n\r\n\t\t\t&:nth-child(2) {\r\n\t\t\t\tbackground-color: #fe5f57;\r\n\t\t\t}\r\n\r\n\t\t\t&:nth-child(3) {\r\n\t\t\t\tbackground-color: #ffbd2e;\r\n\t\t\t}\r\n\r\n\t\t\t&:nth-child(4) {\r\n\t\t\t\tbackground-color: #29c941;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n레이아웃에 지정된 스타일은 위와 같다.\r\n\r\n\r\n\r\n\r\n\r\n## 사용된 언어 표시하기\r\n\r\n사용된 언어를 표시해주면 사용자가 코드 블럭의 언어를 더욱 쉽게 파악할 수 있을 것이며, 작성자가 일일히 별도로 코드를 안내해주는 수고도 덜 수 있을 것이다.\r\n\r\n블럭형 코드 블럭의 렌더러 함수인 `renderer.code`에서 `lang` 파라미터에 사용된 언어가 할당된다. 우리는 이 파라미터를 통해 사용된 언어를 파악하고, 이를 적절히 사용할 수 있다.\r\n\r\n위 디자인 기준으로, 헤더 부분에 언어를 표시해주는 것이 좋아보인다.\r\n\r\n``` typescript\r\nloadLanguage([ 'javascript', 'typescript', 'java', 'html', 'css', 'json', 'scss', 'sass', 'sql', 'batch', 'bash' ]);\r\n\r\nconst renderer = new marked.Renderer();\r\n\r\n// 코드블럭 렌더링\r\nrenderer.code = (code: string, lang: string | undefined): string =>\r\n{\r\n\t// 유효한 언어가 있을 경우\r\n\tif (lang && renderer?.options?.highlight)\r\n\t{\r\n\t\tcode = renderer.options.highlight(code, lang as string) as string;\r\n\r\n\t\tconst langClass = 'language-' + lang;\r\n\r\n\t\treturn `\r\n\t\t\t<div class=\"codeblock\">\r\n\t\t\t\t<div class=\"top\">\r\n\t\t\t\t\t<p>${lang.toUpperCase()}</p>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<pre class=\"${langClass}\">\r\n\t\t\t\t\t${code}\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\t// 없을 경우\r\n\telse\r\n\t{\r\n\t\tlang = 'unknown';\r\n\r\n\t\tconst langClass = 'language-' + lang;\r\n\r\n\t\treturn `\r\n\t\t\t<div class=\"codeblock\">\r\n\t\t\t\t<div class=\"top\">\r\n\t\t\t\t\t<p>${lang.toUpperCase()}</p>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<pre class=\"${langClass}\">\r\n\t\t\t\t\t${code}\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n};\r\n```\r\n\r\n`div.top` 영역에 사용된 언어를 대문자로 표시하도록 구성한다.\r\n\r\n필요하다면 디자인을 수정해줄 수도 있다. 필자의 경우 폰트 색상 정도만 변경했다.\r\n\r\n``` scss\r\n.top {\r\n\t/* top scss 생략됨 */\r\n\r\n\tdiv {\r\n\t\twidth: 15px;\r\n\t\theight: 15px;\r\n\r\n\t\tborder-radius: 50%;\r\n\r\n\t\tmargin: 0px 5px;\r\n\r\n\t\tp {\r\n\t\t\tmargin: 0px;\r\n\t\t\tflex-grow: 1;\r\n\r\n\t\t\tcolor: map-get($yellow, \"400\");\r\n\t\t}\r\n\r\n\t\t&:nth-child(2) {\r\n\t\t\tbackground-color: #fe5f57;\r\n\t\t}\r\n\r\n\t\t&:nth-child(3) {\r\n\t\t\tbackground-color: #ffbd2e;\r\n\t\t}\r\n\r\n\t\t&:nth-child(4) {\r\n\t\t\tbackground-color: #29c941;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n`p` 태그의 스타일을 추가한다.\r\n\r\n\r\n\r\n\r\n\r\n## 내용 복사 버튼 추가하기\r\n\r\n개발자 친화적인 사이트의 코드블럭 대부분은 코드블럭의 내용을 복사하는 버튼을 제공한다. 이를 통해 사용자는 굳이 내용 전체를 드래그하지 않고도 코드블럭의 내용을 손쉽게 복사할 수 있다.\r\n\r\n블럭형 코드블럭 렌더링 시 버튼을 추가하고, 클릭 이벤트에 코드블럭의 내용을 복사하도록 지정하는 스크립트를 추가하면 될 것이다.\r\n\r\n``` html\r\n<button onclick=\"copyCode(this);\">\r\n\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\">\r\n\t\t<path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path>\r\n\t</svg>\r\n</button>\r\n```\r\n\r\n레이아웃은 위와 같다. 버튼 하나가 추가된다. 버튼 클릭 시, 버튼 레이아웃에 포함된 코드 블럭을 찾아 해당 내용을 클립보드에 저장하는 스크립트가 포함되어있다.\r\n\r\n버튼의 아이콘은 SVG로 사용했다.\r\n\r\n``` javascript\r\n/**\r\n * 코드 복사 함수\r\n *\r\n * @param {DOMElement} dom: HTML DOM\r\n */\r\nfunction copyCode(dom)\r\n{\r\n\twindow.getSelection().selectAllChildren(dom.parentElement.querySelector('pre'));\r\n\tdocument.execCommand('copy');\r\n\r\n\tconst origin = dom.innerHTML;\r\n\tdom.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" data-icon=\"check\" class=\"i-check\"><path fill=\"currentColor\" d=\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"></path></svg>';\r\n\r\n\tsetTimeout(() => dom.innerHTML = origin, 1000);\r\n}\r\n```\r\n\r\n코드 복사 메서드인 `copyCode`는 위와 같이 구성했다. 복사 버튼 상위의 가장 가까운 `pre` 태그를 찾아서, 해당 내용을 복사한다. 또한 약 1초 간 버튼의 SVG를 체크 아이콘으로 변경한다.\r\n\r\n``` scss\r\nbutton {\r\n\tposition: absolute;\r\n\r\n\ttop: 50px;\r\n\tright: 20px;\r\n\twidth: 40px;\r\n\theight: 40px;\r\n\r\n\tbackground-color: #1e2739;\r\n\tcursor: pointer;\r\n\r\n\tborder: 1px solid map-get($grey, \"600\");\r\n\tborder-radius: 10px;\r\n\r\n\topacity: 0;\r\n\r\n\ttransition: 0.5s;\r\n\r\n\t&:hover {\r\n\t\ttransition: 0.5s;\r\n\t}\r\n}\r\n```\r\n\r\n스타일 코드는 이와 같다. 항상 고정적인 위치에 나타나도록 absolute 기반의 레이아웃을 채택했다.\r\n\r\n이를 바탕으로 렌더러가 코드 블럭의 렌더링 과정에 추가하자.\r\n\r\n``` typescript\r\nloadLanguage([ 'javascript', 'typescript', 'java', 'html', 'css', 'json', 'scss', 'sass', 'sql', 'batch', 'bash' ]);\r\n\r\nconst renderer = new marked.Renderer();\r\n\r\n// 코드블럭 렌더링\r\nrenderer.code = (code: string, lang: string | undefined): string =>\r\n{\r\n\t// 유효한 언어가 있을 경우\r\n\tif (lang && renderer?.options?.highlight)\r\n\t{\r\n\t\tcode = renderer.options.highlight(code, lang as string) as string;\r\n\r\n\t\tconst langClass = 'language-' + lang;\r\n\r\n\t\treturn `\r\n\t\t\t<div class=\"codeblock\">\r\n\t\t\t\t<div class=\"top\">\r\n\t\t\t\t\t<p>${lang.toUpperCase()}</p>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<button onclick=\"copyCode(this);\">\r\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\">\r\n\t\t\t\t\t\t<path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path>\r\n\t\t\t\t\t</svg>\r\n\t\t\t\t</button>\r\n\r\n\t\t\t\t<pre class=\"${langClass}\">\r\n\t\t\t\t\t${code}\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\t// 없을 경우\r\n\telse\r\n\t{\r\n\t\tlang = 'unknown';\r\n\r\n\t\tconst langClass = 'language-' + lang;\r\n\r\n\t\treturn `\r\n\t\t\t<div class=\"codeblock\">\r\n\t\t\t\t<div class=\"top\">\r\n\t\t\t\t\t<p>${lang.toUpperCase()}</p>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<button onclick=\"copyCode(this);\">\r\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\">\r\n\t\t\t\t\t\t<path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path>\r\n\t\t\t\t\t</svg>\r\n\t\t\t\t</button>\r\n\r\n\t\t\t\t<pre class=\"${langClass}\">\r\n\t\t\t\t\t${code}\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n};\r\n```\r\n\r\n코드블럭에 버튼이 추가된다.\r\n\r\n\r\n\r\n\r\n\r\n## 라인 숫자 표시하기\r\n\r\n간혹 코드를 설명하다보면 코드의 특정 부분을 설명해야할 경우가 생긴다. 이 경우 보통 어느 줄의 코드를 보라는 식으로 안내하지만, 코드 블럭에 라인 숫자가 표시되지 않을 경우, 사용자가 직접 코드의 줄을 찾아 확인해야하는 번거로움이 생긴다. 만약 코드가 페이지를 넘어갈 정도로 길 경우 불편함은 배로 증가하며, 이는 컨텐츠의 질 마저 하락시키는 결과로 이어진다.\r\n\r\n사용자가 코드를 읽는데 좀 더 도움을 줄 수 있도록, 라인 숫자를 표시해보자.\r\n\r\n``` html\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><!-- 라인 넘버 --></td>\r\n\t\t\t<td><!-- 코드 --></td>\r\n\t\t</tr>\r\n\r\n\t\t<tr>\r\n\t\t\t<td><!-- 라인 넘버 --></td>\r\n\t\t\t<td><!-- 코드 --></td>\r\n\t\t</tr>\r\n\r\n\t\t<tr>\r\n\t\t\t<td><!-- 라인 넘버 --></td>\r\n\t\t\t<td><!-- 코드 --></td>\r\n\t\t</tr>\r\n\r\n\t\t<tr>\r\n\t\t\t<td><!-- 라인 넘버 --></td>\r\n\t\t\t<td><!-- 코드 --></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n```\r\n\r\n라인 숫자는 코드 라인과 동일한 크기를 가져야한다. 만약 조금이라도 픽셀 차이가 날 경우, 코드 라인이 많아지면 많아질 수록 이격이 발생하게 될 것이다.\r\n\r\n이러한 차이를 맞추기 위해서, 테이블 형태의 레이아웃을 채택했다. `tr` 태그를 하나의 라인으로, 아래 두 `td` 태그를 통해 하나는 라인 숫자, 다른 하나는 코드 영역으로 분리한다. 동일한 `tr` 내부의 `td`는 같은 줄에 위치하는 테이블의 특성을 적극 활용하면 레이아웃 CSS에 그리 많은 힘을 들이지 않아도 될 것이다.\r\n\r\n``` scss\r\ntable {\r\n\tborder-collapse: collapse;\r\n\r\n\t& td {\r\n\t\tline-height: $fd + 4px;\r\n\r\n\t\t@media (max-width: 960px) {\r\n\t\t\tline-height: $fm + 4px;\r\n\t\t}\r\n\t}\r\n\r\n\t& td:nth-child(1) {\r\n\t\tcolor: #455983;\r\n\t\tpadding-right: 10px;\r\n\r\n\t\tborder-right: 1px solid #455983;\r\n\r\n\t\ttext-align: right;\r\n\r\n\t\tuser-select: none;\r\n\t\t-moz-user-select: none;\r\n\t\t-webkit-user-select: none;\r\n\t}\r\n\r\n\t& td:nth-child(2) {\r\n\t\twidth: 100%;\r\n\r\n\t\tpadding: 0px 20px 0px 10px;\r\n\t}\r\n}\r\n```\r\n\r\n디자인은 위와 같다. 첫 번째 `td`에 숫자를 표시하고, `border-right` 속성을 통해 구분선을 표시한다. 이를 토대로 코드 블럭 렌더러를 변경하자.\r\n\r\n``` typescript\r\nloadLanguage([ 'javascript', 'typescript', 'java', 'html', 'css', 'json', 'scss', 'sass', 'sql', 'batch', 'bash' ]);\r\n\r\nconst renderer = new marked.Renderer();\r\n\r\n// 코드블럭 렌더링\r\nrenderer.code = (code: string, lang: string | undefined): string =>\r\n{\r\n\t// 유효한 언어가 있을 경우\r\n\tif (lang && renderer?.options?.highlight)\r\n\t{\r\n\t\tcode = renderer.options.highlight(code, lang as string) as string;\r\n\r\n\t\tconst langClass = 'language-' + lang;\r\n\r\n\t\tconst line = code.split('\\n').map((item, index) => `\r\n\t\t\t<tr data-line=${index + 1}>\r\n\t\t\t\t<td class=\"line-number\" data-number=\"${index + 1}\">${index + 1}</td>\r\n\t\t\t\t<td class=\"line-code\" data-number=${index + 1}>${item}</td>\r\n\t\t\t</tr>`).join('\\n').replace(/\\t|\\\\n/, '');\r\n\r\n\t\treturn `\r\n\t\t\t<div class=\"codeblock\">\r\n\t\t\t\t<div class=\"top\">\r\n\t\t\t\t\t<p>${lang.toUpperCase()}</p>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<button onclick=\"copyCode(this);\">\r\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\">\r\n\t\t\t\t\t\t<path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path>\r\n\t\t\t\t\t</svg>\r\n\t\t\t\t</button>\r\n\r\n\t\t\t\t<pre class=\"${langClass}\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<tbody>${line}</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\t// 없을 경우\r\n\telse\r\n\t{\r\n\t\tlang = 'unknown';\r\n\r\n\t\tconst langClass = 'language-' + lang;\r\n\r\n\t\tconst line = code.split('\\n').map((item, index) => `\r\n\t\t\t<tr data-line=${index + 1}>\r\n\t\t\t\t<td class=\"line-number\" data-number=\"${index + 1}\">${index + 1}</td>\r\n\t\t\t\t<td class=\"line-code\" data-number=${index + 1}>${item}</td>\r\n\t\t\t</tr>`).join('\\n').replace(/\\t|\\\\n/, '');\r\n\r\n\t\treturn `\r\n\t\t\t<div class=\"codeblock\">\r\n\t\t\t\t<div class=\"top\">\r\n\t\t\t\t\t<p>${lang.toUpperCase()}</p>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<button onclick=\"copyCode(this);\">\r\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\">\r\n\t\t\t\t\t\t<path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path>\r\n\t\t\t\t\t</svg>\r\n\t\t\t\t</button>\r\n\r\n\t\t\t\t<pre class=\"${langClass}\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<tbody>${line}</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n};\r\n```\r\n\r\n`map`을 통해 하나하나 `tr` 태그를 붙이므로, 이 과정에서 라인 숫자의 수를 파악할 수 있다. 첫 번째 `td`에 `map`의 인덱스 `index`가 지정되도록 구성했다. 태그의 의미론적인 측면을 강화하기 위해서 각 `tr`과 `td`의 `data-number` 속성으로 인덱스를 같이 지정한다. 인덱스의 시작이 0임에 주의하자.\r\n\r\n예를 들어, 126번 째 줄은 아래와 같이 렌더링될 것이다.\r\n\r\n``` html\r\n<tr data-number=\"126\">\r\n\t<td data-number=\"126\">126</td>\r\n\t<td data-number=\"126\"><!-- code --></td>\r\n</tr>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 라인별 색상 구분하기\r\n\r\n인터넷에서 빼곡히 적힌 글을 읽다보면 가끔 읽던 글의 위치를 헷갈리기도 한다. 특히 코드의 경우 그 특성 상 문장의 의미가 매우 옅으며 복잡하기 때문에 헷갈리는 정도가 더욱 심해진다.\r\n\r\n이러한 피로를 줄이기 위하여 라인별로 색상을 다르게 칠해주면 읽는 과정의 피로도를 줄일 수 있을 것이다. 홀수와 짝수 라인의 색상을 서로 다르게 지정하는 전통적인 방법을 사용할 것이다.\r\n\r\n다행히도, 우리는 라인 숫자를 표시하기 위해 하나의 라인을 `tr` 태그로 관리하고 있다. 즉, 홀수 `tr`과 짝수 `tr`의 색상을 다르게 지정해주면 된다. `CSS`의 `nth-child` 선택자를 사용하면 매우 간단하게 해결할 수 있을 것이다.\r\n\r\n``` scss\r\ntable {\r\n\t& tr:nth-child(2n) {\r\n\t\tbackground-color: #1c2335;\r\n\t}\r\n}\r\n```\r\n\r\n색상은 기존의 코드 블럭의 디자인에 적절히 어울릴 수 있도록, 기존의 배경색에서 살짝 옅은 색을 지정했다. 짝수 라인의 색상이 살짝 옅어지도록 지정될 것이다.\r\n\r\n\r\n\r\n\r\n\r\n## 마우스 오버 시 해당 라인 하이라이팅하기\r\n\r\n코드 블럭에 상호작용 기능을 하나 더 추가해보자. 코드 라인에 마우스를 올렸을 때, 해당 라인에 하이라이팅이 되도록 구현한다. 사용자는 코드 블럭에 마우스를 올림으로써 자신이 읽고 있는 코드의 가독성을 증폭시킬 수 있으며, 코드 블럭과의 상호작용을 통해 컨텐츠의 흥미 또한 이끌어낼 수 있을 것이다.\r\n\r\n위와 마찬가지로, `:hover` 선택자를 통해 순수 `CSS` 영역에서 해결할 수 있다.\r\n\r\n``` scss\r\ntable {\r\n\t& tr:hover {\r\n\t\tbackground-color: #546687;\r\n\r\n\t\t& td:first-child {\r\n\t\t\tcolor: white;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n이 정도면 될 것이다. `tr` 태그에 호버링을 할 경우, 해당 라인의 배경색과 라인 숫자를 밝은 색으로 변경한다. `transition` 속성을 주어 부드러운 시각효과를 기대할 수 있을 것이다.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 정리\r\n\r\n블로그 개편 과정에서 코드 블럭은 특히 신경을 많이 쓴 부분이였다. 디자인과 기능이 생각한대로 잘 뽑혀줘서 다행이다. `marked`를 적용한 이후로 렌더링 과정을 마음대로 커스터미이징할 수 있는 점을 적극 활용했다.\r\n\r\n다음은 수식을 표현하는 LaTeX를 적용해보자.","url":["2021-11-07-nextjs-reorganization-5","2021","11","07","nextjs-reorganization-5"]},{"header":{"title":"[NextJS] 블로그 개편기 - 4. marked를 활용한 마크다운 변환기 구현하기","excerpt":"정적 블로그는 마크다운을 적극적으로 사용한다. 일반적인 텍스트 기반에 매우 친숙하면서도 HTML과의 호환성 또한 매우 뛰어나기 때문이다. 기존의 블로그는 Remark, Rehype 플러그인을 사용했다. 여러 플러그인이 있어서 그냥저냥 사용하는덴 매우 편했지만, 사용자가 직접 변환과정을 커스터마이징하는 것이 매우 어려웠다. TOC, 코드블럭, 링크에 추가적인 기능, 디자인을 입히기 위해 HTML 태그를 입히고 싶은데, 관련 API가 없다보니 속절없이 주어진 태그만 그대로 사용할 수 밖에 없었다. 관련 정보를 찾아보던 중 marked 플러그인은 내가 원하는 요소를 충족시켜주는 것 같아, 블로그 개편 과정에서 마크다운 플러그인에도 많은 변화를 주었다. 이 장에서는 marked를 통해 마크다운을 HTML로 변환하는 과정에 대해 다룬다.","coverImage":"https://user-images.githubusercontent.com/50317129/134931033-89954c3d-5e00-4b3b-85aa-54a1dfa29e46.png","date":"2021-10-28T14:36:46","type":"posts","category":"NextJS","tag":["NextJS","React","Markdown"],"group":"블로그 개편기","comment":true,"publish":true},"name":"2021-10-28-nextjs-reorganization-4.md","content":"\r\n# 개요\r\n\r\n정적 블로그는 마크다운을 적극적으로 사용한다. 일반적인 텍스트 기반에 매우 친숙하면서도 HTML과의 호환성 또한 매우 뛰어나기 때문이다.\r\n\r\n기존의 블로그는 `Remark`, `Rehype` 플러그인을 사용했다. 여러 플러그인이 있어서 그냥저냥 사용하는덴 매우 편했지만, 사용자가 직접 변환과정을 커스터마이징하는 것이 매우 어려웠다.\r\n\r\nTOC, 코드블럭, 링크에 추가적인 기능, 디자인을 입히기 위해 HTML 태그를 입히고 싶은데, 관련 API가 없다보니 속절없이 주어진 태그만 그대로 사용할 수 밖에 없었다.\r\n\r\n관련 정보를 찾아보던 중 `marked` 플러그인은 내가 원하는 요소를 충족시켜주는 것 같아, 블로그 개편 과정에서 마크다운 플러그인에도 많은 변화를 주었다.\r\n\r\n이 장에서는 `marked`를 통해 마크다운을 HTML로 변환하는 과정에 대해 다룬다.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 왜 하필 마크다운인가?\r\n\r\n그런데 우리가 보통 웹 상에서 글을 쓸 때를 생각해보면 익숙하지 않은 개념이다. 웹에서 게시글을 쓸 상황. 이를 테면 게시판이나 메일을 작성할 때를 생각해봐도 마크다운은 들어보질 못 했을 것이다.\r\n\r\n그럼에도 불구하고 마크다운을 사용하는 이유가 뭘까? 마크다운을 사용하면 아래와 같은 장점이 있다.\r\n\r\n* HTML과의 호환성이 매우 뛰어나다.\r\n* 텍스트 기반이므로 HTML 방식에 비해 작성하기 용이하다.\r\n* HTML 지식이 없는 사람도 쉽게 HTML 문서를 작성할 수 있다.\r\n* HTML 주요 태그와 매칭되는 마크다운의 문법이 있으며, HTML에 비해 매우 쉽다.\r\n* 필요할 경우, 마크다운과 HTML 태그를 병행해서 입력할 수 있다.\r\n* 별도의 에디터(ex. 네이버 스마트 에디터)가 필요하지 않아 접근성이 뛰어나다.\r\n\r\n마크다운은 HTML과의 호환성이 매우 뛰어나며, 상호간의 변환이 매우 쉽다. 어찌됐든 웹 페이지에 적용하기 위해선 최종 결과물은 반드시 HTML 형태를 취하고 있어야한다.\r\n\r\n같은 내용을 직접 HTML로 작성한다면 HTML 특유의 태그 중심 문법으로 인해 작성 효율이 매우 떨어지게 된다. 당장 문장을 작성하는 것만 해도, 문장마다 `p` 태그로 감싸주는 행위를 해야만 한다.\r\n\r\n그에 비해 일반적인 텍스트를 작성하는 것과 거의 차이가 없는 마크다운은 사용자가 비교적 편하게 글을 작성할 수 있으면서도, HTML로 쉽게 변환할 수 있어 웹에 사용하기 매우 적합하다.\r\n\r\n또한 마크다운은 단순한 개념이 아닌, 파일 시스템에 확장자가 정의된 파일 형식이므로, 별다른 도구 없이 오프라인 환경에서도 메모장이나 vi 편집기만으로도 쉽게 작성할 수 있다.\r\n\r\n그 뿐만 아니라, 마크다운에 HTML 태그를 그대로 작성해도 알아서 변환을 해준다! 그말인즉슨, 작성자가 HTML에 대한 지식이 있다면 HTML 태그를 직접 입력하여 단순 텍스트에서 그치지 않고 더욱 다채로운 게시글을 작성할 수 있다.\r\n\r\n이러한 장점과 개발자 친화적인 특징으로 인해 개발 관련 플랫폼이나 정적 블로그에서 주로 사용한다.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# marked 적용하기\r\n\r\n아래와 같은 과정을 통해 `marked` 플러그인을 적용한다.\r\n\r\n\r\n\r\n\r\n\r\n## marked 설치\r\n\r\n``` bash\r\nnpm install marked --save-dev\r\n\r\nyarn add marked -dev\r\n```\r\n\r\n위 명령어를 통해 `marked`를 설치한다.\r\n\r\n\r\n\r\n\r\n\r\n## marked로 HTML 변환하기\r\n\r\n``` typescript\r\nconst marked = require('marked');\r\nconst body = `\r\n# h1 header\r\n\r\nLoren ipsum **test** area\r\n\r\n[link](https://blog.itcode.dev)\r\n\r\n![image](https://blog.itcode.dev/img/)\r\n\r\n<span class=\"red\">native html tag</span>\r\n`;\r\n\r\nconst result = marked(body);\r\n\r\n// HTML 내용 표시\r\nconsole.log(result.toString());\r\n```\r\n\r\n`marked`로 마크다운을 HTML로 변환하는 방법은 위와 같다.\r\n\r\n결과적으로 아래와 같이 변형된다.\r\n\r\n``` markdown\r\n# h1 header\r\n\r\nLoren ipsum **test** area\r\n\r\n[link](https://blog.itcode.dev)\r\n\r\n![image](https://blog.itcode.dev/img/)\r\n\r\n<span class=\"red\">native html tag</span>\r\n```\r\n\r\n``` html\r\n<h1 id=\"h1-header\">h1 header</h1>\r\n<p>Loren ipsum <strong>test</strong> area</p>\r\n<p><a href=\"https://blog.itcode.dev\">link</a></p>\r\n<p><img src=\"https://blog.itcode.dev/img/\" alt=\"image\"></p>\r\n<p><span class=\"red\">native html tag</span></p>\r\n```\r\n\r\n이렇게 마크다운이 HTML로 변환된다. 어떤 변환 플러그인을 사용하냐에 따라 조금씩 다르게 변환될 수 있다.\r\n\r\n\r\n\r\n\r\n\r\n## marked 심화기능\r\n\r\n사실상 `marked`를 사용하게 된 가장 큰 이유. `marked`는 API로 `renderer`와 `tokenizer`를 사용할 수 있다. 이 두 API를 통해 특정 태그의 변환을 커스터마이징할 수 있다. 굳이 쓸데없이 플러그인만 덕지덕지 붙이지 않아도 되며, 내가 직접 변환 과정을 설계할 수 있으니, 기능 개선이나 디자인도 쉽게 추가할 수 있을 것이다.\r\n\r\n`marked`의 HTML 변환 과정은 크게 토큰화롸 렌더링으로 나눌 수 있으며, 각각의 API를 통해 해당 과정을 직접 다뤄보자.\r\n\r\n\r\n\r\n### tokenizer\r\n\r\n`tokenizer`는 마크다운의 텍스트를 토큰으로 전환하는 방법을 정의한다. tokenizer를 지정하면 기존의 tokenizer와 병합되어 개발자가 작성한 tokenizer로 재정의된다.\r\n\r\n대충 기본적으로 설정된 토큰화 과정을 직접 커스터마이징할 수 있다는 것 같은데, 대체 토큰이라는 게 뭐고, 어디에 쓰는 걸까?\r\n\r\n마크다운은 자신의 문법을 매칭되는 HTML 태그로 변환한다. `marked`는 이 변환을 미리 정의하기 위해 토큰화 과정을 수행한다. 모든 마크다운 텍스트를 적절한 토큰으로 분류한다. 링크 문법 `[‌link](https://example.com)`은 링크 토큰으로, 이미지 문법 `![image](https://example.com/image.png)`는 이미지 토큰으로 분류하는 식이다. 이를 분류하기 위해 마크다운 문법 패턴을 정의하여 일치하는 문자열을 찾는 방식이다.\r\n\r\n만약 개발자가 특정 패턴의 문자열을 이미지 문법으로 추가하고 싶다면, 해당 문법을 가진 문자열을 찾아내어 이미지 토큰으로 치환하면 된다.\r\n\r\n``` typescript\r\n// marked 선언\r\nconst marked = require('marked');\r\n\r\n// tokenizer 재정의\r\nconst tokenizer = {\r\n  codespan(src) {\r\n    const match = src.match(/\\$+([^\\$\\n]+?)\\$+/);\r\n\r\n    // 패턴이 일치할 경우\r\n    if (match) {\r\n      return {\r\n        type: 'codespan',\r\n        raw: match[0],\r\n        text: match[1].trim()\r\n      };\r\n    }\r\n\r\n    return false;\r\n  }\r\n};\r\n\r\nmarked.use({ tokenizer });\r\n\r\n// 변환\r\nconsole.log(marked('$ latex code $\\n\\n` other code `'));\r\n```\r\n\r\n위 코드는 codespan 토큰을 재정의하는 것이다. codespan은 `이 문법`으로, 주로 코드를 표시할 때 사용한다.\r\n\r\n수학 수식을 표현하는 LaTeX는 달러를 wrapper로 사용하는데, 이는 마크다운의 공식 문법이 아니다. LaTeX를 사용하기 위해 달러로 감싸진 인라인 텍스트를 감지하여 codespan 토큰으로 지정한다. 이를 통해 $a\\sqrt{b^2}$와 같이 수식을 표시할 수 있다.\r\n\r\n`codespan(src)`에서 인수 `src`에 마크다운 텍스트가 들어온다. 정규식을 설계해서 원하는 문법의 패턴을 지정하고, 일치할 경우 원하는 토큰으로 재정의하면 된다. 만약 `false`를 반환할 경우, 기본 tokenizer 설정에 따른다.\r\n\r\n* type - 토큰 종류\r\n* raw - 토큰의 전체 내용\r\n* text - 토큰의 텍스트 내용\r\n\r\n토큰 객체의 내용은 위와 같다.\r\n\r\ncodespan 이외에도 table, header 같은 다양한 토큰을 재정의할 수 있다. 자세한 내용은 [marked 공식 문서 - tokenizer](https://marked.js.org/using_pro#tokenizer)에서 확인할 수 있다.\r\n\r\n\r\n\r\n### renderer\r\n\r\n`renderer`는 각 토큰을 HTML로 변환을 정의한다. 마크다운의 모든 텍스트는 정의된 패턴에 일치하는 토큰을 부여받으며, 렌더러가 해당 토큰을 분석하여 지정된 토큰의 HTML로 변환한다.\r\n\r\n즉, 태그를 어떻게 변환할지 개발자가 직접 정의할 수 있다.\r\n\r\n``` typescript\r\n// Create reference instance\r\nconst marked = require('marked');\r\n\r\n// Override function\r\nconst renderer = {\r\n  heading(text, level) {\r\n    const escapedText = text.toLowerCase().replace(/[^\\w]+/g, '-');\r\n\r\n    return `\r\n            <h${level}>\r\n              <a name=\"${escapedText}\" class=\"anchor\" href=\"#${escapedText}\">\r\n                <span class=\"header-link\"></span>\r\n              </a>\r\n              ${text}\r\n            </h${level}>`;\r\n  }\r\n};\r\n\r\nmarked.use({ renderer });\r\n\r\n// Run marked\r\nconsole.log(marked('# heading+'));\r\n```\r\n\r\n``` html\r\n<h1>\r\n  <a name=\"heading-\" class=\"anchor\" href=\"#heading-\">\r\n    <span class=\"header-link\"></span>\r\n  </a>\r\n  heading+\r\n</h1>\r\n```\r\n\r\n위 코드는 `h1`, `h2`와 같은 헤더 태그의 렌더링을 재정의한다. 위 과정은 헤더 태그 안에 링크를 집어넣어 헤더 클릭 시 해당 헤더를 포커싱하도록 프레임을 구성한다.\r\n\r\n`heading(text, level)`에서 `text` 인수는 헤더 태그의 내용을, `level` 인수는 헤더 태그의 depth를 의마한다. 만약 `h4`일 경우 `level`에 4가 할당된다.\r\n\r\n두 인수를 가지고 적절히 HTML 태그를 만들어서 반환해주면 된다. 헤더 외에도 여러 렌더러를 재정의할 수 있으며, 자세한 내용은 [marked 공식 문서 - renderer](https://marked.js.org/using_pro#renderer)에서 확인할 수 있다.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 정리\r\n\r\n`marked`는 HTML 변환과 관련된 다양하고 유용한 API를 제공한다. API를 잘 활용하면 블로그만의 독특한 마크다운 변환기를 구현할 수 있을 것이다.\r\n","url":["2021-10-28-nextjs-reorganization-4","2021","10","28","nextjs-reorganization-4"]},{"header":{"title":"[NextJS] 블로그 개편기 - 3. SCSS 입히기","excerpt":"원래 내 블로그는 JS-in-CSS 스타일 방식을 사용하고 있었다. 그 이유는 Material-UI 때문. Material-UI의 공식 예제에서 대놓고 JS-in-CSS 방식으로 설명하기 때문에, React 기초 수준이였던 난 당연히 이렇게 해야하는 줄 알고 있었다. 하지만 개발을 거듭하며, 그 중 몇몇은 복잡한 스타일을 강요받기도 하며 점점 스타일 구문이 비대해지는 컴포넌트가 생겨나기 시작했다. 이에 따라 JS-in-CSS의 단점이 점점 대두되기 시작했다. 대표적인 문제점으로 FOCU(Flash Of Unstyled Content). 스타일 렌더링에 시간이 소요되어, 사용자가 렌더링 이전의 페이지를 보게 되는 현상이다. 내 페이지의 경우 약 1초가 조금 안 되게 FOUC가 발생했는데, 사용자 경험을 극도로 해치는 일이였다. 블로그 개편을 마음먹게 된 가장 큰 이유 역시 이 FOCU 현상 때문이였으며, 관련 정보 조사 결과 CSS-in-CSS의 성능이 월등히 뛰어나다는 점을 확인했다.","coverImage":"https://user-images.githubusercontent.com/50317129/134931033-89954c3d-5e00-4b3b-85aa-54a1dfa29e46.png","date":"2021-09-24T13:17:24","type":"posts","category":"NextJS","tag":["NextJS","React","SCSS","CSS"],"group":"블로그 개편기","comment":true,"publish":true},"name":"2021-09-24-nextjs-reorganization-3.md","content":"\r\n# 개요\r\n\r\n원래 내 블로그는 JS-in-CSS 스타일 방식을 사용하고 있었다. 그 이유는 Material-UI 때문. Material-UI의 공식 예제에서 대놓고 JS-in-CSS 방식으로 설명하기 때문에, React 기초 수준이였던 난 당연히 이렇게 해야하는 줄 알고 있었다.\r\n\r\n하지만 개발을 거듭하며, 그 중 몇몇은 복잡한 스타일을 강요받기도 하며 점점 스타일 구문이 비대해지는 컴포넌트가 생겨나기 시작했다. 이에 따라 JS-in-CSS의 단점이 점점 대두되기 시작했다. 대표적인 문제점으로 FOCU(Flash Of Unstyled Content). 스타일 렌더링에 시간이 소요되어, 사용자가 렌더링 이전의 페이지를 보게 되는 현상이다. 내 페이지의 경우 약 1초가 조금 안 되게 FOUC가 발생했는데, 사용자 경험을 극도로 해치는 일이였다.\r\n\r\n블로그 개편을 마음먹게 된 가장 큰 이유 역시 이 FOCU 현상 때문이였으며, 관련 정보 조사 결과 CSS-in-CSS의 성능이 월등히 뛰어나다는 점을 확인했다.\r\n\r\n``` javascript\r\n/**\r\n * 스타일 객체 반환 함수\r\n *\r\n * @returns {JSON} 스타일 객체\r\n */\r\nfunction getStyles()\r\n{\r\n\treturn makeStyles((theme) => ({\r\n\t\tfab_bright: {\r\n\t\t\tposition: \"fixed\",\r\n\t\t\tbottom: 50,\r\n\t\t\tright: 50,\r\n\t\t\tbackgroundColor: grey[800],\r\n\t\t\tcolor: grey[200],\r\n\t\t\t\"&:hover\": {\r\n\t\t\t\tbackgroundColor: grey[700]\r\n\t\t\t},\r\n\t\t\t\"& svg\": {\r\n\t\t\t\tcolor: orange[600]\r\n\t\t\t},\r\n\t\t\t[theme.breakpoints.up(\"md\")]: {\r\n\t\t\t\t\"& span\": {\r\n\t\t\t\t\tmarginLeft: theme.spacing(1)\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[theme.breakpoints.down(\"sm\")]: {\r\n\t\t\t\tbottom: 70,\r\n\t\t\t\tright: 20\r\n\t\t\t}\r\n\t\t},\r\n\t\tfab_dark: {\r\n\t\t\tposition: \"fixed\",\r\n\t\t\tbottom: 50,\r\n\t\t\tright: 50,\r\n\t\t\tbackgroundColor: grey[200],\r\n\t\t\tcolor: grey[900],\r\n\t\t\t\"&:hover\": {\r\n\t\t\t\tbackgroundColor: grey[300]\r\n\t\t\t},\r\n\t\t\t\"& svg\": {\r\n\t\t\t\tcolor: blue[600]\r\n\t\t\t},\r\n\t\t\t[theme.breakpoints.up(\"md\")]: {\r\n\t\t\t\t\"& span\": {\r\n\t\t\t\t\tmarginLeft: theme.spacing(1)\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t[theme.breakpoints.down(\"sm\")]: {\r\n\t\t\t\tbottom: 70,\r\n\t\t\t\tright: 20\r\n\t\t\t}\r\n\t\t},\r\n\t\tdiv: {\r\n\t\t\theight: 24\r\n\t\t}\r\n\t}))();\r\n}\r\n```\r\n\r\n심지어 JS-in-CSS 시절의 스타일 구현 코드를 보면, 요소의 중첩이 적용되어있어 일반적인 CSS로는 그대로 옮기기 어려운 형태였다. 또한 CSS의 중첩을 접하게 되면서, 중첩이 주는 편의성에 익숙해진 터라 스타일만 CSS로 옳기면서 그 편의성만 그대로 유지하고 싶었다.\r\n\r\n결국 프로젝트에 CSS 전처리기를 적용하기로 결정했다.\r\n\r\n# CSS의 전처리기\r\n\r\nCSS의 전처리기는 여러 종류가 있다.\r\n\r\n* [SASS/SCSS](https://sass-lang.com)\r\n* [LESS](https://lesscss.org)\r\n* [Stylus](https://www.stylus.com)\r\n* [PostCSS](https://postcss.org)\r\n\r\nCSS 전처리기의 궁극적인 목표는 CSS의 확장성을 통해 개발에서의 여러 이점을 확보하는 것이다.\r\n\r\nCSS 전처리기를 사용하면 무려 파일에서 `@for`나 `@mixin`, 변수와 같은 동적 코딩이 가능해진다. 아쉽게도 전처리기 파일을 그대로 브라우저에서 사용할 순 없다. 역시나 이런 류의 다른 언어와 마찬가지로 컴파일이 필요하며, 컴파일의 결과물은 CSS 파일로 출력된다.\r\n\r\n즉, 컴파일 단계에서 CSS 전처리기 파일에 선언된 명령문이 동작하여 평범한 CSS로 출력되는 것이다.\r\n\r\n## 장점\r\n\r\n1. 반복적인 CSS 구문 축소\r\n2. 변수를 통한 일괄 관리\r\n3. 중첩을 통한 CSS 구문 가독성 확보\r\n4. 파일 분리를 통한 컴포넌트화 용이\r\n\r\n## 단점\r\n\r\n1. 전처리기별로 학습곡선 존재\r\n2. 별도의 개발환경 구축 필요\r\n\r\n# SCSS\r\n\r\n이 블로그에서 나는 SCSS를 차용했다. CSS 전처리기에 걸맞는 다양한 확장 구문을 사용할 수 있으면서도, 기존의 CSS 문법과 거의 차이가 없기 때문이다.\r\n\r\n원래 SCSS의 전신은 SASS로, Syntactically Awesome Style Sheets의 약자다. 한글로 직역하면 대충 문법적으로 개쩌는 스타일 시트 정도로 표현할 수 있다.\r\n\r\nSASS는 가장 처음으로 나온 전처리기로, Ruby 언어에 기반한 문법을 가지고 있어 CSS에서 바로 선회하기 어려운 부분이 많았다. 표현식이 달랐고, 문법에도 차이가 있었다.\r\n\r\n이후 SASS의 단점을 해소한 SCSS(Sassy CSS)나 나왔는데, CSS 전처리기의 확장성을 지니면서도 CSS의 문법과 매우 유사하다. 덕분에 전처리기 중에서도 러닝커브가 상당히 낮은 편이다.\r\n\r\n<br />\r\n<br />\r\n\r\nSCSS와 SASS의 차이는 아래의 예시에서 극명하게 드러난다.\r\n\r\n``` css\r\ndiv {\r\n\tcolor: grey;\r\n\r\n\twidth: 80px;\r\n\theight: 160px;\r\n}\r\n\r\ndiv h1 {\r\n\tcolor: dodgerblue;\r\n}\r\n```\r\n\r\n``` sass\r\n$length: 80px\r\n\r\ndiv\r\n\tcolor: grey\r\n\r\n\twidth: $length\r\n\theight: $length * 2\r\n\r\n\th1\r\n\t\tcolor: dodgerblue\r\n```\r\n\r\n``` scss\r\n$length: 80px;\r\n\r\ndiv {\r\n\tcolor: grey;\r\n\r\n\twidth: $length;\r\n\theight: $length * 2;\r\n\r\n\th1 {\r\n\t\tcolor: dodgerblue;\r\n\t}\r\n}\r\n```\r\n\r\n위 차이에서 알 수 있듯이, SASS는 CSS와 SCSS에 비해 표현식이 좀 다르다. 모티브로 삼은 언어가 서로 달라서 생긴 차이다.\r\n\r\n다행히도 후에 나온 SCSS는 SASS의 장점과 CSS의 문법을 그대로 흡수하여 흡사 CSS를 작성하는 것과 별반 차이가 없기에, 대부분 SCSS를 많이 차용하는 편이다. 실제로 SASS로 구현 가능한 건 SCSS로 전부 구현할 수 있으며, 심지어 공식 홈페이지에서도 SCSS를 권장하고 있다. 또한 SASS와 SCSS의 개발환경 역시 동일하다.\r\n\r\nSASS가 CSS 전처리기의 선두주자지만, 여러 이유로 후발주자인 SCSS가 더 많이 사용되고 있다. 하지만 이러한 상징성 및 이름의 유사성으로 인해 SASS와 SCSS를 구분없이 혼용하거나 그냥 둘 다 뭉뚱그려 SASS라고 표현하기도 한다.\r\n\r\n즉, `SASS = SCSS`라 봐도 무방하다.\r\n\r\n이렇게 다양한 장점들로 인해 SCSS를 차용하기로 결정했다.\r\n\r\n# 프로젝트에 SCSS 적용하기\r\n\r\nSCSS는 Typescript와 같이 별도의 템플릿은 없으므로, 직접 설정해야한다. 매우 쉬우니 겁먹지 않아도 된다.\r\n\r\n## SCSS Loader 설치하기\r\n\r\n``` bash\r\n# NPM 기반\r\nnpm install @zeit/next-sass --save-dev\r\n\r\n# Yarn 기반\r\nyarn add @zeit/next-sass --dev\r\n```\r\n\r\n위 명령어를 이용하여 SASS Loader를 설치한다. 내가 쓴 건 SCSS 아니냐고? 위에 언급했다시피 SASS와 SCSS의 개발환경이 동일하다. 컴파일러 역시 동일하므로, SASS Loader를 설치해도 아무 문제가 없다.\r\n\r\n## SCSS Loader 설정하기\r\n\r\n``` javascript\r\nconst withSass = require('@zeit/next-sass');\r\n\r\nmodule.exports = withSass();\r\n\r\n// 기존 next.config.js 내용 ...\r\n```\r\n\r\nNextJS의 설정파일인 `next.config.js`에 위 구문을 추가한다. `withSass()` 안엔 JSON 형태로 추가적인 옵션을 지정할 수 있다. 예를 들어, `@zeit/next-sass` 로더를 적용하면 CSS 파일들은 전부 SASS/SCSS로 변경하라는 문구와 함께 오류를 띄운다. 이 때, 아래와 같이 옵션을 주면 CSS도 병행해서 사용할 수 있다.\r\n\r\n``` javascript\r\nmodule.exports = withSass({\r\n\tcssModules: true\r\n});\r\n```\r\n\r\n[@zeit/next-sass NPM 저장소](https://www.npmjs.com/package/@zeit/next-sass)에서 자세한 옵션을 확인할 수 있다.\r\n\r\n이후 프로젝트에서의 사용은 CSS와 동일하다.\r\n\r\n# ScSS 톺아보기\r\n\r\nSCSS는 CSS의 전처리기로써 CSS에 없던 강력한 기능들을 제공한다. 보다보면 CSS 코딩하다 느낀 불편함을 해소해주거나, CSS에는 이런거 안 되나? 싶었던 기능들이 많다.\r\n\r\n## 변수 선언하기\r\n\r\n프로그래밍에서의 변수는 다양한 의미를 갖지만, 그 중에서도 특정 값을 하나의 변수에 할당하여 관리할 수 있다는 장점이 있다. 만약 해당 값을 바꿔야 할 경우, 변수가 없다면 해당 값을 쓰는 모든 코드를 변경했어야 한다.\r\n\r\n하지만 변수를 사용한다면 다 필요없이 변수에 할당된 값만 변경해주는 것으로 끝난다.\r\n\r\nCSS에는 본디 이런 기능이 없었으나, SCSS에선 변수의 존재로 인해 CSS를 좀 더 프로그래밍적인 측면에서 다가갈 수 있다.\r\n\r\n``` scss\r\n$base: 16px;\r\n\r\n.font-1 {\r\n\tfont-size: $base;\r\n}\r\n\r\n.font-2 {\r\n\tfont-size: $base + 2px;\r\n}\r\n\r\n.font-3 {\r\n\t$color: dodgerblue;\r\n\r\n\tfont-size: $base + 4px;\r\n\r\n\tbackground-color: $color;\r\n\tborder: 1px solid $color;\r\n}\r\n```\r\n\r\n``` css\r\n.font-1 {\r\n\tfont-size: 16px;\r\n}\r\n\r\n.font-2 {\r\n\tfont-size: 18px;\r\n}\r\n\r\n.font-3 {\r\n\tfont-size: 20px;\r\n\tbackground-color: dodgerblue;\r\n\tborder: 1px solid dodgerblue;\r\n}\r\n```\r\n\r\n이와 같이 $ 기호를 통해 변수를 사용할 수 있다. 일반적인 할당은 물론, 사칙연산도 가능하다. 변수의 값은 CSS에서 사용할 수 있는 모든 값(#05A46B, skyblue, \"나눔고딕\", 38px 등)을 할당할 수 있다.\r\n\r\nSCSS의 `base`는 전역변수로 어디서나 호출할 수 있다. `color`는 지역변수로 `.font-3` 블럭과 중첩된 하위 블럭에서만 호출할 수 있다.\r\n\r\n> <b class=\"orange-400\">🔍변수의 범위(scope)</b>  \r\n> SCSS의 변수는 자신만의 범위를 가진다. 블럭 내부에 선언된 변수는 중첩된 하위 블럭에서 호출할 수 있다. 반대로 하위 블럭에서 선언된 변수는 상위 블럭에서 호출할 수 없다. 블럭이 아닌 파일 자체에 선언될 경우 <span class=\"primary\">전역변수</span>로 지정되어 파일에 선언된 모든 곳에서 호출할 수 있다.\r\n\r\n### 전역변수 선언하기\r\n\r\n``` scss\r\n.font-1 {\r\n    $base: 16px !global;\r\n\tfont-size: $base;\r\n}\r\n\r\n.font-2 {\r\n\tfont-size: $base + 2px;\r\n}\r\n\r\n.font-3 {\r\n\t$color: dodgerblue;\r\n\r\n\tfont-size: $base + 4px;\r\n\r\n\tbackground-color: $color;\r\n\tborder: 1px solid $color;\r\n}\r\n```\r\n\r\n파일 외부에서 쓰는 것 외에도, `!global` 지시어를 사용하면 어디서나 전역변수를 선언할 수 있다. 단, 이렇게 블럭 내부에서 `!global`로 선언된 전역변수는 <span class=\"red-400\">해당 블럭 이후의 코드에서만 접근 가능</span>하다.\r\n\r\n만약 `base` 변수가 `.font-2`에서 전역변수로 선언되었다면, `.font-1` 블럭에서는 접근할 수 없다.\r\n\r\n## 리스트 선언하기\r\n\r\n단순 값 뿐만 아니라 리스트도 선언할 수 있다.\r\n\r\n``` scss\r\n$bright: #000000, #444444, #888888, #BBBBBB, #FFFFFF;\r\n\r\n$list: red, #FF00FF, \"Arial\", 16px;\r\n```\r\n\r\n리스트는 쉼표로 구분한다. 리스트 데이터의 타입이 동일할 필요는 없다.\r\n\r\n### 리스트 다루기\r\n\r\n``` scss\r\n$bright: #000000, #444444, #888888, #BBBBBB, #FFFFFF;\r\n\r\n// => #888888\r\nnth($bright, 3);\r\n\r\n// => #888888이 #777777로 교체됨\r\nset-nth($bright, 3, #777777);\r\n\r\n// => bright에 #EEEEEE가 추가됨\r\nappend($bright, #EEEEEE);\r\n```\r\n\r\n리스트의 기초적인 문법은 위와 같다. 또한 `@each`를 통해 타 언어의 `foreach`를 구현할 수 있다.\r\n\r\n``` scss\r\n$color: white, red, green, blue, black;\r\n\r\n@each $item in $color {\r\n\t.font-#{$item} {\r\n\t\tcolor: $item;\r\n\t}\r\n}\r\n```\r\n\r\n``` css\r\n.font-white {\r\n\tcolor: white;\r\n}\r\n\r\n.font-red {\r\n\tcolor: red;\r\n}\r\n\r\n.font-green {\r\n\tcolor: green;\r\n}\r\n\r\n.font-blue {\r\n\tcolor: blue;\r\n}\r\n\r\n.font-black {\r\n\tcolor: black;\r\n}\r\n```\r\n\r\n`@each`를 이용하면 반복적인 구문을 쉽게 만들 수 있다.\r\n\r\n## Map 선언하기\r\n\r\n위의 리스트가 단순한 요소만으로 이루어졌다면, Map은 우리가 흔히 아는 key-value 형태의 변수다.\r\n\r\n``` scss\r\n$map: (shorter: 20px, short: 40px, normal: 60px, long: 80px, longer: 100px);\r\n\r\n$map: (a: 20px, b: red, c: #00DE00, d: \"Arial\", e: center);\r\n```\r\n\r\nMap의 key-value는 위와 같이 표기한다. 리스트와 마찬가지로 요소의 타입은 자유롭게 선언 가능하다.\r\n\r\n### Map 다루기\r\n\r\n``` scss\r\n$map: (shorter: 20px, short: 40px, normal: 60px, long: 80px, longer: 100px);\r\n\r\n// => 20px\r\nmap-get($map, shorter);\r\n\r\n// => longer의 100px가 120px로 교체됨\r\nmap-set($bright, longer, 120px);\r\n\r\n// => shorter, short, ..., longer 순으로 맵의 키 리스트 배열 반환\r\nmap-keys($bright);\r\n\r\n// => 20px, 40px, ..., 100px 순으로 맵의 값 리스트 배열 반환\r\nmap-values($bright);\r\n```\r\n\r\n위와 같이 Map을 다룰 수 있다.\r\n\r\n## @if, @else if, @else 사용하기\r\n\r\n익숙한 조건문이다. SCSS는 위와 같은 지시어로 조건문을 구현할 수 있으며, 우리가 흔히 아는 방식과 매우 유사하다.\r\n\r\n``` scss\r\n@mixin box($size, $platform) {\r\n\twidth: $size;\r\n\theight: $size;\r\n\r\n\t@if $platform == \"naver\" {\r\n\t\tbackground-color: #03C75A;\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t@else if $platform == \"kakao\" {\r\n\t\tbackground-color: #FEE500;\r\n\t\tcolor: black;\r\n\t}\r\n\r\n\t@else {\r\n\t\tbackground-color: white;\r\n\t\tcolor: black;\r\n\t}\r\n}\r\n\r\n$box-size: 50px;\r\n\r\n.auth[data-platform=naver] {\r\n\t@include box($box-size, \"naver\");\r\n}\r\n\r\n.auth[data-platform=kakao] {\r\n\t@include box($box-size, \"kakao\");\r\n}\r\n\r\n.auth[data-platform=google] {\r\n\t@include box($box-size, \"google\");\r\n}\r\n```\r\n\r\n``` css\r\n.auth[data-platform=naver] {\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color: #03C75A;\r\n  color: white;\r\n}\r\n\r\n.auth[data-platform=kakao] {\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color: #FEE500;\r\n  color: black;\r\n}\r\n\r\n.auth[data-platform=google] {\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color: white;\r\n  color: black;\r\n}\r\n```\r\n\r\n이와 같이 값에 따라 SCSS를 다르게 적용할 수 있다. 이를 응용하여 특정 조건에서는 추가적인 스타일을 지정하거나 제외하는 방식도 구성할 수 있다.\r\n\r\n사용법은 우리가 흔히 아는 조건문과 매우 유사하니 어렵지 않을 것이다.\r\n\r\n## @for 사용하기\r\n\r\n무릇 프로그래밍 언어라면 하나쯤은 제공하는 반복문이다. SCSS는 `@for`의 형태로 제공한다.\r\n\r\n``` scss\r\n$base-color: #036;\r\n\r\n@for $i from 1 through 3 {\r\n  ul:nth-child(3n + #{$i}) {\r\n    background-color: lighten($base-color, $i * 5%);\r\n  }\r\n}\r\n```\r\n\r\n``` css\r\nul:nth-child(3n + 1) {\r\n  background-color: #004080;\r\n}\r\n\r\nul:nth-child(3n + 2) {\r\n  background-color: #004d99;\r\n}\r\n\r\nul:nth-child(3n + 3) {\r\n  background-color: #0059b3;\r\n}\r\n```\r\n\r\n위와 같이 사용 가능하다. `$i`는 임의로 지정하는 키 인덱스 변수이며, 1 부터 3까지 반복한다.\r\n\r\n## @mixin와 @include\r\n\r\nCSS를 쓰다보면 한 번 쯤 타 언어의 함수 개념을 적용하고 싶다는 생각이 들 것이다.\r\n\r\n기존의 CSS는 함수 개념이 존재하지 않아, 동일한 코드를 쓰기 위해선 동일한 선택자를 사용하거나, 어쩔 수 없이 중복 코드를 사용해야만 했다.\r\n\r\n하지만 SCSS에선 `@mixin` 문법을 통해 코드의 스니펫을 저장하고 이를 적재적소에 사용할 수 있다.\r\n\r\n``` scss\r\n@mixin square($size, $color) {\r\n\twidth: $size;\r\n\theight: $size;\r\n\r\n\tbackground-color: $color;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: transparent;\r\n\r\n\t\tborder: 1px solid $color;\r\n\t}\r\n}\r\n\r\n.box {\r\n\t@include square(20px, red);\r\n\t\r\n\tbox-shadow: 1px 1px 10px grey;\r\n}\r\n```\r\n\r\n``` css\r\n.box {\r\n\twidth: 20px;\r\n\theight: 20px;\r\n\tbackground-color: red;\r\n\tbox-shadow: 1px 1px 10px grey;\r\n}\r\n\r\n.box:hover {\r\n\tbackground-color: transparent;\r\n\tborder: 1px solid red;\r\n}\r\n```\r\n\r\n위와 같이 `@mixin`으로 `square()`라는 스니펫을 선언했다. 이 스니펫은 `size`, `color`라는 인수를 받는다.\r\n\r\n원하는 블럭에서 `@include`를 통해 해당 스니펫을 호출하면 그 블럭에 호출한 스니펫이 포함된다. 코드의 중복을 효과적으로 없애주어 유지보수의 난이도를 낮출 수 있으며, 이러한 패턴은 컴포넌트별로 스타일을 관리하기에도 매우 용이하다.\r\n\r\n`@include` 사용 시 `@mixin`이 별도의 인수를 받지 않을 경우 괄호를 생략해도 무관하다.\r\n\r\n## @import로 파일 합치기\r\n\r\n`@import`는 다른 SCSS 파일을 삽입하여 해당 파일의 내용에 덧대어 SCSS를 작성할 수 있다.\r\n\r\n공통 혹은 모듈화된 SCSS를 별도의 파일로 관리하며, 해당 모듈이 필요한 SCSS에 `@import`를 통해 삽입함으로써 SCSS의 모듈화를 구현할 수 있다.\r\n\r\n``` scss\r\n// box.scss\r\n@mixin square($size, $color) {\r\n\twidth: $size;\r\n\theight: $size;\r\n\r\n\tbackground-color: $color;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: transparent;\r\n\r\n\t\tborder: 1px solid $color;\r\n\t}\r\n}\r\n\r\n.box {\r\n\t@include square(20px, red);\r\n\t\r\n\tbox-shadow: 1px 1px 10px grey;\r\n}\r\n```\r\n\r\n``` scss\r\n@import \"./box.scss\";\r\n\r\n// require-box.scss\r\n.require-box {\r\n\t@include square(20px, dodgerblue);\r\n\t\r\n\tbackground-color: grey;\r\n}\r\n```\r\n\r\n``` css\r\n/* require-box.css */\r\n.box {\r\n\twidth: 20px;\r\n\theight: 20px;\r\n\tbackground-color: red;\r\n\tbox-shadow: 1px 1px 10px grey;\r\n}\r\n\r\n.box:hover {\r\n\tbackground-color: transparent;\r\n\tborder: 1px solid red;\r\n}\r\n\r\n.require-box {\r\n\twidth: 20px;\r\n\theight: 20px;\r\n\tbackground-color: dodgerblue;\r\n\tbox-shadow: 1px 1px 10px grey;\r\n}\r\n\r\n.require-box:hover {\r\n\tbackground-color: transparent;\r\n\tborder: 1px solid dodgerblue;\r\n}\r\n```\r\n\r\n`@import` 지시어 뒤에 삽입할 파일의 경로를 입력하면 된다.\r\n\r\n임의의 SCSS인 `box.scss`와 이를 삽입하여 작성한 `require-box.scss`가 있다고 가정하자. 컴파일 결과물인 `require-box.css`에는 위와 같이 `box.scss`와 `require-box.scss`의 내용이 합쳐진 결과물이 컴파일된다.\r\n\r\n`require-box.scss`는 `box.scss`를 삽입함으로써 `box.scss`에 선언된 전역 변수 혹은 스니펫 등을 사용할 수 있다. 그러나 `box.scss`에 선언된 내용으로 인해 원하지 않는 영향을 받을 가능성이 있으니 설계시 유의하자.\r\n\r\n# 예시\r\n\r\n``` scss\r\n@mixin oneline {\r\n\tdisplay: block;\r\n\twhite-space: nowrap;\r\n\toverflow: hidden;\r\n\ttext-overflow: ellipsis;\r\n\ttransition: 0.5s;\r\n}\r\n\r\n.category {\r\n\t@include oneline;\r\n\r\n\twidth: 50%;\r\n\tfont-size: 20px !important;\r\n\tmargin-bottom: 0px !important;\r\n\r\n\ttransition: 0.5s;\r\n\r\n\tcolor: map-get($map: $amber, $key: \"700\");\r\n\r\n\t@media (max-width: 960px) {\r\n\t\tfont-size: 16px !important;\r\n\r\n\t\ttransition: 0.5s;\r\n\t}\r\n}\r\n```\r\n\r\n컨텐츠의 카테고리를 표시하는 SCSS의 일부다. `@mixin`, `@include` 구문을 통해 코드를 함수화하여 필요한 곳에서 호출하여 사용할 수 있었다.\r\n\r\n``` scss\r\n@mixin genColor($map, $str) {\r\n\t@each $key, $val in $map {\r\n\t\t.#{$str}-#{$key} {\r\n\t\t\tcolor: $val;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@include genColor($red, red);\r\n@include genColor($pink, pink);\r\n@include genColor($purple, purple);\r\n@include genColor($deepPurple, deepPurple);\r\n@include genColor($indigo, indigo);\r\n@include genColor($blue, blue);\r\n@include genColor($lightBlue, lightBlue);\r\n@include genColor($cyan, cyan);\r\n@include genColor($teal, teal);\r\n@include genColor($green, green);\r\n@include genColor($lightGreen, lightGreen);\r\n@include genColor($lime, lime);\r\n@include genColor($yellow, yellow);\r\n@include genColor($amber, amber);\r\n@include genColor($orange, orange);\r\n@include genColor($deepOrange, deepOrange);\r\n@include genColor($brown, brown);\r\n@include genColor($grey, grey);\r\n@include genColor($blueGrey, blueGrey);\r\n```\r\n\r\n`@mixin`은 타 언어의 메소드와 개념이 매우 유사하여, 코드의 중복을 효과적으로 방지할 수 있는 매력적인 예약어다.\r\n\r\n``` scss\r\n@import \"./fonts/apple.module.scss\";\r\n@import \"./fonts/blacksword.module.scss\";\r\n\r\n@import \"./common/color.module.scss\";\r\n@import \"./common/icons.scss\";\r\n\r\n@import \"./components/global/markdown.scss\";\r\n```\r\n\r\n`@import`로 다른 SCSS 파일을 삽입할 수 있다. 이러한 패턴으로 SCSS을 컴포넌트별로 관리할 수 있었으며, 코드의 길이가 늘어남을 방지하여 더 나은 유지보수 용이성을 제공했다.\r\n\r\n더 자세한 정보는 [SASS 공식 Document](https://sass-lang.com/documentation)에서 자세히 확인할 수 있다.\r\n\r\n# 정리\r\n\r\n큰 장점과 동반되는 여러 자잘한 단점들이 있었던 Typescript와 다르게, SCSS의 많은 장점에도 불구하고 그 단점은 거의 체감되지 않았다.\r\n\r\n앞으로의 모든 프로젝트에 SCSS를 적용시키고 싶을 정도로 개발 편의성이나 생산성을 향상시켜주지 않았나 싶다.\r\n\r\nSCSS의 개발환경 구축 필요성도, 어차피 내 블로그는 NextJS로 구성됐기 때문에 설정에서 몇 줄 추가하는 것 만으로 해결. 여러모로 만족스러운 경험이였다.","url":["2021-09-24-nextjs-reorganization-3","2021","09","24","nextjs-reorganization-3"]},{"header":{"title":"[NextJS] 블로그 개편기 - 1. Record One","excerpt":"인터넷으로 알음알음 React를 배워, 뭣도 모르고 호기롭게 블로그를 개발한지가 5월이였다. 그 때만 해도 이 재밌는 걸 가지고 뭐라도 만들어보고 싶다는 강한 열망에 사로잡혔었는데, 그 때 눈에 보였던 게 개발 블로그였다. 그 때 내가 사용하던 블로그는 Jekyll 기반의 GitHub 블로그였는데, 재밌어보여서 시작했다가 며칠 안 가 관둔지가 1년이 넘었었다. 블로그에 흥미가 떨어진 이유 중 하나가 뭐 좀 할라치면 남이 작성한 코드를 일일히 분석한다는 스트레스였다. 개발 블로그를 보자마자 떠오른 내 머릿속의 흐름은 대충 저랬다.","coverImage":"https://user-images.githubusercontent.com/50317129/134931033-89954c3d-5e00-4b3b-85aa-54a1dfa29e46.png","date":"2021-09-21T03:22:35","type":"posts","category":"NextJS","tag":["NextJS","React"],"group":"블로그 개편기","comment":true,"publish":true},"name":"2021-09-21-nextjs-reorganization-1.md","content":"\r\n# 개요\r\n\r\n인터넷으로 알음알음 <span class=\"lightBlue-600\">React</span>를 배워, 뭣도 모르고 호기롭게 블로그를 개발한지가 5월이였다. 그 때만 해도 이 재밌는 걸 가지고 뭐라도 만들어보고 싶다는 강한 열망에 사로잡혔었는데, 그 때 눈에 보였던 게 개발 블로그였다.\r\n\r\n그 때 내가 사용하던 블로그는 <span class=\"pink-600\">Jekyll</span> 기반의 GitHub 블로그였는데, 재밌어보여서 시작했다가 며칠 안 가 관둔지가 1년이 넘었었다. 블로그에 흥미가 떨어진 이유 중 하나가 뭐 좀 할라치면 남이 작성한 코드를 일일히 분석한다는 스트레스였다. 개발 블로그를 보자마자 떠오른 내 머릿속의 흐름은 대충 저랬다.\r\n\r\n1. 나 빼고 다 하는 개발 블로그 나도 다시 해야하지 않나?\r\n2. 저번에 테마 받아서 만들어둔거, 여기서기 수정해서 소스도 개판이라 다시 쳐다보기 싫은데....\r\n3. 정적 블로그는 백엔드 롤도 없어서 간단하니 내 React 지식 정도로도 만들 수 있지 않을까?\r\n4. 내 개발 블로그를 내가 직접 만들면 개발자로써의 보람도 있을 것 같은데..\r\n5. 내가 만들었으니 꾸준히 관리할 수 있지 않을까? 어차피 다 내가 짠거잖아?\r\n\r\n거기까지 생각이 미친 난 블로그 개발을 시작했고, 퇴근 후 틈틈히 만들다보니 기간은 한 두달? 정도 걸리지 않았나 싶다.\r\n\r\n나름 머릿속에 구상한 디자인은 얼추 잘 나온 것 같았는데, 문제가 생겼다. <span class=\"red-600\">블로그가 느려도 너무 느렸다.</span> HTML 레이아웃이 뜨고 난 뒤, CSS가 입혀 렌더링되기까지 과정이 눈에 보일 정도였다. 더군다나 정적임에도 불구하고 라우팅엔 뭐가 그리 시간이 필요한지...\r\n\r\n참고 쓰다가, 이렇게 놔뒀다가는 <span class=\"blue-500\">\"내가 직접 개발했어요!\"</span>라는 말이 <span class=\"blue-500\">\"내가 이렇게 실력이 병x신 같습니다 엌ㅋㅋㅋㅋㅋ\"</span>이나 마찬가질거란 생각이 들었다. 더군다나 구글이나 네이버에 검색 등록도 해야하는데 이러면 전세계 사람들에게까지 광고하는 꼴이니 이대로는 안 됐다.\r\n\r\n그렇게 난 첫 배포 두 달만에 대대적인 개편을 시작했다. 개편 과정에서 처음 접해보는 언어나 여러 시행착오가 있었기에, 혹시 나와 비슷한 문제로 고통받는 영혼들이 조금이나마 쉴 수 있도록 개발기를 작성한다.\r\n\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n\r\n<del class=\"grey-500\">사실 추석이라 심심하다.</del>","url":["2021-09-21-nextjs-reorganization-1","2021","09","21","nextjs-reorganization-1"]}],"data":{"header":{"title":"[NextJS] 블로그 개편기 - 2. Typescript 입히기","excerpt":"내가 JavaScript를 접하고 기본 개념 정도에 익숙해졌을 때, 개발 커뮤니티에서 전설처럼 들려오던 이야기를 듣게 되었다.","coverImage":"https://user-images.githubusercontent.com/50317129/134931033-89954c3d-5e00-4b3b-85aa-54a1dfa29e46.png","date":"2021-09-21T05:30:21","type":"posts","category":"NextJS","tag":["NextJS","React","TypeScript"],"group":"블로그 개편기","comment":true,"publish":true},"name":"2021-09-21-nextjs-reorganization-2.md","content":"<h1 id=\"개요\">개요 <a href=\"#개요\">🔗</a></h1><p>내가 JavaScript를 접하고 기본 개념 정도에 익숙해졌을 때, 개발 커뮤니티에서 전설처럼 들려오던 이야기를 듣게 되었다.</p>\n<br />\n<br />\n<br/ >\n\n<p class=\"grey-500\" align=\"center\"><i>-----</i></p>\n\n<p class=\"grey-500\" align=\"center\"><i>\"태초의 개발자들은 웹에서 다양한 동작을 수행하기 위해 스크립트 언어를 사용했다고 하는데, 그 것이 오늘날 자바스크립트라고 불리우는 것이라 했다.\"</i></p>\n\n<p class=\"grey-500\" align=\"center\"><i>\"수 십년에 이르는 자바스크립트의 독재로, 개발자들은 스크립트를 사용하기 위해 반드시 자바스크립트를 거쳐야만 했다고 한다.\"</i></p>\n\n<p class=\"grey-500\" align=\"center\"><i>\"자바스크립트는 강력했으나 그 성격이 나태로워, 자신이 사용할 인수를 검사하지 않았으며, 인수에 대한 모든 책임은 전적으로 개발자가 지는 부당한 처우를 받았다.\"</i></p>\n\n<p class=\"grey-500\" align=\"center\"><i>\"하루는 자신이 받아야할 인수로 문자열이 아닌, 수상한 객체가 들어왔음에도 이를 제대로 확인하지 않아 누군가의 사이트에 큰 화를 입혔으며, 그 사이트의 담당자는 이틀을 귀가하지 못 하고 고통받았다고 한다.\"</i></p>\n\n<br />\n<br />\n<br/ >\n\n<p class=\"grey-500\" align=\"center\"><i>\"어느날 스크립트 중 타입을 가진 이가 나타났다.\"</i></p>\n\n<p class=\"grey-500\" align=\"center\"><i>\"그 자는 특이하게 인수를 직접 검증할 수 있어, 잘 못 들어온 인수를 차단하고 오로지 올바른 인수만을 받는 일을 능히 하였다. 그의 권능으로 타입스크립트를 쓰는 IDE와 개발자는 그의 타입을 쉬이 유추하여 화를 막을 수 있었다고 전해진다.\"</i></p>\n\n<p class=\"grey-500\" align=\"center\"><i>\"그 자가 현신하는 날. ECMA에 새로운 혁명이 일어나 개발자들을 구원해주리라.\"</i></p>\n\n<p class=\"grey-500\" align=\"center\"><i>-----</i></p>\n\n<br />\n<br />\n<br />\n\n<p>나는 이 전설같은 이야기에 매료되었으나, 감히 타입스크립트가 이 곳에 현신할리는 없다 생각했다.</p>\n<p>그러던 어느 날, 내가 블로그 개편을 마음먹은 당일에 내 코드에 당도하시어 친히 자신의 권능을 보이셨다.</p>\n<p>이제 난 자바스크립트의 모호함과 허술함에서 구원될 수 있으리라 믿었다.</p>\n<br />\n<br />\n<br />\n\n<p>하지만 내가 그렇게 생각한 건 <span class=\"red-600\">^^ㅣfoot 경기도 오산이였다.</span></p>\n<h1 id=\"타입스크립트\"님\"-강림시키기\">타입스크립트\"님\" 강림시키기 <a href=\"#타입스크립트\"님\"-강림시키기\">🔗</a></h1><p>NextJS에 타입스크립트\"님\"을 강림시키는 법은 생각보다 매우 간단했다.</p>\n<h2 id=\"새-프로젝트\">새 프로젝트 <a href=\"#새-프로젝트\">🔗</a></h2>\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\"># NPM 기반</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>npx create-next-app --ts</td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"># Yarn 기반</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token function\">yarn</span> create-next-app --typescript</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>위 명령어를 입력하면 타입스크립트\"님\" 기반의 템플릿이 생성된다.</p>\n<h2 id=\"기존-프로젝트\">기존 프로젝트 <a href=\"#기존-프로젝트\">🔗</a></h2>\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\"># NPM 기반</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token function\">npm</span> <span class=\"token function\">install</span> typescript @types/react @types/node --save-dev</td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"># Yarn 기반</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> typescript @types/react @types/node --dev</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>위 명령어를 입력하여 타입스크립트\"님\" 관련 플러그인을 설치한다.</p>\n<p>그리고 루트 경로에 <code class=\"inline-code\">tsconfig.json</code> 파일을 하나 생성하면 된다. 타입스크립트\"님\"이 정확히 어떤 식으로 권능을 행할지 자세하게 \"간청\"할 수 있다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JSON</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-json\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>    <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>        <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ESNext\"</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>        <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom.iterable\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ES2021\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>        <span class=\"token property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>        <span class=\"token property\">\"skipLibCheck\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6>        <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>        <span class=\"token property\">\"forceConsistentCasingInFileNames\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8>        <span class=\"token property\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>        <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>        <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>        <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>        <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13>        <span class=\"token property\">\"isolatedModules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14>        <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15>        <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>        <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17>            <span class=\"token property\">\"@commons/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"commons/*\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18>            <span class=\"token property\">\"@components/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"components/*\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19>            <span class=\"token property\">\"@pages/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"pages/*\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20>            <span class=\"token property\">\"@styles/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"styles/*\"</span> <span class=\"token punctuation\">]</span></td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=23><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23>    <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"next-env.d.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.tsx\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=24><td class=\"line-number\" data-number=\"24\">24</td><td class=\"line-code\" data-number=24>    <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"node_modules\"</span> <span class=\"token punctuation\">]</span></td></tr>\n<tr data-number=25><td class=\"line-number\" data-number=\"25\">25</td><td class=\"line-code\" data-number=25><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>내가 간청한 기도는 위와 같으니, 참고해서 보도록 하자. <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\" target=\"_blank\">타입스크립트 성서</a>에 이와 관련된 기도문 예시가 잘 나와있다.</p>\n<p>\"새 프로젝트\"로 시작했다면 이미 주기도문이 기록되어있으니 참고할 것.</p>\n<h1 id=\"타입스크립트\"님\"와-동행하기\">타입스크립트\"님\"와 동행하기 <a href=\"#타입스크립트\"님\"와-동행하기\">🔗</a></h1><p>기존의 리액트 컴포넌트는 죄다 <code class=\"inline-code\">.js</code>, <code class=\"inline-code\">.jsx</code> 같은 불결한 확장자를 달고 있을 것이다. 이 낙인은 전부 제거해버리고, <code class=\"inline-code\">.ts</code>, <code class=\"inline-code\">.tsx</code>와 같이 교체하자. 이 얼마나 성스러운가! 앞으로 생성할 모든 컴포넌트에도 이 표식을 자랑스럽게 새기도록한다.</p>\n<p>자바스크립트와 달라진 점이라곤 타입 여부다. <span class=\"primary\">문법이나 사용 방식은 그대로</span>기 때문에, 기존 방식 그대로 대접해도 타입스크립트\"님\"은 전혀 신경쓰지 않으신다.</p>\n<h2 id=\"행한-기적\">행한 기적 <a href=\"#행한-기적\">🔗</a></h2><h3 id=\"타입-명시\">타입 명시 <a href=\"#타입-명시\">🔗</a></h3><p class=\"grey-500\" align=\"center\"><i>그가 한 번 손짓하시메, 모든 이가 타입을 가지게 되었노라.</i></p>\n\n<p>타입스크립트\"님\"은 말 그대로 타입 유추를 가능케 하신다. 모든 인수, 반환에 타입을 지정해줌으로써, 개발자가 해당 인수와 반환이 어떤 타입을 반환하는지 알 수 있게 해주신다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVASCRIPT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-javascript\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token comment\" data-tag=\"new\"> * 숫자 두 개 뺏기고 문자열 하나 받기</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token comment\" data-tag=\"new\"> * </span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"> * @param {number} n: 소중한 숫자</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token comment\" data-tag=\"new\"> * @param {number} m: 귀중한 숫자</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token comment\" data-tag=\"new\"> * </span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\"> * @returns {string} 근본없는 문자열</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>    <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> m<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>m<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>temp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>TYPESCRIPT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-typescript\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token comment\" data-tag=\"new\"> * 덧셈의 권능 목도하기</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token comment\" data-tag=\"new\"> * </span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"> * @param {number} n: 미천한 숫자</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token comment\" data-tag=\"new\"> * @param {number} m: 가련한 숫자</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token comment\" data-tag=\"new\"> * </span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\"> * @returns {string} 광휘의 문자열</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>    <span class=\"token keyword\">const</span> temp<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> m<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>m<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>temp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>보았는가, 이 차이를. 위 예시에서 볼 수 있듯이 자바스크립트와 타입스크립트\"님\"의 차이는 광야와 같이 크다. 무려 <span class=\"green-600\">모든 인수, 변수에 타입을 부여</span>해주신다.</p>\n<p>따라서 함수의 인수나 반환값으로 이단자들이 출입하는 것을 막아주신다.</p>\n<br />\n<br />\n\n<p>어째 안 해도 될 일을 구태여 하고 있는거 아니냐고? 어제도 당신과 같은 말을 한 이단자가 있<b class=\"red-400\">었</b>지.....</p>\n<h3 id=\"IDE-지원\">IDE 지원 <a href=\"#IDE-지원\">🔗</a></h3><p class=\"grey-500\" align=\"center\"><i>그의 사도가 그가 말씀하신대로 코드에 키보드를 내리치니, 광야같던 개발기간이 반으로 갈라지더라.</i></p>\n\n<p>VSCode를 사용해보면 알겠지만, 자바스크립트의 기본 API 외에 개발자가 직접 설계한 API의 경우 자동완성이 제대로 먹히질 않는다.</p>\n<p>이는 당연한 결과로, IDE는 무지하여 개발자가 직접 작성한 스크립트의 정확한 구조를 모르기 때문이다. JAVA나 C계열 언어처럼 정해진 구조로 명시되지도 않았으므로, IDE 입장에서는 무엇이 어떻게 되어있는 지 전혀 알 수 없다.</p>\n<p>하지만 타입스크립트\"님\"이라면 다르다. 작성한 코드의 모든 타입과 구조가 사전에 명시되기 때문에, <span class=\"primary\">IDE가 이를 파악하고 해당 요소의 하위 객체를 자동완성을 통해 보여준다.</span> 이러한 기능은 높은 개발 생산성으로 이어진다. 즉, 같은 자원으로도 더욱 많은 결과를 내는 오병이어의 기적을 몸소 행하시는 것이다.</p>\n<h3 id=\"객체지향-개발의 용이성\">객체지향 개발의 용이성 <a href=\"#객체지향-개발의 용이성\">🔗</a></h3><p class=\"grey-500\" align=\"center\"><i>수고하고 무거운 짐 진 자들아, 다 내게로 오라. 내가 너희를 쉬게 하리라.</i></p>\n\n<p>위 같은 이유로 자바스크립트는 객체지향 패턴을 적용하기 난감한 언어였다.(불가능한 건 아니다)</p>\n<p>하지만 타입스크립트\"님\"이 모든 이에게 타입을 부여함으로써, <span class=\"primary\">객체지향 패턴을 적용하는 데 유용</span>하도록 만들어주었다.</p>\n<p>이로 인해 클래스, 인터페이스 등의 개념을 쉽게 적용할 수 있어, JAVA와 같은 객체지향 기반 언어에서 온 자들이 좀 더 편히 머무를 수 있도록 행하셨다.</p>\n<h2 id=\"이단자의-기록\">이단자의 기록 <a href=\"#이단자의-기록\">🔗</a></h2><p>구태여 이런 난잡스러운 자를 받아들여 없는 고생을 사서 함이, 참으로 통탄할 일이다.</p>\n<h3 id=\"허례허식과-위선\">허례허식과 위선 <a href=\"#허례허식과-위선\">🔗</a></h3><p>자바스크립트에선 전혀 신경쓰지 않아도 될 영역임에도 타입스크립트에선 그 잘난 \"타입\"으로 인해 강제되는 영역이 존재한다.</p>\n<p>예를 들어, 하위 컴포넌트가 프로퍼티를 받기 위해선 인터페이스로 타입을 미리 선언해주어야 한다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>TYPESCRIPT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-typescript\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>    width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>    height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>    color<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token comment\" data-tag=\"new\"> * 컴포넌트 ReactElement 하사 받기</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token comment\" data-tag=\"new\"> * </span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9><span class=\"token comment\" data-tag=\"new\"> * @param {Props} param0: 프로퍼티</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token comment\" data-tag=\"new\"> * </span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11><span class=\"token comment\" data-tag=\"new\"> * @returns {ReactElement} ReactElement</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> color <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactElement</td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> width<span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> height<span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> color <span class=\"token operator\">||</span> <span class=\"token string\">'white'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>테스트<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>이 처럼 타입 하나를 선언해주기 위해 인터페이스를 설계하는 등, <span class=\"red-400\">같은 일을 함에 있어서 더 많은 작업을 요구</span>한다.</p>\n<p>이러한 허례허식주의는 코드에 겉치레를 추가함으로써, <span class=\"red-400\">코드의 가독성을 잔혹하게 해치는 결과</span>로 이어진다.</p>\n<p>또한 그 거창한 이름과 달리, 결국 속은 자바스크립트와 다를 것이 없다. 겉으로는 뭔가 대단한 \"척\", 있는 \"척\"을 해대도, 결국 권능을 수행하는 주체는 동일한 자바스크립트다. 이는 곧, <span class=\"red-400\">자바스크립트의 근본적인 문제점, 단점을 동일하게 공유</span>한다는 뜻이다. 이 것이 위선이 아니고 무엇인가.</p>\n<h3 id=\"가혹한-율법\">가혹한 율법 <a href=\"#가혹한-율법\">🔗</a></h3><p>타입에서 나오는 불편함이야 충분히 이해할 수 있었다. 타입이 주는 명확한 이점도 있으니.</p>\n<p>그럼에도 불구하고 타입스크립트를 차마 이해할 수 없는 점은, 가혹한 규칙에 있다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>TYPESCRIPT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-typescript\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token comment\" data-tag=\"new\"> * 테스트 \"목도\"하기</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token comment\" data-tag=\"new\"> * </span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"> * @param {*} color: 색상</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token comment\" data-tag=\"new\"> * </span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token comment\" data-tag=\"new\"> * @return {*} 요소</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>    <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13>        ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Color<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>위 코드가 어때 보이는가? 보기엔 매우 평범해보인다. 겉모습 뿐만 아니라, 실제로 자바스크립트로 돌려봐도 문제가 없는 코드다. 그럼에도 불구하고 타입스크립트는 엄격한 규칙에 따라 이를 허용해주지 않는다.</p>\n<p>위 코드에는 아래와 같은 매우 \"중대한\" 오류가 존재한다.</p>\n<ol>\n<li>color의 타입이 명시되지 않음</li>\n<li>test 함수의 반환값이 명시되지 않음</li>\n<li>useRef()의 타겟이 명시되지 않음</li>\n<li>ref, ref.current가 존재하지 않을 수도 있음</li>\n</ol>\n<p>이와 같은 이유로 컴파일 단계서부터 거절당한다.</p>\n<p>심지어 4번은 골때리는데, 분명히 존재하는 요소임에도, 심지어 동적으로 렌더링하는 것이 아니라 태초부터 HTML에 기록된 요소마저 <span class=\"grey-400\">\"응? 그거 없을 수도 있는데? 진짜 확실해?? 진짜???\"</span>하며 동작을 거부한다. 착실한 신도조차 미치고 돌아버리다 못 해 그 회전각이 2160도로 돌아간다. 아마 여기서 조금만 더 돌아버리게 만들면 그 신도는 몇 초간 공중에 체공도 할 수 있을 것이라 자신한다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>TYPESCRIPT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-typescript\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token comment\" data-tag=\"new\"> * 테스트 \"목도\"하기</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token comment\" data-tag=\"new\"> * </span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"> * @param {number} color: 색상</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token comment\" data-tag=\"new\"> * </span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token comment\" data-tag=\"new\"> * @return {ReactElement} 요소</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactElement</td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>    <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref <span class=\"token operator\">&amp;&amp;</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15>            ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18></td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Color<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>올바른 사용법은 위와 같다. 이 얼마나 쓸데없는가. 정확한 검증은 그렇다쳐도, 이건 의심병인지 모를 수준으로 모든 요소를 일단 \"없다\"고 가정한다. 나는 이미 있는 걸 증명하고자 갖가지 쓸데없는 허례허식을 통해 이미 존재가 증명된 존재를 직접 증명해야하고.</p>\n<h1 id=\"정리\">정리 <a href=\"#정리\">🔗</a></h1><p>그럼에도 불구하고, 타입스크립트\"님\"의 권능은 자바스크립트 개발의 새로운 방향성을 제시하기 충분했다.</p>\n<p>특히 JAVA나 C# 같은 타이트한 객체지향을 먼저 시작한 나로써는 자바스크립트의 그 모호함이 정말 싫었는데, 타입스크립트는 타입과 정형화를 통해 이런 불편함을 충분히 해소시켜줄만한 것이였다.</p>\n<p>하지만, 자바스크립트나 리액트가 아직 익숙하지 않다면 타입스크립트\"님\"의 영접은 시기상조일 수도 있다고도 생각한다. 위에 기술된 이단자의 기록처럼, 타입스크립트\"님\"의 권능은 기존에 없던 주변코드를 요구하게 되며, 이는 곧 코드의 진입장벽으로 이어지게 될 것이다.</p>\n<p>과유불급이다. 현세의 종교 역시 이를 맹신하며 본래의 일을 소홀히하면 필연적으로 문제를 일으키게 된다. 당신 역시 타입스크립트\"님\"의 권능을 맹목적으로 받기 위해 애쓰다 정작 중요한 일을 그르치지 말도록 하자.</p>\n<h1 id=\"여담\">여담 <a href=\"#여담\">🔗</a></h1><p><span class=\"grey-600\">내가 뭘 쓴거야...</span></p>\n","url":["2021-09-21-nextjs-reorganization-2","2021","09","21","nextjs-reorganization-2"],"toc":[{"text":"개요","tag":"개요","depth":1},{"text":"타입스크립트\"님\" 강림시키기","tag":"타입스크립트\"님\"-강림시키기","depth":1},{"text":"새 프로젝트","tag":"새-프로젝트","depth":2},{"text":"기존 프로젝트","tag":"기존-프로젝트","depth":2},{"text":"타입스크립트\"님\"와 동행하기","tag":"타입스크립트\"님\"와-동행하기","depth":1},{"text":"행한 기적","tag":"행한-기적","depth":2},{"text":"타입 명시","tag":"타입-명시","depth":3},{"text":"IDE 지원","tag":"IDE-지원","depth":3},{"text":"객체지향 개발의 용이성","tag":"객체지향-개발의 용이성","depth":3},{"text":"이단자의 기록","tag":"이단자의-기록","depth":2},{"text":"허례허식과 위선","tag":"허례허식과-위선","depth":3},{"text":"가혹한 율법","tag":"가혹한-율법","depth":3},{"text":"정리","tag":"정리","depth":1},{"text":"여담","tag":"여담","depth":1}]},"hash":"a0a3c1cb678"},"__N_SSG":true}