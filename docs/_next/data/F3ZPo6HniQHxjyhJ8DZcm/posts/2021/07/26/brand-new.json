{"pageProps":{"header":{"title":"블로그 개편기","excerpt":"이 블로그를 처음 개발한지가 한 5월 쯤으로 기억한다. 4월부터 접한 리액트에 흥미가 생겨 두서없이 만든게 시작이였으니, 결과물은 내 생각보다 훨씬 조잡하지 않았나 생각했다. 다행스럽게(?)도 블로그 또한 그런 내 믿음을 져버리기 싫었는지, 동작 과정에서 크고 작은 문제들을 보여주곤 했다. 동작 자체에 영향을 미칠 정도로 크리티컬한 문제는 아니였다만, 내 신경엔 영향을 미칠 정도로 거슬리는 부분이 몇 가지 있었다. 아무도 관심 없지만 이왕 만든거 이번 포스팅을 통해 블로그의 개선점을 정리해놓고자 한다.","coverImage":"https://user-images.githubusercontent.com/50317129/127343484-697c4678-edf3-49fa-8a4d-86775a804428.png","date":"2021-07-26T04:54:40","type":"posts","category":"React","tag":["React(리액트)","Next.js","개발 블로그","TypeScript","SCSS"],"comment":true,"publish":true},"name":"2021-07-26-brand-new.md","url":["2021-07-26-brand-new","2021","07","26","brand-new"],"toc":"<ul><li><a href=\"#리모델링\">리모델링</a></li><li><a href=\"#문제점\">문제점</a></li><ul><li><a href=\"#1.-렌더링 지연 현상\">1. 렌더링 지연 현상</a></li><li><a href=\"#2.-Unified.js과 관련 플러그인 커스터마이징 문제\">2. Unified.js과 관련 플러그인 커스터마이징 문제</a></li><li><a href=\"#3.-CSS-in-JS 방식\">3. CSS-in-JS 방식</a></li><li><a href=\"#4.-부실한 RESTful URL\">4. 부실한 RESTful URL</a></li></ul><li><a href=\"#개선점\">개선점</a></li><ul><li><a href=\"#1.-TypeScript 적용\">1. TypeScript 적용</a></li><li><a href=\"#2.-CSS-in-CSS 적용\">2. CSS-in-CSS 적용</a></li><li><a href=\"#3.-SCSS 적용\">3. SCSS 적용</a></li><li><a href=\"#4.-marked.js 차용\">4. marked.js 차용</a></li><li><a href=\"#5.-카테고리별, 태그별 리스트 페이지 추가\">5. 카테고리별, 태그별 리스트 페이지 추가</a></li><li><a href=\"#6.-RESTful URL 적용\">6. RESTful URL 적용</a></li><li><a href=\"#7.-기타 UI 개선\">7. 기타 UI 개선</a></li></ul><li><a href=\"#여담\">여담</a></li></ul>","content":"<h1 id=\"리모델링\">리모델링 <a href=\"#리모델링\">🔗</a></h1><p>이 블로그를 처음 개발한지가 한 5월 쯤으로 기억한다. 4월부터 접한 리액트에 흥미가 생겨 두서없이 만든게 시작이였으니, 결과물은 내 생각보다 훨씬 조잡하지 않았나 생각했다.</p>\n<p>다행스럽게(?)도 블로그 또한 그런 내 믿음을 져버리기 싫었는지, 동작 과정에서 크고 작은 문제들을 보여주곤 했다.</p>\n<p>동작 자체에 영향을 미칠 정도로 크리티컬한 문제는 아니였다만, 내 신경엔 영향을 미칠 정도로 거슬리는 부분이 몇 가지 있었다. 아무도 관심 없지만 이왕 만든거 이번 포스팅을 통해 블로그의 개선점을 정리해놓고자 한다.</p>\n<h1 id=\"문제점\">문제점 <a href=\"#문제점\">🔗</a></h1><p>크고작은 여러 문제점들이 있었는데, 목록은 아래와 같다.</p>\n<h2 id=\"1.-렌더링 지연 현상\">1. 렌더링 지연 현상 <a href=\"#1.-렌더링 지연 현상\">🔗</a></h2><p>여러 문제들 중 가장 가시적이고 불편한 문제였다. 어떠한 이유에서인지 이상하리만치 렌더링이 늦었다. 처음으로 페이지에 접근할 경우 렌더링하느라 버벅이는게 보일 정도. 사양에 따라서 CSS가 입혀지기 전인 날 것의 HTML 프레임이 그대로 보이기도 했다.</p>\n<p>이 괴상한 렌더링 지연은 React의 고질적인 블랙박스 문제로 디버깅조차 잘 되지 않았다.</p>\n<blockquote>\n<p><strong>블랙... 뭔 박스요?</strong><br>소스코드가 동작할 때, 어떤 특정한 모듈을 통해 동작하는 경우가 빈번하다. 잘 구성된 모듈은 은닉화, 모듈화가 잘 되어 있는 경우가 대부분이다. 하지만 이러한 모듈의 폐쇄성은 해당 모듈의 사용자로 하여금 모듈 내부의 오류로 인해 발생하는 이슈를 디버깅하기 매우 어렵게 만든다.<br>이러한 모듈의 은닉된 영역을 가리켜 <strong>블랙박스</strong>라 칭한다.</p>\n</blockquote>\n<p>간혹 어떤 페이지는 렌더링이 두 번씩 되기도 했다. 설상가상으로 React의 다중 렌더링 문제는 꽤 고질적이라고 한다.</p>\n<h2 id=\"2.-Unified.js과 관련 플러그인 커스터마이징 문제\">2. Unified.js과 관련 플러그인 커스터마이징 문제 <a href=\"#2.-Unified.js과 관련 플러그인 커스터마이징 문제\">🔗</a></h2><p>해당 블로그는 JAMStack 기반 블로그다. 통상 JAMStack 기반 블로그의 경우 게시글을 Markdown으로 관리한다. 하지만 아쉽게도 웹 페이지는 HTML 기반으로 동작한다. 즉, Markdown에서 HTML로 적절히 변환해줄 로직이 필요하다.</p>\n<blockquote>\n<p><strong>JAMStack</strong><br><strong>J</strong>avaScript<br><strong>A</strong>PI<br><strong>M</strong>arkup</p>\n</blockquote>\n<p>단순히 변환만 해준다고 다가 아니다. 코드 하이라이팅을 위한 Prism.js, 수식 작성을 위한 LaTex 등 여러 플러그인을 적용해야한다.</p>\n<p>하지만 Unified.js는 내 바램과 달리 공식 문서가 그리 친절하지도 않았으며, 커스터마이징을 위한 API 또한 찾아보기 힘들었다. 그 말인즉슨 <code class=\"inline-code\">remark-prism</code>, <code class=\"inline-code\">remark-toc</code>와 같은 플러그인에 의존해야 하는데, 정해진 형태로 변환만 해줄 뿐, 내가 끼어들어 커스터마이징할 여지는 없어보였다.</p>\n<h2 id=\"3.-CSS-in-JS 방식\">3. CSS-in-JS 방식 <a href=\"#3.-CSS-in-JS 방식\">🔗</a></h2><p>이 블로그의 CSS는 <a href=\"https://material-ui.com/\" target=\"_blank\">Material-UI</a>를 적극적으로 사용했다. Material-UI는 CSS를 적용할 때, <code class=\"inline-code\">makeStyles</code>와 같은 메소드를 통해 JavaScript 내부에서 스타일링을 하도록 안내하고 있다.</p>\n<p>React를 독학으로 배운데다가, 그 체계에 익숙하지 않아 그 당시만 해도 이렇게 해야만하는 줄 알았다.</p>\n<h2 id=\"4.-부실한 RESTful URL\">4. 부실한 RESTful URL <a href=\"#4.-부실한 RESTful URL\">🔗</a></h2><p>NextJS는 Dynamic Routing을 지원한다. 파일 이름을 <code class=\"inline-code\">[page].js</code>와 같이 생성하고 <code class=\"inline-code\">getStaticPaths</code> 메소드에서 page 변수에 적절한 값을 할당하면 해당 값을 가진 URL을 생성해준다.</p>\n<p>GitHub에 호스팅하기 위해선 좋든 싫든 CSR 정적 방식을 차용할 수 밖에 없다. 때문에 내가 잘 하던 기존의 query 방식을 차용했었다.</p>\n<p>게시글 2 페이지를 나타내는 URL이 <code class=\"inline-code\">/posts?page=2</code>와 같은 방식이였다. 현재 트렌드로 미루어보아, 그리 좋은 방식은 아니지 싶다.</p>\n<h1 id=\"개선점\">개선점 <a href=\"#개선점\">🔗</a></h1><p>자잘한 문제들은 제외하고, 굵직한 것들만 생각나는대로 적으면 저 정도 나오는 것 같다.</p>\n<p>블로그가 개발된 5월 이래로 개편을 시작한 7월 중순까지 그래도 나름 내적인 성장을 했던 건지, 이전보단 훨씬 나은 방향으로 개선할 수 있었다.</p>\n<p>개선 내용은 아래와 같다.</p>\n<h2 id=\"1.-TypeScript 적용\">1. TypeScript 적용 <a href=\"#1.-TypeScript 적용\">🔗</a></h2><p>JavaScript의 가장 큰 장점이자 단점은 변수 타입의 모호성이다. 첫 언어를 C#, JAVA와 같이 경직된 객체지향 언어로 접한 내겐 거슬리는 부분 중 하나였다.</p>\n<p>\n\t\t<a href=\"https://user-images.githubusercontent.com/50317129/127337733-e43081ab-71f8-4906-89b2-b33cd7b4320e.png\" target=\"_blank\" data-title=\"null\">\n\t\t\t<img src=\"https://user-images.githubusercontent.com/50317129/127337733-e43081ab-71f8-4906-89b2-b33cd7b4320e.png\" alt=\"TypsScript\" />\n\t\t</a>\n\t\t</p>\n<p><span class=\"blue-400\">TypeScript</span>는 JavaScript에 변수 타입이라는 개념을 도입함으로써, 변수의 모호함에서 유발되는 오류를 최소화한다.</p>\n<p>Next.js는 TypeScript 기반의 템플릿을 제공해준다. TypeScript를 전혀 해보진 않았지만, \"어차피 JavaScript에 타입 선언만 추가된 거 아닌가?\"라는 생각이 들어 적용했다.</p>\n<p>TypeScript에 적응하는 데 그리 오랜 시간이 걸리진 않은 걸로 기억한다. 내 생각대로 타입 선언 말곤 크게 달라진 게 없으니. 오히려 타입이 명시되니 해당 변수에 사용할 수 있는 올바른 내부함수라던가, 자동완성이 적용되서 훨씬 쾌적한 개발을 할 수 있었다.</p>\n<p>단, 짜증나는 점이 하나 있었는데, 바로 라이브 서버와 컴파일 간의 차이였다. Next.js에서는 작성한 소스코드를 즉시 반영해주는 일종의 라이브 서버를 구동할 수 있다. 여기서 좀 짜증나는 차이가 발생하는데, <span class=\"red-400\">TypeScript에서 오류가 나는 문장이나 문법이 라이브 서버에선 영향을 미치지 않는다.</span> 즉, 보기에 멀쩡한 코드도 라이브 서버에선 실행까지 잘 되지만 빌드를 수행하면 갖가지 오류를 뱉어낸다.</p>\n<p align=\"center\">\n    <i>타입이 정확하지 않아아아아아앙아ㅏㅇㄲㄲㄱㅇㅇ악!! 이딴 \"불분명한\"거 내 앞에서 치워!!!</i>\n</p>\n\n<p align=\"center\">\n    <i>이거 타입 선언 안 한 새x끼가 너냐?? ㅋㅋㅋㅋㅋㅋ 컴파일 오류 보고싶지 않으면 처---신 잘 하라고-</i>\n</p>\n\n<p align=\"center\">\n    <i>아니 이거 \"null\"일 가능성이 있는뎁쇼?? 아 렌더링 후에 반드시 생성되는 DOM이라 확실히 있는 놈이라구요? 아 DOM 그딴건 모르겠고 암튼 null일 수도 있다고 아ㅋㅋㅋㅋㅋㅋ</i>\n</p>\n\n<p>더 환장하는건, 실제론 동작 자체에 문제가 없는 소스다. JavaScript라면 무사통과할 수 있는 매우 정상적인 소스라는 뜻이다.</p>\n<p>하지만 작고 소중한 TypeScript는 아무도 막을 수 없어서 조금만 의심스러운 부분이 있다면 바로 찡찡대기 시작한다.</p>\n<p>특히 라이브러리의 내부 함수를 쓸 때가 좀 고역이였다. 정확한 타입을 선언해주기 위해서 소스 내부를 까서 어떤 타입의 파라미터를 받는지, 어떤 타입을 반환하는지를 확인해야했다. 물론 이게 TypeScript의 존재 의의다만...</p>\n<p>이러한 문제에도 불구하고 TypeScript는 내가 JavaScript에서 불편하다고 느낀 것들을 해소해줬다. 문제는 전혀 다른 불편함을 준다는 점이지만..</p>\n<p>그래도 나름 재밌는 개발 경험을 줬지 싶다.</p>\n<h2 id=\"2.-CSS-in-CSS 적용\">2. CSS-in-CSS 적용 <a href=\"#2.-CSS-in-CSS 적용\">🔗</a></h2><p>어렸을 때, 이런 문구 들어본 적 있을 거다.</p>\n<p align=\"center\">\n    <i>진료는 의사에게, 약은 약사에게</i>\n</p>\n\n<p>의약분업을 위한 캐치프레이즈다. 내 블로그에는 통용되지 않는 말이기도 하다.</p>\n<p>이전까지의 내 블로그는 CSS-in-JS가 적용되어 있었다. 위에서도 언급했듯이, 내 블로그의 CSS는 전적으로 Material-UI에 의존하고 있었다. 이로 인해 의존할 수 있는 래퍼런스 또한 많지 않았고, 불행히도 Material-UI는 CSS-in-JS 방식의 래퍼런스를 제공한 탓에 지금까지 이런 방식을 적용했었다.</p>\n<blockquote>\n<p><strong>CSS-in-JS?</strong> <strong>CSS-in-CSS??</strong><br><code class=\"inline-code\">CSS-in-JS</code>: JavaScript에서 CSS 담당<br><code class=\"inline-code\">CSS-in-CSS</code>: CSS에서 CSS 담당</p>\n</blockquote>\n<p>몰론 장점도 있었다. CSS-in-JS의 가장 큰 장점은 CSS를 JavaScript에서 관리하므로 CSS의 동적 생성이 쉽다. 더군다나 내 블로그는 다크, 라이트 모드를 토글할 수 있기 때문에 이러한 장점은 더더욱 강력하게 다가왔다.</p>\n<p>하지만 위에서도 언급했듯이, 렌더링 및 성능 문제가 가장 큰 이슈로 대두됐고, 이 중 스타일링 구문이 가장 의심이 됐다.</p>\n<p>모든 컴포넌트 마다 JavaScript에서 스타일링 구문을 생성해야했고, 게시글 같은 경우 스타일링 요소가 많아 JSX 코드보다도 스타일링 코드가 훨씬 더 길어지는 주객전도가 일어나기도 했다.</p>\n<p>더군다나 CSS-in-JS에서 일어나는 치명적인 문제가 있는데, CSS가 적용되기 전인 날 것의 HTML이 잠깐 보이는 현상이다. 이러한 현상을 <span class=\"priamry\">FOUC</span>(Flash of Unstyled Content)라고 부른다.</p>\n<p>NextJS에선 emotion.js를 적극적으로 차용하도록 유도하여 이러한 문제를 줄인다고 하는데.. 특별한 이유가 없다면 CSS는 CSS가 담당하는 게 맞다고 생각하여, CSS-in-CSS를 차용하기로 했다.</p>\n<h2 id=\"3.-SCSS 적용\">3. SCSS 적용 <a href=\"#3.-SCSS 적용\">🔗</a></h2><p>위에서 언급한 CSS-in-CSS를 위해, 처음엔 CSS를 사용하고자 했다. 하지만 사소한 문제가 하나 있었는데, 기존 소스와의 호환성을 위해선 CSS만으로는 안 된다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVASCRIPT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-javascript\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token comment\" data-tag=\"new\"> * 스타일 객체 반환 함수</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token comment\" data-tag=\"new\"> *</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\"> * @returns {JSON} 스타일 객체</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token keyword\">function</span> <span class=\"token function\">getStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>    <span class=\"token keyword\">return</span> <span class=\"token function\">makeStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theme</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8>        <span class=\"token literal-property property\">fab_bright</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>            <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fixed\"</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>            <span class=\"token literal-property property\">bottom</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>            <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>            <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> grey<span class=\"token punctuation\">[</span><span class=\"token number\">800</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13>            <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> grey<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14>            <span class=\"token string-property property\">\"&amp;:hover\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15>                <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> grey<span class=\"token punctuation\">[</span><span class=\"token number\">700</span><span class=\"token punctuation\">]</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17>            <span class=\"token string-property property\">\"&amp; svg\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18>                <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> orange<span class=\"token punctuation\">[</span><span class=\"token number\">600</span><span class=\"token punctuation\">]</span></td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20>            <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">.</span>breakpoints<span class=\"token punctuation\">.</span><span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"md\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21>                <span class=\"token string-property property\">\"&amp; span\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22>                    <span class=\"token literal-property property\">marginLeft</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span><span class=\"token function\">spacing</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=23><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23>                <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=24><td class=\"line-number\" data-number=\"24\">24</td><td class=\"line-code\" data-number=24>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=25><td class=\"line-number\" data-number=\"25\">25</td><td class=\"line-code\" data-number=25>            <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">.</span>breakpoints<span class=\"token punctuation\">.</span><span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=26><td class=\"line-number\" data-number=\"26\">26</td><td class=\"line-code\" data-number=26>                <span class=\"token literal-property property\">bottom</span><span class=\"token operator\">:</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=27><td class=\"line-number\" data-number=\"27\">27</td><td class=\"line-code\" data-number=27>                <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span></td></tr>\n<tr data-number=28><td class=\"line-number\" data-number=\"28\">28</td><td class=\"line-code\" data-number=28>            <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=29><td class=\"line-number\" data-number=\"29\">29</td><td class=\"line-code\" data-number=29>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=30><td class=\"line-number\" data-number=\"30\">30</td><td class=\"line-code\" data-number=30>        <span class=\"token literal-property property\">fab_dark</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=31><td class=\"line-number\" data-number=\"31\">31</td><td class=\"line-code\" data-number=31>            <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fixed\"</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=32><td class=\"line-number\" data-number=\"32\">32</td><td class=\"line-code\" data-number=32>            <span class=\"token literal-property property\">bottom</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=33><td class=\"line-number\" data-number=\"33\">33</td><td class=\"line-code\" data-number=33>            <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=34><td class=\"line-number\" data-number=\"34\">34</td><td class=\"line-code\" data-number=34>            <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> grey<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=35><td class=\"line-number\" data-number=\"35\">35</td><td class=\"line-code\" data-number=35>            <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> grey<span class=\"token punctuation\">[</span><span class=\"token number\">900</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=36><td class=\"line-number\" data-number=\"36\">36</td><td class=\"line-code\" data-number=36>            <span class=\"token string-property property\">\"&amp;:hover\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=37><td class=\"line-number\" data-number=\"37\">37</td><td class=\"line-code\" data-number=37>                <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> grey<span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">]</span></td></tr>\n<tr data-number=38><td class=\"line-number\" data-number=\"38\">38</td><td class=\"line-code\" data-number=38>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=39><td class=\"line-number\" data-number=\"39\">39</td><td class=\"line-code\" data-number=39>            <span class=\"token string-property property\">\"&amp; svg\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=40><td class=\"line-number\" data-number=\"40\">40</td><td class=\"line-code\" data-number=40>                <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> blue<span class=\"token punctuation\">[</span><span class=\"token number\">600</span><span class=\"token punctuation\">]</span></td></tr>\n<tr data-number=41><td class=\"line-number\" data-number=\"41\">41</td><td class=\"line-code\" data-number=41>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=42><td class=\"line-number\" data-number=\"42\">42</td><td class=\"line-code\" data-number=42>            <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">.</span>breakpoints<span class=\"token punctuation\">.</span><span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"md\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=43><td class=\"line-number\" data-number=\"43\">43</td><td class=\"line-code\" data-number=43>                <span class=\"token string-property property\">\"&amp; span\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=44><td class=\"line-number\" data-number=\"44\">44</td><td class=\"line-code\" data-number=44>                    <span class=\"token literal-property property\">marginLeft</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span><span class=\"token function\">spacing</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=45><td class=\"line-number\" data-number=\"45\">45</td><td class=\"line-code\" data-number=45>                <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=46><td class=\"line-number\" data-number=\"46\">46</td><td class=\"line-code\" data-number=46>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=47><td class=\"line-number\" data-number=\"47\">47</td><td class=\"line-code\" data-number=47>            <span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">.</span>breakpoints<span class=\"token punctuation\">.</span><span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=48><td class=\"line-number\" data-number=\"48\">48</td><td class=\"line-code\" data-number=48>                <span class=\"token literal-property property\">bottom</span><span class=\"token operator\">:</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=49><td class=\"line-number\" data-number=\"49\">49</td><td class=\"line-code\" data-number=49>                <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span></td></tr>\n<tr data-number=50><td class=\"line-number\" data-number=\"50\">50</td><td class=\"line-code\" data-number=50>            <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=51><td class=\"line-number\" data-number=\"51\">51</td><td class=\"line-code\" data-number=51>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></td></tr>\n<tr data-number=52><td class=\"line-number\" data-number=\"52\">52</td><td class=\"line-code\" data-number=52>        <span class=\"token literal-property property\">div</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=53><td class=\"line-number\" data-number=\"53\">53</td><td class=\"line-code\" data-number=53>            <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span></td></tr>\n<tr data-number=54><td class=\"line-number\" data-number=\"54\">54</td><td class=\"line-code\" data-number=54>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=55><td class=\"line-number\" data-number=\"55\">55</td><td class=\"line-code\" data-number=55>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=56><td class=\"line-number\" data-number=\"56\">56</td><td class=\"line-code\" data-number=56><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>기존에 사용 중인 CSS-in-JS 소스는 이와 같다. Material-UI의 <code class=\"inline-code\">makeStyles</code>를 활용한 것으로, 구조를 보면 알겠지만 일반적인 CSS와는 좀 다르다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>CSS</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-css\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token selector\">.alpha</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token selector\">.alpha:hover</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token selector\">.alpha .beta</span> <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>SCSS</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-scss\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token selector\">.alpha </span><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>    <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>    <span class=\"token selector\">.beta </span><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8>        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>각각 동일한 동작을 CSS와 SCSS로 표현했다. 보다시피, <code class=\"inline-code\">makeStyles</code>와 SCSS의 표기가 매우 흡사함을 알 수 있다. 즉, 구버전의 스타일링 시스템와 호환성을 최대한 높이기 위해선 SCSS 내지는 SASS와 같은 스타일 전처리기가 반드시 필요했다.</p>\n<p>\n\t\t<a href=\"https://user-images.githubusercontent.com/50317129/127337877-974ffb27-90a1-4013-a2d3-08494e5d0ebb.png\" target=\"_blank\" data-title=\"null\">\n\t\t\t<img src=\"https://user-images.githubusercontent.com/50317129/127337877-974ffb27-90a1-4013-a2d3-08494e5d0ebb.png\" alt=\"SCSS\" />\n\t\t</a>\n\t\t</p>\n<p>그 중 내가 차용한 건 SCSS. SASS는 기존의 CSS와는 살짝 다른 문법을 가지고 있다는 점이 거슬렸다. SCSS는 단순한 스타일링 이외에도 <code class=\"inline-code\">@mixin</code>, <code class=\"inline-code\">@for</code>나 변수 선언과 같이 좀 더 프로그래밍적인 요소가 강해 더욱 간편한 스타일링 개발 경험을 제공했다.</p>\n<p>일장일단이 있던 TypeScript와 달리, 앞으로도 계속 쓰고 싶을 정도로 마음에 들었다.</p>\n<h2 id=\"4.-marked.js 차용\">4. marked.js 차용 <a href=\"#4.-marked.js 차용\">🔗</a></h2><p>내가 제대로 알아보질 않아서 그런지 모르겠으나, 기존에 썼던 <code class=\"inline-code\">unified.js</code>, <code class=\"inline-code\">remark</code>, <code class=\"inline-code\">rehype</code> 계열 플러그인의 경우 사용자가 커스터마이징할 여력이 없었던 걸로 기억한다. 때문에 이와 연관된 수 많은 플러그인을 설치해야했다.</p>\n<p>더 골때리는건, 적용된 결과물을 커스텀할 명확한 방법을 제공해주지 않았다. 즉, 주는 대로 쓰라는 말인데.. 여러모로 달갑지 않았다.</p>\n<p>특히 코드 블록의 경우, 복사 버튼이나 언어 표시 등 다채로운 기능을 추가하고 싶었으나, 그럴 수 없어 난감했다. 굳이 거창한 플러그인이 아니더라도, 변환된 HTML 구문만 던져주면 wrapper라도 하나 만들어서 감싸줄텐데, 그런 것도 없으니 여의치 않았다. 물론 전체 HTML은 갖고 있었다만, 이걸 일일히 파싱해서 추출한다는 것도 다소 무식하기도 하고.</p>\n<p>그렇게 찾은 차선책이 <code class=\"inline-code\">marked.js</code>다. 이유는 단 한 가지로, 사용자가 결과물을 기본적인 구문 혹은 직접 커스텀한 구문별로 자유로운 커스터마이징이 가능했기 때문.</p>\n<p>그래도 <code class=\"inline-code\">Prism.js</code>와 <code class=\"inline-code\">LaTeX</code>를 적용하는 건 녹록치 않았었다. 특히 LaTeX는 완벽히 적용하는데 3일 정도는 걸리지 않았나 싶다. LaTeX의 경우 <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"></span></span>로 감싼 구문에 적용되는데, 마크다운이 기본적으로 <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"></span></span>에 뭔가 특수한 구문이 적용되는게 아니기 때문에 해당 문자열 토큰을 구문별로 감지할 수 있는 로직을 작성해야했다.</p>\n<p>그나마 Prism.js는 마크다운에 코드블럭 문법 자체가 있어서 그리 어렵지는 않았지만, LaTeX는 구문 분리부터 끝까지 다 만드느라 정말 힘들었다. </p>\n<p>그래도 어쨌든 unified.js와 달리 커스터마이징 API가 잘 설명되어 있어서, 이런 것들도 만들 수 있었다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>    <span class=\"token comment\" data-tag=\"new\">// 이런 것도 구현했다.</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"여기에 텍스트 입력\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<ul>\n<li>코드블럭 디자인</li>\n<li>언어 표시</li>\n<li>복사 버튼</li>\n</ul>\n<p>코드블럭의 Mac 스타일 디자인은 외국 블로그들을 많이 참고했다. 간간히 구글링하다보면 좋든 싫든 외국 사이트에 접근하게 되는데, 저런 형식의 디자인이 많았다. 막상 직접 보면서 만드려고 하니 안 나오길래, 기억을 살려서 비슷하게 만들었다.</p>\n<p>복사 버튼도 간단한 JS를 통해 그리 어렵지 않게 구현했다. 원래 Prism.js에 여러 플러그인이 있긴 한데, 리액트 상에서 적용하려니 잘 되지 않았다. 특히 라인 표시는 꼭 넣고 싶었는데, 다른건 어찌어찌 직접 만들었다만, 이런 류의 디자인은 좀 난이도가 있기도 하고, 라인을 세서 동적으로 넣어줘야 해서 따로 만들진 않았다. 나중에 여유가 되면 한 번 시도해볼 수도..?</p>\n<p>또 하나, 테이블의 경우 중앙 정렬에 스크롤을 만들어주려면 반드시 div로 한 번 감싸줘야 했는데, 이 부분도 커스터마이징을 통해 어렵지않게 만들었다.</p>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">값</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">마우스를</td>\n<td align=\"center\">올리면</td>\n</tr>\n<tr>\n<td align=\"center\">색이</td>\n<td align=\"center\">바뀐다</td>\n</tr>\n<tr>\n<td align=\"center\">수평으로</td>\n<td align=\"center\">길어지면</td>\n</tr>\n<tr>\n<td align=\"center\">스크롤도</td>\n<td align=\"center\">생긴다</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>여러모로 블로그 개편 중 가장 빡세고 난감했던 부분이였다.</p>\n<p>찾다보니 Markdown과 React를 혼용할 수 있는 <span class=\"primary\">MDX</span>라는 것도 있던데, 나름 키치했지만, 마크다운은 순수한 마크다운일 때가 더 나을 것 같기도 하고... 뭐 그렇다.</p>\n<h2 id=\"5.-카테고리별, 태그별 리스트 페이지 추가\">5. 카테고리별, 태그별 리스트 페이지 추가 <a href=\"#5.-카테고리별, 태그별 리스트 페이지 추가\">🔗</a></h2><p>기존의 블로그에도 카테고리가 select 형태로 존재하긴 했었다. 태그의 경우 아예 관련 페이지가 존재하지도 않았었고. 처음 만들 당시에만 해도 NextJS에 대한 기능을 환전히 이해하지 못 해서, 동적 라우팅이 있는지조차 몰랐었다.</p>\n<img src=\"https://user-images.githubusercontent.com/50317129/127339546-9ba96b92-b580-4081-a1a1-12e98bbdcf24.png\" alt=\"카테고리\" width=\"500px\" />\n\n<p>카테고리와 태그별로 해당하는 리스트를 보여주는 페이지를 동적 라우팅으로 만들었다. 카테고리의 경우 기존의 select 방식이 그닥 이쁘지 않은 것 같아서 카드뷰 형식으로 간단하게 만들었는데, 그렇게 이쁘단 느낌은 안 드는 것 같다. 우선은 마땅한 디자인이 구상되지 않아서 냅둘 생각이다.</p>\n<ul>\n<li>/posts/category/{카테고리}/1</li>\n<li>/posts/tags/{태그}/1</li>\n</ul>\n<p>URL은 위와 같이 정의했다.</p>\n<h2 id=\"6.-RESTful URL 적용\">6. RESTful URL 적용 <a href=\"#6.-RESTful URL 적용\">🔗</a></h2><p>기존의 URL은 아래와 같이 적용되어 있었다.</p>\n<ul>\n<li><code class=\"inline-code\">/posts/?page=1&amp;category=all</code>: 전체 카테고리의 게시글 리스트 1 페이지</li>\n<li><code class=\"inline-code\">/posts/brand-new/</code>: 현재 게시글 URL</li>\n</ul>\n<p>게시글 URL은 그렇다 치고, 게시글 리스트는 정말 꼴보기 싫은 형태다.</p>\n<p>NextJS는 동적 라우팅을 지원한다. TypeScript 기준으로 <code class=\"inline-code\">[page].tsx</code>, <code class=\"inline-code\">[...page].tsx</code>와 같이 생성하면 된다. 이름의 page는 단순히 할당되는 라우팅 변수명을 의미하므로, 어떤 것이 와도 상관없다. <code class=\"inline-code\">[...page].tsx</code>와 같은 형태는 동적 변수가 여러개가 올 경우 사용한다.</p>\n<p>블로그 개편하기 이전에 적용하긴 했지만, 게시글 URL에도 약간의 변화를 줬다. 이는 기존의 Jekyll 블로그를 사용하면서 겪었던 경험을 토대로 개선한건데, Jekyll의 경우 블로그 제목을 <code class=\"inline-code\">yyyy-MM-dd-title.md</code>와 같은 형태로 관리한다. 즉, 날짜정보를 제목에서 관리하는데, 이게 또 게시글을 시간순으로 정렬하기 편해서 보기가 쉬웠다. 또한 요즘 블로그 보니 <code class=\"inline-code\">/yyyy/MM/title</code>과 같이 URL을 구성하던데, URL에 덩그러니 제목만 있는 것보다 이쪽이 뭔가 더 이뻐보여서 이렇게 구성하기로 했다.</p>\n<p>굳이 <code class=\"inline-code\">/yyyy/MM/dd/title</code> 형식으로 일자까지 포함시킨 이유는, NextJS 특성 상 URL 정보만으로 완전한 마크다운 파일 이름을 역으로 만들 수 있어야 라우팅하기 편하기 때문.</p>\n<p>최종적으로 변경된 URL은 아래와 같다.</p>\n<ul>\n<li><code class=\"inline-code\">/posts/1</code>: 전체 카테고리의 게시글 리스트 1 페이지</li>\n<li><code class=\"inline-code\">/posts/JAVA/2</code>: JAVA 카테고리의 게시글 리스트 2 페이지</li>\n<li><code class=\"inline-code\">/posts/2021/07/26/brand-new</code>: 현재 게시글</li>\n</ul>\n<p>URL 끝에 <code class=\"inline-code\">/</code>가 붙는데, NextJS에서 trailing slash 옵션을 켰기 때문이다. 해당 옵션을 키면 해당 페이지를 항상 <code class=\"inline-code\">index.html</code>로 만들어준다. 예를 들어, <code class=\"inline-code\">/pages/posts.tsx</code>가 있다면 옵션 여부에 따라 아래와 같이 변환된다.</p>\n<ul>\n<li><code class=\"inline-code\">/posts.html</code>: 옵션을 끌 경우</li>\n<li><code class=\"inline-code\">/posts/index.html</code>: 옵션을 킬 경우</li>\n</ul>\n<p>톰캣에서 개발 서버를 테스트할 때, 반드시 <code class=\"inline-code\">.html</code>을 붙여줘야 하길래, 해당 옵션을 켰었는데, GitHub는 <code class=\"inline-code\">.html</code> 확장자를 생략 가능해서 굳이 안 해줘도 상관없었다.</p>\n<p>끝에 <code class=\"inline-code\">index.html</code>이 있을 경우 <code class=\"inline-code\">/posts/</code>로 접속하기 때문에 구글 서치엔진의 URL이 꼬여버렸다... 새로 갱신은 해놨는데, 구글 서치엔진 반영이 워낙 느려서 당분간은 유입이 잘 안 될 것 같다.</p>\n<h2 id=\"7.-기타 UI 개선\">7. 기타 UI 개선 <a href=\"#7.-기타 UI 개선\">🔗</a></h2><p>그 밖에 크고 작은 UI를 개선했다. 가장 큰 변경점은 Bottom Nav 삭제.</p>\n<p>모바일의 브라우저는 상단의 주소창과 하단의 메뉴가 나타났다 안 나타났다 하는데, 이 과정에서 페이지의 높이가 바뀌어버린다. 이에 따라서 Bottom Nav의 위치가 수시로 왔다갔다해서 UX를 너무 해친다.</p>\n<p>Bottom Nav를 없엔 대신 슬라이드 메뉴를 추가했는데, 이게 그리 이쁘지 않아서 적절하게 디자인을 다시 해 줄 생각이다.</p>\n<img src=\"https://user-images.githubusercontent.com/50317129/127339739-950f4948-51da-4f9f-976d-225cef201aa3.png\" alt=\"게시물 아이템\" width=\"600px\" />\n\n<p>또한 기존의 게시글 아이템도 좀 더 카드뷰스럽게 만들었고, 사진을 좀 더 강조했다. 또한 태그같은 난잡한 부분은 슬라이드 메뉴 형태로 깔끔하게 정리했다.</p>\n<h1 id=\"여담\">여담 <a href=\"#여담\">🔗</a></h1><p>근 며칠 간 블로그 개편 작업에 몰두해서 진행 중이던 백준 알고리즘 풀이가 홀딩됐다. 1020번을 풀었는데, 중간 정도 풀이만 써놓고 아직 마무리하질 못 했다. 이거 풀이도 까먹을 지경인데...</p>\n<p>아직 완전히 완성된 건 아니지만, 어느정도 정리가 된 것 같으니, 그동안 멈춘 작업을 다시 진행해야겠다.</p>\n","meta":{"group":[],"next":{"header":{"title":"긍정적인 시나리오 최적화","excerpt":"지금까지는 항상 알고리즘을 비관적인 관점으로 바라봤다. 이 경우의 장점은 명확하다. 어떠한 경우에도 최악을 대비하면 문제가 없다. 하지만 모든 데이터가 항상 최악의 경우는 아닐 뿐더러, 대부분의 케이스는 평범한 영역에 위치할 것이다. 이 장에서는 모든 시나리오를 고려하여 상황에 따른 적절한 알고리즘을 판단한다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-24T04:54:40","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","삽입 정렬"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-24-about-algorithm-chapter06.md","url":["2021-07-24-about-algorithm-chapter06","2021","07","24","about-algorithm-chapter06"]},"prev":{"header":{"title":"해시 테이블로 매우 빠른 룩업","excerpt":"현재까지 다룬 데이터 형식 중 다수의 데이터를 다루는 데 가장 효과적인 형식은 배열일 것이다. 하지만 배열의 경우, 요소별로 단 하나의 값이 들어가는 데 특화되어 있다. 만약 하나의 요소에 두 값을 넣고자 한다면 어떻게 될까? [[A, 1], [B, 2], [C, 3]]과 같은 형태로 나타낼 것이다. 배열의 단점 중 하나는, 값을 빠르게 찾기 위해선 반드시 정렬을 수행해야 한다는 것이다. 하지만 저렇게 배열 안에 또다른 배열이 포함되는 것처럼 배열의 depth가 심해질 경우 구조가 복잡해서 배열을 다루기 점점 난해해진다. 더군다나 배열의 경우 원하는 요소를 탐색하기 위해선 적어도 O(logN) 이상의 시간복잡도를 필요로 한다. 만약, 배열과 같이 특정 데이터의 모음에서 내가 원하는 데이터를 O(1)과 같이 상수 시간으로 탐색할 수 있는 데이터가 있다면 어떨까? 왠지 이 장에서 그 해답을 찾을 수 있을 것 같다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-29T23:02:27","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","해시 테이블"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-29-about-algorithm-chapter07.md","url":["2021-07-29-about-algorithm-chapter07","2021","07","29","about-algorithm-chapter07"]}}},"__N_SSG":true}