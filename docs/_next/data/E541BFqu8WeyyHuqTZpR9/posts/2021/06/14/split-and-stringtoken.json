{"pageProps":{"page":{"type":"posts","prev":{"title":"[JAVA] 백준 알고리즘 1013번 Contact","excerpt":"푸에르토리코 아레시보에 위치한 아레시보 전파망원경(Arecibo radio telescope)은 수십 년째 존재하지 않을 지도 모르는 외계 문명으로부터의 전파를 수신하기 위해 밤하늘을 바라보고 있다. 이 망원경이 수집한 전파 속에서 자연적으로 발생하기 힘든 패턴들을 찾아내어, 그것을 증거로 외계 문명의 존재 여부를 가리려는 노력은 줄곧 이어져왔지만 아직까지도 그러한 패턴은 발견되지 않았다. 한국 천문학계의 자존심 김동혁 박사는 국내 기술로 이러한 탐사를 진행하기 위하여 다음의 전파 표기를 표준으로 삼았다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-13T04:53:32","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","정규 표현식","GOLD","GOLD V"],"group":"백준 알고리즘","comment":true,"publish":true,"slug":"2021-06-13-A1013","content":"\r\n# Contact\r\n\r\n![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange)\r\n\r\n🔗 [전체 1013번 문제](https://www.acmicpc.net/problem/1013)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    512MB    |\r\n\r\n## 문제\r\n\r\n> “무한히 넓은 저 우주에 인류만이 홀로 존재한다면, 그건 정말 슬픈 일이 아닐까요”\r\n\r\n푸에르토리코 아레시보에 위치한 아레시보 전파망원경(Arecibo radio telescope)은 수십 년째 존재하지 않을 지도 모르는 외계 문명으로부터의 전파를 수신하기 위해 밤하늘을 바라보고 있다.\r\n\r\n이 망원경이 수집한 전파 속에서 자연적으로 발생하기 힘든 패턴들을 찾아내어, 그것을 증거로 외계 문명의 존재 여부를 가리려는 노력은 줄곧 이어져왔지만 아직까지도 그러한 패턴은 발견되지 않았다. 한국 천문학계의 자존심 김동혁 박사는 국내 기술로 이러한 탐사를 진행하기 위하여 다음의 전파 표기를 표준으로 삼았다.\r\n\r\n전파의 기본 단위는 $\\{ 0 , 1 \\}$ 두 가지로 구성되어있으며, $x+ (  )$ 는 임의의 개수(최소 1개) $x$의 반복으로 이루어진 전파의 집합을 나타낸다.\r\n\r\n$(xyx)+ (  )$ 는 괄호 내의 $xyx$의 반복으로 이루어진 전파의 집합을 뜻한다. 아래는 이해를 돕기 위한 예제이다.\r\n\r\n* 1+ = { 1, 11, 111, 1111, 11111, … }\r\n* 10+ = { 10, 100, 1000, 10000, 100000, … }\r\n* (01)+ = { 01, 0101, 010101, 01010101, 0101010101, … }\r\n* (1001)+ = { 1001, 10011001, 100110011001, … }\r\n* 10+11 = { 1011, 10011, 100011, 1000011, 10000011, … }\r\n* (10+1)+ = { 101, 1001, 10001, 1011001, 1001101, 100011011000001, … }\r\n\r\n반복을 의미하는 + 외에도 or 를 의미하는 $|$ 기호가 있다. $\\{ x | y \\}$ 는 $x$ 혹은 $y$를 의미하는 것으로, $\\{ 0+ | 1+ \\}$ 는 $\\{ 0 , 1 , 00 , 11 , 000 , 111 , \\dotsm \\}$ 의 집합을 의미한다. 아래는 두 기호를 복합적으로 사용한 예이다.\r\n\r\n* (100+1+ | 01)+\r\n\r\n최근 김동혁 박사는 아레시보 전파망원경에서 star Vega(직녀성) 으로부터 수신한 전파 기록의 일부를 조사하여 그 전파들의 패턴을 분석하여 아래와 같이 기록하였다.\r\n\r\n* (100+1+ | 01)+\r\n\r\n김동혁 박사는 다양한 전파 기록 중에서 위의 패턴을 지니는 전파를 가려내는 프로그램을 필요로 한다. 이를 수행할 수 있는 프로그램을 작성하라.\r\n\r\n## 입력\r\n\r\n입력의 첫 줄에는 테스트 케이스의 개수 $T$가 주어진다. 그 다음 줄부터 각각의 테스트 케이스에 대해 전파를 표현하는, $\\{ 0, 1 \\}$만으로 이루어진 문자열이 공백 없이 주어진다. 문자열 길이는 $(1 ≤ N ≤ 200)$의 범위를 갖는다.\r\n\r\n## 출력\r\n\r\n각 테스트 케이스에 대해 주어진 전파가 문제에서 제시한 패턴이면 “YES”를 그렇지 않은 경우는 “NO”를 출력한다. 출력 문자열은 모두 대문자로 구성되어 있다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n3\r\n10010111\r\n011000100110001\r\n0110001011001\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\nNO\r\nNO\r\nYES\r\n```\r\n\r\n# 풀이\r\n\r\n정규식을 대강 알고있다면 이게 왜 <span class=\"amber-A400\">GOLD V</span>인지 다소 이해되지 않는 수준의 문제다. 정규식이 어려운 이유는 원하는 패턴에 맞춰 정규식을 설계하는 건데, 그 정규식을 대놓고 준다. 사실상 정규식의 개념을 아냐 모르느냐를 물어보는 문제.\r\n\r\n나의 경우, 일하다가 간간히 쓸 일이 생겨서 몇 번 다뤄본적이 있어 그리 생소하지 않았다. [regexr](https://regexr.com/)에서 정규식을 설계하고 테스트를 할 수 있으니 참고하자. 정규식 관련해서는 유명한 사이트.\r\n\r\n문제에 대놓고 $(100+1+ | 01)+$라는 정규식 자체를 제공하기 때문에, 그냥 문자열 받아서 정규식과 일치하는지 보면 된다.\r\n\r\nJAVA에서는 `Pattern.matches({정규식 문자열}, {문자열});`과 같이 사용하며, 일치여부를 `boolean`으로 반환한다.\r\n\r\n아래 소스를 보면 알겠지만 진짜 간단하다. 정규식을 아는 사람에겐 <span class=\"brown-500\">BRONZE</span> 수준의 문제.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\n * 백준 전체 1013 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/06/13/A1013/\">1013 풀이</a>\r\n * @since 2021.06.13 Sun 04:34:19\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\t// 케이스 수\r\n\t\tint T = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\tfor (int i = 0; i < T; i++)\r\n\t\t{\r\n\t\t\tString text = reader.readLine();\r\n\t\t\t\r\n\t\t\t// 정규식 일치 여부\r\n\t\t\tString result = Pattern.matches(\"(100+1+|01)+\", text) ? \"YES\" : \"NO\";\r\n\t\t\t\r\n\t\t\tSystem.out.println(result);\r\n\t\t}\r\n\t\t\r\n\t\treader.close();\r\n\t}\r\n}\r\n```\r\n\r\n## 분류\r\n\r\n* 문자열\r\n* 정규 표현식\r\n\r\n## 여담\r\n\r\n문제가 생각보다 쉬워서, \"사실 이렇게 하면 안 되는게 아닐까?\"하고 찾아보니 역시나 다른 방식으로 접근하는 방법이 공유되어 있었다. 정규표현식이 아닌 DFA(오토마타 전이 그래프)를 활용하는 방식이다. 정규표현식을 공식적으로 지원해주지 않는 언어라면 대체제로 시도해봄직하다. 백준에선 외부 라이브러리를 사용할 수 없을테니."},"next":-1},"group":[],"post":{"title":"split vs StringToken","excerpt":"알고리즘을 풀다보면, 필연적으로 입력값 처리를 하게된다. 다양한 케이스에 대응하기 위해, 사용자의 값을 직접 입력받아 이를 처리하게 된다. 이 때, 우리는 십중팔구 이와 같은 상황이 발생한다. 데이터셋을 보내기 위해 데이터의 모음을 구분자(공백 혹은 쉼표)를 통해 하나의 문자열로 합쳐 전달한다.","coverImage":"https://www.textrazor.com/img/letters3.png","date":"2021-06-14T01:56:01","type":"posts","category":"JAVA","tag":["JAVA(자바)","String(문자열)","split","StringToken"],"comment":true,"publish":true,"slug":"2021-06-14-split-and-stringtoken","content":"<nav class=\"toc-wrap\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#개요\">개요</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#테스트-환경\">테스트 환경</a></li></ol></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#split-메소드\">split 메소드</a></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#stringtokenizer\">StringTokenizer</a></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#속도-비교\">속도 비교</a></li><li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#결론\">결론</a></li></ol></nav><h1 id=\"개요\"><a class=\"head-link\" href=\"#개요\"><span>🔗</span></a>개요</h1>\n<p>알고리즘을 풀다보면, 필연적으로 입력값 처리를 하게된다. 다양한 케이스에 대응하기 위해, 사용자의 값을 직접 입력받아 이를 처리하게 된다. 이 때, 우리는 십중팔구 이와 같은 상황이 발생한다. 데이터셋을 보내기 위해 데이터의 모음을 구분자(공백 혹은 쉼표)를 통해 하나의 문자열로 합쳐 전달한다.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi mathvariant=\"normal\">\"</mi><mi>A</mi><mi mathvariant=\"normal\">\"</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">\"</mi><mi>B</mi><mi mathvariant=\"normal\">\"</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">\"</mi><mi>C</mi><mi mathvariant=\"normal\">\"</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">\"</mi><mi>D</mi><mi mathvariant=\"normal\">\"</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mo>></mo><mi mathvariant=\"normal\">\"</mi><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi><mi mathvariant=\"normal\">\"</mi></mrow><annotation encoding=\"application/x-tex\">[ \"A\", \"B\", \"C\", \"D\" ] -> \"A B C D\"</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">\"</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">\"</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\">\"</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">\"</span><span class=\"mclose\">]</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">BC</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">\"</span></span></span></span></span></div>\n<p>이를테면, 위와 같이 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi mathvariant=\"normal\">\"</mi><mi>A</mi><mi mathvariant=\"normal\">\"</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">\"</mi><mi>B</mi><mi mathvariant=\"normal\">\"</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">\"</mi><mi>C</mi><mi mathvariant=\"normal\">\"</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">\"</mi><mi>D</mi><mi mathvariant=\"normal\">\"</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[ \"A\", \"B\", \"C\", \"D\" ]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">A</span><span class=\"mord\">\"</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">\"</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\">\"</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">\"</span><span class=\"mclose\">]</span></span></span></span></span>와 같은 배열을 전달하기 위해, 각 요소를 공백으로 구분하여 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">\"</mi><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi><mi mathvariant=\"normal\">\"</mi></mrow><annotation encoding=\"application/x-tex\">\"A B C D\"</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">BC</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">\"</span></span></span></span></span>와 같이 전달하게 된다. 보통 내 경우 <code>split</code> 메소드를 활용하는데, 알고리즘 풀이를 찾아보다보니 <code>StringTokenizer</code>이라는 <span class=\"orange-400\">class</span>를 쓰는 코드들이 더러있었다. 처음보는 <span class=\"orange-400\">class</span>인데다, 접근성이 훨씬 뛰어난 <code>split</code>를 굳이 대체해서 쓰는 이유가 있을거라 판단. 직접 퍼포먼스를 비교해보기로 했다. 알고리즘은 수행속도 역시 중요한 지표로 작용하기 때문에, 조금이라도 시간을 줄일 필요가 있다. 안타깝게도 나는 코드 최적화 실력이 최악이라, 이런식으로 줄일 수 있는 자잘한 부분은 줄여야한다. 핵심 코드를 최적화할 생각은 안 하고 이런데서 시간을 단축하는게 꼭 다이어트한답시고 피자 먹으면서 제로콜라 마시는 느낌이긴 하나, <code>StringTokenizer</code>이 더 성능이 뛰어나다면 앞으로 푸는 알고리즘에 적용할 가치가 있을 것이다.</p>\n<h2 id=\"테스트-환경\"><a class=\"head-link\" href=\"#테스트-환경\"><span>🔗</span></a>테스트 환경</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"center\">구분</th><th align=\"center\">내용</th></tr></thead><tbody><tr><td align=\"center\">언어</td><td align=\"center\"><img src=\"https://shields.io/badge/java-JDK%2014-lightgray?logo=java&#x26;style=plastic&#x26;logoColor=white&#x26;labelColor=orange\" alt=\"JAVA\"></td></tr><tr><td align=\"center\">OS</td><td align=\"center\">Windows 10 64bit</td></tr><tr><td align=\"center\">CPU</td><td align=\"center\">Intel i7-10700K</td></tr><tr><td align=\"center\">RAM</td><td align=\"center\">32GB</td></tr></tbody></table>\n<h1 id=\"split-메소드\"><a class=\"head-link\" href=\"#split-메소드\"><span>🔗</span></a>split 메소드</h1>\n<p><code>split</code> 메소드는 특정 <span class=\"lightBlue-400\">구분자</span>로 문자열을 분리하는 전통적인 메소드다. 굳이 JAVA가 아니더라도 C(++, #), JavaScript, Python 등 여러 언어에 존재하는 키워드라 어떤 언어든 문자열을 구분할 때 제일 먼저 시도하는 방법이다.</p>\n<p>JAVA의 <code>split</code>은 문자열 데이터 형식인 <code>String</code> <span class=\"orange-400\">class</span>에 포함된 메소드다. 문자열 데이터라면 <code>split</code>를 호출하여 문자열을 구분할 수 있다. 반환값은 <code>String[]</code> 객체.</p>\n<p>사용법은 아래와 같다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * 메인 클래스\n *\n * <span class=\"token keyword\">@author</span> RWB\n * <span class=\"token keyword\">@since</span> 2021.06.13 Sun 22:50:57\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token doc-comment comment\">/**\n\t * 메인 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">args</span>: [String[]] 매개변수\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"A B C D\"</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> splited <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>splited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>출력은 아래와 같다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tc\"><code class=\"language-tc\">[A, B, C, D]</code></pre></div>\n<p>문자열 <code>A B C D</code>가 공백을 기준으로 <code>[A, B, C, D]</code>로 분리된걸 확인할 수 있다. 그 밖에 한 가지 특이한 점이 있는데, JAVA의 <code>split</code> 메소드는 <span class=\"red-A400\">구분자에 정규식을 적용</span>할 수 있다. 이를 잘만 이용하면 복합적인 구분자를 사용할 수도 있다.</p>\n<h1 id=\"stringtokenizer\"><a class=\"head-link\" href=\"#stringtokenizer\"><span>🔗</span></a>StringTokenizer</h1>\n<p>이 포스팅을 쓰게 만든 직접적인 원인. <code>StringTokenizer</code> 역시 문자열을 구분하는데 특화된 <span class=\"orange-400\">class</span>의 일종이다. <code>String[]</code>을 반환하는 <code>split</code>과 달리 그 자체로 하나의 개별적인 <span class=\"orange-400\">class</span>라는 차이가 있다.</p>\n<p><code>StringTokenizer tokenizer = new StringTokenizer(\"문자열\");</code>과 같은 형태로 초기화해서 사용한다. <code>StringTokenizer</code> 인스턴스를 사용하는데 알아두면 좋을법한 메소드는 아래와 같다.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"center\">메소드</th><th align=\"center\">반환값</th><th align=\"center\">내용</th></tr></thead><tbody><tr><td align=\"center\">countToken</td><td align=\"center\">int</td><td align=\"center\">토큰의 갯수</td></tr><tr><td align=\"center\">nextToken</td><td align=\"center\">String</td><td align=\"center\">다음 토큰</td></tr><tr><td align=\"center\">hasMoreTokens</td><td align=\"center\">boolean</td><td align=\"center\">다음 토큰의 존재 유무</td></tr></tbody></table>\n<p><code>StringTokenizer tokenizer = new StringTokenizer(\"문자열\", \"구분자\");</code>와 같이 생성자의 인수에 구분자를 추가하여 원하는 구분자로 구분하게 할 수도 있다. 별도로 지정하지 않는다면 구분자는 <code>\\t\\n\\r\\t</code>로, 줄바꿈, 공백, 탭을 구분한다. 여기서 주의할 점이 하나 있는데, 기본 구분자 <code>\\t\\n\\r\\t</code>는 <span class=\"red-A400\">줄바꿈, 공백, 탭을 전부 포함</span>한다. 즉, <code>A B C D\\nA B C D</code>와 같이 공백과 줄바꿈이 혼용되어 있을 경우, 공백과 줄바꿈을 전부 구분하여 <code>[A, B, C, D, A, B, C, D]</code>와 같이 출력된다. 생성자에 구분자를 강제로 지정해줄 경우, 이를 막을 수 있다. 직접 지정할 경우 공백이나 줄바꿈이 아니더라도 여러 문자열을 사용할 수 있다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * 메인 클래스\n *\n * <span class=\"token keyword\">@author</span> RWB\n * <span class=\"token keyword\">@since</span> 2021.06.13 Sun 23:48:14\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token doc-comment comment\">/**\n\t * 메인 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">args</span>: [String[]] 매개변수\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"A B C D\"</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">StringTokenizer</span> tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> splited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">countTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> splited<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tsplited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>splited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>출력은 동일하다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-tc\"><code class=\"language-tc\">[A, B, C, D]</code></pre></div>\n<h1 id=\"속도-비교\"><a class=\"head-link\" href=\"#속도-비교\"><span>🔗</span></a>속도 비교</h1>\n<p>그렇다면 <code>split</code>과 <code>StringTokenizer</code>의 성능은 어떨까? 이를 비교하기 위해 간단한 테스트 프로그램을 만들었다.</p>\n<ol>\n<li>반복횟수 <code>t</code>가 할당된다.</li>\n<li>케이스마다 5 ~ 20자의 랜덤한 문자열을 생성한다. 각 문자 사이엔 공백이 포함된다.</li>\n<li>공백을 구분자로 문자열을 구분한다\n<ol>\n<li><code>split</code> 사용</li>\n<li><code>StringTokenizer</code> 사용</li>\n</ol>\n</li>\n<li>총 소요 시간 및 평균 소요 시간을 계산한다</li>\n<li>결과를 표시한다</li>\n</ol>\n<p>소스는 아래와 같다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DecimalFormat</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * 메인 클래스\n *\n * <span class=\"token keyword\">@author</span> RWB\n * <span class=\"token keyword\">@since</span> 2021.06.14 Mon 00:06:32\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token doc-comment comment\">/**\n\t * 메인 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">args</span>: [String[]] 매개변수\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> timer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> random <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> <span class=\"token function\">getTestString</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">// split 로직 ----------------------------------------</span>\n\t\t\t<span class=\"token keyword\">long</span> timeStart <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a1 <span class=\"token operator\">=</span> <span class=\"token function\">useSplit</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">long</span> timeEnd <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> timeStart<span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\tsum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> a1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\ttimer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> timeEnd<span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>timeEnd<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// split 로직 ----------------------------------------</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">// StringTokenizer 로직 ----------------------------------------</span>\n\t\t\ttimeStart <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a2 <span class=\"token operator\">=</span> <span class=\"token function\">useStringTokenizer</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\ttimeEnd <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> timeStart<span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\tsum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> a2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\ttimer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> timeEnd<span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>timeEnd<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// StringTokenizer 로직 ----------------------------------------</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"개 데이터 그룹 수행\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"split 결과\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 총 소요: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 평균 소요: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 분해한 요소: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"개\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StringTokenizer 결과\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 총 소요: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 평균 소요: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" * 분해한 요소: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"개\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"split \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> timer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"==\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> timer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"&#x3C;\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" StringTokenizer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token doc-comment comment\">/**\n\t * 구분된 문자열 반환 함수 (split)\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">text</span>: [String] 대상 문자열\n\t *\n\t * <span class=\"token keyword\">@return</span> [String[]] 구분된 문자열\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">useSplit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token doc-comment comment\">/**\n\t * 구분된 문자열 반환 함수 (StringTokenizer)\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">text</span>: [String] 대상 문자열\n\t *\n\t * <span class=\"token keyword\">@return</span> [String[]] 구분된 문자열\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">useStringTokenizer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">StringTokenizer</span> tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">countTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tresult<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token doc-comment comment\">/**\n\t * 무작위 문자열 반환 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">n</span>: [int] 문자 갯수\n\t *\n\t * <span class=\"token keyword\">@return</span> [String] 무작위 문자\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getTestString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token doc-comment comment\">/**\n\t * 1000 단위 구분 숫자 반환 함수\n\t *\n\t * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">num</span>: [long] 대상 숫자\n\t *\n\t * <span class=\"token keyword\">@return</span> [String] 1000 단위 구분 숫자\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addComma</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> num<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">DecimalFormat</span> format <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DecimalFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",###\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>횟수별로 10번씩 돌린 결과를 아래의 표로 정리했다.</p>\n<ul>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">t = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"center\">테스트 횟수</th><th align=\"center\">split 총 소요</th><th align=\"center\">StringTokenizer 총 소요</th><th align=\"center\">속도</th></tr></thead><tbody><tr><td align=\"center\">1</td><td align=\"center\">80.3us</td><td align=\"center\">44.8us</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">2</td><td align=\"center\">83.7us</td><td align=\"center\">46.2us</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">3</td><td align=\"center\">136.6us</td><td align=\"center\">31.8us</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">4</td><td align=\"center\">111.3us</td><td align=\"center\">40.4us</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">5</td><td align=\"center\">93.4us</td><td align=\"center\">32.2us</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">6</td><td align=\"center\">104.5us</td><td align=\"center\">28.7us</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">7</td><td align=\"center\">40.1us</td><td align=\"center\">42.7us</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">8</td><td align=\"center\">40.1us</td><td align=\"center\">42.7us</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">9</td><td align=\"center\">104.7us</td><td align=\"center\">28.3us</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">10</td><td align=\"center\">38.3us</td><td align=\"center\">29.2us</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr></tbody></table>\n<p>한 번만 반복할 경우, 8:2로 <code>StringTokenizer</code>이 압승한다.</p>\n<ul>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">t = 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">100</span></span></span></span></span></li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"center\">테스트 횟수</th><th align=\"center\">split 총 소요</th><th align=\"center\">StringTokenizer 총 소요</th><th align=\"center\">속도</th></tr></thead><tbody><tr><td align=\"center\">1</td><td align=\"center\">1.12ms</td><td align=\"center\">0.602ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">2</td><td align=\"center\">1.11ms</td><td align=\"center\">0.612ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">3</td><td align=\"center\">1.06ms</td><td align=\"center\">0.562ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">4</td><td align=\"center\">1.02ms</td><td align=\"center\">0.595ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">5</td><td align=\"center\">1.ms</td><td align=\"center\">0.550ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">6</td><td align=\"center\">1.16ms</td><td align=\"center\">0.651ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">7</td><td align=\"center\">98ms</td><td align=\"center\">0.558ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">8</td><td align=\"center\">1.11ms</td><td align=\"center\">0.627ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">9</td><td align=\"center\">0.981ms</td><td align=\"center\">0.555ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">10</td><td align=\"center\">1.23ms</td><td align=\"center\">0.666ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr></tbody></table>\n<p>100번을 반복할 때 역시 10:0으로 <code>StringTokenizer</code>이 압승한다.</p>\n<ul>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">t = 1,000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">000</span></span></span></span></span></li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"center\">테스트 횟수</th><th align=\"center\">split 총 소요</th><th align=\"center\">StringTokenizer 총 소요</th><th align=\"center\">속도</th></tr></thead><tbody><tr><td align=\"center\">1</td><td align=\"center\">3.00ms</td><td align=\"center\">3.17ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">2</td><td align=\"center\">2.53ms</td><td align=\"center\">2.71ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">3</td><td align=\"center\">2.79ms</td><td align=\"center\">2.84ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">4</td><td align=\"center\">2.53ms</td><td align=\"center\">2.67ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">5</td><td align=\"center\">2.67ms</td><td align=\"center\">2.97ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">6</td><td align=\"center\">2.58ms</td><td align=\"center\">2.87ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">7</td><td align=\"center\">2.48ms</td><td align=\"center\">2.65ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">8</td><td align=\"center\">2.69ms</td><td align=\"center\">3.01ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">9</td><td align=\"center\">2.50ms</td><td align=\"center\">2.90ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">10</td><td align=\"center\">2.62ms</td><td align=\"center\">2.94ms</td><td align=\"center\">split > StringTokenizer</td></tr></tbody></table>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span>처럼 끊어가다가 뜬금없이 1000을 넣은 이유는, 이상하게 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">t = 1,000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">000</span></span></span></span></span>일 땐 <code>split</code>이 압승한다.</p>\n<ul>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><mn>10</mn><mo separator=\"true\">,</mo><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">t = 10,000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">10</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">000</span></span></span></span></span></li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"center\">테스트 횟수</th><th align=\"center\">split 총 소요</th><th align=\"center\">StringTokenizer 총 소요</th><th align=\"center\">속도</th></tr></thead><tbody><tr><td align=\"center\">1</td><td align=\"center\">9.91ms</td><td align=\"center\">9.27ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">2</td><td align=\"center\">9.49ms</td><td align=\"center\">9.19ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">3</td><td align=\"center\">9.02ms</td><td align=\"center\">8.61ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">4</td><td align=\"center\">9.95ms</td><td align=\"center\">9.25ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">5</td><td align=\"center\">9.03ms</td><td align=\"center\">8.87ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">6</td><td align=\"center\">8.83ms</td><td align=\"center\">9.08ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">7</td><td align=\"center\">9.14ms</td><td align=\"center\">8.68ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">8</td><td align=\"center\">9.28ms</td><td align=\"center\">9.07ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">9</td><td align=\"center\">9.49ms</td><td align=\"center\">9.66ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">10</td><td align=\"center\">11.79ms</td><td align=\"center\">11.20ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr></tbody></table>\n<p>다시 8:2로 <code>StringTokenizer</code>이 압승한다.</p>\n<ul>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>000</mn><mo separator=\"true\">,</mo><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">t = 1,000,000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">000</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">000</span></span></span></span></span></li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"center\">테스트 횟수</th><th align=\"center\">split 총 소요</th><th align=\"center\">StringTokenizer 총 소요</th><th align=\"center\">속도</th></tr></thead><tbody><tr><td align=\"center\">1</td><td align=\"center\">306.86ms</td><td align=\"center\">373.06ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">2</td><td align=\"center\">287.26ms</td><td align=\"center\">262.05ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">3</td><td align=\"center\">289.92ms</td><td align=\"center\">255.51ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">4</td><td align=\"center\">272.43ms</td><td align=\"center\">267.96ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">5</td><td align=\"center\">278.35ms</td><td align=\"center\">322.28ms</td><td align=\"center\">split > StringTokenizer</td></tr><tr><td align=\"center\">6</td><td align=\"center\">285.23ms</td><td align=\"center\">264.57ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">7</td><td align=\"center\">273.37ms</td><td align=\"center\">268.18ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">8</td><td align=\"center\">278.65ms</td><td align=\"center\">264.34ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">9</td><td align=\"center\">278.56ms</td><td align=\"center\">266.62ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr><tr><td align=\"center\">10</td><td align=\"center\">306.00ms</td><td align=\"center\">256.56ms</td><td align=\"center\">split &#x3C; StringTokenizer</td></tr></tbody></table>\n<p>8:2로 <code>StringTokenizer</code>이 압승한다.</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">t = 1,000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">000</span></span></span></span></span>이라는 특수한 상황을 제외하고는 보편적으로 <code>StringTokenizer</code>가 성능이 더 우수하다. 저런 현상이 왜 발생하는지 이해는 잘 안 된다. 물론 통계라는게 숫자가 클 수록 의미가 커지므로 10번이라는 작은 횟수만으로 단정짓긴 어렵다.</p>\n<p><a href=\"https://docs.oracle.com/javase/6/docs/api/java/util/StringTokenizer.html\">JAVA API</a>에 의하면, <code>StringTokenizer</code>은 하위 호환성을 보장하기 위한 레거시 클래스라고 한다. JAVA API는 가급적 <code>StringTokenizer</code>보다 <code>split</code> 내지는 <code>regex</code> <span class=\"orange-400\">패키지</span>를 활용하도록 권고하고 있다.</p>\n<blockquote>\n<p><strong>원문</strong><br>\n<code>StringTokenizer</code> is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the <code>split</code> method of String or the <code>java.util.regex</code> package instead.</p>\n</blockquote>\n<h1 id=\"결론\"><a class=\"head-link\" href=\"#결론\"><span>🔗</span></a>결론</h1>\n<p>표의 수치 상 <code>StringTokenizer</code>가 <code>split</code>에 비해 최대 약 20% 정도 더 빠르다. 하지만 JAVA API에서 가급적 다른 대체제를 사용하도록 권고하고 있고, 엄청난 속도 향상이 일어나진 않기 때문에 그냥 <code>split</code>을 사용해도 무방할 것 같다.</p>"}},"__N_SSG":true}