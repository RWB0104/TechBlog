{"pageProps":{"posts":[{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1021번 회전하는 큐","excerpt":"지민이는 N개의 원소를 포함하고 있는 양방향 순환 큐를 가지고 있다. 지민이는 이 큐에서 몇 개의 원소를 뽑아내려고 한다. 지민이는 이 큐에서 다음과 같은 3가지 연산을 수행할 수 있다. 큐에 처음에 포함되어 있던 수 N이 주어진다. 그리고 지민이가 뽑아내려고 하는 원소의 위치가 주어진다. (이 위치는 가장 처음 큐에서의 위치이다.) 이때, 그 원소를 주어진 순서대로 뽑아내는데 드는 2번, 3번 연산의 최솟값을 출력하는 프로그램을 작성하시오.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-08-26T01:39:29","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","덱","SILVER","SILVER IV"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-08-26-a1021.md","content":"\r\n# 회전하는 큐\r\n\r\n|                            랭크                            |                                                      사용 언어                                                      |\r\n| :--------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------: |\r\n| ![image](https://d2gd6pc034wcta.cloudfront.net/tier/7.svg) | ![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |\r\n\r\n🔗 [전체 1021번 문제](https://www.acmicpc.net/problem/1021)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    128MB    |\r\n\r\n## 문제\r\n\r\n지민이는 $N$개의 원소를 포함하고 있는 양방향 순환 큐를 가지고 있다. 지민이는 이 큐에서 몇 개의 원소를 뽑아내려고 한다.\r\n\r\n지민이는 이 큐에서 다음과 같은 3가지 연산을 수행할 수 있다.\r\n\r\n1. 첫 번째 원소를 뽑아낸다. 이 연산을 수행하면, 원래 큐의 원소가 $a_1, \\dotsb, a_k$였던 것이 $a_2, \\dotsb, a_k$가 된다.\r\n2. 왼쪽으로 한 칸 이동시킨다. 이 연산을 수행하면 $a_1, \\dotsb, a_k$가 $a_2, \\dotsb, a_k, a_1$이 된다.\r\n3. 오른쪽으로 한 칸 이동시킨다. 이 연산을 수행하면 $a_1, \\dotsb, a_k$가 $a_k, a_1, \\dotsb, a_{k - 1}$이 된다.\r\n\r\n큐에 처음에 포함되어 있던 수 $N$이 주어진다. 그리고 지민이가 뽑아내려고 하는 원소의 위치가 주어진다. (이 위치는 가장 처음 큐에서의 위치이다.) 이때, 그 원소를 주어진 순서대로 뽑아내는데 드는 2번, 3번 연산의 최솟값을 출력하는 프로그램을 작성하시오.\r\n\r\n## 입력\r\n\r\n첫째 줄에 큐의 크기 $N$과 뽑아내려고 하는 수의 개수 $M$이 주어진다. $N$은 50보다 작거나 같은 자연수이고, $M$은 $N$보다 작거나 같은 자연수이다. 둘째 줄에는 지민이가 뽑아내려고 하는 수의 위치가 순서대로 주어진다. 위치는 1보다 크거나 같고, N보다 작거나 같은 자연수이다.\r\n\r\n## 출력\r\n\r\n첫째 줄에 문제의 정답을 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n``` input\r\n10 3\r\n1 2 3\r\n```\r\n\r\n``` output\r\n0\r\n```\r\n\r\n### 예제 2\r\n\r\n``` input\r\n10 3\r\n2 9 5\r\n```\r\n\r\n``` output\r\n8\r\n```\r\n\r\n### 예제 3\r\n\r\n``` input\r\n32 6\r\n27 16 30 11 6 23\r\n```\r\n\r\n``` output\r\n59\r\n```\r\n\r\n### 예제 4\r\n\r\n``` input\r\n10 10\r\n1 6 3 2 7 9 8 4 10 5\r\n```\r\n\r\n``` output\r\n14\r\n```\r\n\r\n# 풀이\r\n\r\n<span class=\"teal-600\">큐</span>의 특성을 알고 있다면 이해하기 쉬운 문제다.\r\n\r\n큐는 배열의 형태로, 한쪽 입구에서 요소의 삽입이 일어나며, 다른 한쪽에서 요소의 삭제가 일어나는 자료구조다. 컨테이너 벨트처럼 순차적으로 데이터를 처리하는 선입선출(FIFO) 방식을 차용하고 있어 순차적인 데이터를 처리하는데 유용하다.\r\n\r\n> 큐의 특성은 해당 블로그에 작성된 [게시글](/posts/2021/07/31/about-algorithm-chapter08#8-3.-%ED%81%90)에서 확인할 수 있다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130629741-6b9dc89d-86fa-4c84-a06e-05950c86a489.png)\r\n\r\n\r\n하지만 단순한 큐가 아니라, 아래의 특징을 갖는 자료구조를 설계해야한다.\r\n\r\n1. 첫 번째 원소를 뽑아내는 연산\r\n2. 데이터의 좌우 이동 연산 (각 끝의 요소는 반대편으로 이동하는 방식으로 순환)\r\n\r\n위 자료구조를 토대로 알고리즘이 원하는 동작을 구현하면 된다.\r\n\r\n문제에서 제시하는 데이터를 순서대로 뽑아내되, 최소한의 데이터 이동이 이루어져야한다.\r\n\r\n1번 연산을 수행하면, 단순히 첫 번째 칸의 원소만 지우는 게 아니라, 칸 자체를 제거한다.\r\n\r\n즉, <span class=\"red-500\">10개의 칸을 가진 큐에서 1번 연산을 수행하면 칸이 9개로 감소</span>한다.\r\n\r\n## 예제 풀이\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130823251-4d6f5300-4363-49b6-ad76-7168d484dff8.png)\r\n\r\n예제 2를 기준으로 풀이를 진행한다. 큐의 길이는 총 10으로, 위와 같을 것이다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130823281-5ed5b772-66ce-494a-9189-2366cd7ad45c.png)\r\n\r\n뽑을 원소의 순서는 위와 같다.\r\n\r\n<br />\r\n<br />\r\n\r\n<b class=\"large deepPurple-300\">1. 2의 위치 계산</b>\r\n\r\n첫 번째로 뽑을 원소인 2와 데이터의 삭제 연산이 일어나는 첫 번째 칸까지의 위치를 계산한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130824338-20a0e7da-d8c3-4e00-a691-0ea103fd3cce.png)\r\n\r\n* 오른쪽: 9칸\r\n* 왼쪽: 1칸\r\n\r\n왼쪽이 더 빠르므로, 방향을 왼쪽으로 정한다.\r\n\r\n<br />\r\n<br />\r\n\r\n<b class=\"large deepPurple-300\">2. 요소 왼쪽으로 이동</b>\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130824549-67551e2a-3d14-4581-8161-743bb46469fc.png)\r\n\r\n* 누적 이동횟수: 1\r\n\r\n요소 2를 첫 번째 칸까지 왼쪽으로 1칸 이동한다.\r\n\r\n<br />\r\n<br />\r\n\r\n<b class=\"large deepPurple-300\">3. 요소 삭제</b>\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130824982-ae2575aa-dfff-4424-affe-15e9a92ddbb9.png)\r\n\r\n요소 2를 삭제한다. 아예 칸 자체가 사라짐에 유의하자.\r\n\r\n삭제는 이동횟수에 포함되지 않는다.\r\n\r\n<br />\r\n<br />\r\n\r\n<b class=\"large deepPurple-300\">4. 9의 위치 계산</b>\r\n\r\n두 번째로 뽑을 원소인 9와 데이터의 삭제 연산이 일어나는 첫 번째 칸까지의 위치를 계산한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130825673-9af78509-8918-4638-84cc-0ffcfa30a95b.png)\r\n\r\n* 오른쪽: 3칸\r\n* 왼쪽: 6칸\r\n\r\n오른쪽이 더 빠르므로, 방향을 오른쪽으로 정한다.\r\n\r\n<br />\r\n<br />\r\n\r\n<b class=\"large deepPurple-300\">5. 요소 오른쪽으로 이동</b>\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130826195-b7a12a3f-0fed-4e46-bcb0-46936bfd130f.png)\r\n\r\n* 누적 이동횟수: 4\r\n\r\n요소 9를 첫 번째 칸까지 오른쪽으로 3칸 이동한다.\r\n\r\n<br />\r\n<br />\r\n\r\n<b class=\"large deepPurple-300\">6. 요소 삭제</b>\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130826601-776f4bc8-944e-4d5f-a05d-73116334e229.png)\r\n\r\n요소 9를 삭제한다.\r\n\r\n<br />\r\n<br />\r\n\r\n<b class=\"large deepPurple-300\">7. 5의 위치 계산</b>\r\n\r\n마지막으로 뽑을 원소인 5와 데이터의 삭제 연산이 일어나는 첫 번째 칸까지의 위치를 계산한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130827731-deda3121-792f-4664-b851-8e21d2a0a1a9.png)\r\n\r\n* 오른쪽: 4칸\r\n* 왼쪽: 4칸\r\n\r\n거리가 서로 동등한 케이스다. 이 경우 알고리즘 역시 별도의 제약조건을 걸지 않았으므로, 아무 방향으로 이동해도 상관없다.\r\n\r\n본 문서에선 왼쪽을 기준으로 이동한다.\r\n\r\n<br />\r\n<br />\r\n\r\n<b class=\"large deepPurple-300\">8. 요소 왼쪽으로 이동</b>\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130828678-790bc1ee-7c7d-43d9-912f-ee7ecc41c1f8.png)\r\n\r\n* 누적 이동횟수: 8\r\n\r\n요소 9를 첫 번째 칸까지 오른쪽으로 4칸 이동한다.\r\n\r\n<br />\r\n<br />\r\n\r\n<b class=\"large deepPurple-300\">9. 요소 삭제</b>\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/130828805-3a216247-5361-47be-8c13-c41081b594dd.png)\r\n\r\n요소 9를 삭제한다.\r\n\r\n<br />\r\n<br />\r\n\r\n<b class=\"large deepPurple-300\">10. 결과 도출</b>\r\n\r\n총 이동횟수는 8회이므로, 알고리즘의 결과는 8이 된다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\nimport java.util.LinkedList;\r\n\r\n/**\r\n * 백준 전체 1021 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/14/A1021/\">1021 풀이</a>\r\n * @since 2021.07.14 12:57:01\r\n */\r\npublic class Main\r\n{\r\n\t// 뽑을 수의 갯수\r\n\tprivate static int M;\r\n\t\r\n\t// 큐\r\n\tprivate static final LinkedList<Integer> QUEUE = new LinkedList<>();\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// N과 M\r\n\t\tint[] meta = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\t// 수의 위치\r\n\t\tint[] position = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\t// 큐의 크기\r\n\t\tint N = meta[0];\r\n\t\t\r\n\t\tM = meta[1];\r\n\t\t\r\n\t\t// 큐의 크기만큼 큐 초기화\r\n\t\tfor (int i = 0; i < N; i++)\r\n\t\t{\r\n\t\t\tQUEUE.add(i + 1);\r\n\t\t}\r\n\t\t\r\n\t\twriter.write(String.valueOf(solve(position)));\r\n\t\twriter.newLine();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 큐 연산 갯수 반환 함수\r\n\t *\r\n\t * @param position: [int[]] 수의 위치 배열\r\n\t *\r\n\t * @return [int] 연산 갯수\r\n\t */\r\n\tprivate static int solve(int[] position)\r\n\t{\r\n\t\tint count = 0;\r\n\t\t\r\n\t\tfor (int i = 0; i < M; i++)\r\n\t\t{\r\n\t\t\t// 뽑을 요소의 인덱스\r\n\t\t\tint target = QUEUE.indexOf(position[i]);\r\n\t\t\t\r\n\t\t\t// 구간 구분 기준\r\n\t\t\tint ref = QUEUE.size() / 2;\r\n\t\t\t\r\n\t\t\t// 오른쪽으로 이동하는 게 더 빠를 경우\r\n\t\t\tif (target > ref)\r\n\t\t\t{\r\n\t\t\t\twhile (position[i] != QUEUE.getFirst())\r\n\t\t\t\t{\r\n\t\t\t\t\t// 맨 끝 요소를 제거하고 맨 앞에 추가\r\n\t\t\t\t\tQUEUE.addFirst(QUEUE.removeLast());\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 왼쪽으로 이동하는 게 더 빠를 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\twhile (position[i] != QUEUE.getFirst())\r\n\t\t\t\t{\r\n\t\t\t\t\t// 맨 앞 요소를 제거하거 맨 끝에 추가\r\n\t\t\t\t\tQUEUE.addLast(QUEUE.removeFirst());\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tQUEUE.removeFirst();\r\n\t\t}\r\n\t\t\r\n\t\treturn count;\r\n\t}\r\n}\r\n```\r\n\r\n회전하는 큐의 주요 동작은 양방향 이동, 삭제다. 해당 동작은 각각 `move()`, `pop()` 메소드로 구현된다.\r\n\r\n``` java\r\n/**\r\n * 이동 함수\r\n *\r\n * @param direction: [DIRECTION] 방향 Enum\r\n * @param distance: [int] 거리\r\n */\r\nprivate static void move(DIRECTION direction, int distance)\r\n{\r\n\t// 왼쪽으로 이동할 경우\r\n\tif (DIRECTION.LEFT == direction)\r\n\t{\r\n\t\tfor (int i = 0; i < distance; i++)\r\n\t\t{\r\n\t\t\tQUEUE.addLast(QUEUE.removeFirst());\r\n\t\t}\r\n\t}\r\n\t\r\n\t// 오른쪽으로 이동할 경우\r\n\telse\r\n\t{\r\n\t\tfor (int i = 0; i < distance; i++)\r\n\t\t{\r\n\t\t\tQUEUE.addFirst(QUEUE.removeLast());\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n`move()` 수행 시 방향은 `enum` 객체인 `DIRECTION`으로 구분하며, 입력한 횟수만큼 이동한다.\r\n\r\n``` java\r\n/**\r\n * 삭제 함수\r\n */\r\nprivate static void pop()\r\n{\r\n\tQUEUE.removeFirst();\r\n}\r\n```\r\n\r\n`pop()` 수행 시 큐의 첫 번째 요소를 삭제한다.\r\n\r\n<br />\r\n\r\n핵심 알고리즘 함수는 아래와 같다.\r\n\r\n``` java\r\n/**\r\n * 큐 연산 갯수 반환 함수\r\n *\r\n * @param position: [int[]] 수의 위치 배열\r\n *\r\n * @return [int] 연산 갯수\r\n */\r\nprivate static int solve(int[] position)\r\n{\r\n\tint count = 0;\r\n\t\r\n\tfor (int i = 0; i < M; i++)\r\n\t{\r\n\t\t// 뽑을 요소의 인덱스\r\n\t\tint target = QUEUE.indexOf(position[i]);\r\n\t\t\r\n\t\t// 요소의 중간\r\n\t\tint mid = QUEUE.size() / 2;\r\n\t\t\r\n\t\t// 인덱스가 요소의 중간값을 넘을 경우 오른쪽이 더 빠름\r\n\t\tDIRECTION direction = target > mid ? DIRECTION.RIGHT : DIRECTION.LEFT;\r\n\t\t\r\n\t\t// 오른쪽으로 갈 경우 큐의 길이에서 인덱스를 빼서 역계산\r\n\t\tint distance = direction == DIRECTION.RIGHT ? QUEUE.size() - target : target;\r\n\t\t\r\n\t\tmove(direction, distance);\r\n\t\tpop();\r\n\t\t\r\n\t\t// 이동 길이 누적\r\n\t\tcount += distance;\r\n\t}\r\n\t\r\n\treturn count;\r\n}\r\n```\r\n\r\n`target`으로 뽑을 요소의 인덱스를 구한다.\r\n\r\n`mid` 큐의 중간값으로, `target`이 중간값보다 클 경우 오른쪽으로, 아닐 경우 왼쪽으로 이동하도록 `direction`을 지정한다.\r\n\r\n`distance`는 거리로, 오른쪽으로 이동할 경우 큐의 사이즈에서 거리를 빼고, 왼쪽으로 이동할 경우 거리를 그대로 사용한다.\r\n\r\n이후 계산한 방향, 거리만큼 이동하고 데이터를 삭제한다. 이동거리는 `count`에 누적된다.\r\n\r\n## 분류\r\n\r\n* 자료구조\r\n* 덱","url":["2021-08-26-a1021","2021","08","26","a1021"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1015번 수열 정렬","excerpt":"P[0], P[1], ..., P[N - 1]은 0부터 N - 1까지(포함)의 수를 한 번씩 포함하고 있는 수열이다. 수열 P를 길이가 N인 배열 A에 적용하면 길이가 N인 배열 B가 된다. 적용하는 방법은 B[P[i]] = A[i]이다. 배열 A가 주어졌을 때, 수열 P를 적용한 결과가 비내림차순이 되는 수열을 찾는 프로그램을 작성하시오. 비내림차순이란, 각각의 원소가 바로 앞에 있는 원소보다 크거나 같을 경우를 말한다. 만약 그러한 수열이 여러개라면 사전순으로 앞서는 것을 출력한다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-22T01:23:31","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","SILVER","SILVER IV","정렬"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-22-a1015.md","content":"\r\n# 수열 정렬\r\n\r\n|                            랭크                            |                                                      사용 언어                                                      |\r\n| :--------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------: |\r\n| ![image](https://d2gd6pc034wcta.cloudfront.net/tier/7.svg) | ![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |\r\n\r\n🔗 [전체 1015번 문제](https://www.acmicpc.net/problem/1015)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    128MB    |\r\n\r\n## 문제\r\n\r\n$P[0], P[1], \\, \\dots \\, P[N - 1]$은 $0$부터 $N - 1$까지(포함)의 수를 한 번씩 포함하고 있는 수열이다. 수열 $P$를 길이가 $N$인 배열 $A$에 적용하면 길이가 $N$인 배열 $B$가 된다. 적용하는 방법은 $B[P[i]] = A[i]$이다.\r\n\r\n배열 $A$가 주어졌을 때, 수열 $P$를 적용한 결과가 비내림차순이 되는 수열을 찾는 프로그램을 작성하시오. 비내림차순이란, 각각의 원소가 바로 앞에 있는 원소보다 크거나 같을 경우를 말한다. 만약 그러한 수열이 여러개라면 사전순으로 앞서는 것을 출력한다.\r\n\r\n## 입력\r\n\r\n첫째 줄에 배열 $A$의 크기 $N$이 주어진다. 둘째 줄에는 배열 $A$의 원소가 0번부터 차례대로 주어진다. $N$은 50보다 작거나 같은 자연수이고, 배열의 원소는 1,000보다 작거나 같은 자연수이다.\r\n\r\n## 출력\r\n\r\n첫째 줄에 비내림차순으로 만드는 수열 $P$를 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n3\r\n2 3 1\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n1 2 0\r\n```\r\n\r\n# 풀이\r\n\r\n정렬에 대해 잘 알고 있다면 쉬어가는 문제. 한 마디로, <span class=\"amber-A400\">배열 속 요소들을 크기별 등수로 바꾸어 동일한 자리에 표시</span>해주면 된다.\r\n\r\n예제의 경우, 배열 $A$가 $[ 2, 3, 1 ]$로 주어졌는데, 이를 오름차순으로 표시하여 배열 $A1$로 만들면 $[ 1, 2, 3 ]$이 된다. 즉 $A1[0] = 1$이 된다. $A1$의 인덱스를 $A$의 요소의 순서에 맞게 출력하는 것이 알고리즘의 최종 동작이다.\r\n\r\n## 배열 A의 순서 기억하기\r\n\r\n첫 번째로, 정수형 배열의 오름차순 정렬은 매우 쉽다. `Arrays.sort(A);`만 적용해주면 될 일이기 때문. 문제는 정렬한 인덱스를 원본 배열 $A$의 순서대로 출력해야 한다는 것.\r\n\r\n이를 기억하는 장치로 배열 $A$를 2차원 배열로 만들어 $A[i][0]$에는 <span class=\"orange-A400\">i번째 입력값의 값</span>, $A[i][1]$에는 순번 인덱스 <span class=\"orange-A400\">i</span>를 입력한다.\r\n\r\n이를 표로 도식화하면 아래와 같다.\r\n\r\n|    $i$    |   0   |   1   |   2   |\r\n| :-------: | :---: | :---: | :---: |\r\n| $A[i][0]$ |   2   |   3   |   1   |\r\n| $A[i][1]$ |   0   |   1   |   2   |\r\n\r\n따라서 배열 $A$를 정렬해도, 순서를 기억할 수 있게 된다.\r\n\r\n|    $i$    |   0   |   1   |   2   |\r\n| :-------: | :---: | :---: | :---: |\r\n| $A[i][0]$ |   1   |   2   |   3   |\r\n| $A[i][1]$ |   2   |   0   |   1   |\r\n\r\n위 표는 오름차순 정렬을 적용한 것으로, $A[i][1]$을 통해 원래의 순서로 되돌릴 수 있을 것이다.\r\n\r\n## 정렬 후 되돌리기\r\n\r\n배열 $A$에 수열 $P$를 적용한 결과인 $B$를 구한다. 위에서 정렬을 통해 크기 순위를 계산했으므로, 이를 <span class=\"green-A400\">위치에 맞게 순서를 되돌려 출력</span>하면 된다.\r\n\r\n원래의 위치값은 $A[i][1]$이 가지고 있으므로, 이 인덱스를 활용하자. 배열 $B$의 식은 $B[A[i][1]] = i$와 같은 형태로 계산할 수 있다. 예를 들어, $i = 1$일 때 정렬된 배열 $A[1][1] = 0$이므로 $B[0] = 1$이 된다. 이를 코드로 구현하면 완성된다.\r\n\r\n## 이차원 배열 정렬하기\r\n\r\n여기서 작은 문제가 하나 생기는데, 바로 정렬이다. 대표적인 정렬 메소드인 `Arrays.sort(A);`의 경우 1차원 배열에서는 의도에 맞게 동작하나, 그 이상인 $n$차원 배열부터는 의도한대로 동작하지 않는다. 또한 `Arrays.sort(A);`는 무조건 오름차순으로만 동작한다.\r\n\r\n이를 해결하기 위해선, `sort()` 메소드를 직접 오버라이딩하면 된다. 물론 아예 구현해도 되지만, 여기서는 기본 API를 최대한 살려 sort 함수를 우리 의도에 맞게 오버라이딩한다.\r\n\r\n``` java\r\nArrays.sort(A, (next, current) -> {\r\n\t// 다음 원소가 현재 원소보다 클 경우\r\n\tif (next[0] < current[0])\r\n\t{\r\n\t\t// 현재 원소를 다음 원소의 뒤로 정렬\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t// 다음 원소가 현재 원소보다 작을 경우\r\n\telse if (next[0] > current[0])\r\n\t{\r\n\t\t// 현재 원소를 다음 원소의 앞으로 정렬\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t// 다음 원소가 현재 원소와 동일할 경우\r\n\telse\r\n\t{\r\n\t\t// 현 위치 유지\r\n\t\treturn 0;\r\n\t}\r\n})\r\n```\r\n\r\n`Comparater` 인터페이스를 lambda 함수의 형태로 구현한 코드다. `current`는 <span class=\"blue-400\">현재 요소</span>를, `next`는 <span class=\"blue-400\">다음 요소</span>를 의미하며 <span class=\"blue-400\">반환값이 양수일 경우 현재 요소가 다음 요소보다 뒤로 정렬</span>되며, <span class=\"blue-400\">반환값이 음수일 경우 현재 요소가 다음 요소보다 앞으로 정렬</span>된다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 백준 전체 1015 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/06/22/a1015\">1015 풀이</a>\r\n * @since 2021.06.22 Tue 01:23:31\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 배열의 크기\r\n\t\tint N = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\t// 원본 배열\r\n\t\tint[][] A = new int[N][2];\r\n\t\t\r\n\t\t// 정렬 배열\r\n\t\tint[] B = new int[N];\r\n\t\t\r\n\t\tString[] temp = reader.readLine().split(\" \");\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\r\n\t\tfor (int i = 0; i < N; i++)\r\n\t\t{\r\n\t\t\tA[i][0] = Integer.parseInt(temp[i]);\r\n\t\t\tA[i][1] = i;\r\n\t\t}\r\n\t\t\r\n\t\t// 정렬 수행\r\n\t\tsort(A);\r\n\t\t\r\n\t\tfor (int i = 0; i < N; i++)\r\n\t\t{\r\n\t\t\tint index = A[i][1];\r\n\t\t\t\r\n\t\t\tB[index] = i;\r\n\t\t}\r\n\t\t\r\n\t\tfor (int b : B)\r\n\t\t{\r\n\t\t\tbuilder.append(b).append(\" \");\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(builder.toString().trim());\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 정렬 함수\r\n\t *\r\n\t * @param A: [int[][]] 대상 배열\r\n\t */\r\n\tprivate static void sort(int[][] A)\r\n\t{\r\n\t\tArrays.sort(A, (next, current) ->\r\n\t\t{\r\n\t\t\t// 현재값이 더 클 경우\r\n\t\t\tif (next[0] < current[0])\r\n\t\t\t{\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 다음값이 더 클 경우\r\n\t\t\telse if (next[0] > current[0])\r\n\t\t\t{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 현재값과 다음값이 같을 경우, 사전순 정렬\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn Integer.compare(next[1], current[1]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n```\r\n\r\n## 분류\r\n\r\n* 정렬","url":["2021-06-22-a1015","2021","06","22","a1015"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1002번 터렛","excerpt":"조규현과 백승환은 터렛에 근무하는 직원이다. 하지만 워낙 존재감이 없어서 인구수는 차지하지 않는다. 다음은 조규현과 백승현의 사진이다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-05-21T21:56:10","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","기하학","SILVER","SILVER IV"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-05-21-a1002.md","content":"\r\n# 터렛\r\n\r\n|                            랭크                            |                                                      사용 언어                                                      |\r\n| :--------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------: |\r\n| ![image](https://d2gd6pc034wcta.cloudfront.net/tier/7.svg) | ![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |\r\n\r\n🔗 [전체 1002번 문제](https://www.acmicpc.net/problem/1002)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    128MB    |\r\n\r\n## 문제\r\n\r\n조규현과 백승환은 터렛에 근무하는 직원이다. 하지만 워낙 존재감이 없어서 인구수는 차지하지 않는다. 다음은 조규현과 백승현의 사진이다.\r\n\r\n![image](https://www.acmicpc.net/upload/201003/dfcmhrjj_142c3w76qg8_b.jpg)\r\n\r\n이석원은 조규현과 백승환에게 상대편 마린(류재영)의 위치를 계산하라는 명령을 내렸다. 조규현과 백승환은 각각 자신의 터렛 위치에서 현재 적까지의 거리를 계산했다.  \r\n조규현의 좌표 $(x_1, y_1)$와 백승환의 좌표 $(x_2, y_2)$가 주어지고, 조규현이 계산한 류재명과의 거리 $r_1$과 백승환이 계산한 류재명과의 거리 $r_2$가 주어졌을 때, 류재명이 있을 수 있는 좌표의 수를 출력하는 프로그램을 작성하시오.\r\n\r\n## 입력\r\n\r\n첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 다음과 같이 이루어져 있다.  \r\n한 줄에 $x_1$, $y_1$, $r_1$, $x_2$, $y_2$, $r_2$가 주어진다. $x_1$, $y_1$, $x_2$, $y_2$는 -10,000보다 크거나 같고, 10,000보다 작거나 같은 점수이고, $r_1$, $r_2$는 10,000보다 작거나 같은 자연수이다.\r\n\r\n## 출력\r\n\r\n각 테스트 케이스마다 류재명이 있을 수 있는 위치의 수를 출력한다. 만약 류재명이 있을 수 있는 위치의 개수가 무한대일 경우에는 -1을 출력한다.\r\n\r\n## 케이스\r\n\r\n+ 입력\r\n\r\n``` tc\r\n3\r\n0 0 13 40 0 37\r\n0 0 30 0 7 4\r\n1 1 1 1 1 5\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n2\r\n1\r\n0\r\n```\r\n\r\n# 풀이\r\n\r\n예제의 요소를 사람 이름으로 두었으나, 문제 이해에 방해가 되니 간단하게 서술하면 아래와 같다.  \r\n임의의 위치에 있는 점 $A$, $B$, $C$가 존재하며, $A$와 $C$의 거리, $B$와 $C$의 거리가 주어진다.  \r\n이 때, $C$가 실제로 위치할 수 있는 점의 갯수를 구하는 것. 즉, 간단하게 **두 원의 접점을 구하는 문제**라고 정의할 수 있다.  \r\n원이 완벽하게 겹칠 경우, **그 수가 무수히 많으므로 -1로 표현**하라는 조건이 포함된다.\r\n\r\n이를 그림으로 표현하면 아래와 같다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/120757881-14146780-c54c-11eb-94ee-ab79d997000e.png)\r\n\r\n변수는 아래와 같이 정리할 수 있다.\r\n\r\n|  $n$  |   $x_n$   |   $y_n$   |   $r_n$    |\r\n| :---: | :-------: | :-------: | :--------: |\r\n|   1   | A의 x좌표 | A의 y좌표 | A의 반지름 |\r\n|   2   | B의 x좌표 | B의 y좌표 | B의 반지름 |\r\n\r\n케이스를 세분화하면 총 6가지로 나눌 수 있다.\r\n\r\n1. 두 원이 정확히 겹칠 경우 (-1)\r\n2. 두 원이 서로 겹치면서 인접하지 않는 경우 (0)\r\n3. 두 원이 서로 겹치지 않으면서 인접하지 않는 경우 (0)\r\n4. 두 원이 서로 겹치면서 인접하는 경우 (1)\r\n5. 두 원이 서로 겹치지 않으면서 인접하는 경우 (1)\r\n6. 두 원이 서로 겹치면서 인접하지 않는 경우 (2)\r\n\r\n본 풀이에선 $x_1$, $y_1$과 $x_2$, $y_2$의 거리($distance$) 및 $r_1$, $r_2$를 합한 길이($sum$)와 뺀 길이($sub$)의 절대값을 이용하여 진행한다.\r\n\r\n$$\r\ndistance = \\sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2}\r\n$$\r\n\r\n$$\r\nsum = r_1 + r_2\r\n$$\r\n\r\n$$\r\nsub = \\vert r_1 - r_2 \\vert\r\n$$\r\n\r\n* <b class=\"primary\">case 1 - 두 원이 정확히 겹칠 경우</b>\r\n\r\n\t두 원의 위치 및 반지름이 서로 동일한 상황.  \r\n\t$distance$가 0이며, $r_1$과 $r_2$의 길이가 동일할 경우 성립한다.\r\n\r\n* <b class=\"primary\">case 2 - 두 원이 서로 겹치면서 인접하지 않는 경우</b>\r\n\r\n\t두 원의 원점과의 거리가 반지름의 차이보다 짧은 상황.  \r\n\t$distance < sub$일 경우 성립한다.\r\n\r\n* <b class=\"primary\">case 3 - 두 원이 서로 겹치지 않으면서 인접하지 않는 경우</b>\r\n\r\n\t두 원의 원점과의 거리가 반지름의 합보다 긴 상황.  \r\n\t$distance > sum$일 경우 성립한다.\r\n\r\n* <b class=\"primary\">case 4 - 두 원이 서로 겹치면서 인접하는 경우</b>\r\n\r\n\t두 원의 원점과의 거리가 반지름의 차이와 일치하는 상황.  \r\n\t$distance == sub$일 경우 성립한다.\r\n\r\n* <b class=\"primary\">case 5 - 두 원이 서로 겹치지 않으면서 인접하는 경우</b>\r\n\r\n\t두 원의 원점과의 거리가 반지름의 합과 일치하는 상황.  \r\n\t$distance == sum$일 경우 성립한다.\r\n\r\n* <b class=\"primary\">case 6 - 두 원이 서로 겹치면서 인접하지 않는 경우</b>\r\n\r\n\t두 원이 서로 적당히 겹치는 상황.  \r\n\t$distance < sum$ $\\&\\&$ $distance > sub$일 경우 성립한다.\r\n\r\n굳이 식으로 표현하지 않아도, 위의 5개 케이스에 부합하지 않는 모든 상황에 적용하면 된다.  \r\n위 케이스들을 `if`문을 사용하여 적절히 표현하면 된다. `switch`문의 경우 하나의 변수를 기준으로 분기를 판단하므로 해당 알고리즘에 적용하기엔 다소 부적절하다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * 백준 전체 1002 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/05/21/a1002\">1002 풀이</a>\r\n * @since 2021.04.21 Wed 21:56:10\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\t\r\n\t\tint length = scanner.nextInt();\r\n\t\t\r\n\t\tfor (int i = 0; i < length; i++)\r\n\t\t{\r\n\t\t\tint x1 = scanner.nextInt();\r\n\t\t\tint y1 = scanner.nextInt();\r\n\t\t\tint r1 = scanner.nextInt();\r\n\t\t\t\r\n\t\t\tint x2 = scanner.nextInt();\r\n\t\t\tint y2 = scanner.nextInt();\r\n\t\t\tint r2 = scanner.nextInt();\r\n\t\t\t\r\n\t\t\tSystem.out.println(calcPoints(x1, y1, r1, x2, y2, r2));\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * 접점 갯수 반환 함수\r\n\t *\r\n\t * case 1 - 두 원이 정확히 겹칠 경우 (-1)\r\n\t * case 2 - 두 원이 서로 겹치면서 인접하지 않는 경우 (0)\r\n\t * case 3 - 두 원이 서로 겹치지 않으면서 인접하지 않는 경우 (0)\r\n\t * case 4 - 두 원이 서로 겹치면서 인접하는 경우 (1)\r\n\t * case 5 - 두 원이 서로 겹치지 않으면서 인접하는 경우 (1)\r\n\t * case 6 - 두 원이 서로 겹치면서 인접하지 않는 경우 (2)\r\n\t *\r\n\t * @param x1: [int] A의 x좌표\r\n\t * @param y1: [int] A의 y좌표\r\n\t * @param r1: [int] A와 C 사이의 거리\r\n\t * @param x2: [int] B의 x좌표\r\n\t * @param y2: [int] B의 y좌표\r\n\t * @param r2: [int] B와 C 사이의 거리\r\n\t *\r\n\t * @return [int] 접점 갯수\r\n\t */\r\n\tprivate static int calcPoints(int x1, int y1, int r1, int x2, int y2, int r2)\r\n\t{\r\n\t\t// 두 점 사이의 거리 계산식\r\n\t\tdouble distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\r\n\t\t\r\n\t\tint sum = r1 + r2;\r\n\t\tint sub = Math.abs(r1 - r2);\r\n\t\t\r\n\t\t// case 1 - 두 원이 정확히 겹칠 경우\r\n\t\tif (distance == 0 && r1 == r2)\r\n\t\t{\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\t\r\n\t\t// case 2 - 두 원이 서로 겹치면서 인접하지 않는 경우\r\n\t\telse if (distance < sub)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\t// case 3 - 두 원이 서로 겹치지 않으면서 인접하지 않는 경우\r\n\t\telse if (distance > sum)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\t// case 4 - 두 원이 서로 겹치면서 인접하는 경우\r\n\t\telse if (distance == sub)\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\t// case 5 - 두 원이 서로 겹치지 않으면서 인접하는 경우\r\n\t\telse if (distance == sum)\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\t// case 6 - 두 원이 서로 겹치면서 인접하지 않는 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n## 분류\r\n\r\n* 수학\r\n* 기하학","url":["2021-05-21-a1002","2021","05","21","a1002"]}],"categories":{"All":{"count":70,"flag":true},"Ubuntu":{"count":2,"flag":true},"RaspberryPi":{"count":7,"flag":true},"알고리즘":{"count":32,"flag":false},"잡담":{"count":2,"flag":false},"WEB":{"count":7,"flag":false},"CS":{"count":10,"flag":false},"React":{"count":1,"flag":false},"JAVA":{"count":3,"flag":false},"Jekyll":{"count":4,"flag":false},"WAS":{"count":2,"flag":false}},"images":["celeb1.gif","celeb10.gif","celeb11.gif","celeb12.gif","celeb13.gif","celeb14.gif","celeb15.gif","celeb16.gif","celeb2.gif","celeb3.gif","celeb4.gif","celeb5.gif","celeb6.gif","celeb7.gif","celeb8.gif","celeb9.gif","city1.gif","city10.gif","city11.gif","city12.gif","city13.gif","city14.gif","city15.gif","city2.gif","city3.gif","city4.gif","city4.jpg","city5.gif","city6.gif","city7.gif","city8.gif","city9.gif","code1.gif","code2.gif","code3.gif","funk1.gif","funk2.gif","funk3.gif","funk4.gif","funk5.gif","funk6.gif","game1.gif","signal.gif"],"tag":"SILVER IV","page":1,"hash":"c75a1fd9f41"},"__N_SSG":true}