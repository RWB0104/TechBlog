{"pageProps":{"posts":[{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1018번 체스판 다시 칠하기","excerpt":"지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M*N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8*8 크기의 체스판으로 만들려고 한다. 체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다. 보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 8 X 8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 8*8 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-26T16:46:20","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","SILVER","SILVER V","Brute Force(무차별 대입 공격)"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-26-a1018.md","content":"\r\n# 체스판 다시 칠하기\r\n\r\n|                            랭크                            |                                                      사용 언어                                                      |\r\n| :--------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------: |\r\n| ![image](https://d2gd6pc034wcta.cloudfront.net/tier/6.svg) | ![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |\r\n\r\n🔗 [전체 1018번 문제](https://www.acmicpc.net/problem/1018)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    128MB    |\r\n\r\n## 문제\r\n\r\n지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 $M \\times N$ 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 $8 \\times 8$ 크기의 체스판으로 만들려고 한다.\r\n\r\n체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.\r\n\r\n보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 $8 \\times 8$ 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 $8 \\times 8$ 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.\r\n\r\n## 입력\r\n\r\n첫째 줄에 $N$과 $M$이 주어진다. $N$과 $M$은 8보다 크거나 같고, 50보다 작거나 같은 자연수이다. 둘째 줄부터 $N$개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.\r\n\r\n## 출력\r\n\r\n첫째 줄에 지민이가 다시 칠해야 하는 정사각형 개수의 최솟값을 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n8 8\r\nWBWBWBWB\r\nBWBWBWBW\r\nWBWBWBWB\r\nBWBBBWBW\r\nWBWBWBWB\r\nBWBWBWBW\r\nWBWBWBWB\r\nBWBWBWBW\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n1\r\n```\r\n\r\n### 예제 2\r\n\r\n+ 입력\r\n\r\n``` tc\r\n10 13\r\nBBBBBBBBWBWBW\r\nBBBBBBBBBWBWB\r\nBBBBBBBBWBWBW\r\nBBBBBBBBBWBWB\r\nBBBBBBBBWBWBW\r\nBBBBBBBBBWBWB\r\nBBBBBBBBWBWBW\r\nBBBBBBBBBWBWB\r\nWWWWWWWWWWBWB\r\nWWWWWWWWWWBWB\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n12\r\n```\r\n\r\n# 풀이\r\n\r\n각 칸이 흰색 또는 검은색으로 칠해진 커다란 판에서 임의의 위치부터 $8 \\times 8$ 크기로 잘라 체스판을 만든다. 그 중 가장 적은 칸을 칠하여 체스판을 만들고자 할 때, 칠해야하는 최소값을 구하는 문제. 주어진 변수의 범위가 적어 그냥 무식하게 하나하나 비교하면 된다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/123507886-2430ea00-d6a7-11eb-8c98-eecd7655f352.png\" width=\"600px\" />\r\n</p>\r\n\r\n위 처럼 $N \\times M$의 배열에서 무작위 $8 \\times 8$ 크기의 배열을 뽑아내야한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/123507891-2c892500-d6a7-11eb-85b3-eb4d7803450d.png\" width=\"800px\" />\r\n</p>\r\n\r\n$10 \\times 10$짜리 배열을 기준으로, 해당 판에서 $8 \\times 8$ 배열을 선택하는 경우의 수는 총 9가지이며, 이를 도식화하면 위 그림과 같다. 이처럼 전체 배열에서 $8 \\times 8$만큼 한 칸씩 이동하며 비교하면 된다.\r\n\r\n``` java\r\nfor (int n = 0; n < N - 7; n++)\r\n{\r\n\tfor (int m = 0; m < M - 7; m++)\r\n\t{\r\n\t\t// TODO\r\n\t}\r\n}\r\n```\r\n\r\n위 코드와 같이 기술하면 가로부터 한 칸씩 이동하며, 끝에 도달할 경우 세로로 한 칸 이동한 뒤 다시 가로부터 한 칸씩 이동할 것이다. `n < N - 7`인 이유는 비교할 배열의 세로 길이가 8이기 때문. 살짝 헷갈린다면 `n <= N - 8`으로 대체해도 무방하다.\r\n\r\n체스판에는 두 가지 경우의 수가 있다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/123507898-33179c80-d6a7-11eb-9f2e-71a4829134df.png\" width=\"700px\" />\r\n</p>\r\n\r\n체스판의 상단 좌측을 기준으로 하얀색으로 시작하는 판과, 검은색으로 시작하는 판으로 두 가지가 존재한다. 하얀색을 `true`, 검은색을 `false`로 치환하여 하얀색 체스판과 검은색 체스판을 만들어 비교할 것이다.\r\n\r\n``` java\r\n// 상단 좌측이 하얀색으로 시작하는 체스판\r\nprivate static final boolean[][] WHITE = {\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n};\r\n\r\n// 상단 좌측이 검은색으로 시작하는 체스판\r\nprivate static final boolean[][] BLACK = {\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n};\r\n```\r\n\r\n코드는 위와 같다. 흑백과 같이 이지선다일 경우 `boolean`을 사용하는 것을 더 선호하므로 위와 같이 설계했다. `String` 배열로 \"W\", \"B\"를 넣어 만들어도 비교만 잘 해준다면 크게 상관없다. 이를 $8 \\times 8$의 모든 경우의 수와 비교하여 가장 작은 수를 출력하면 된다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 백준 전체 1018 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/06/26/a1018\">1018 풀이</a>\r\n * @since 2021.06.26 Sat 16:46:20\r\n */\r\npublic class Main\r\n{\r\n\t// 상단 좌측이 하얀색으로 시작하는 체스판\r\n\tprivate static final boolean[][] WHITE = {\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t};\r\n\t\r\n\t// 상단 좌측이 검은색으로 시작하는 체스판\r\n\tprivate static final boolean[][] BLACK = {\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t};\r\n\t\r\n\t// 체스판\r\n\tprivate static boolean[][] board;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tint[] temp = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\t// 세로 길이\r\n\t\tint N = temp[0];\r\n\t\t\r\n\t\t// 가로 길이\r\n\t\tint M = temp[1];\r\n\t\t\r\n\t\tboard = new boolean[N][M];\r\n\t\t\r\n\t\tfor (int n = 0; n < N; n++)\r\n\t\t{\r\n\t\t\tString[] line = reader.readLine().split(\"\");\r\n\t\t\t\r\n\t\t\tfor (int m = 0; m < M; m++)\r\n\t\t\t{\r\n\t\t\t\tboard[n][m] = line[m].equals(\"W\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// 결과\r\n\t\tint result = Integer.MAX_VALUE;\r\n\t\t\r\n\t\t// 0 ~ 7까지 총 8칸을 전달하므로 최대값에서 7을 뺀다.\r\n\t\tfor (int n = 0; n < N - 7; n++)\r\n\t\t{\r\n\t\t\tfor (int m = 0; m < M - 7; m++)\r\n\t\t\t{\r\n\t\t\t\tint count = solve(n, m);\r\n\t\t\t\t\r\n\t\t\t\t// 현재 결과보다 더 작은 수일 경우\r\n\t\t\t\tif (result > count)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = count;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twriter.write(Integer.toString(result));\r\n\t\twriter.newLine();\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 새로 덧칠할 칸의 갯수 반환 함수\r\n\t *\r\n\t * @param x: [int] x의 시작좌표\r\n\t * @param y: [int] y의 시작좌표\r\n\t *\r\n\t * @return [int] 새로 덧칠할 칸의 갯수\r\n\t */\r\n\tprivate static int solve(int x, int y)\r\n\t{\r\n\t\tint white = 0;\r\n\t\tint black = 0;\r\n\t\t\r\n\t\tfor (int n = x; n < x + 8; n++)\r\n\t\t{\r\n\t\t\tfor (int m = y; m < y + 8; m++)\r\n\t\t\t{\r\n\t\t\t\t// 하얀색으로 시작하는 체스판과 색이 다를 경우\r\n\t\t\t\tif (board[n][m] != WHITE[n - x][m - y])\r\n\t\t\t\t{\r\n\t\t\t\t\twhite++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 검은색으로 시작하는 체스판과 색이 다를 경우\r\n\t\t\t\tif (board[n][m] != BLACK[n - x][m - y])\r\n\t\t\t\t{\r\n\t\t\t\t\tblack++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// 둘 중 더 적게 칠할 수 있는 체스판의 값을 반환\r\n\t\treturn Math.min(white, black);\r\n\t}\r\n}\r\n```\r\n\r\n처음에 설계했을 땐, 잘라낸 $8 \\times 8$ 배열 `board`의 좌측 상단값인 `board[x][y]`의 색을 찾아서, 하얀색(true)일 경우 `WHITE`를, 검은색(false)일 경우 `BLACK`을 갖고 비교했는데 계속 틀렸다. 아래 케이스를 보면 이해가 쉽다.\r\n\r\n+ 입력\r\n\r\n``` tc\r\n8 8\r\nBBWBWBWB\r\nBWBWBWBW\r\nWBWBWBWB\r\nBWBWBWBW\r\nWBWBWBWB\r\nBWBWBWBW\r\nWBWBWBWB\r\nBWBWBWBW\r\n```\r\n\r\n+ 출력\r\n\r\n```\r\n1\r\n```\r\n\r\n전체 판 자체가 $8 \\times 8$이므로 경우의 수는 판 자체로 하나다. 만약 처음 설계한대로 동작한다면 위 케이스에서 문제가 발생한다.\r\n\r\n위 케이스의 $board[0][0] = false$이므로 `BLACK`과 비교하게 된다. 이러면 $board[0][0]$를 제외한 나머지 63개의 칸을 전부 칠해야한다. 그런데 저 케이스, 자세히 한 번 보자. 사실 $board[0][0]$만 하얀색(true)로 칠해주면 그만이다. 즉, `BLACK`이 아닌 `WHITE`와 비교하면 값이 1인 것이다.\r\n\r\n``` java\r\n/**\r\n * 새로 덧칠할 칸의 갯수 반환 함수\r\n *\r\n * @param x: [int] x의 시작좌표\r\n * @param y: [int] y의 시작좌표\r\n *\r\n * @return [int] 새로 덧칠할 칸의 갯수\r\n */\r\nprivate static int solve(int x, int y)\r\n{\r\n\tint white = 0;\r\n\tint black = 0;\r\n\t\r\n\tfor (int n = x; n < x + 8; n++)\r\n\t{\r\n\t\tfor (int m = y; m < y + 8; m++)\r\n\t\t{\r\n\t\t\t// 하얀색으로 시작하는 체스판과 색이 다를 경우\r\n\t\t\tif (board[n][m] != WHITE[n - x][m - y])\r\n\t\t\t{\r\n\t\t\t\twhite++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 검은색으로 시작하는 체스판과 색이 다를 경우\r\n\t\t\tif (board[n][m] != BLACK[n - x][m - y])\r\n\t\t\t{\r\n\t\t\t\tblack++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// 둘 중 더 적게 칠할 수 있는 체스판의 값을 반환\r\n\treturn Math.min(white, black);\r\n}\r\n```\r\n\r\n`solve()` 메소드는 알고리즘의 핵심 동작이다. `WHITE`와 `BLACK`을 전부 비교하는 이유가 여기에 있는데, 현재 배열에서 `WHITE`와 `BLACK`을 만드는데 필요한 칸의 숫자를 각각 구해서, 그 중 더 작은 수를 반환해야 올바르게 동작한다.\r\n\r\n## 분류\r\n\r\n* 브루트포스 알고리즘","url":["2021-06-26-a1018","2021","06","26","a1018"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1010번 다리 놓기","excerpt":"재원이는 한 도시의 시장이 되었다. 이 도시에는 도시를 동쪽과 서쪽으로 나누는 큰 일직선 모양의 강이 흐르고 있다. 하지만 재원이는 다리가 없어서 시민들이 강을 건너는데 큰 불편을 겪고 있음을 알고 다리를 짓기로 결심하였다. 강 주변에서 다리를 짓기에 적합한 곳을 사이트라고 한다. 재원이는 강 주변을 면밀히 조사해 본 결과 강의 서쪽에는 N개의 사이트가 있고 동쪽에는 M개의 사이트가 있다는 것을 알았다. (N ≤ M)","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-09T14:14:09","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","Combination(조합)","SILVER","SILVER V"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-09-a1010.md","content":"\r\n# 다리 놓기\r\n\r\n|                            랭크                            |                                                      사용 언어                                                      |\r\n| :--------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------: |\r\n| ![image](https://d2gd6pc034wcta.cloudfront.net/tier/6.svg) | ![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |\r\n\r\n🔗 [전체 1010번 문제](https://www.acmicpc.net/problem/1010)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|  0.5초   |    128MB    |\r\n\r\n## 문제\r\n\r\n재원이는 한 도시의 시장이 되었다. 이 도시에는 도시를 동쪽과 서쪽으로 나누는 큰 일직선 모양의 강이 흐르고 있다. 하지만 재원이는 다리가 없어서 시민들이 강을 건너는데 큰 불편을 겪고 있음을 알고 다리를 짓기로 결심하였다. 강 주변에서 다리를 짓기에 적합한 곳을 <span class=\"primary\">사이트</span>라고 한다. 재원이는 강 주변을 면밀히 조사해 본 결과 강의 서쪽에는 $N$개의 사이트가 있고 동쪽에는 $M$개의 사이트가 있다는 것을 알았다. $(N ≤ M)$\r\n\r\n재원이는 서쪽의 사이트와 동쪽의 사이트를 다리로 연결하려고 한다. <span class=\"red-600\">(이때 한 사이트에는 최대 한 개의 다리만 연결될 수 있다.)</span> 재원이는 다리를 최대한 많이 지으려고 하기 때문에 서쪽의 사이트 개수만큼 ($N$개) 다리를 지으려고 한다. <span class=\"red-600\">다리끼리는 서로 겹쳐질 수 없다</span>고 할 때 다리를 지을 수 있는 경우의 수를 구하는 프로그램을 작성하라.\r\n\r\n![image](https://www.acmicpc.net/upload/201003/pic1.JPG)\r\n\r\n## 입력\r\n\r\n입력의 첫 줄에는 테스트 케이스의 개수 $T$가 주어진다. 그 다음 줄부터 각각의 테스트케이스에 대해 강의 서쪽과 동쪽에 있는 사이트의 개수 정수 $N$, $M$ $(0 < N ≤ M < 30)$이 주어진다.\r\n\r\n## 출력\r\n\r\n각 테스트 케이스에 대해 주어진 조건하에 다리를 지을 수 있는 경우의 수를 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n3\r\n2 2\r\n1 5\r\n13 29\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n1\r\n5\r\n67863915\r\n```\r\n\r\n# 풀이\r\n\r\n규칙을 정리하면 아래와 같다.\r\n\r\n1. $N$구역에서 $M$구역으로 다리를 건설한다.\r\n2. $N <= M$이다.\r\n3. 사이트 당 연결된 다리는 하나다.\r\n4. 다리끼리는 서로 겹쳐서 연결되면 안 된다.\r\n\r\n1000번 부터 문제 풀면서, [1007번 벡터](/posts/2021/06/09/a1007)로 인해 조합이라는 키워드를 쉽게 연상할 수 있었다. 문제에서 $N$구역에서 $M$구역으로 다리를 건설한다고 서술하므로 $N$을 기준으로 생각하기 쉽다. 반대로 $M$을 기준으로 생각하면 해결의 실마리가 보인다. $M$구역의 사이트에서 $N$구역의 사이트 갯수만큼 연결할 사이트에 대한 조합을 계산하면 되기 때문.\r\n\r\n예를 들어 $N$구역에 3개의 사이트가 있고, $M$구역에 5개의 사이트가 있다고 가정하자.\r\n\r\n| 구분  | $M_1$ | $M_2$ | $M_3$ | $M_4$ | $M_5$ |\r\n| :---: | :---: | :---: | :---: | :---: | :---: |\r\n|   1   |   O   |   O   |   O   |       |       |\r\n|   2   |   O   |   O   |       |   O   |       |\r\n|   3   |   O   |   O   |       |       |   O   |\r\n|   4   |   O   |       |   O   |   O   |       |\r\n|   5   |   O   |       |   O   |       |   O   |\r\n|   6   |   O   |       |       |   O   |   O   |\r\n|   7   |       |   O   |   O   |   O   |       |\r\n|   8   |       |   O   |   O   |       |   O   |\r\n|   9   |       |   O   |       |   O   |   O   |\r\n|  10   |       |       |   O   |   O   |   O   |\r\n\r\n총 10개의 경우의 수가 존재한다. 이는 $_5C_3$의 계산 결과와 일치한다.\r\n\r\n$$\r\n_5C_3 = \\frac{5!}{3! \\times 2!} = \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{(3 \\times 2 \\times 1) \\times (2 \\times 1)} = \\frac{5 \\times 4}{2 \\times 1} = 10\r\n$$\r\n\r\n> ❓ **숫자가 왜 감탄(!)을 하죠?**  \r\n> Factorial(팩토리얼) 연산자로 $n! = n \\times (n - 1) \\times (n - 2) \\times ... \\times 1$과 같은 형태로 연산한다.\r\n\r\n더도말고 덜도말고 조합 알고리즘을 설계하면 된다. 조합의 요소를 반환할 필요 없이, 조합의 갯수만 구하면 되므로 [1007번 벡터](/posts/2021/06/09/a1007)문제보다 더 간단하다.\r\n\r\n## Gotta Go FAST!\r\n\r\n무턱대로 위 식으로 조합 알고리즘을 짜면 <span class=\"red-A400\">시간 초과</span> 오류를 볼 수 있다. 그도 그럴 것이, 원리 자체는 쉽지만 시간제한이 0.5s로 매우 짧기 때문. $M$의 값이 최대 30이므로, 최대 $30!$에 대한 연산을 수행해야하기 때문이다. 그러므로 <span class=\"blue-A400\">Memoization(메모이제이션)</span>이라는 최적화를 적용해야 한다.\r\n\r\n> ❓ **Memoization(메모이제이션)이란?**  \r\n> 동일한 계산을 반복할 때, 이전에 계산한 값을 메모리에 저장해놓고 필요 시 사용하여 반복적인 연산 작업을 제거하는 기술.\r\n\r\n조합을 재귀적으로 표현하면 아래와 같이 표현할 수 있다.\r\n\r\n$$\r\n_nC_r = _{n-1}C_{r-1} + _{n-1}C_r\r\n$$\r\n\r\n아래의 그림을 보면 이해하기 쉽다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/121479130-b036e680-ca04-11eb-96ed-620c4fc3086a.png)\r\n\r\n만약, $_5C_3$을 연산한다면 아래와 같이 진행된다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/121479160-b6c55e00-ca04-11eb-97da-a4708798a715.png)\r\n\r\n이 중, $_3C_2$의 경우 $_4C_2$, $_4C_3$을 계산할 때 필요하므로 여러번 호출된다. 만약, 메모이제이션이 적용되지 않았다면, $_3C_2$이 필요할 때마다 1에서부터 다시 연산해야한다. $_{30}C_{14}$와 같이 숫자가 커지면 위 그림의 깊이도 깊어지기 때문에 많은 오버헤드가 발생한다.\r\n\r\n만약 이렇게 연산된 값을 버리지 않고 메모리상에 저장한 뒤 쓸 수 있다면 연산에서 엄청난 이점이 발생한다. $_3C_2$을 이미 저장했다면 $_4C_2$, $_4C_3$을 계산할 때 저장된 $_3C_2$을 즉시 꺼내 사용할 수 있다. 복잡한 연산을 건너뛸 수 있으며, 동일한 값이 여러번 호출되도 상관없다.\r\n\r\n해당 문제의 조합 알고리즘의 연산에서 한 번 연산된 값을 임의의 배열에 저장하여 이를 활용하면 0.5초라는 짧은 시간을 충족할 수 있을 것이다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\n/**\r\n * 백준 전체 1010 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/06/09/a1010\">1010 풀이</a>\r\n * @since 2021.06.09 Tue 14:14:09\r\n */\r\npublic class Main\r\n{\r\n\t// 다리 건설 경우의 수\r\n\tprivate static final int[][] dp = new int[31][31];\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\t// 케이스 수\r\n\t\tint T = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\tfor (int i = 0; i < T; i++)\r\n\t\t{\r\n\t\t\tString[] temp = reader.readLine().split(\" \");\r\n\t\t\t\r\n\t\t\tint N = Integer.parseInt(temp[0]);\r\n\t\t\tint M = Integer.parseInt(temp[1]);\r\n\t\t\t\r\n\t\t\tSystem.out.println(combination(M, N));\r\n\t\t}\r\n\t\t\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 조합 결과 반환 함수\r\n\t *\r\n\t * @param n: [int] 원소 갯수\r\n\t * @param r: [int] 조합 갯수\r\n\t *\r\n\t * @return [int] 조합\r\n\t */\r\n\tprivate static int combination(int n, int r)\r\n\t{\r\n\t\t// 이미 계산된 값일 경우\r\n\t\tif (dp[n][r] > 0)\r\n\t\t{\r\n\t\t\treturn dp[n][r];\r\n\t\t}\r\n\t\t\r\n\t\t// 원소의 갯수가 조합의 갯수와 동일하거나 0일 경우\r\n\t\telse if (n == r || r == 0)\r\n\t\t{\r\n\t\t\treturn dp[n][r] = 1;\r\n\t\t}\r\n\t\t\r\n\t\t// 일반적인 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn dp[n][r] = combination(n - 1, r - 1) + combination(n - 1, r);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n$dp[n][r]$는 int형 배열이므로 기본값이 0이다. 즉, $dp[n][r] > 0$일 경우 $_nC_r$가 이미 계산되었다는 뜻이므로, 이미 저장된 값을 반환한다.\r\n\r\n$_5C_0$, $_5C_5$와 같이 $_nC_0$, $_nC_n$일 경우 그 값은 1이다. 해당 케이스의 경우 1을 반환한다. (전체를 선택하거나, 아무것도 선택하지 않는 방법은 하나뿐이다.)\r\n\r\n나머지 일반적인 경우 $_nC_r$의 재귀적 표현 방식인 $_{n-1}C_{r-1} + _{n-1}C_{r}$을 적용하면 된다.\r\n\r\n또한 $dp$ 이차원 배열은 31행렬로 초기화되는데, 그 이유는 $dp$의 행렬이 되는 $N$과 $M$의 최대값이 30이기 때문. 배열은 인덱스가 0부터 시작하므로 1을 더해야 한다.\r\n\r\n또한 케이스별로 $dp$를 초기화하지 않는데, 이는 <span class=\"green-A400\">조합이 범용적이므로 재사용이 가능하기 때문</span>이다. 1번 케이스나 100번 케이스나 $_5C_3$의 값은 10이다. 따라서 초기화를 하지 않으면 오히려 이전 케이스에서 계산했던 내용을 그대로 사용할 수 있어서 이득이다. 만약 첫 번째 케이스에서 $_{30}C_{12}$와 같이 큰 수를 계산했다면, 이후 케이스의 $_{12}C_{5}$와 같은 모든 하위 조합들은 연산을 통째로 건너뛸 수도 있을 것이다.\r\n\r\n## 분류\r\n\r\n* 수학\r\n* 다이나믹 프로그래밍\r\n* 조합론","url":["2021-06-09-a1010","2021","06","09","a1010"]}],"categories":{"All":{"count":68,"flag":true},"RaspberryPi":{"count":6,"flag":true},"Ubuntu":{"count":1,"flag":true},"알고리즘":{"count":32,"flag":false},"잡담":{"count":2,"flag":false},"WEB":{"count":7,"flag":false},"CS":{"count":10,"flag":false},"React":{"count":1,"flag":false},"JAVA":{"count":3,"flag":false},"Jekyll":{"count":4,"flag":false},"WAS":{"count":2,"flag":false}},"images":["celeb1.gif","celeb10.gif","celeb11.gif","celeb12.gif","celeb13.gif","celeb14.gif","celeb15.gif","celeb16.gif","celeb2.gif","celeb3.gif","celeb4.gif","celeb5.gif","celeb6.gif","celeb7.gif","celeb8.gif","celeb9.gif","city1.gif","city10.gif","city11.gif","city12.gif","city13.gif","city14.gif","city15.gif","city2.gif","city3.gif","city4.gif","city4.jpg","city5.gif","city6.gif","city7.gif","city8.gif","city9.gif","code1.gif","code2.gif","code3.gif","funk1.gif","funk2.gif","funk3.gif","funk4.gif","funk5.gif","funk6.gif","game1.gif","signal.gif"],"tag":"SILVER V","page":1,"hash":"569bbd441fd"},"__N_SSG":true}