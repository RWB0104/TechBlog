{"pageProps":{"posts":[{"header":{"title":"[라즈베리파이 4] Ubuntu에 톰캣 설치하기","excerpt":"OS가 준비되었으므로 본격적으로 웹 서버 환경을 구축해보자. 대표적인 WAS인 Tomcat을 활용하여 페이지를 호스팅한다.","coverImage":"https://user-images.githubusercontent.com/50317129/131238727-666f2aaa-d759-4f62-af73-3856086da73d.png","date":"2021-09-02T23:07:19","type":"posts","category":"RaspberryPi","tag":["라즈베리파이","Ubuntu","도메인"],"group":"라즈베리파이","comment":true,"publish":true},"name":"2021-09-02-ubuntu-in-tomcat.md","content":"\r\n# 개요\r\n\r\nOS가 준비되었으므로 본격적으로 웹 서버 환경을 구축해보자. 대표적인 WAS인 Tomcat을 활용하여 페이지를 호스팅한다.\r\n\r\n* Tomcat 9.0.50\r\n\r\n# 웹 서버 구축하기\r\n\r\n아래의 과정을 통해 Ubuntu 서버에 웹 서버를 구축하자.\r\n\r\n## 1. JAVA 설치\r\n\r\n우리가 사용할 WAS는 Tomcat으로, 구동 시 WAS를 필요로한다.\r\n\r\n``` bash\r\nsudo apt-get install openjdk-15-jdk\r\n```\r\n\r\n원하는 JAVA 버전을 설치한다. 본 문서에서는 최신 버전인 JAVA 15를 설치한다.\r\n\r\n``` bash\r\njava -version\r\n```\r\n\r\n``` output\r\nopenjdk version \"15.0.3\" 2021-04-20\r\nOpenJDK Runtime Environment (build 15.0.3+3-Ubuntu-1)\r\nOpenJDK 64-Bit Server VM (build 15.0.3+3-Ubuntu-1, mixed mode, sharing)\r\n```\r\n\r\n`java -version` 명령어를 수행하여 위와 같은 형식의 결과물이 출력되면 JAVA 설치가 완료된 것이다.\r\n\r\n## 2. 환경변수 설정\r\n\r\nJAVA 환경변수를 설정한다. 자바 컴파일러인 `javac` 명령어 입력 시 실제로 호출되는 파일의 경로를 확인하여 설치 경로를 찾는다.\r\n\r\n``` bash\r\nwhich javac\r\n```\r\n\r\n``` output\r\n/usr/lib/jvm/java-15-openjdk-arm64/bin/javac\r\n```\r\n\r\n`which` 명령어는 명령어의 위치를 찾아주는 명령어다. 이를 입력하여 위치를 확인하면 위와 같은 경로가 나온다. `java-{VERSION}-openjdk-arm64`과 같은 폴더에 설치되어있으며, 버전마다 폴더명이 조금씩 다르다.\r\n\r\n위 경로는 폴더가 아닌, 명령어 파일의 경로다. `JAVA_HOME`은 자바가 설치된 최상위 경로인 `/usr/lib/jvm/java-15-openjdk-arm64`가 된다.\r\n\r\n사용자 설정파일인 `.profile`에 환경변수를 지정한다.\r\n\r\n``` bash\r\nvi ~/.profile\r\n```\r\n\r\n``` input\r\nexport JAVA_HOME=/usr/lib/jvm/java-15-openjdk-arm64\r\nexport PATH=$JAVA_HOME/bin:$PATH\r\n```\r\n\r\n사용자 설정파일을 열어 위 내용을 입력한다. `a` 혹은 `i`를 눌러 작성할 수 있다. 작성 이후 `:wq`를 입력하여 저장하면 된다.\r\n\r\n``` bash\r\nsource ~/.profile\r\n```\r\n\r\n위 명령어를 입력하여 변경된 사용자 설정파일을 갱신한다. 이를 입력하지 않으면 해당 쉘에서는 변경된 환경변수가 반영되지 않는다.\r\n\r\n## 3. Tomcat 설치\r\n\r\n``` bash\r\nsudo apt-get install tomcat9\r\nsudo apt-get install libtcnative-1\r\n```\r\n\r\n`tomcat9`는 Tomcat 9버전이고, `libtcnative-1` 패키지를 설치하여 컴파일없이 Tomcat Native를 활성화할 수 있다.\r\n\r\nTomcat Native 찾다보면 `./configure`, `make` 같은 명령어가 나오기도 하는데, Tomcat Native 모듈을 직접 컴파일하는 방식이니 참고할 것.\r\n\r\n톰캣의 설치 경로는 `/var/lib/tomcat9`다.\r\n\r\n``` bash\r\n# 톰캣 기동\r\nsystemctl start tomcat9\r\n\r\n# 톰캣 정지\r\nsystemctl stop tomcat9\r\n\r\n# 톰캣 재기동\r\nsystemctl restart tomcat9\r\n```\r\n\r\n위 명령어를 통해 톰캣 서비스를 on/off할 수 있다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131715233-e70c15ac-0e38-48f3-8618-96b63a87ee0e.png)\r\n\r\nTomcat Native 활성화 여부는 로그에서 확인할 수 있으며, 로그에 위와 같은 문구가 출력되면 Tomcat Native가 활성화된 것이다.\r\n\r\n``` bash\r\ncd /var/log/tomcat9\r\n```\r\n\r\nTomcat9 기준 로그는 위와 같으며, `catalina.yyyy-MM-dd.log` 형태의 파일을 열면 확인할 수 있다.\r\n\r\n## 4. 포트 개방\r\n\r\n통신에 사용할 포트를 개방한다.\r\n\r\nUbuntu는 <span class=\"primary\">ufw</span>로 방화벽 설정을 쉽게 관리할 수 있다.\r\n\r\n``` bash\r\nsudo apt-get install ufw\r\n```\r\n\r\n위 명령어를 입력하여 ufw를 설치할 수 있다.\r\n\r\n``` bash\r\n# ufw 활성화\r\nsudo ufw enable\r\n\r\n# ufw 비활성화\r\nsudo ufw disable\r\n\r\n# ufw 상태 확인\r\nsudo ufw status verbose\r\n```\r\n\r\nufw를 설치하면 기본적으로 비활성화되어있으므로, `sudo ufw enable` 명령어를 통해 활성화시킨다.\r\n\r\nTomcat의 경우 `8080`을 기본 포트로 사용하므로 해당 포트를 개방한다.\r\n\r\n``` bash\r\nsudo ufw allow 8080\r\n```\r\n\r\n> **ufw를 활용한 방화벽 구성하기**  \r\n> Ubuntu에선 ufw를 통해 방화벽을 쉽게 구성할 수 있으며, [이 게시글](/posts/2021/09/04/firewall-with-ufw)에서 사용법을 확인할 수 있다.\r\n\r\n## 4. 페이지 호스팅 확인\r\n\r\n``` bash\r\nifconfig -a\r\n```\r\n\r\n위 명령어를 입력하면 연결된 IP를 알 수 있으나, 공유기를 사용할 경우 `192.168.0.x`와 같은 사설 IP가 표시된다. 이 경우 공유기 설정에서 들어오는 실제 IP를 확인하자.\r\n\r\n* `eth0` - 이더넷 정보\r\n* `wlan0` - 무선랜 정보\r\n\r\n인터넷 연결 방식에 따라 위와 같이 구분된다. 동일한 방식으로 여러개가 연결되어있다면 숫자가 1씩 늘어난다.\r\n\r\n라즈베리파이의 IP `xxx.xxx.xxx.xxx:8080`에 접속하여 톰캣 페이지가 정상적으로 출력되는지 확인하자.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131716513-505d0ed5-32ef-423e-b86d-d020253cede0.png)\r\n\r\n별다른 설정을 변경하지 않았을 경우 위와 같은 관리자 페이지가 표시될 것이다.\r\n\r\n만약 정상적으로 출력되지 않는다면 아래 항복을 확인해보자.\r\n\r\n* 인터넷 연결이 정상적인지\r\n* 라즈베리파이에 연결된 IP가 맞는지\r\n* Tomcat 서비스 포트가 개방되어있는지\r\n* Tomcat이 정상적으로 구동되었는지\r\n\r\n# 목표\r\n\r\n* <del class=\"grey-400\">라즈베리파이에 Ubuntu 서버를 구축한다.</del>\r\n* <del class=\"grey-400\">Tomcat을 구동하여 페이지를 호스팅한다.</del>\r\n* 도메인을 입힌다.\r\n* SSH, RDP 등의 원격 통신환경을 구축한다.\r\n* MariaDB를 설치하여 DB 통신을 수행한다.","url":["2021-09-02-ubuntu-in-tomcat","2021","09","02","ubuntu-in-tomcat"]},{"header":{"title":"[라즈베리파이 4] 라즈베리파이에 Unbuntu 설치하기","excerpt":"목요일을 기점으로 모든 준비물의 배송이 완료됐다. 클린 상태의 라즈베리파이는 OS가 별도로 깔려있지 않은 FreeDOS 상태이므로, 직접 OS를 설치해야한다. 컴퓨터도 주기적으로 포맷하고, 가상머신도 몇 개 돌려본 나로썬 크게 문제될 건 없지만, 이건 내가 지금까지 다루던 컴퓨터와는 좀 다르다는점이 흠. 한 번도 다뤄보지 않은 장비인데다, 일반적인 데스크탑에 비해 여러 차이점과 제약사항이 있어 그리 순탄하진 않았다.","coverImage":"https://user-images.githubusercontent.com/50317129/131238727-666f2aaa-d759-4f62-af73-3856086da73d.png","date":"2021-08-31T01:51:39","type":"posts","category":"RaspberryPi","tag":["라즈베리파이","Ubuntu"],"group":"라즈베리파이","comment":true,"publish":true},"name":"2021-08-31-ubuntu-in-raspberry.md","content":"\r\n# 개요\r\n\r\n목요일을 기점으로 모든 준비물의 배송이 완료됐다. 클린 상태의 라즈베리파이는 OS가 별도로 깔려있지 않은 FreeDOS 상태이므로, 직접 OS를 설치해야한다. 컴퓨터도 주기적으로 포맷하고, 가상머신도 몇 개 돌려본 나로썬 크게 문제될 건 없지만, 이건 내가 지금까지 다루던 컴퓨터와는 좀 다르다는점이 흠.\r\n\r\n한 번도 다뤄보지 않은 장비인데다, 일반적인 데스크탑에 비해 여러 차이점과 제약사항이 있어 그리 순탄하진 않았다.\r\n\r\n# Rasbian? Ubuntu?\r\n\r\n라즈베리파이는 전용 OS인 <span class=\"pink-600\">Raspbian</span>이 존재한다. Raspbian은 라즈베리파이에 가장 최적화된 OS이므로 라즈베리파이의 네이티브한 영역을 쉽게 다룰 수 있을 것이다.\r\n\r\n하지만 난 라즈베리파이를 다룬다기보단 라즈베리파이를 통해 서버를 구축할 예정이므로, Raspbian보단 훨씬 범용적인 OS가 알맞다. 이를테면 CentOS 같은 거 말이다.\r\n\r\n그 중에서 내가 선택한 OS는 Ubuntu. CentOS는 RHEL에서 인수한 뒤 CentOS의 가장 큰 장점인 RHEL과의 동일성을 아작내놨다. 굳이 쓸 필요가 없어진 셈.\r\n\r\n때문에 이전부터 써보고 싶기도 했고, 한국인에게 가장 친숙한 Linux인 Ubuntu를 설치하고자 한다.\r\n\r\n익숙하지 않은 라즈베리파이로의 설치는 물론 관련 정보들을 쉽게 얻을 수 있을 것이다.\r\n\r\n# 라즈베이파이에 Ubuntu 설치하기\r\n\r\n본격적으로 라즈베리파이에 Ubuntu를 설치해보자.\r\n\r\n## 준비물\r\n\r\n* Raspberry Pi 4 Model B\r\n* 전원 케이블 (5V 3A 이상)\r\n* MicroSD, 리더기 (구형 펌웨어일 경우)\r\n* Micro HDMI, 혹은 HDMI 케이블 (모니터 쓸 경우)\r\n\r\n준비물은 위와 같다.\r\n\r\n원래 기본적으로 라즈베리파이는 MicroSD 이외에는 인식하지 않는다. USB같은 외장 디스크를 인식하려면 펌웨어의 업데이트가 필요하다.\r\n\r\n<span class=\"red-600\">2020년 8월 이후 출시된 보드의 경우 펌웨어가 기본적으로 업데이트</span>된다고 한다. 난 중고로 샀는데, 8월 이전 출시된 보드인지 USB를 바로 인식하지 않았었다.\r\n\r\n펌웨어 업데이트는 OS설치 후 가능하므로, 만약 <span class=\"red-600\">구형 보드라면 얄쨜없이 MicroSD가 필요</span>하니 참고할 것.\r\n\r\n<br />\r\n\r\n라즈베리파이는 기본적으로 Micro HDMI라고 하는 작은 단자를 제공한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131310544-4fc47a26-b541-45e1-ac8c-4586bcbdc978.png)\r\n\r\n위 사진의 좌측 단자가 일반적으로 알고있는 HDMI, 우측의 작은 단자가 Micro HDMI다. Argon M2 케이스의 경우 Micro HDMI와 연결된 HDMI 단자를 제공해주므로 상관없었으나, 별도의 케이스나 커넥터 없이 모니터를 연결할 경우 위 사진과 같은 <span class=\"amber-500\">Micro HDMI to HDMI</span> 케이블이 필요하니 주의할 것.\r\n\r\n## Ubuntu 설치파일 다운로드\r\n\r\n디스크에 Ubuntu를 설치하기위해 아래 두 파일을 다운로드하자.\r\n\r\n* [이미지 레코더 BalenaEtcher 다운로드](https://www.balena.io/etcher/)\r\n* [Ubuntu ISO 다운로드](https://ubuntu.com/download/raspberry-pi)\r\n\r\n이미지 레코더는 부팅 디스크를 만들어준다. Windows 포맷 USB를 만드는 과정이라고 생각하면 된다.\r\n\r\nUbuntu는 Linux이므로, 위 경로에서 쉽게 다운로드 받을 수 있다.\r\n\r\n* <span class=\"orange-600\">Ubuntu Server</span> - CLI 기반 (GUI 없음)\r\n* <span class=\"orange-600\">Ubuntu Desktop</span> - GUI 기반 (설치 시 모니터 필요)\r\n\r\n페이지에 접속하면 두 버전을 다운로드 받을 수 있다. Desktop은 우리가 일반적으로 알고있는 GUI 기반의 OS다. Server는 DOS같은 명령어 기반의 CLI OS다. 어떤 걸 설치해도 상관없으나 Linux에 익숙하지 않다면 Desktop을 추천한다. 하지만 <span class=\"red-500\">GUI 기반이므로 설치 후 OS 셋팅 시 모니터가 필요함</span>에 유의하자.\r\n\r\n이 문서에서는 Ubuntu Desktop을 설치한다. Electron 같은 UI 프로그램이나 Ubuntu에서의 웹 페이지 테스트를 위해선 GUI 환경이 필요하다. CLI에선 브라우저를 띄우는 등의 행위가 불가능하기 때문. Ubuntu Server도 추후 관련 프로그램을 설치하여 GUI 환경으로 구동할 수 있다.\r\n\r\n## Ubuntu 부팅 디스크 만들기\r\n\r\n아래의 과정을 통해 부팅 디스크를 만든다. 본문에서는 MicroSD로 진행한다. 디스크 종류가 달라진다고 해서 과정이 달라지지 않으니 걱정하지 않아도 된다.\r\n\r\n### 1. BalenaEtcher 실행\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131342380-c9c0d006-e4cf-457a-9cbf-66ffcfbf8e4f.png)\r\n\r\nUSB를 꽂고 다운로드받은 <span class=\"green-400\">BalenaEtcher를 실행</span>한다.\r\n\r\n### 2. Ubuntu ISO 선택\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131342500-b406e9e9-c72f-41f6-aedb-1e1d88f678f7.png)\r\n\r\n다운로드받은 <span class=\"green-400\">Ubuntu ISO를 선택</span>한다. 선택한 ISO가 디스크에 기록될 것이다.\r\n\r\nUbuntu Desktop ISO는 용량이 많음에 유의하자.\r\n\r\n### 3. 디스크 드라이브 선택\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131343798-ae4caaa3-5b39-42cc-8d87-362bde5ad5eb.png)\r\n\r\nISO가 기록될 디스크 드라이브를 선택한다.\r\n\r\n<span class=\"blue-400\">[Show hidden]</span>을 클릭하면 USB 형태의 외장 드라이브 뿐만 아니라, M2 혹은 SATA와 연결된 D드라이브 등도 선택 가능하다. 물론 그럴일은 없겠지만, 시스템 드라이브는 선택 불가능하다.\r\n\r\n### 4. 디스크 기록\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131343897-2ab71120-ba0e-4a10-9e20-85b7f562f25c.png)\r\n\r\n모든 선택이 완료되면 <span class=\"blue-400\">[Flash!]</span> 버튼을 클릭하여 부팅 디스크를 만든다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131344037-dd53f8e7-4a66-4e3e-90d5-dd06bdf79904.png)\r\n\r\nSSD같이 Disk I/O가 빠르면 금방 끝나지만, 느리면 수 분의 시간이 걸린다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131344661-ef5737a7-e2b8-483b-88af-9f79318c6661.png)\r\n\r\n완료되면 위와 같은 화면이 뜬다.\r\n\r\n디스크를 뺐다 껴서 다시 인식시키면 아래 두 디스크가 인식된다.\r\n\r\n* `system-boot` 혹은 `boot` - 부팅 디스크\r\n* 메인 디스크\r\n\r\n이 부팅 디스크를 라즈베리파이에 연결하면 Ubuntu를 사용할 수 있다.\r\n\r\n## 라즈베리파이 연결\r\n\r\n부팅 디스크를 라즈베리파이에 연결하자. MicroSD라면 칩 아래쪽에, USB라면 USB 단자 등 맞는 방식으로 연결하면 된다.\r\n\r\n정상적으로 부팅되면 빨간불과 함께 녹색불이 점멸한다. <span class=\"red-500\">빨간불만 뜨면 부팅 중 문제가 있다는 뜻</span>이다. 이 경우 모니터를 연결해야 자세한 문제를 확인할 수 있다.\r\n\r\n이후 셋팅은 일반적인 Ubuntu 사용과 동일하다. 사용자 생성하고 설정값 지정하고 그런 것들.\r\n\r\n본인이 MicroSD가 아닌 USB로 부팅디스크를 만들었는데, 화면에서 <span class=\"red-500\">USB Stop</span>이라는 문구가 뜨며 반복적으로 Fail이 뜨면 USB를 인식할 수 없는 구형보드라는 뜻이다. \r\n\r\nMicroSD 정도로 만족하거나, 신형 보드라서 애초에 USB나 SSD를 부팅 디스크로 사용했다면 그냥 쓰면 된다. 하지만 본인의 라즈베리파이의 펌웨어가 구형이고, MicroSD로는 만족할 수 없다면 아래의 과정을 통해 펌웨어 업데이트를 진행해야한다.\r\n\r\n# 펌웨어 업데이트\r\n\r\n<p class=\"red-600\" align=\"center\">USB가 인식되는 신형 펌웨어는 수행할 필요 없음</p>\r\n\r\n라즈베리파이가 USB나 SSD를 부팅 디스크로 인식할 수 있도록 펌웨어를 업데이트한다.\r\n\r\n펌웨어 업데이트는 반드시 라즈베리파이에 OS가 설치된 후에 진행할 수 있다. 즉, 구형 보드에서 SSD로 부팅하려면 MicroSD로 부팅 한 번, 펌웨어 업데이트 후 SSD로 부팅 한 번으로 총 두 개의 부팅 디스크를 만들어야 한다.\r\n\r\n## 1. 패키지 최신화\r\n\r\n먼저, 터미널을 열어 아래 두 명령어를 입력한다.\r\n\r\n``` bash\r\nsudo apt-get update\r\nsudo apt-get upgrade\r\n```\r\n\r\n패키지 저장소 및 설치된 패키지를 최신화한다.\r\n\r\n## 2. 설정값 변경\r\n\r\n업데이트가 완료되면 아래의 명령어를 입력하여 해당 파일의 내용을 변경한다.\r\n\r\n``` bash\r\nsudo vim /etc/default/rpi-eeprom-update\r\n```\r\n\r\n`FIRMWARE_RELEASE_STATUS=\"critical\"` 설정값에서 `critical`을 `stable`로 변경한다.\r\n\r\n즉, `FIRMWARE_RELEASE_STATUS=\"stable\"`로 변경해주면 된다.\r\n\r\n## 3. 부트로더 업데이트\r\n\r\n이제 부트로더를 업데이트한다.\r\n\r\n``` bash\r\nsudo rpi-eeprom-update -d -f /lib/firmware/raspberrypi/bootloader/stable/pieeprom-2020-06-15.bin\r\n```\r\n\r\n해당 경로에 가보면 `2020-06-15` 버전 말고도 `2020-07-16`, `2020-12-11` 등 다양한 버전이 있는데, 대부분 위 버전을 추천하는 것 같다.\r\n\r\n필자는 최신버전을 좋아해서, 버전 중 가장 최신이였던 `2020-12-11`로 업데이트했으나 설정값이 이상하여 결국 상기한 `2020-06-15` 버전으로 다시 업데이트했다. 업데이트는 금방되니 부담가질 필요는 없다.\r\n\r\n## 4. 확인\r\n\r\n``` bash\r\nsudo reboot\r\n```\r\n\r\n부트로더 업데이트가 완료되면 기기를 재부팅한다.\r\n\r\n재부팅이 완료되면 아래의 명령어를 입력하여 USB를 인식할 수 있는지 확인하자.\r\n\r\n``` bash\r\nsudo vcgencmd bootloader_config\r\n```\r\n\r\n``` output\r\n[all]\r\nBOOT_UART=0\r\nWAKE_ON_GPIO=1\r\nPOWER_OFF_ON_HALT=0\r\nDHCP_TIMEOUT=45000\r\nDHCP_REQ_TIMEOUT=4000\r\nTFTP_FILE_TIMEOUT=30000\r\nENABLE_SELF_UPDATE=1\r\nDISABLE_HDMI=0\r\nBOOT_ORDER=0xf41\r\n```\r\n\r\n위 명령어를 입력하면 이와 같은 형식의 설정값이 출력된다. 다른건 상관없고, `BOOT_ORDER`의 값이 `0xf41`라면 정상적으로 업데이트가 완료된 것이다.\r\n\r\n이제 라즈베리파이가 USB를 부팅 디스크로 인식할 수 있다.\r\n\r\n디스크의 값이 아닌 라즈베리파이 기기 자체의 펌웨어가 업데이트된 것이므로, MicroSD에서 USB로 디스크가 바뀌어도 업데이트는 유지된다. 필자는 이걸 몰라서 쓸데없는 고민을 했었다.\r\n\r\n## 5. 부팅 디스크 재생성\r\n\r\n이제 MicroSD의 역할은 모두 끝났다. 나중을 대비해 MicroSD는 고이 모셔두자. 아주 간간히 쓸 일이 생기기도 하고 그런다.\r\n\r\nUSB, SSD 등 원하는 디스크에다 본문의 [부팅 디스크 만들기](#Ubuntu-부팅%20디스크%20만들기) 과정을 다시 수행한다.\r\n\r\n# 설정\r\n\r\nUbuntu 설치가 완료되면, 이후는 우리가 아는 일반적인 OS 셋팅이 진행된다.\r\n\r\nUbuntu Desktop의 경우, 언어, 계정 등의 설정이 추가로 진행된다.\r\n\r\nUbuntu Server의 경우, CLI 환경이므로 별도의 설정이 필요하지 않다. 기본 계정이 생성되며, 아이디와 비밀번호 모두 동일하게 ubuntu다. 로그인 후 바꿔주자. \r\n\r\n# 목표\r\n\r\n* <del class=\"grey-400\">라즈베리파이에 Ubuntu 서버를 구축한다.</del>\r\n* 도메인을 입힌다.\r\n* SSH, RDP 등의 원격 통신환경을 구축한다.\r\n* Tomcat을 구동하여 페이지를 호스팅한다\r\n* MariaDB를 설치하여 DB 통신을 수행한다.","url":["2021-08-31-ubuntu-in-raspberry","2021","08","31","ubuntu-in-raspberry"]},{"header":{"title":"[라즈베리파이 4] Hello Raspberry!","excerpt":"개발자의 적지않은 수가 클라우드든, 디바이스든 자신만의 서버를 구축하여 다양하게 활용하고 있다. 개발을 하다보면 필연적으로 24시간 언제나 가동되는 서버 비스무리한 것이 필요할 때가 있다. 일례로 GitHub Pages의 경우 정적 페이지만 호스팅해줄 뿐, 백엔드나 DB는 사용할 수가 없어 동적 페이지 호스팅은 불가능하다. 그러나 개인 API 혹은 DB 서버가 존재한다면, 해당 서버와의 통신을 통해 더욱 동적 페이지 호스팅이 가능하다. 웹에서 백엔드가 갖는 역할을 생각해본다면, 개인이 활용 가능한 서버가 있고 없고의 차이는 천지차이가 난다. 나 역시도 개발하는 입장에서 제약없이 사용할 수 있는 서버의 소요가 이전부터 있어왔고, 개인 서버를 구축하기 위한 방안을 모색했다.","coverImage":"https://user-images.githubusercontent.com/50317129/131238727-666f2aaa-d759-4f62-af73-3856086da73d.png","date":"2021-08-29T13:41:41","type":"posts","category":"RaspberryPi","tag":["라즈베리파이"],"group":"라즈베리파이","comment":true,"publish":true},"name":"2021-08-29-hello-raspberry.md","content":"\r\n# 서버가 필요해!\r\n\r\n개발자의 적지않은 수가 클라우드든, 디바이스든 자신만의 서버를 구축하여 다양하게 활용하고 있다.\r\n\r\n개발을 하다보면 필연적으로 24시간 언제나 가동되는 서버 비스무리한 것이 필요할 때가 있다. 일례로 GitHub Pages의 경우 정적 페이지만 호스팅해줄 뿐, 백엔드나 DB는 사용할 수가 없어 동적 페이지 호스팅은 불가능하다.\r\n\r\n그러나 개인 API 혹은 DB 서버가 존재한다면, 해당 서버와의 통신을 통해 더욱 동적 페이지 호스팅이 가능하다. 웹에서 백엔드가 갖는 역할을 생각해본다면, 개인이 활용 가능한 서버가 있고 없고의 차이는 천지차이가 난다.\r\n\r\n나 역시도 개발하는 입장에서 제약없이 사용할 수 있는 서버의 소요가 이전부터 있어왔고, 개인 서버를 구축하기 위한 방안을 모색했다.\r\n\r\n# Hello, Raspberry Pi\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131238727-666f2aaa-d759-4f62-af73-3856086da73d.png)\r\n\r\n많은 선택지가 있었지만, 내가 선택한 방안은 <span class=\"pink-700\">Raspberry Pi</span>를 통해 서버환경을 구축하는 것이였다.\r\n\r\n한창 트렌디한 <span class=\"orange-500\">Cloud</span> 플랫폼, 서버 호스팅 서비스도 있었지만, 여러 요인을 비교해본 결과 라즈베이 파이가 적절하다고 생각했다.\r\n\r\n# 왜 하필?\r\n\r\n근래 들어 AWS를 필두로 클라우드 시장이 크게 활성화됐다. 덕분에 국/내외를 막론하고 여러 양질의 클라우드 서비스 제공처가 생겼다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131238859-18b9cccd-4d6b-4e38-b279-c0faa66d4815.png)\r\n\r\n클라우드 서비스를 활용하면 개인 서버를 쉽게 구축할 수 있겠지만, 그럼에도 불구하고 난 라즈베리 파이를 선택했다.\r\n\r\n크게 비용적 측면, 학구적 측면에서 생각했다.\r\n\r\n## 비용적 측면\r\n\r\n라즈베리 파이를 선택한 가장 큰 이유.\r\n\r\n몇 번 테스트삼아 쓸 것도 아니고, WAS, DB 등 각종 개발 관련 툴을 구동하려는 나로써는 서버의 사양 또한 쉽사리 무시할 수 없는 요소 중 하나다.\r\n\r\n높은 사양은 당연하게도 높은 비용으로 직결된다. 하지만 난 돈이 없다. 그렇다고 마냥 아낄 건 아니다만, 최대한 합리적인 선택지를 취할 필요가 있었다.\r\n\r\n내가 원하는 조건은 아래와 같았다.\r\n\r\n* 하나 이상의 Tomcat을 구동하는데 무리가 없을 것.\r\n* 하나 이상의 DBMS를 구동하는데 무리가 없을 것.\r\n* 최소 100GB 이상의 데이터를 보관할 수 있을 것.\r\n* 최대한 적은 유지비를 요구할 것.\r\n\r\n위 조건을 충족하기 위해선 많은 RAM, 디스크 용량이 필요했다. SSD일 경우 가격은 가격은 더욱 상승할 것이고. 서버에서 컴파일같은 연산 작업의 소요는 거의 없을 것 같아 CPU는 크게 신경쓰지 않았다.\r\n\r\n<span class=\"orange-500\">AWS</span>와 <span class=\"pink-700\">Raspberry Pi</span>를 비교하면 아래와 같이 정리할 수 있다.\r\n\r\n|  구분   | <span class=\"orange-500\">AWS LightSail</span> | <span class=\"pink-700\">Raspberry Pi 4 Model B</span> |\r\n| :-----: | :-------------------------------------------: | :--------------------------------------------------: |\r\n|   CPU   |                     2Core                     |                        4Core                         |\r\n|   RAM   |                      8GB                      |                         8GB                          |\r\n|   VGA   |                       X                       |                    O (Support 4K)                    |\r\n|   SSD   |                     320GB                     |                     256GB (별도)                     |\r\n| Pricing |                40$ / per month                |                   160,000 (영구적)                   |\r\n\r\nCPU와 VGA는 위 조건의 영향을 적게 받으므로 제외하고 본다면 AWS가 우수해보인다. 하지만 AWS는 40$라는 적지않은 돈이 **매 달** 과금된다는 게 문제. 라즈베리 파이가 16만원에 영구적인 소장이 가능함을 감안하면 4개월 이후부터 AWS의 비용이 지속적으로 늘어난다. 환율을 천 원으로 감안했음에도 이 정도다.\r\n\r\nAWS에서 가성비로 호평받는 LightSail이 이정도면 EC2는 볼 필요도 없는 셈.\r\n\r\n장기적인 측면에서 볼 때 비용적으론 라즈베리 파이가 우수하다.\r\n\r\n## 학구적 측면\r\n\r\n서버를 다루고, 새로운 OS를 접한다는 것 자체도 개발자에겐 하나의 스펙으로 작용할 수 있다.\r\n\r\nAWS 역시 클라우드 업계의 대표로, 최근의 회사들은 AWS를 다루는 능력 또한 중요하게 보고있다.\r\n\r\n스펙적인 면을 감안하면 AWS가 훨씬 우세하지만, AWS나 라즈베리파이나 결국 서버의 범주에 들어가므로 서버를 학습하는덴 크게 무리는 없을 것이다.\r\n\r\n라즈베리파이는 처음부터 끝까지 사용자가 직접 구축해야하지만, 이 점이 오히려 학구적으로는 장점으로 작용할 것이다.\r\n\r\n# 장비 목록\r\n\r\n어떤 장비를 구입했는지 살펴보자. 가능한한 중고품을 적극적으로 활용했다.\r\n\r\n|  구분  |          이름          |                          가격                           |\r\n| :----: | :--------------------: | :-----------------------------------------------------: |\r\n| Device | Raspberry Pi 4 Model B | 60,000원 <span class=\"grey-600\">(정가 104,000원)</span> |\r\n|  SSD   | SAMSUNG 256GB M2 SATA  | 31,000원 <span class=\"grey-600\">(정가 57,900원)</span>  |\r\n|  Case  |      Argon ONE M2      |                        59,000원                         |\r\n| Power  |      5V 4A 어댑터      |                        10,200원                         |\r\n|  기타  |    MicroSD, 리더기     |                       총 6,400원                        |\r\n|  총합  |          6종           |                        237,500원                        |\r\n\r\n케이스, SSD 등의 별매품을 구매하는데 비용이 좀 소요됐다. 아마 정가로 샀다면 30만원 정도 되지 않았을까 싶다.\r\n\r\n기기를 6만원주고 샀는데 케이스가 6만원 가까이되는 이 아이러니함. 저 케이스는 중고품이 없어서 어쩔 수 없었다.\r\n\r\n# 실물\r\n\r\n케이스까지 조립해서 구동한 라즈베리파이다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/131309644-69d69416-12e9-4fd6-95fc-3f1909289387.png)\r\n\r\n# 목표\r\n\r\n라즈베리파이 서버의 최종 목표는 아래와 같다.\r\n\r\n* 라즈베리파이에 Ubuntu 서버를 구축한다.\r\n* 도메인을 입힌다.\r\n* SSH, RDP 등의 원격 통신환경을 구축한다.\r\n* Tomcat을 구동하여 페이지를 호스팅한다\r\n* MariaDB를 설치하여 DB 통신을 수행한다.","url":["2021-08-29-hello-raspberry","2021","08","29","hello-raspberry"]}],"categories":{"All":{"count":66,"flag":true},"Ubuntu":{"count":2,"flag":true},"RaspberryPi":{"count":3,"flag":true},"알고리즘":{"count":32,"flag":false},"잡담":{"count":2,"flag":false},"WEB":{"count":7,"flag":false},"CS":{"count":10,"flag":false},"React":{"count":1,"flag":false},"JAVA":{"count":3,"flag":false},"Jekyll":{"count":4,"flag":false},"WAS":{"count":2,"flag":false}},"images":["celeb1.gif","celeb10.gif","celeb11.gif","celeb12.gif","celeb13.gif","celeb14.gif","celeb15.gif","celeb16.gif","celeb2.gif","celeb3.gif","celeb4.gif","celeb5.gif","celeb6.gif","celeb7.gif","celeb8.gif","celeb9.gif","city1.gif","city10.gif","city11.gif","city12.gif","city13.gif","city14.gif","city15.gif","city2.gif","city3.gif","city4.gif","city4.jpg","city5.gif","city6.gif","city7.gif","city8.gif","city9.gif","code1.gif","code2.gif","code3.gif","funk1.gif","funk2.gif","funk3.gif","funk4.gif","funk5.gif","funk6.gif","game1.gif","signal.gif"],"category":"RaspberryPi","page":1,"hash":"b081f613afd"},"__N_SSG":true}