{"pageProps":{"posts":[{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1017번 소수 쌍","excerpt":"지민이는 수의 리스트가 있을 때, 이를 짝지어 각 쌍의 합이 소수가 되게 하려고 한다. 예를 들어, {1, 4, 7, 10, 11, 12}가 있다고 하자. 지민이는 다음과 같이 그룹지을 수 있다. 1 + 4 = $, 7 + 10 = 17$, $11 + 12 = 23 또는 1 + 10 = 11, 4 + 7 = 11, 11 + 12 = 23 수의 리스트가 주어졌을 때, 지민이가 모든 수를 다 짝지었을 때, 첫 번째 수와 어떤 수를 짝지었는지 오름차순으로 출력하는 프로그램을 작성하시오. 위의 예제에서 1 + 12 = 13으로 소수이다. 그러나, 남은 4개의 수를 합이 소수가 되게 짝지을 수 있는 방법이 없다. 따라서 예제의 답은 4, 10이다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-26T03:19:32","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","PLATINUM","PLATINUM III","에라토스 테네스의 체","이분 매칭"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-26-a1017.md","content":"\r\n# 소수 쌍\r\n\r\n|                            랭크                             |                                                      사용 언어                                                      |\r\n| :---------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------: |\r\n| ![image](https://d2gd6pc034wcta.cloudfront.net/tier/18.svg) | ![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |\r\n\r\n🔗 [전체 1017번 문제](https://www.acmicpc.net/problem/1017)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    128MB    |\r\n\r\n## 문제\r\n\r\n지민이는 수의 리스트가 있을 때, 이를 짝지어 각 쌍의 합이 소수가 되게 하려고 한다. 예를 들어, ${1, 4, 7, 10, 11, 12}$가 있다고 하자. 지민이는 다음과 같이 그룹지을 수 있다.\r\n\r\n$1 + 4 = 5$, $7 + 10 = 17$, $11 + 12 = 23$  \r\n또는  \r\n$1 + 10 = 11$, $4 + 7 = 11$, $11 + 12 = 23$\r\n\r\n수의 리스트가 주어졌을 때, 지민이가 모든 수를 다 짝지었을 때, 첫 번째 수와 어떤 수를 짝지었는지 오름차순으로 출력하는 프로그램을 작성하시오. 위의 예제에서 $1 + 12 = 13$으로 소수이다. 그러나, 남은 4개의 수를 합이 소수가 되게 짝지을 수 있는 방법이 없다. 따라서 예제의 답은 4, 10이다.\r\n\r\n## 입력\r\n\r\n첫째 줄에 리스트의 크기 $N$이 주어진다. N은 50보다 작거나 같은 자연수이며, 짝수이다. 둘째 줄에 리스트에 들어있는 수가 주어진다. 리스트에 들어있는 수는 1,000보다 작거나 같은 자연수이며, 중복되지 않는다.\r\n\r\n## 출력\r\n\r\n첫째 줄에 정답을 출력한다. 없으면 -1을 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n6\r\n1 4 7 10 11 12\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n4 10\r\n```\r\n\r\n# 풀이\r\n\r\n[1014번 컨닝](/posts/2021/06/18/a1014)문제를 통해 <span class=\"primary\">이분 매칭</span>을 접한 덕분인지, 지금까지 푼 <span class=\"teal-A400\">플래티넘</span> 중에서는 그나마 좀 이해되는 문제였다.\r\n\r\n역시 내용이 다소 난해한데, 알고리즘이 요구하는 동작은 다음과 같이 정리할 수 있다. 입력된 6개의 숫자 배열 ${ 1, 4, 7, 10, 11, 12 }$이 있다고 가정하자. 배열의 숫자를 한 쌍씩 짝지어 더하면 총 3개의 수가 나온다. 이렇게 <span class=\"red-A400\">짝지어 더한 수가 모두 소수일 경우, 입력의 첫 번째 숫자와 매칭된 숫자들을 오름차순으로 정렬하여 출력</span>하는 문제다.\r\n\r\n예제에서도 설명해주듯이, 짝지은 수가 모두 소수인 경우는 $1 + 4 = 5$, $7 + 10 = 17$, $11 + 12 = 23$과 $1 + 10 = 11$, $4 + 7 = 11$, $11 + 12 = 23$가 된다. 입력의 가장 첫 번째 숫자가 1이므로, 1와 매칭된 4, 10이 정답이 된다.\r\n\r\n## 소수 판별하기🍳\r\n\r\n이제 좀 더 세부적인 내용을 살펴보자. 문제 해결의 핵심은 <span class=\"primary\">소수</span>다. 이 알고리즘에선 소수 판별이 필요하다. 많은 판별방법이 있지만, 가장 대표적인 <span class=\"primary\">에라토스 테네스의 체</span>를 활용하면 어렵지 않게 해결할 수 있다.\r\n\r\n## 요소 한 쌍씩 그룹화하기\r\n\r\n소수 판별 방법도 마련했겠다, 입력된 숫자 배열을 적절히 짝지어야한다. <span class=\"lightBlue-A400\">핵심은 짝지은 수의 합이 소수</span>가 되는 것. 요소를 한번씩 다 더해보는 방법도 있겠지만, 배열의 크기가 커질 수록 요구되는 연산량 또한 높아지므로 적절하지 않다. 즉, 가능성 있는 조합으로만 그룹화해야한다.\r\n\r\n소수에 대해 생각해보자. <span class=\"green-A400\">소수는 1과 자기 자신으로만 나눠지는 수</span>다. 즉, 반드시 **소수는 홀수**여야 한다. 이 전제를 확장하면 <span class=\"green-A400\">짝지은 수의 합이 홀수</span>여야한다. 두 수를 더했을 때 홀수가 나오는 경우는 **홀수 + 짝수**로 한 가지 경우의 수만 존재한다.\r\n\r\n따라서 우리는 입력값을 홀수와 짝수 그룹으로 나누어 각 그룹끼리만 더하면 결과는 모두 홀수일 것이므로, 해당 수는 소수일 가능성이 있다. 두 개의 그룹을 겹치지 않게 조합해야하므로 <span class=\"primary\">이분 매칭</span>이 적절한 해답이 될 수 있다. 각 그룹은 홀수와 짝수로 나누고, 더했을 때 소수가 되는 쌍을 노드로 연결하면 <span class=\"primary\">이분 매칭</span>으로 접근 가능하다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/123501775-3c424280-d682-11eb-9eda-b0fe8c335122.png)\r\n\r\n위 그림은 예제 1을 홀수와 짝수 그룹으로 나눠 이분매칭으로 표시한 그림이다. 위 숫자를 6개의 숫자를 매칭하면 3개의 노드가 나올 것이다. 각 숫자를 더하기 위해선 반드시 하나의 쌍을 이뤄야하므로, <span class=\"primary\">이분 매칭</span>의 결과는 반드시 $N \\div 2$가 되어야 한다.\r\n\r\n예제의 가장 첫 번째 수는 1이다. 즉, 우리는 <span class=\"green-A400\">모든 요소쌍의 합이 모두 소수가 되는 조합을 찾고 해당 조합들에서 각각 1과 매칭되는 숫자</span>를 구해야한다. 이를 확장시키면, 1과 짝을 이루는 수를 더한 값이 소수가 아닐 경우 애초에 비교할 필요가 없다.\r\n\r\n위 그림의 매칭 결과가 3이 나온다면, 모든 요소를 적절히 짝지어 더한 값이 모두 소수가 되는 조합이 있다는 뜻이다. 해당 조합을 저장하여 1과 짝지은 값을 찾으면 될 것이다.  \r\n만약, 홀수와 짝수의 갯수가 일치하지 않을 경우, 매칭이 불가능하므로 문제에 제시한 조건에 따라 -1을 반환해야 한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/123501775-3c424280-d682-11eb-9eda-b0fe8c335122.png)\r\n\r\n1과 더했을 때 소수가 되는 요소는 4, 10, 12 모두 해당하므로 이를 모두 노드로 연결할 수 있다. 1과 매칭 가능한 요소 중 하나를 연결하면, 나머지 4개 요소에 대해서만 <span class=\"primary\">이분 매칭</span>을 진행할 수 있다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/123501823-9216ea80-d682-11eb-96de-8c01b66677bb.png)\r\n\r\n만약, 1과 4를 매칭했다면 나머지 4개 요소에 대한 소수 매칭은 그림과 같이 표현할 수 있다. $[ 7, 10 ]$, $[ 11, 12 ]$ 조합의 합이 모두 소수이므로, $[ 1, 4 ]$, $[ 7, 10 ]$, $[ 11, 12 ]$ 조합은 알고리즘의 조건에 부합한다. 따라서 4는 정답에 포함된다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/123501853-c8546a00-d682-11eb-86e2-6eef5c65ef69.png)\r\n\r\n만약, 1과 12가 매칭된다면 어떨까? 이는 위 그림과 같이 표시할 수 있다. 7의 경우 4와 10 중 어떤걸 조합해도 소수지만, 11의 경우 4와 10 모두 소수가 아니므로 어떤식으로 매칭해도 4개 요소의 매칭 결과는 1이 된다. 즉, 1과 매칭된 조합 하나를 더한 최종 매칭 수는 2이므로 $N / 2$의 값에 부합하지 않으므로 해당 조합은 정답이 될 수 없다.  \r\n따라서 예제의 결과는 출력과 같이 `4 10`이 된다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\nimport java.util.LinkedList;\r\n\r\n/**\r\n * 백준 전체 1017 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/06/26/a1017\">1017 풀이</a>\r\n * @since 2021.06.26 Sat 03:19:32\r\n */\r\npublic class Main\r\n{\r\n\t// 에라토스 테네스의 체 배열 (소수 판별용)\r\n\tprivate static final boolean[] IS_NOT_PRIME = eratosthenes();\r\n\t\r\n\t// 왼쪽 배열 (이분매칭의 기준)\r\n\tprivate static int[] left;\r\n\t\r\n\t// 오른쪽 배열\r\n\tprivate static int[] right;\r\n\t\r\n\t// 노드 연결 여부\r\n\tprivate static boolean[][] hasNode;\r\n\t\r\n\t// 방문 여부\r\n\tprivate static boolean[] isVisit;\r\n\t\r\n\t// 매칭된 수\r\n\tprivate static int[] matched;\r\n\t\r\n\t// 현재 선택 중인 수\r\n\tprivate static int selected;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 입력값 갯수\r\n\t\tint N = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\t// 입력값 배열\r\n\t\tint[] numbers = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\t// 첫 번째 수가 홀수일 경우\r\n\t\tif (numbers[0] % 2 != 0)\r\n\t\t{\r\n\t\t\t// 왼쪽 배열에 홀수를 할당\r\n\t\t\tleft = Arrays.stream(numbers).filter(value -> value % 2 != 0).toArray();\r\n\t\t\tright = Arrays.stream(numbers).filter(value -> value % 2 == 0).toArray();\r\n\t\t}\r\n\t\t\r\n\t\t// 첫 번째 수가 짝수일 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\t// 왼쪽 배열에 짝수를 할당\r\n\t\t\tleft = Arrays.stream(numbers).filter(value -> value % 2 == 0).toArray();\r\n\t\t\tright = Arrays.stream(numbers).filter(value -> value % 2 != 0).toArray();\r\n\t\t}\r\n\t\t\r\n\t\t// 홀수 배열과 짝수 배열의 수가 동일할 경우 (이분매칭 가능)\r\n\t\tif (left.length == right.length)\r\n\t\t{\r\n\t\t\thasNode = new boolean[left.length][right.length];\r\n\t\t\t\r\n\t\t\t// left의 첫 번째 행은 기준 매칭이므로 이분 매칭에서 제외한다.\r\n\t\t\tfor (int i = 1; i < left.length; i++)\r\n\t\t\t{\r\n\t\t\t\tfor (int j = 0; j < right.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tint ref = left[i] + right[j];\r\n\t\t\t\t\t\r\n\t\t\t\t\t// left[i] + right[j]의 값이 소수일 경우\r\n\t\t\t\t\tif (!IS_NOT_PRIME[ref])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 노드를 연결한다.\r\n\t\t\t\t\t\thasNode[i][j] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLinkedList<Integer> list = new LinkedList<>();\r\n\t\t\t\r\n\t\t\t// 첫 번째 수와 상대 그룹의 요소를 하나씩 매칭해본다.\r\n\t\t\tfor (int i = 0; i < N / 2; i++)\r\n\t\t\t{\r\n\t\t\t\t// left[0]와 right[i]의 합이 소수일 경우\r\n\t\t\t\tif (!IS_NOT_PRIME[left[0] + right[i]])\r\n\t\t\t\t{\r\n\t\t\t\t\tselected = i;\r\n\t\t\t\t\t\r\n\t\t\t\t\tint size = bipartite();\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 모든 요소가 매칭될 경우\r\n\t\t\t\t\tif (size == N / 2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist.add(right[selected]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 하나도 매칭되지 않은 경우\r\n\t\t\tif (list.size() == 0)\r\n\t\t\t{\r\n\t\t\t\twriter.write(\"-1\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 매칭이 하나 이상 있을 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// 오름차순으로 정렬\r\n\t\t\t\tlist.sort(Integer::compareTo);\r\n\t\t\t\t\r\n\t\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\t\r\n\t\t\t\tfor (int item : list)\r\n\t\t\t\t{\r\n\t\t\t\t\tbuilder.append(item).append(\" \");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\twriter.write(builder.toString().trim());\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// 홀수 배열과 짝수 배열의 수가 동일하지 않을 경우 (이분매칭 불가능)\r\n\t\telse\r\n\t\t{\r\n\t\t\twriter.write(\"-1\");\r\n\t\t}\r\n\t\t\r\n\t\twriter.newLine();\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 이분 매칭 갯수 반환 함수\r\n\t *\r\n\t * @return [int] 이분 매칭 갯수\r\n\t */\r\n\tprivate static int bipartite()\r\n\t{\r\n\t\t// 이미 left[0]과 right 요소 하나가 선택됨\r\n\t\tint size = 1;\r\n\t\t\r\n\t\tmatched = new int[left.length];\r\n\t\t\r\n\t\tArrays.fill(matched, -1);\r\n\t\t\r\n\t\tfor (int i = 1; i < left.length; i++)\r\n\t\t{\r\n\t\t\tisVisit = new boolean[left.length];\r\n\t\t\t\r\n\t\t\t// 매칭 가능할 경우\r\n\t\t\tif (dfs(i))\r\n\t\t\t{\r\n\t\t\t\tsize++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn size;\r\n\t}\r\n\t\r\n\t/**\r\n\t * DFS 알고리즘 결과 반환 함수\r\n\t *\r\n\t * @param num: [int] 시작점\r\n\t *\r\n\t * @return [int] 매칭 갯수\r\n\t */\r\n\tprivate static boolean dfs(int num)\r\n\t{\r\n\t\t// 첫 방문일 경우\r\n\t\tif (!isVisit[num])\r\n\t\t{\r\n\t\t\tisVisit[num] = true;\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < right.length; i++)\r\n\t\t\t{\r\n\t\t\t\t// 연결된 노드가 있으며, 첫 번째 숫자와 매칭된 숫자가 아니며, 소수일 경우\r\n\t\t\t\tif (hasNode[num][i] && i != selected && !IS_NOT_PRIME[left[num] + right[i]])\r\n\t\t\t\t{\r\n\t\t\t\t\t// 매칭이 아직 되지 않았거나, 매칭된 숫자가 다른 숫자와 매칭될 수 있을 경우\r\n\t\t\t\t\tif (matched[i] == -1 || dfs(matched[i]))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmatched[i] = num;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 아레토스 테네스의 체 배열 반환 함수\r\n\t *\r\n\t * @return [boolean[]] 아레토스 테네스의 체\r\n\t */\r\n\tprivate static boolean[] eratosthenes()\r\n\t{\r\n\t\tboolean[] isNotPrime = new boolean[2000];\r\n\t\t\r\n\t\tisNotPrime[0] = true;\r\n\t\tisNotPrime[1] = true;\r\n\t\t\r\n\t\tint maxPrime = (int) Math.ceil(Math.sqrt(2000));\r\n\t\t\r\n\t\tfor (int i = 2; i < maxPrime; i++)\r\n\t\t{\r\n\t\t\t// 소수일 경우\r\n\t\t\tif (!isNotPrime[i])\r\n\t\t\t{\r\n\t\t\t\tfor (int j = i + i; j < isNotPrime.length; j += i)\r\n\t\t\t\t{\r\n\t\t\t\t\t// 아직 소수가 아님을 표시하지 않았을 경우\r\n\t\t\t\t\tif (!isNotPrime[j])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 소수의 배수는 소수가 아니므로 제외함\r\n\t\t\t\t\t\tisNotPrime[j] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn isNotPrime;\r\n\t}\r\n}\r\n```\r\n\r\n편의상 항상 왼쪽을 기준으로 매칭한다. 올바른 조합 중 첫 번째 수와 매칭되는 수를 찾는 것이 목표인데, 첫 번째 수는 홀수, 짝수 모두 올 수 있다. 따라서 홀수가 먼저오냐, 짝수가 먼저오냐에 따라 해당하는 분류를 기준 배열로 할당한다.\r\n\r\n``` java\r\n// 첫 번째 수가 홀수일 경우\r\nif (numbers[0] % 2 != 0)\r\n{\r\n\t// 왼쪽 배열에 홀수를 할당\r\n\tleft = Arrays.stream(numbers).filter(value -> value % 2 != 0).toArray();\r\n\tright = Arrays.stream(numbers).filter(value -> value % 2 == 0).toArray();\r\n}\r\n\r\n// 첫 번째 수가 짝수일 경우\r\nelse\r\n{\r\n\t// 왼쪽 배열에 짝수를 할당\r\n\tleft = Arrays.stream(numbers).filter(value -> value % 2 == 0).toArray();\r\n\tright = Arrays.stream(numbers).filter(value -> value % 2 != 0).toArray();\r\n}\r\n```\r\n\r\n해당 소스는 위와 같다. 왼쪽 배열 `left`를 기준으로하여 홀수가 올 경우 `left`에 홀수 배열을, 아닐 경우 짝수 배열을 할당한다.\r\n\r\n소수 판별은 <span class=\"primary\">에라토스 테네스의 체</span> 알고리즘을 통해, 요소로 올 수 있는 최대값인 2,000개 배열에 대한 소수 배열을 준비한다.\r\n\r\n> **잠깐, 문제에서는 요소로 올 수 있는 최대값이 1,000이라는데요?**  \r\n> 홀수와 짝수를 더하므로, 요소의 최대값은 각 요소의 최대값을 더한 999 + 1,000 = 1,999가 됩니다.\r\n\r\n배열이 2000개까지밖에 안 되므로, 연산할 때마다 비교하는 것 보다 미리 배열을 선언해서 비교하는 게 훨씬 효율적이라 판단했다.  \r\n만약 연산할 때마다 비교하려면, 비교할 수의 제곱근을 구하고, 2부터 제곱근까지 나눈다. 중간에 정확히 나누어 떨어지는 수가 있을 경우, 그 수는 소수가 아니다.\r\n\r\n``` java\r\n// 대상 숫자\r\nint number = 1000;\r\n\r\n// 소수 여부\r\nboolean isPrime = true;\r\n\r\n// 가장 작은 소수인 2부터 대상의 제곱근까지 나누기\r\nfor (int i = 2; i <= Math.sqrt(number); i++)\r\n{\r\n\t// 나누어 떨어지는 수가 있을 경우\r\n\tif (number % i == 0)\r\n\t{\r\n\t\tisPrime = false;\r\n\t\tbreak;\r\n\t}\r\n}\r\n```\r\n\r\n대충 위 형식처럼 짜면 된다.\r\n\r\n``` java\r\n// 첫 번째 수와 상대 그룹의 요소를 하나씩 매칭해본다.\r\nfor (int i = 0; i < N / 2; i++)\r\n{\r\n\t// left[0]와 right[i]의 합이 소수일 경우\r\n\tif (!IS_NOT_PRIME[left[0] + right[i]])\r\n\t{\r\n\t\tselected = i;\r\n\t\t\r\n\t\tint size = bipartite();\r\n\t\t\r\n\t\t// 모든 요소가 매칭될 경우\r\n\t\tif (size == N / 2)\r\n\t\t{\r\n\t\t\tlist.add(right[selected]);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n그룹을 나누었으면, 입력값의 첫 번째 수 $left[0]$와 하나씩 매칭하여 기준 매칭을 선정한다. `!IS_NOT_PRIME[left[0] + right[i]]`을 통해 매칭이 소수일 경우에만 진행한다. 소수가 아닐 경우 비교해볼 필요도 없으니. `selected`는 현재 $left[0]$와 매칭된 요소를 의미한다. 이게 왜 필요하냐면, $left[0]$와 매칭된 요소의 경우 다른 요소와 매칭될 수 없으므로 매칭에서 제외해야 한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/123501834-a3f88d80-d682-11eb-8e27-968a1c71e342.png\" width=\"600px\" />\r\n</p>\r\n\r\n이는 위 그림과 같이 나타낼 수 있다. 이미 1이 10과 매칭되었으므로, 10과 연결된 7, 11의 노드를 제거해야 정상적으로 매칭할 수 있다. 연결된 노드는 `hasNode` 배열에서 관리하고 있다. 예제 1을 기준으로 `hasNode`의 값은 다음과 같다.\r\n\r\n| $N, M$ |   4   |  10   |  12   |\r\n| :----: | :---: | :---: | :---: |\r\n|   1    | true  | true  | true  |\r\n|   7    | true  | true  | true  |\r\n|   11   | false | false | true  |\r\n\r\n만약 여기서, 1과 10을 매칭할 경우 hasNode는 아래와 같다.\r\n\r\n| $N, M$ |     4     |  **10**   |    12     |\r\n| :----: | :-------: | :-------: | :-------: |\r\n| **1**  | **false** | **true**  | **false** |\r\n|   7    |   true    | **false** |   true    |\r\n|   11   |   false   | **false** |   true    |\r\n\r\n1과 10에 연결된 다른 노드를 모두 제거하고, `hasNode[1][10] = true`로 지정해야 한다. 임시 배열을 선언해서 변경하는 경우도 있겠지만, 배열 연산 오버헤드를 줄이기 위해 `selected = 10`으로 지정하여 DFS 알고리즘 수행 시 `selected`와 동일한 인덱스를 false로 인식하게끔 설계했다.\r\n\r\n``` java\r\n/**\r\n * 이분 매칭 갯수 반환 함수\r\n *\r\n * @return [int] 이분 매칭 갯수\r\n */\r\nprivate static int bipartite()\r\n{\r\n\t// 이미 left[0]과 right 요소 하나가 선택됨\r\n\tint size = 1;\r\n\t\r\n\tmatched = new int[left.length];\r\n\t\r\n\tArrays.fill(matched, -1);\r\n\t\r\n\tfor (int i = 1; i < left.length; i++)\r\n\t{\r\n\t\tisVisit = new boolean[left.length];\r\n\t\t\r\n\t\t// 매칭 가능할 경우\r\n\t\tif (dfs(i))\r\n\t\t{\r\n\t\t\tsize++;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn size;\r\n}\r\n\r\n/**\r\n * DFS 알고리즘 결과 반환 함수\r\n *\r\n * @param num: [int] 시작점\r\n *\r\n * @return [int] 매칭 갯수\r\n */\r\nprivate static boolean dfs(int num)\r\n{\r\n\t// 첫 방문일 경우\r\n\tif (!isVisit[num])\r\n\t{\r\n\t\tisVisit[num] = true;\r\n\t\t\r\n\t\tfor (int i = 0; i < right.length; i++)\r\n\t\t{\r\n\t\t\t// 연결된 노드가 있으며, 첫 번째 숫자와 매칭된 숫자가 아니며, 소수일 경우\r\n\t\t\tif (hasNode[num][i] && i != selected && !IS_NOT_PRIME[left[num] + right[i]])\r\n\t\t\t{\r\n\t\t\t\t// 매칭이 아직 되지 않았거나, 매칭된 숫자가 다른 숫자와 매칭될 수 있을 경우\r\n\t\t\t\tif (matched[i] == -1 || dfs(matched[i]))\r\n\t\t\t\t{\r\n\t\t\t\t\tmatched[i] = num;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn false;\r\n}\r\n```\r\n\r\n<span class=\"primary\">이분 매칭</span> 소스는 위와 같다. `bipartite()`는 기본적인 이분 매칭 알고리즘과 크게 다르지 않다. `size`가 1부터 시작하는 이유는, 이미 입력의 첫 번째 수 `left[0]`과 합이 소수를 만족하는 `right[m]`과 매칭되었기 때문이다.\r\n\r\n`dfs()`에서 조건에 따라 필터링이 진행된다. 조건식은 `hasNode[num][i] && i != selected && !IS_NOT_PRIME[left[num] + right[i]]`와 같다.\r\n\r\n* `hasNode[num][i]`: `left[num]`과 `right[i]`가 서로 연결되어 있는지 (소수)\r\n* `i != selected`: `left[num]`이 `right[i]`와 매칭되지 않았는지\r\n* `!IS_NOT_PRIME[left[num] + right[i]]`: `left[num]`과 `right[i]` 소수인지\r\n\r\n위 조건식을 모두 만족할 경우에만 매칭을 수행한다.\r\n\r\n$N$이 반드시 짝수거나, 입력된 숫자의 홀수, 짝수가 반드시 동일하다는 조건이 존재하지 않으므로, 이 경우 -1을 출력해야한다. 또한, 모든 조건이 일치해도 매칭이 하나도 되지 않을 경우 역시 -1을 출력해야한다.\r\n\r\n## 분류\r\n\r\n* 수학\r\n* 정수론\r\n* 소수 판정\r\n* 이분 매칭\r\n* 에라토스 테네스의 체","url":["2021-06-26-a1017","2021","06","26","a1017"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1016번 제곱 ㄴㄴ수","excerpt":"어떤 수 X가 1보다 큰 제곱수로 나누어 떨어지지 않을 때, 제곱ㄴㄴ수라고 한다. 제곱수는 정수의 제곱이다. min과 max가 주어지면, min과 max를 포함한 사이에 제곱ㄴㄴ수가 몇 개 있는지 출력한다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-23T00:22:31","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","GOLD","GOLD I","에라토스 테네스의 체"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-23-a1016.md","content":"\r\n# 제곱 ㄴㄴ수\r\n\r\n|                            랭크                             |                                                      사용 언어                                                      |\r\n| :---------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------: |\r\n| ![image](https://d2gd6pc034wcta.cloudfront.net/tier/15.svg) | ![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |\r\n\r\n🔗 [전체 1016번 문제](https://www.acmicpc.net/problem/1016)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    512MB    |\r\n\r\n## 문제\r\n\r\n어떤 수 $X$가 1보다 큰 제곱수로 나누어 떨어지지 않을 때, 제곱ㄴㄴ수라고 한다. 제곱수는 정수의 제곱이다. min과 max가 주어지면, min과 max를 포함한 사이에 제곱ㄴㄴ수가 몇 개 있는지 출력한다.\r\n\r\n## 입력\r\n\r\n첫째 줄에 두 정수 min과 max가 주어진다.\r\n\r\n## 출력\r\n\r\n첫째 줄에 [min,max]구간에 제곱ㄴㄴ수가 몇 개인지 출력한다.\r\n\r\n## 제한\r\n\r\n* $1 ≤ \\text{min} ≤ 1,000,000,000,000$\r\n* $\\text{min} ≤ \\text{max} ≤ \\text{min} + 1,000,000$\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n1 10\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n7\r\n```\r\n\r\n# 풀이\r\n\r\n주어진 구간에서 제곱수(4, 9, 16 등)으로 나누어지지 않는 수의 갯수를 구하면 되는 문제.\r\n\r\n개념은 생각보다 간단하다. <span class=\"primary\">에라토스 테네스의 체</span>에 대해 알고있다면 생각보다 쉽게 접근할 수 있기도 하고. 의외로 문제는 다른 쪽에 있다.\r\n\r\n1. min, max의 최대값이 1조 단위다.\r\n2. 구간이 반드시 1부터 시작하지 않는다.\r\n3. 배열의 인덱스는 반드시 `int` 데이터만 가능하다.\r\n\r\n보편적인 정수 데이터인 `int`의 최대값이 약 21억인걸 감안하면 턱없이 큰 수. 때문에 `long` 데이터의 사용이 강제된다. 반면 배열의 인덱스는 `int` 데이터만 사용 가능하므로, `int`와 `long`의 적절한 데이터 선언 및 변환이 필요하다.\r\n\r\n최소값 <span class=\"lightBlue-A400\">min</span>과 최대값 <span class=\"lightBlue-A400\">max</span>는 그 수가 매우 클 수는 있어도, 그 차이는 백만 이하로만 나오므로 배열로 다루는데 무리가 없다.\r\n\r\n만약, min = 1,000,000,000,000(1조)이고, max = 1,000,000,500,000(1조 50만)일 경우, 실제로 비교해야할 구간은 약 50만개밖에 되지 않는다. 이 구간을 배열 $A$로 표시하면 $A[0] = 1,000,000,000,000\\text{(min)}$가 된다. 즉, $A[i] = i + \\text{min}$으로 다뤄야한다.\r\n\r\n**제곱수의 배수를 제외**해야한다는 점에서 소수의 배수를 제외하여 소수를 판별하는 <span class=\"primary\">에라토스 테네스의 체</span>의 개념와 매우 흡사하다. 즉, <span class=\"primary\">에라토스 테네스의 체</span> 알고리즘에서 소수가 아닌 제곱수의 배수를 판별하게끔 살짝 변형시켜주면 된다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 백준 전체 1016 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/06/23/a1016\">1016 풀이</a>\r\n * @since 2021.06.23 Fri 00:22:31\r\n */\r\npublic class Main\r\n{\r\n\t// 최소값\r\n\tprivate static long min;\r\n\t\r\n\t// 최대값\r\n\tprivate static long max;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tlong[] temp = Arrays.stream(reader.readLine().split(\" \")).mapToLong(Long::parseLong).toArray();\r\n\t\t\r\n\t\tmin = temp[0];\r\n\t\tmax = temp[1];\r\n\t\t\r\n\t\twriter.write(Integer.toString(solve()));\r\n\t\twriter.newLine();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 알고리즘 결과 반환 함수\r\n\t *\r\n\t * @return [int] 제곱수로 나누어 떨어지지 않는 수의 갯수\r\n\t */\r\n\tprivate static int solve()\r\n\t{\r\n\t\tint size = 0;\r\n\t\t\r\n\t\tboolean[] isNotPow = eratosthenes();\r\n\t\t\r\n\t\tfor (boolean item : isNotPow)\r\n\t\t{\r\n\t\t\t// 제곱수로 나누어 떨어지지 않는 수일 경우\r\n\t\t\tif (!item)\r\n\t\t\t{\r\n\t\t\t\tsize++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn size;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 에라토스 테네스의 체 배열 반환 함수\r\n\t * true: 제곱ㄴㄴ수가 아닌 수\r\n\t * false: 제곱ㄴㄴ수\r\n\t *\r\n\t * @return [boolean[]] 에라토스 테네스의 체 배열\r\n\t */\r\n\tprivate static boolean[] eratosthenes()\r\n\t{\r\n\t\tint length = (int) (max - min + 1);\r\n\t\t\r\n\t\tboolean[] isNotPow = new boolean[length];\r\n\t\t\r\n\t\tfor (long i = 2; i * i <= max; i++)\r\n\t\t{\r\n\t\t\tlong pow = i * i;\r\n\t\t\t\r\n\t\t\tlong start = min % pow == 0 ? min / pow : (min / pow) + 1;\r\n\t\t\t\r\n\t\t\tfor (long j = start; j * pow <= max; j++)\r\n\t\t\t{\r\n\t\t\t\t// 제곱수의 배수로 나누어 떨어지므로 제곱ㄴㄴ수가 아님\r\n\t\t\t\tisNotPow[(int) (j * pow - min)] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn isNotPow;\r\n\t}\r\n}\r\n```\r\n\r\n`solve()` 메소드는 단순히 갯수를 파악하는 로직이므로 그 의도만 알면 된다. 가장 핵심인 부분은 <span class=\"primary\">에라토스 테네스의 체</span>를 변형한 아래 코드다.\r\n\r\n``` java\r\n/**\r\n * 에라토스 테네스의 체 배열 반환 함수\r\n *\r\n * true: 제곱ㄴㄴ수가 아닌 수\r\n * false: 제곱ㄴㄴ수\r\n *\r\n * @return [boolean[]] 에라토스 테네스의 체 배열\r\n */\r\nprivate static boolean[] eratosthenes()\r\n{\r\n\tint length = (int) (max - min + 1);\r\n\t\r\n\tboolean[] isNotPow = new boolean[length];\r\n\t\r\n\tfor (long i = 2; i * i <= max; i++)\r\n\t{\r\n\t\tlong pow = i * i;\r\n\t\t\r\n\t\tlong start = min % pow == 0 ? min / pow : (min / pow) + 1;\r\n\t\t\r\n\t\tfor (long j = start; j * pow <= max; j++)\r\n\t\t{\r\n\t\t\t// 제곱수의 배수로 나누어 떨어지므로 제곱ㄴㄴ수가 아님\r\n\t\t\tisNotPow[(int) (j * pow - min)] = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn isNotPow;\r\n}\r\n```\r\n\r\n총 2개의 반복문이 돌아간다. 인덱스는 각각 $i$, $j$다.\r\n\r\n* $i$: 제곱수의 제곱근\r\n* $j$: 제곱수의 배수를 구하기 위한 인덱스\r\n\r\n1보다 큰 제곱수는 4이므로, 인덱스 $i$의 시작값은 2이며, 제곱수인 $i^2$의 크기가 max 이하일때 까지 반복한다. 만약, 구간이 10부터 30까지라면, $i$는 2<span class=\"grey-500\">(4)</span>부터 5<span class=\"grey-500\">(25)</span>까지 증가할 것이다.\r\n\r\n인덱스 $j$는 약간 복잡한데, 이는 구간의 존재 때문이다. 기본적으로 <span class=\"primary\">에라토스 테네스의 체</span>는 1부터 시작하므로 상관없지만, 해당 문제는 <span class=\"red-500\">시작값이 1이 아닐 경우</span>가 존재한다.\r\n\r\n예를 들어, $i = 2$이고 구간이 10 ~ 20까지라고 가정하자. $i^2 = 4$이므로 제곱수 4의 배수를 제거해야한다. 만약 평상시처럼 곱셈의 인덱스를 1부터 시작해서 $4 \\times 1$, $4 \\times 2$, $\\dots$와 같이 시작한다면 문제가 생긴다. 구간은 10부터인데 비해, 10 이하인 4, 8을 제거하게되니 이를 걸러내야한다. 만약 구간이 1000부터 시작이라면 250개의 쓸모없는 연산이 발생한다. 구간이 최대 1조부터 시작할 수 있음을 생각한다면 구간의 시작에 따라 곱셈 인덱스 $j$를 적절히 계산해야한다.\r\n\r\n$i = 2$일 경우, $i^2 = 4$이다. 구간의 시작이 10일 경우, 10 이하인 수 $4 \\times 1$, $4 \\times 2$는 건너뛰므로 곱셈 인덱스 $j$는 3부터 시작해야한다.\r\n\r\n$$\r\nj_{\\text{min}} = \r\n\\begin{cases}\r\n\t\\text{min} \\div i^2 \\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\, (\\text{min} \\,\\,\\, \\% \\,\\,\\, i^2 == 0)\\\\\r\n\t(\\text{min} \\div i^2) + 1 \\,\\,\\, (\\text{min} \\,\\,\\, \\% \\,\\,\\, i^2 \\,\\,\\, !=  0)\r\n\\end{cases}\r\n$$\r\n\r\n즉, 곱셈 인덱스 $j$의 시작값의 일반식은 위와 같다.\r\n\r\n$\\text{제곱수의 배수} = j \\times i^2 \\,\\,\\, (j = 1, 2, 3, \\dots)$이므로, 해당값을 모두 제외하면 된다. 단, $j \\times i^2$는 실제 값이므로, 배열의 인덱스는 $(j \\times i^2) - \\text{min}$이다.\r\n\r\n배열에 `true`를 할당하는 이유는 `boolean[]`의 초기값이 `false`이기 때문. `Arrays.fill()` 메소드를 활용하여 `true`로 초기화할 수도 있으나, 의미론적으론 좋지만 불필요한 연산이므로 `false`를 제곱ㄴㄴ수로, `true`를 제곱ㄴㄴ수가 아닌 수로 지칭한다. 배열 이름이 `isNotPow`인 이유도 이때문.\r\n\r\n이후 `isNotPow` 배열을 순회하며, 값이 `false`인 수만 카운팅하면 된다.\r\n\r\n## 분류\r\n\r\n* 수학\r\n* 정수론\r\n* 소수 판정\r\n* 에라토스 테네스의 체","url":["2021-06-23-a1016","2021","06","23","a1016"]}],"categories":{"알고리즘":{"count":34,"flag":true},"잡담":{"count":2,"flag":false},"WEB":{"count":7,"flag":false},"CS":{"count":10,"flag":false},"React":{"count":1,"flag":false},"JAVA":{"count":3,"flag":false},"Jekyll":{"count":4,"flag":false},"WAS":{"count":2,"flag":false}},"images":["celeb1.gif","celeb10.gif","celeb11.gif","celeb12.gif","celeb13.gif","celeb14.gif","celeb15.gif","celeb16.gif","celeb2.gif","celeb3.gif","celeb4.gif","celeb5.gif","celeb6.gif","celeb7.gif","celeb8.gif","celeb9.gif","city1.gif","city10.gif","city11.gif","city12.gif","city13.gif","city14.gif","city15.gif","city2.gif","city3.gif","city4.gif","city4.jpg","city5.gif","city6.gif","city7.gif","city8.gif","city9.gif","code1.gif","code2.gif","code3.gif","funk1.gif","funk2.gif","funk3.gif","funk4.gif","funk5.gif","funk6.gif","game1.gif","signal.gif"],"tag":"에라토스 테네스의 체","page":1,"hash":"cd10620a7f9"},"__N_SSG":true}