{"pageProps":{"page":{"type":"posts","prev":{"header":{"title":"해시 테이블로 매우 빠른 룩업","excerpt":"현재까지 다룬 데이터 형식 중 다수의 데이터를 다루는 데 가장 효과적인 형식은 배열일 것이다. 하지만 배열의 경우, 요소별로 단 하나의 값이 들어가는 데 특화되어 있다. 만약 하나의 요소에 두 값을 넣고자 한다면 어떻게 될까? [[A, 1], [B, 2], [C, 3]]과 같은 형태로 나타낼 것이다. 배열의 단점 중 하나는, 값을 빠르게 찾기 위해선 반드시 정렬을 수행해야 한다는 것이다. 하지만 저렇게 배열 안에 또다른 배열이 포함되는 것처럼 배열의 depth가 심해질 경우 구조가 복잡해서 배열을 다루기 점점 난해해진다. 더군다나 배열의 경우 원하는 요소를 탐색하기 위해선 적어도 O(logN) 이상의 시간복잡도를 필요로 한다. 만약, 배열과 같이 특정 데이터의 모음에서 내가 원하는 데이터를 O(1)과 같이 상수 시간으로 탐색할 수 있는 데이터가 있다면 어떨까? 왠지 이 장에서 그 해답을 찾을 수 있을 것 같다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-29T23:02:27","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","해시 테이블"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-29-about-algorithm-chapter07.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 7장 해시 테이블로 매우 빠른 룩업\r\n\r\n현재까지 다룬 데이터 형식 중 다수의 데이터를 다루는 데 가장 효과적인 형식은 <span class=\"primary\">배열</span>일 것이다. 하지만 배열의 경우, 요소별로 단 하나의 값이 들어가는 데 특화되어 있다. 만약 하나의 요소에 두 값을 넣고자 한다면 어떻게 될까? $[ [ \"A\", 1 ], [ \"B\", 2 ], [ \"C\", 3 ] ]$과 같은 형태로 나타낼 것이다.\r\n\r\n배열의 단점 중 하나는, 값을 빠르게 찾기 위해선 반드시 정렬을 수행해야 한다는 것이다. 하지만 저렇게 배열 안에 또다른 배열이 포함되는 것처럼 배열의 depth가 심해질 경우 구조가 복잡해서 배열을 다루기 점점 난해해진다.\r\n\r\n더군다나 배열의 경우 원하는 요소를 탐색하기 위해선 적어도 $O(\\log N)$ 이상의 시간복잡도를 필요로 한다. 만약, 배열과 같이 특정 데이터의 모음에서 내가 원하는 데이터를 $O(1)$과 같이 상수 시간으로 탐색할 수 있는 데이터가 있다면 어떨까? 왠지 이 장에서 그 해답을 찾을 수 있을 것 같다.\r\n\r\n## 7-1. 해시 테이블 소개\r\n\r\n<span class=\"orange-A400\">JAVA</span>를 포함한 대부분의 프로그래밍 언어에선 <span class=\"teal-400\">Hash Table</span>(해시 테이블)이란 개념이 존재한다. 언어에 따라 부르는 용어는 해시나 맵, 해시 맵 등으로 불리지만 궁극적인 개념은 해시 테이블이다.\r\n\r\n``` java\r\nHashMap<String, String> map = new HashMap<>();\r\nmap.put(\"A\", \"1\");\r\nmap.put(\"B\", \"2\");\r\nmap.put(\"C\", \"3\");\r\nmap.put(\"D\", \"4\");\r\n```\r\n\r\n자바는 이를 `HashMap` 클래스로 관리한다. <span class=\"yellow-700\">JavaScript</span>와 다르게 미리 선언된 데이터 형식만 입력 가능하다는 특징이 있다. `A: 1`, `B: 2`와 같이 하나의 쌍으로 이루어진 데이터를 흔히 <span class=\"blue-400\">key-value</span> 데이터라고 한다. 해시 테이블은 이러한 key-value 데이터를 관리하는데 매우 효과적이다.\r\n\r\n``` java\r\nHashMap<String, String> map = new HashMap<>();\r\nmap.put(\"A\", \"1\");\r\nmap.put(\"B\", \"2\");\r\nmap.put(\"C\", \"3\");\r\nmap.put(\"D\", \"4\");\r\n\r\nSystem.out.println(map.get(\"A\"));\r\n```\r\n\r\nHashMap의 데이터에 접근하기 위해선 위처럼 원하는 value의 key를 입력하여 접근할 수 있다. 그런데 재밌는 점은, 해시 테이블의 경우 이렇게 탐색하는 데 필요한 작업량이 1이다. 즉, $O(1)$의 시간 복잡도를 가진다. 우리가 배열에서 갖가지 정렬을 배워가면서 탐색 속도를 향상시키기 위해 노력했는데, 이 친구는 뭐길래 이런 작업량이 가능한걸까?\r\n\r\n## 7-2. 해시 함수로 해싱\r\n\r\n<span class=\"primary\">해싱</span>이라는 개념에 대해 들어본 적이 있는가? 데이터를 고유한 값으로 반환하는 것을 해싱이라고 한다. 간단한 예를 들자면, 아래와 같이 매칭되는 표가 있다고 가정하자.\r\n\r\n|    키    |    값    |\r\n| :------: | :------: |\r\n|    A     |    1     |\r\n|    B     |    2     |\r\n|    C     |    3     |\r\n| $\\dotsb$ | $\\dotsb$ |\r\n|    Y     |    25    |\r\n|    Z     |    26    |\r\n\r\n위 표에 의거하면, `ABC = 123`, `EAD = 514`와 같이 변환될 것이다. 매우 허술하지만, 이러한 변환도 일종의 해싱이라고 할 수 있다. 위 표와 같이 변환해주는 알고리즘을 <span class=\"primary\">해시 함수</span>라 부른다.\r\n\r\n만약, 우리가 사용하려는 해시 함수가 A-Z의 키를 위 표에 매칭되는 숫자로 변경하고, 이를 다 더하는 알고리즘이라고 가정해보자. `FAD`를 변환하면 아래의 순서로 변환이 진행된다.\r\n\r\n1. 해시 함수에 의해 FAD가 614로 변환된다.\r\n2. 각 숫자를 더하여 6 + 1 + 4를 연산한다.\r\n3. 11이라는 해시값을 얻는다.\r\n\r\n이렇게 `FAD = 11`이라는 해싱을 얻을 수 있다. 해싱에는 아래와 같은 조건이 중요하다.\r\n\r\n* 정해진 값을 해싱하면 항상 동일한 결과를 반환한다. (FAD는 언제나 11을 반환해야 함)\r\n* 서로 다른 값이 동일한 해시값을 가질 수 없다.\r\n\r\n> 🔒 **해시 함수**  \r\n> 위의 예제와 달리, 해싱 함수는 대부분 복호화가 불가능한 비대칭 암호화 방식을 취한다. 또한 보안을 위해 Salt라는 임의의 난수를 포함하여 해싱함으로써, Brute Force를 방지하기도 한다.  \r\n> 이러한 특성으로 해싱은 사용자 이외에 그 누구도 알아서는 안 되는 비밀번호, 개인정보 등을 암호화하는데 쓰이며, 그 종류는 MD5, SHA-1, SHA-256, SHA-512 등이 있다.\r\n\r\n하지만 예제의 해싱 함수는 단순 이해를 돕기 위한 예시로, 실제 해싱과는 맞지 않다. 위 해시 함수에 의하면 `FAD`와 `ADF`, `DAF` 모두 동일한 값 11을 가진다. 이는 해시의 요건 중 하나인 <span class=\"red-500\">서로 다른 값이 동일한 해시값을 가질 수 없다</span>는 조건을 정면으로 위반한다.\r\n\r\n이러한 문제점에 대한 얘기는 후에 다룬다.\r\n\r\n## 7-3. 재미와 이익, 특히 이익을 남길 유의어 사전 만들기\r\n\r\n책에서 표현한 대로, 특정 단어를 입력하면 가장 핫한 유의어를 반환해주는 키치한 사전을 만든다고 가정해보자.\r\n\r\n해시는 이전 문단에서 사용한 표를 기준으로 하며, 변환된 숫자를 각각 곱한 값이 해싱 결과가 된다.\r\n\r\n|  키   |  값   |\r\n| :---: | :---: |\r\n|   1   |       |\r\n|   2   |       |\r\n|   3   |       |\r\n|   4   |       |\r\n|   5   |       |\r\n|   6   |       |\r\n|   7   |       |\r\n|   8   |       |\r\n|   9   |       |\r\n|  10   |       |\r\n|  11   |       |\r\n|  12   |       |\r\n|  13   |       |\r\n|  14   |       |\r\n|  15   |       |\r\n|  16   |       |\r\n\r\n이 때 내부적으로 동작하는 해시 테이블을 도식화하면 위와 같을 것이다. `bad: evil`이라는 key-value가 있을 경우, 해시 함수에 의해 아래와 같이 변환된다.\r\n\r\n1. `bad: evil`의 키 `bad`를 변환한다.\r\n2. 변환값 214를 얻는다.\r\n3. 각 숫자를 곱하여 해시값 $2 \\times 1 \\times 4 = 8$을 얻는다.\r\n\r\n|  키   |  값   |\r\n| :---: | :---: |\r\n|   1   |       |\r\n|   2   |       |\r\n|   3   |       |\r\n|   4   |       |\r\n|   5   |       |\r\n|   6   |       |\r\n|   7   |       |\r\n|   8   | evil  |\r\n|   9   |       |\r\n|  10   |       |\r\n|  11   |       |\r\n|  12   |       |\r\n|  13   |       |\r\n|  14   |       |\r\n|  15   |       |\r\n|  16   |       |\r\n\r\n위와 같이 8에 evil 데이터가 삽입된다. 추가로 `cab: taxi`를 해싱해보자. 해시값이 6이다, 또한 `ace: star`의 경우 해시값이 15다.\r\n\r\n|  키   |  값   |\r\n| :---: | :---: |\r\n|   1   |       |\r\n|   2   |       |\r\n|   3   |       |\r\n|   4   |       |\r\n|   5   |       |\r\n|   6   | taxi  |\r\n|   7   |       |\r\n|   8   | evil  |\r\n|   9   |       |\r\n|  10   |       |\r\n|  11   |       |\r\n|  12   |       |\r\n|  13   |       |\r\n|  14   |       |\r\n|  15   | star  |\r\n|  16   |       |\r\n\r\n해시 테이블의 현황은 위와 같을 것이다. 여기서 만약 이전에 저장된 값을 호출하려면 어떻게 될까?\r\n\r\n사용했던 키 중 하나dls `cab`의 데이터를 호출해보자. 해싱 알고리즘에 의해 6으로 변환된다.\r\n\r\n해시값을 구했으므로, 인덱스 6의 요소 `taxi`에 접근하면 된다. 별다른 탐색 없이도 간단하게 원하는 값에 접근한 것이다.\r\n\r\n이러한 방식으로 해시 테이블은 $O(1)$의 시간복잡도를 가진다.\r\n\r\n## 7-4. 충돌 해결\r\n\r\n이전에 잠깐 언급했던 해시의 요건이 있다.\r\n\r\n* 서로 다른 값이 동일한 해시값을 가질 수 없다.\r\n\r\n이전 문단의 해시 테이블에 `dab: pat`을 추가한다고 생각해보자. `dab`의 해시값은 8이다. 이제 테이블에 넣어주기만 하면 되는데, 문제가 있다.\r\n\r\n|  키   |                  값                   |\r\n| :---: | :-----------------------------------: |\r\n|   8   | evil <span class=\"red-400\">pat</span> |\r\n\r\n이미 8번 인덱스에 evil이 들어가있다. 이렇게 서로 다른 값의 해시값이 동일한 현상을 <span class=\"primary\">충돌</span>이라고 한다.\r\n\r\n가장 전통적이고 간단하 방법은, 동일한 위치에 값이 할당될 경우, 배열과 같이 이중 구조를 추가하는 것이다.\r\n\r\n|  키   |        값         |\r\n| :---: | :---------------: |\r\n|   8   | [ \"evil\", \"pat\" ] |\r\n\r\n즉, 위와 같이 배치하면 된다. 그렇다면 이 경우 검색은 어떻게 진행될까? 키가 `dab`인 테이터를 탐색해보자.\r\n\r\n1. `dab`의 해시값 8을 구한다.\r\n2. 8번 인덱스에 충돌로 인해 배열이 있음을 확인한다.\r\n3. 각 배열의 key를 확인하여 일치 여부를 반한다.\r\n\r\n이 경우 검색은 잘 될지 모르나, $O(N)$이라는 시간 복잡도를 가진다. $O(1)$의 시간 복잡도를 가질 정도로 빠른 데이터 형식이 순식간에 일반적인 배열와 동급이 되어버렸다. 아무리 봐도 좋은 현상은 아니다.\r\n\r\n결론적으론 해싱은 최대한 충돌이 일어나지 않도록 설계해야한다.\r\n\r\n## 7-5. 훌륭한 충돌 조정\r\n\r\n책에서는 해시 테이블의 효율성은 아래의 세 가지 요인에 좌우된다고 설명한다.\r\n\r\n* 해시 테이블에 얼마나 많은 데이터를 저장하는가\r\n* 해시 테이블에서 얼마나 많은 셀을 쓸 수 있는가\r\n* 어떤 해시 함수를 사용하는가\r\n\r\n이전에 사용한 표의 매칭을 기준으로, 이번엔 변환된 각각의 숫자를 1의 자리가 될 때까지 더하는 함수를 사용한다고 가정하자.\r\n\r\n`put`의 경우 16 + 21 + 20 = 57의 변환값을 가지며, 다시 이 57을 각각 더하 5 + 7 = 12, 1 + 2 = 3으로 최종적으로 `put = 3`이 된다.\r\n\r\n|  키   |  값   |\r\n| :---: | :---: |\r\n|   1   |       |\r\n|   2   |       |\r\n|   3   |       |\r\n|   4   |       |\r\n|   5   |       |\r\n|   6   |       |\r\n|   7   |       |\r\n|   8   |       |\r\n|   9   |       |\r\n|  10   |       |\r\n|  11   |       |\r\n|  12   |       |\r\n|  13   |       |\r\n|  14   |       |\r\n|  15   |       |\r\n|  16   |       |\r\n\r\n위와 같은 해시 테이블이 있다고 가정하자. 16개의 할당 가능한 공간이 있지만, 해시 함수의 특성 상 언제나 1 ~ 9 사이의 해시값을 가지므로 10 ~ 16은 언제나 비어있다.\r\n\r\n즉, 해싱 테이블의 크기는 최소한 예상되는 해시값의 범위만큼 가지고 있어야한다. 만약 해시 범위가 1 ~ 10인데, 해시 테이블의 크기는 100이라고 한다면 충돌이 일어날 가능성은 매우 적겠지만 메모리 낭비가 너무 심하다.\r\n\r\n즉, <span class=\"red-400\">너무 많은 메모리를 낭비하지 않으면서 해시값을 전부 수용</span>할 수 있도록 적절히 충돌 조정을 수행해야한다.\r\n\r\n연구에 의하면 데이터가 7개일 때, 10개의 테이블 행이 있는 것이 이상적이다. 이를 <span class=\"primary\">부하율</span>이라고 하며, 부하율이 70%일 때가 최적이다. 다행히도 해시 테이블의 세부적인 사항은 컴파일러 단계에서 관리하니, 디테일한 튜닝을 하지 않는 이상 개발자가 신경쓸 부분은 없다.\r\n\r\n## 7-6. 실제 예제\r\n\r\n해시의 특성 덕분에 해시 테이블은 많은 곳에서 많은 용도로 사용되지만, 이 책에서는 해시 테이블을 통해 알고리즘의 속도를 높이는 데 초점을 맞추었다.\r\n\r\n1장에서 모든 요소가 중복되지 않는 <span class=\"primary\">집합</span>에 대해 다뤘다. 집합 알고리즘을 배열로 구성하면 탐색과 삽입 작업이 필요하며, 이 작업은 $O(N)$의 시간 복잡도를 가진다.\r\n\r\n모든 요소가 중복되지 않는 고유한 값을 가지는 집합의 특성은 여러 곳에서 굉장히 유용하게 쓸 수 있지만, $O(N)$이라는 선형적 시간 복잡도가 걸린다. 만약 여기서 탐색의 시간 복잡도가 $O(1)$을 가지는 해시 테이블을 적용한다면 어떨까?\r\n\r\n| 작업  |  집합  | 해시 테이블 |\r\n| :---: | :----: | :---------: |\r\n| 탐색  | $O(N)$ |   $O(1)$    |\r\n| 삽입  | $O(1)$ |   $O(1)$    |\r\n| 총합  | $O(N)$ |   $O(1)$    |\r\n\r\n위와 같이 작업량을 획기적으로 줄일 수 있을 것이다. 우리는 이미 4장에서 배열의 중복 요소를 체크하는 로직을 작성한 바 있다. 처음 설계한 알고리즘의 시간 복잡도는 $O(N^2)$였지만, 이후 개선을 통해 $O(N)$으로 단축할 수 있었다.\r\n\r\n``` java\r\n/**\r\n * 요소의 중복 여부 반환 함수\r\n *\r\n * @param array: [int[]] 배열\r\n *\r\n * @return [boolean] 중복 여부\r\n */\r\nprivate static boolean isDuplicated(int[] array)\r\n{\r\n\tfor (int i = 0; i < array.length; i++)\r\n\t{\r\n\t\tfor (int j = 0; j < array.length; j++)\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\t\r\n\t\t\t// 서로 다른 요소가 동일한 값을 가질 경우\r\n\t\t\tif (i != j && array[i] == array[j])\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn false;\r\n}\r\n```\r\n\r\n위 소스는 4장에서 다룬 중복 요소 체크 알고리즘 중 $O(N^2)$를 가지는 알고리즘이다. \r\n\r\n``` java\r\n/**\r\n * 요소의 중복 여부 반환 함수\r\n *\r\n * @param array: [int[]] 배열\r\n *\r\n * @return [boolean] 중복 여부\r\n */\r\nprivate static boolean isDuplicated(int[] array)\r\n{\r\n\tArrayList<Integer> list = new ArrayList<>();\r\n\t\r\n\tfor (int item : array)\r\n\t{\r\n\t\tcount++;\r\n\t\t\r\n\t\t// 중복되지 않았을 경우\r\n\t\tif (!list.contains(item))\r\n\t\t{\r\n\t\t\tlist.add(item);\r\n\t\t}\r\n\t\t\r\n\t\t// 중복된 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn false;\r\n}\r\n```\r\n\r\n위 소스는 4장에서 다룬 중복 요소 체크 알고리즘 중 $O(N)$을 가지는 알고리즘이다. 이러한 종류의 알고리즘을 해시 테이블을 활용하여 $O(1)$의 시간 복잡도를 가지게끔 줄여보자.\r\n\r\n책에서 제시한 주제대로, 투표자가 후보자 목록 중 하나를 고르거나, 임의의 후보를 추가할 수 있는 전자 투표 기계를 설계해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 전자 투표 기계 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/29/about-algorithm-chapter07/\">해시 테이블로 매우 빠른 룩업</a>\r\n * @since 2021.07.29 Thu 22:15:32\r\n */\r\npublic class Vote\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tArrayList<String> list = new ArrayList<>();\r\n\t\t\r\n\t\twhile (true)\r\n\t\t{\r\n\t\t\twriter.write(\"후보 이름 입력 (x: 종료) >> \");\r\n\t\t\twriter.flush();\r\n\t\t\t\r\n\t\t\tString name = reader.readLine().trim();\r\n\t\t\t\r\n\t\t\t// x가 입력되었을 경우\r\n\t\t\tif (name.equalsIgnoreCase(\"x\"))\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 빈 문자가 입력되었을 경우\r\n\t\t\telse if (name.equals(\"\") || name.isEmpty())\r\n\t\t\t{\r\n\t\t\t\twriter.newLine();\r\n\t\t\t\twriter.write(\"올바른 이름을 입력하세요.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 일반적인 이름이 입력되었을 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlist.add(name);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twriter.write(list.toString());\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nJay\r\nPark\r\nKim\r\nPark\r\nKim\r\nJay\r\nJay\r\nJay\r\nPark\r\nKim\r\nx\r\n```\r\n\r\n``` output\r\n[Jay, Park, Kim, Park, Kim, Jay, Jay, Jay, Park, Kim]\r\n```\r\n\r\n소스와 입력, 출력은 위와 같다. 단순히 입력을 받아서 중복 여부 상관없이 배열에 이어 붙이므로, 시간 복잡도는 삽입 과정 하나만 있으며 $O(1)$이다.\r\n\r\n빠르기야 하다만, 후보자가 많거나, 투표자가 많아지면 정리하기 매우 힘들다. 전자는 분류할 케이스가 많아지고, 후자는 분류할 데이터가 많아지기 때문\r\n\r\n해시 테이블을 활용하여 후보의 이름과 후보의 투표수를 서로 매칭해서 심플하게 보여주면 어떨까?\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 해시 테이블을 적용한 전자 투표 기계 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/29/about-algorithm-chapter07/\">해시 테이블로 매우 빠른 룩업</a>\r\n * @since 2021.07.29 Thu 22:27:23\r\n */\r\npublic class HashVote\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tArrayList<String> list = new ArrayList<>();\r\n\t\tHashMap<String, Integer> map = new HashMap<>();\r\n\t\t\r\n\t\twhile (true)\r\n\t\t{\r\n\t\t\twriter.write(\"후보 이름 입력 (x: 종료) >> \");\r\n\t\t\twriter.flush();\r\n\t\t\t\r\n\t\t\tString name = reader.readLine().trim();\r\n\t\t\t\r\n\t\t\t// x가 입력되었을 경우\r\n\t\t\tif (name.equalsIgnoreCase(\"x\"))\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 빈 문자가 입력되었을 경우\r\n\t\t\telse if (name.equals(\"\") || name.isEmpty())\r\n\t\t\t{\r\n\t\t\t\twriter.newLine();\r\n\t\t\t\twriter.write(\"올바른 이름을 입력하세요.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 일반적인 이름이 입력되었을 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlist.add(name);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (String name : list)\r\n\t\t{\r\n\t\t\t// 이미 등록된 이름일 경우\r\n\t\t\tif (map.containsKey(name))\r\n\t\t\t{\r\n\t\t\t\tmap.put(name, map.get(name) + 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 등록되지 않은 이름일 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmap.put(name, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twriter.write(map.toString());\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nJay\r\nPark\r\nKim\r\nPark\r\nKim\r\nJay\r\nJay\r\nJay\r\nPark\r\nKim\r\nx\r\n```\r\n\r\n``` output\r\n{Jay=4, Kim=3, Park=3}\r\n```\r\n\r\n소스와 입출력은 위와 같다. Jay가 4표, 나머지가 3표를 받았다. 깔끔하게 잘 동작하지만, 투표가 끝난 뒤 일괄적으로 표를 계산하므로, 탐색 $O(N)$ 작업이 추가되어 시간 복잡도가 상수에서 선형으로 늘어나게 됐다.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.HashMap;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 해시 테이블을 적용한 향상된 전자 투표 기계 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/29/about-algorithm-chapter07/\">해시 테이블로 매우 빠른 룩업</a>\r\n * @since 2021.07.29 Thu 22:31:45\r\n */\r\npublic class ImproveHashVote\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tHashMap<String, Integer> map = new HashMap<>();\r\n\t\t\r\n\t\twhile (true)\r\n\t\t{\r\n\t\t\twriter.write(\"후보 이름 입력 (x: 종료) >> \");\r\n\t\t\twriter.flush();\r\n\t\t\t\r\n\t\t\tString name = reader.readLine().trim();\r\n\t\t\t\r\n\t\t\t// x가 입력되었을 경우\r\n\t\t\tif (name.equalsIgnoreCase(\"x\"))\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 빈 문자가 입력되었을 경우\r\n\t\t\telse if (name.equals(\"\") || name.isEmpty())\r\n\t\t\t{\r\n\t\t\t\twriter.newLine();\r\n\t\t\t\twriter.write(\"올바른 이름을 입력하세요.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 일반적인 이름이 입력되었을 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// 이미 등록된 이름일 경우\r\n\t\t\t\tif (map.containsKey(name))\r\n\t\t\t\t{\r\n\t\t\t\t\tmap.put(name, map.get(name) + 1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 등록되지 않은 이름일 경우\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tmap.put(name, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twriter.write(map.toString());\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nJay\r\nPark\r\nKim\r\nPark\r\nKim\r\nJay\r\nJay\r\nJay\r\nPark\r\nKim\r\nx\r\n```\r\n\r\n``` output\r\n{Jay=4, Kim=3, Park=3}\r\n```\r\n\r\n표 수를 계산하는 과정을 마지막이 아닌, 투표를 할 때마다 실시간으로 카운팅한다. 기본적인 원리나 결과가 같지만, 그 속도가 다르다.\r\n\r\n이미 등록되었는지 아닌지에 따라 탐색 + 삽입 혹은 단순히 삽입으로 나누어지지만, 탐색 또한 $O(1)$의 시간 복잡도를 가지므로 최종적으로는 $O(1)$로 표현할 수 있다.\r\n\r\n# 마무리\r\n\r\n이 장에서 핵심 내용은 아래와 같다.\r\n\r\n* 해시 테이블은 key-value 형태의 값을 저장한다.\r\n* 해시 테이블은 key를 임의의 함수로 해싱하여 관리한다.\r\n* 해시 테이블의 탐색 시간 복잡도는 $O(1)$이다.\r\n* 해시 함수는 충돌이 적어야 한다.\r\n\r\nkey-value로 데이터를 저장하는 특성, 빠른 탐색 속도는 여러 알고리즘에서 유용하게 쓰일 것이다. 다음 장에서는 이와 더불어 매우 클래식한 자료구조인 <span class=\"amber-500\">스택</span>(Stack)과 <span class=\"amber-500\">큐</span>(Queue)에 대해 다뤄본다.","url":["2021-07-29-about-algorithm-chapter07","2021","07","29","about-algorithm-chapter07"]},"next":{"header":{"title":"재귀를 사용한 재귀적 반복","excerpt":"컴퓨터 언어에서의 재귀란 자기 자신을 호출함을 의미한다. 알고리즘에서의 재귀는 매우 중요한 개념 중 하나로써, 그 특성 상 복잡한 연산 및 연산에 걸리는 소요 시간을 효과적으로 개선할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-08-04T00:26:26","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","재귀"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-08-04-about-algorithm-chapter09.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 9장 재귀를 사용한 재귀적 반복\r\n\r\n컴퓨터 언어에서의 <span class=\"primary\">재귀</span>란 자기 자신을 호출함을 의미한다. 알고리즘에서의 재귀는 매우 중요한 개념 중 하나로써, 그 특성 상 복잡한 연산 및 연산에 걸리는 소요 시간을 효과적으로 개선할 수 있다.\r\n\r\n``` javascript\r\n/**\r\n * 재귀 함수\r\n */\r\nfunction recursive()\r\n{\r\n\tconsole.log('recursive');\r\n\r\n\trecursive();\r\n}\r\n```\r\n\r\n``` output\r\nrecursive\r\nrecursive\r\nrecursive\r\nrecursive\r\nrecursive\r\nrecursive\r\n...\r\n```\r\n\r\n위 소스는 재귀의 특성을 간단하게 구현한 예제다. 위 함수를 호출하면 <span class=\"teal-400\">\"recursive\"</span>라는 단어가 끝없이 출력된다.\r\n\r\n`recursive` 함수 내에서 자기 자신을 끝없이 호출하기 때문에 이러한 현상이 일어난다. 겉보기엔 쓸데없는 장난처럼 보이기도 하지만, 재귀의 특징을 잘 활용하면 매우 강력한 도구가 된다.\r\n\r\n## 9-1. 루프 대신 재귀\r\n\r\n지금껏 코드에서 어떤 동작을 반복하기 위해 우리는 루프를 사용한다. `for`, `while` 등과 같은 반복문을 통해 원하는 만큼 동작을 반복한다.\r\n\r\n10부터 0까지 카운트다운을 하는 소스를 설계해보면 아래와 같다.\r\n\r\n``` javascript\r\n/**\r\n * 루프를 활용한 카운트다운 함수\r\n * \r\n * @param {number} start: 시작 숫자\r\n */\r\nfunction countdown(start)\r\n{\r\n\tfor (let i = start; i >= 0; i--)\r\n\t{\r\n\t\tconsole.log(i);\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n0\r\n```\r\n\r\n위 소스는 javascript로 루프를 사용해 작성한 카운트다운 소스다. 하지만, 루프 대신 재귀를 사용하면 아래처럼 구성할 수도 있다.\r\n\r\n``` javascript\r\n/**\r\n * 재귀를 활용한 카운트다운 함수\r\n * \r\n * @param {number} start: 시작 숫자\r\n */\r\nfunction countdown(start)\r\n{\r\n\tconsole.log(start);\r\n\r\n\tcountdown(start - 1);\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n0\r\n-1\r\n-2\r\n...\r\n```\r\n\r\n반대로 위 소스는 루프 대신 재귀를 활용하여 카운트다운을 수행한다. `start`를 출력하고 1을 뺀 값을 다시 자기 자신인 `countdown`에 전달한다.\r\n\r\n대부분의 루프는 재귀로 대체할 수 있다. 단순히 대체되는 것 이상으로 재귀는 루프와 달리 유의미한 성능 향상도 기대할 수 있다.\r\n\r\n그 이전에, 위 소스의 출력을 살펴보자. 통상 카운트다운은 정해진 숫자부터 1 혹은 0까지를 센다. 그런데 위 소스, 0을 넘어서 -1, -2... 한 없이 내려간다. 왜 이러는 걸까?\r\n\r\n## 9-2. 기저 조건\r\n\r\n이전 문단에서 기술한 재귀 함수는 카운트다운이라고 볼 수 없다. 그냥 입력한 숫자부터 끊임없이 숫자를 나열하는 것이나 다름없다. 이런 현상이 발생하는 이유는, 이 재귀 함수에 일종의 브레이크라고 할만한 것이 없기 때문이다.\r\n\r\n우리가 원하는 것은 0까지의 카운트다운이므로, `start`의 값이 0일 경우 더 이상 자기 자신을 호출하지 않도록 바꿔줄 필요가 있다.\r\n\r\n``` javascript\r\n/**\r\n * 재귀를 활용한 완전한 카운트다운 함수\r\n * \r\n * @param {number} start: 시작 숫자\r\n */\r\nfunction countdown(start)\r\n{\r\n\tconsole.log(start);\r\n\r\n\t// 값이 0보다 클 경우\r\n\tif (start > 0)\r\n\t{\r\n\t\tcountdown(start - 1);\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n0\r\n...\r\n```\r\n\r\n위 소스는 이러한 문제를 개선한 소스다. `start`가 0보다 클 경우에만 자기 자신을 다시 호출한다. 0보다 작거나 같을 경우, 재귀가 더 이상 일어나지 않아 동작이 종료된다. 동작에 브레이크가 걸리는 것이다.\r\n\r\n우리가 `for`나 `while`에 특정 조건을 삽입해서 원하는 만큼만 반복문을 수행하는 것처럼 재귀도 이러한 조건을 달아서 원하는 만큼만 반복하게끔 구성해야한다.\r\n\r\n물론 위의 두 반복문은 조건을 어디에 어떤 식으로 입력해야하는지 명확하게 기술되어있다면, 재귀는 코드 내에서 조건을 구성하므로 그 방식이 명확하지 않다. 때문에 재귀를 처음 접하거나, 경험이 없을 경우 이런 방식의 조건 설정이 익숙하지 않아 무한히 동작하는 재귀 함수를 만들기도 한다.\r\n\r\n이렇게 재귀를 멈추는 조건을 <span class=\"primary\">기저 조건</span>이라 한다. 앞서 설명한 예제 `countdown`의 기저 조건은 `start > 0`이라 할 수 있다.\r\n\r\n## 9-3. 재귀 코드 읽기\r\n\r\n앞서 말했듯이, 재귀는 그 조건이 명확하게 보이지 않다. 때문에 경우에 따라선 재귀 코드를 읽는 것초자 어렵기도 하다. 간단한 예제를 통해서 재귀 코드를 읽어보자.\r\n\r\n고등학교 수학에서 배운 내용 중 팩토리얼(Factorial) 연산이 있다. 팩토리얼은 $5!$과 같이 표기하며, 연산 결과는 $5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$이 된다. 즉, 일반식으로 표기하면 아래와 같다.\r\n\r\n$$\r\nn! = n \\times (n - 1) \\times (n - 2) \\times \\dotsb \\times 2 \\times 1\r\n$$\r\n\r\n팩토리얼 연산을 단축하면 $n! = n \\times (n - 1)!$와 같이 표기할 수 있다. 이러한 패턴은 재귀를 적용시키기 매우 용이한 패턴이다.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 팩토리얼 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/31/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.02 Mon 22:57:53\r\n */\r\npublic class Factorial\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tint index = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\twriter.write(String.valueOf(factorial(index)));\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 팩토리열 연산 결과 반환 함수\r\n\t *\r\n\t * @param index: [int] 인덱스\r\n\t *\r\n\t * @return [int] 팩토리얼 연산 결과\r\n\t */\r\n\tprivate static int factorial(int index)\r\n\t{\r\n\t\t// 인덱스가 1일 경우\r\n\t\tif (index == 1)\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\t// 인덱스가 1이 아닐 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn index * factorial(index - 1);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n3628800\r\n```\r\n\r\n책에서 설명하는 재귀 코드를 읽는 방법은 아래와 같다.\r\n\r\n1. 기저 조건이 무엇인지 찾는다.\r\n2. 기저 조건을 다룬다는 가정하에 함수를 살펴본다.\r\n3. 기저 조건 바로 **전** 조건을 다룬다는 가정하에 함수를 살펴본다.\r\n4. 한 번에 한 조건씩 올라가면서 계속 분석한다.\r\n\r\n``` java\r\n// 인덱스가 1일 경우\r\nif (index == 1)\r\n{\r\n\treturn 1;\r\n}\r\n\r\n// 인덱스가 1이 아닐 경우\r\nelse\r\n{\r\n\treturn index * factorial(index - 1);\r\n}\r\n```\r\n\r\n위 소스의 구조는 매우 간단하므로, 어렵지 않게 분기를 찾을 수 있다. `index == 1`인 경우와 아닌 경우가 분기다.\r\n\r\n``` java\r\n// 인덱스가 1이 아닐 경우\r\nelse\r\n{\r\n\treturn index * factorial(index - 1);\r\n}\r\n```\r\n\r\n재귀는 자기 자신을 호출하는 것이므로, 분기의 `else` 부분이 재귀가 일어나는 영역이라 추측할 수 있다. 따라서 재귀가 일어나지 않는 영역이 <span class=\"teal-400\">기저 조건</span>이라 할 수 있다.\r\n\r\n``` java\r\n// 인덱스가 1일 경우\r\nif (index == 1)\r\n{\r\n\treturn 1;\r\n}\r\n```\r\n\r\n즉, 위 재귀 함수의 기저 조건은 `index == 1`이다. `factorial(1)`은 1을 반환한다. 이 기저 조건을 토대로 `factorial(4)`의 동작을 전개하면 아래와 같다.\r\n\r\n1. $\\text{factorial(4)} = 4 \\times \\text{factorial(3)}$\r\n2. $\\text{factorial(4)} = 4 \\times 3 \\times \\text{factorial(2)}$\r\n3. $\\text{factorial(4)} = 4 \\times 3 \\times 2 \\times \\text{factorial(1)}$\r\n4. $\\text{factorial(4)} = 4 \\times 3 \\times 2 \\times 1 = 12$\r\n\r\n이와 같이 순차적으로 자기 자신을 호출하여 연산을 수행한다. 재귀 함수의 <span class=\"green-400\">기저 조건은 재귀를 멈추는 요인</span>이므로, 기저 조건을 바탕으로 전개하면 비교적 쉽게 연산을 이해할 수 있다.\r\n\r\n## 9-4. 컴퓨터의 눈으로 바라본 재귀\r\n\r\n우리가 재귀함수를 이해하는 것도 중요하지만, 결국 코드의 실행 주체는 어찌됐든 컴퓨터가 담당하게 된다. 즉, 우리가 이를 이해하는 것 만큼 컴퓨터가 이를 어떻게 이해하는지 아는 것 또한 매우 중요하다.\r\n\r\n이전 장에서, 우리는 <span class=\"amber-400\">스택</span>에 대해 다뤘었다. 컴퓨터가 재귀를 다룰 때 스택을 활용하여 관리한다. `factorial(4)`를 컴퓨터가 스택으로 어떻게 관리하는 지 알아보자.\r\n\r\n1. `factorial(4)`를 호출한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024009-1ee1fc5d-ecce-4711-b729-36a70b8592d1.png\" width=\"200px\" />\r\n\r\n`factorial(4)` 내부에서 `factorial(3)`을 호출하므로, `factorial(4)`를 스택에 삽입하고 `factorial(3)`을 수행한다. 이 때 `factorial(4)`는 종료된 것이 아니라, 재귀 호출로 인해 연산이 중단된 상태다.\r\n\r\n<br />\r\n<br />\r\n\r\n2. `factorial(3)`을 호출한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024019-b76d21a2-24f6-47f6-bf2f-f46350da31e1.png\" width=\"200px\" />\r\n\r\n마찬가지로 재귀로 인해 연산 과정에서 `factorial(2)`를 호출하므로, 마찬가지로 연산을 중단하고 스택에 삽입한다.\r\n\r\n<br />\r\n<br />\r\n\r\n3. `factorial(2)`를 호출한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024025-f96e2b60-943b-4abc-8200-043ffbb63821.png\" width=\"200px\" />\r\n\r\n위와 동일하다.\r\n\r\n<br />\r\n<br />\r\n\r\n4. `factorial(1)`를 호출한다.\r\n\r\n`factorial(1)`는 기저 조건이므로 재귀가 호출되지 않는다. 1을 반환하고 연산을 종료한다. 하지만 스택에 데이터가 남아있으므로, 전체 연산이 종료되지 않았음을 알 수 있다.\r\n\r\n<br />\r\n<br />\r\n\r\n5. `factorial(2)`를 종료한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024038-575615fd-5018-4c32-b205-a0fe3b0a34f2.png\" width=\"200px\" />\r\n\r\n`factorial(2)`의 연산 결과는 `factorial(1)`의 결과와 연관된다. `factorial(1)` 결과가 계산되었으므로, `factorial(2)`를 종료할 수 있다. 연산을 종료하고 스택에서 제거한다.\r\n\r\n<br />\r\n<br />\r\n\r\n6. `factorial(3)`을 종료한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024048-93fcb67e-c73e-4423-ab3f-415f2fa817d4.png\" width=\"200px\" />\r\n\r\n`factorial(3)`의 연산을 종료하고 스택에서 제거한다.\r\n\r\n<br />\r\n<br />\r\n\r\n7. `factorial(4)`을 종료한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024224-c83b0f90-388c-4264-8543-194c56cea310.png\" width=\"200px\" />\r\n\r\n`factorial(4)`의 연산을 종료하고 스택에서 제거한다. 스택에 데이터가 남아있지 않으므로 모든 연산이 종료된다.\r\n\r\n<br />\r\n<br />\r\n\r\n위와 같이 재귀는 스택을 활용하여 연산한다. 만약 기저 조건의 설정을 잘 못 해서 재귀 연산이 끝없이 일어날 수도 있다. 이 경우 스택 역시 끝없이 쌓이게 되서 메모리가 더 이상 감당할 수 없을 때 스택 오버플로우가 발생한다.\r\n\r\n## 9-5. 재귀 다뤄보기\r\n\r\n지금까지 다룬 팩토리얼 연산의 경우 사실 루프를 사용해도 그리 어렵지 않게 풀 수 있으며, 제시된 코드 역시 재귀를 사용했을 때 크게 이점이 있는 것도 아니였다.\r\n\r\n이번엔 좀 더 재귀를 사용했을 때 이점이 있을 법한 주제로 코드를 설계해보자. 재귀는 구조 상 알고리즘 내에서 자기 자신을 호출하는 알고리즘에 가장 적합하다. 즉, 재귀의 사용 여부는 루프의 보다 <span class=\"red-400\">나 자신을 다시 호출해야 하는지 여부</span>에 따라 갈린다.\r\n\r\n코드로 파일 리스트를 불러온 적이 있다면 익숙할 것이다. 우리가 생각하는 것처럼 특정 폴더 내의 파일 리스트 전체를 불러오는 것은 생각보다 까다롭다. 단순히 폴더 바로 밑의 파일 리스트만을 가져온다면 쉽겠지만, 그 하위, 하위의 하위 파일까지 가져오려면 그리 간단하지 않기 때문이다.\r\n\r\n현재 폴더 및 하위 폴더의 모든 폴더 리스트를 출력하는 코드를 작성해보자. 우선은 가장 간단하게, 하위 폴더는 신경쓰지 말고 현재 폴더에 존재하는 폴더 리스트만을 가져와보자.\r\n\r\n폴더 루트 경로는 `D:\\root`와 같으며, 구조는 아래와 같다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/128032026-9ad5c07e-c274-45b2-8865-0164ddd8f618.png)\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 폴더 리스트 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/08/04/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.03 Tue 22:55:59\r\n */\r\npublic class DirectoryList\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"폴더 리스트를 출력할 경로를 입력하세요 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tString path = reader.readLine();\r\n\t\t\r\n\t\tString[] list = getList(path);\r\n\t\t\r\n\t\twriter.write(Arrays.toString(list));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 폴더 리스트 반환 함수\r\n\t *\r\n\t * @param path: [String] 경로\r\n\t *\r\n\t * @return [String[]] 폴더 리스트\r\n\t */\r\n\tprivate static String[] getList(String path)\r\n\t{\r\n\t\treturn Arrays.stream(Objects.requireNonNull(new File(path).listFiles(File::isDirectory))).map(File::getName).toArray(String[]::new);\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nD:\\root\r\n```\r\n\r\n``` output\r\n[a, b, c]\r\n```\r\n\r\n현재 폴더의 직전 하위 폴더 리스트만을 출력한다. 한단계 하위 폴더 리스트를 출력하기 위해 코드를 개선해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 폴더 리스트 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/08/04/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.03 Tue 23:32:46\r\n */\r\npublic class MoreDirectoryList\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"폴더 리스트를 출력할 경로를 입력하세요 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tString path = reader.readLine();\r\n\t\t\r\n\t\tArrayList<String> list = getList(path);\r\n\t\t\r\n\t\twriter.write(String.valueOf(list));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 폴더 리스트 반환 함수\r\n\t *\r\n\t * @param path: [String] 경로\r\n\t *\r\n\t * @return [ArrayList<String>] 폴더 리스트\r\n\t */\r\n\tprivate static ArrayList<String> getList(String path)\r\n\t{\r\n\t\tArrayList<String> list = new ArrayList<>();\r\n\t\t\r\n\t\tFile[] files = new File(path).listFiles(File::isDirectory);\r\n\t\t\r\n\t\t// 파일 배열이 유효할 경우\r\n\t\tif (files != null)\r\n\t\t{\r\n\t\t\tfor (File file : files)\r\n\t\t\t{\r\n\t\t\t\tlist.add(file.getName());\r\n\t\t\t\t\r\n\t\t\t\tFile[] files1 = file.listFiles(File::isDirectory);\r\n\t\t\t\t\r\n\t\t\t\t// 파일 배열이 유효할 경우\r\n\t\t\t\tif (files1 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (File file1 : files1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist.add(file1.getName());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn list;\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nD:\\root\r\n```\r\n\r\n``` output\r\n[a, a1, a2, b, b1, b2, c, c1, c2]\r\n```\r\n\r\n각 폴더의 하위 폴더의 리스트까지 출력해준다. 소스를 봐도 폴더일 경우 동일한 소스가 한 번 더 동작된다. 하지만 이는 매우 제한적이다. 폴더의 깊이가 정해져있다면 이런 식으로 계속 동일한 소스를 반복하면 되겠지만, 이러한 케이스는 거의 존재하지 않아 무의미하다.\r\n\r\n이 경우 재귀를 사용하면 매우 손쉽게 모든 폴더의 하위 리스트를 출력할 수 있다.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 재귀 폴더 리스트 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/08/04/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.03 Tue 23:36:43\r\n */\r\npublic class RecursiveDirectoryList\r\n{\r\n\tprivate static final ArrayList<String> LIST = new ArrayList<>();\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"폴더 리스트를 출력할 경로를 입력하세요 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tString path = reader.readLine();\r\n\t\t\r\n\t\tgetList(path);\r\n\t\t\r\n\t\twriter.write(String.valueOf(LIST));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 폴더 리스트 산출 함수\r\n\t *\r\n\t * @param path: [String] 경로\r\n\t */\r\n\tprivate static void getList(String path)\r\n\t{\r\n\t\tFile[] files = new File(path).listFiles(File::isDirectory);\r\n\t\t\r\n\t\t// 파일 배열이 유효할 경우\r\n\t\tif (files != null)\r\n\t\t{\r\n\t\t\tfor (File file : files)\r\n\t\t\t{\r\n\t\t\t\tLIST.add(file.getName());\r\n\t\t\t\t\r\n\t\t\t\tgetList(file.getPath());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nD:\\root\r\n```\r\n\r\n``` output\r\n[a, a1, a2, b, b1, b11, b2, c, c1, c11, c12, c2]\r\n```\r\n\r\n재귀를 이용하여 하위 폴더의 전체 폴더명을 출력할 수 있다. 동일한 소스를 구태여 반복할 필요도 없고, 하위 깊이가 얼마나 되는지 알 필요 없이 폴더명 전체 리스트를 출력할 수 있다.\r\n\r\n탐색 순서는 아래와 같다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/128036750-4094185e-3e77-4f24-94c7-dd8ccc9428ef.png)\r\n\r\n# 마무리\r\n\r\n이 장의 핵심 내용은 아래와 같다.\r\n\r\n* 재귀는 자기 자신을 호출하는 구조다.\r\n* 대부분의 루프는 재귀로 대체할 수 있다.\r\n* 알고리즘 구조 상 자기 자신을 호출해야할 때 가장 적합하다.\r\n\r\n백준 알고리즘을 풀었을 때도, 재귀를 사용해야하는 문제가 적지 않았을 정도로 재귀는 알고리즘에서 그 쓰임새가 매우 높다. 이번 장을 통해 재귀의 특성을 정리함으로써, 앞으로 알고리즘을 푸는데 많은 도움이 될 것 같다.","url":["2021-08-04-about-algorithm-chapter09","2021","08","04","about-algorithm-chapter09"]}},"group":[{"header":{"title":"재귀를 사용한 재귀적 반복","excerpt":"컴퓨터 언어에서의 재귀란 자기 자신을 호출함을 의미한다. 알고리즘에서의 재귀는 매우 중요한 개념 중 하나로써, 그 특성 상 복잡한 연산 및 연산에 걸리는 소요 시간을 효과적으로 개선할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-08-04T00:26:26","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","재귀"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-08-04-about-algorithm-chapter09.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 9장 재귀를 사용한 재귀적 반복\r\n\r\n컴퓨터 언어에서의 <span class=\"primary\">재귀</span>란 자기 자신을 호출함을 의미한다. 알고리즘에서의 재귀는 매우 중요한 개념 중 하나로써, 그 특성 상 복잡한 연산 및 연산에 걸리는 소요 시간을 효과적으로 개선할 수 있다.\r\n\r\n``` javascript\r\n/**\r\n * 재귀 함수\r\n */\r\nfunction recursive()\r\n{\r\n\tconsole.log('recursive');\r\n\r\n\trecursive();\r\n}\r\n```\r\n\r\n``` output\r\nrecursive\r\nrecursive\r\nrecursive\r\nrecursive\r\nrecursive\r\nrecursive\r\n...\r\n```\r\n\r\n위 소스는 재귀의 특성을 간단하게 구현한 예제다. 위 함수를 호출하면 <span class=\"teal-400\">\"recursive\"</span>라는 단어가 끝없이 출력된다.\r\n\r\n`recursive` 함수 내에서 자기 자신을 끝없이 호출하기 때문에 이러한 현상이 일어난다. 겉보기엔 쓸데없는 장난처럼 보이기도 하지만, 재귀의 특징을 잘 활용하면 매우 강력한 도구가 된다.\r\n\r\n## 9-1. 루프 대신 재귀\r\n\r\n지금껏 코드에서 어떤 동작을 반복하기 위해 우리는 루프를 사용한다. `for`, `while` 등과 같은 반복문을 통해 원하는 만큼 동작을 반복한다.\r\n\r\n10부터 0까지 카운트다운을 하는 소스를 설계해보면 아래와 같다.\r\n\r\n``` javascript\r\n/**\r\n * 루프를 활용한 카운트다운 함수\r\n * \r\n * @param {number} start: 시작 숫자\r\n */\r\nfunction countdown(start)\r\n{\r\n\tfor (let i = start; i >= 0; i--)\r\n\t{\r\n\t\tconsole.log(i);\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n0\r\n```\r\n\r\n위 소스는 javascript로 루프를 사용해 작성한 카운트다운 소스다. 하지만, 루프 대신 재귀를 사용하면 아래처럼 구성할 수도 있다.\r\n\r\n``` javascript\r\n/**\r\n * 재귀를 활용한 카운트다운 함수\r\n * \r\n * @param {number} start: 시작 숫자\r\n */\r\nfunction countdown(start)\r\n{\r\n\tconsole.log(start);\r\n\r\n\tcountdown(start - 1);\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n0\r\n-1\r\n-2\r\n...\r\n```\r\n\r\n반대로 위 소스는 루프 대신 재귀를 활용하여 카운트다운을 수행한다. `start`를 출력하고 1을 뺀 값을 다시 자기 자신인 `countdown`에 전달한다.\r\n\r\n대부분의 루프는 재귀로 대체할 수 있다. 단순히 대체되는 것 이상으로 재귀는 루프와 달리 유의미한 성능 향상도 기대할 수 있다.\r\n\r\n그 이전에, 위 소스의 출력을 살펴보자. 통상 카운트다운은 정해진 숫자부터 1 혹은 0까지를 센다. 그런데 위 소스, 0을 넘어서 -1, -2... 한 없이 내려간다. 왜 이러는 걸까?\r\n\r\n## 9-2. 기저 조건\r\n\r\n이전 문단에서 기술한 재귀 함수는 카운트다운이라고 볼 수 없다. 그냥 입력한 숫자부터 끊임없이 숫자를 나열하는 것이나 다름없다. 이런 현상이 발생하는 이유는, 이 재귀 함수에 일종의 브레이크라고 할만한 것이 없기 때문이다.\r\n\r\n우리가 원하는 것은 0까지의 카운트다운이므로, `start`의 값이 0일 경우 더 이상 자기 자신을 호출하지 않도록 바꿔줄 필요가 있다.\r\n\r\n``` javascript\r\n/**\r\n * 재귀를 활용한 완전한 카운트다운 함수\r\n * \r\n * @param {number} start: 시작 숫자\r\n */\r\nfunction countdown(start)\r\n{\r\n\tconsole.log(start);\r\n\r\n\t// 값이 0보다 클 경우\r\n\tif (start > 0)\r\n\t{\r\n\t\tcountdown(start - 1);\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n10\r\n9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n0\r\n...\r\n```\r\n\r\n위 소스는 이러한 문제를 개선한 소스다. `start`가 0보다 클 경우에만 자기 자신을 다시 호출한다. 0보다 작거나 같을 경우, 재귀가 더 이상 일어나지 않아 동작이 종료된다. 동작에 브레이크가 걸리는 것이다.\r\n\r\n우리가 `for`나 `while`에 특정 조건을 삽입해서 원하는 만큼만 반복문을 수행하는 것처럼 재귀도 이러한 조건을 달아서 원하는 만큼만 반복하게끔 구성해야한다.\r\n\r\n물론 위의 두 반복문은 조건을 어디에 어떤 식으로 입력해야하는지 명확하게 기술되어있다면, 재귀는 코드 내에서 조건을 구성하므로 그 방식이 명확하지 않다. 때문에 재귀를 처음 접하거나, 경험이 없을 경우 이런 방식의 조건 설정이 익숙하지 않아 무한히 동작하는 재귀 함수를 만들기도 한다.\r\n\r\n이렇게 재귀를 멈추는 조건을 <span class=\"primary\">기저 조건</span>이라 한다. 앞서 설명한 예제 `countdown`의 기저 조건은 `start > 0`이라 할 수 있다.\r\n\r\n## 9-3. 재귀 코드 읽기\r\n\r\n앞서 말했듯이, 재귀는 그 조건이 명확하게 보이지 않다. 때문에 경우에 따라선 재귀 코드를 읽는 것초자 어렵기도 하다. 간단한 예제를 통해서 재귀 코드를 읽어보자.\r\n\r\n고등학교 수학에서 배운 내용 중 팩토리얼(Factorial) 연산이 있다. 팩토리얼은 $5!$과 같이 표기하며, 연산 결과는 $5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$이 된다. 즉, 일반식으로 표기하면 아래와 같다.\r\n\r\n$$\r\nn! = n \\times (n - 1) \\times (n - 2) \\times \\dotsb \\times 2 \\times 1\r\n$$\r\n\r\n팩토리얼 연산을 단축하면 $n! = n \\times (n - 1)!$와 같이 표기할 수 있다. 이러한 패턴은 재귀를 적용시키기 매우 용이한 패턴이다.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 팩토리얼 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/31/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.02 Mon 22:57:53\r\n */\r\npublic class Factorial\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tint index = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\twriter.write(String.valueOf(factorial(index)));\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 팩토리열 연산 결과 반환 함수\r\n\t *\r\n\t * @param index: [int] 인덱스\r\n\t *\r\n\t * @return [int] 팩토리얼 연산 결과\r\n\t */\r\n\tprivate static int factorial(int index)\r\n\t{\r\n\t\t// 인덱스가 1일 경우\r\n\t\tif (index == 1)\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\t// 인덱스가 1이 아닐 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn index * factorial(index - 1);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\n10\r\n```\r\n\r\n``` output\r\n3628800\r\n```\r\n\r\n책에서 설명하는 재귀 코드를 읽는 방법은 아래와 같다.\r\n\r\n1. 기저 조건이 무엇인지 찾는다.\r\n2. 기저 조건을 다룬다는 가정하에 함수를 살펴본다.\r\n3. 기저 조건 바로 **전** 조건을 다룬다는 가정하에 함수를 살펴본다.\r\n4. 한 번에 한 조건씩 올라가면서 계속 분석한다.\r\n\r\n``` java\r\n// 인덱스가 1일 경우\r\nif (index == 1)\r\n{\r\n\treturn 1;\r\n}\r\n\r\n// 인덱스가 1이 아닐 경우\r\nelse\r\n{\r\n\treturn index * factorial(index - 1);\r\n}\r\n```\r\n\r\n위 소스의 구조는 매우 간단하므로, 어렵지 않게 분기를 찾을 수 있다. `index == 1`인 경우와 아닌 경우가 분기다.\r\n\r\n``` java\r\n// 인덱스가 1이 아닐 경우\r\nelse\r\n{\r\n\treturn index * factorial(index - 1);\r\n}\r\n```\r\n\r\n재귀는 자기 자신을 호출하는 것이므로, 분기의 `else` 부분이 재귀가 일어나는 영역이라 추측할 수 있다. 따라서 재귀가 일어나지 않는 영역이 <span class=\"teal-400\">기저 조건</span>이라 할 수 있다.\r\n\r\n``` java\r\n// 인덱스가 1일 경우\r\nif (index == 1)\r\n{\r\n\treturn 1;\r\n}\r\n```\r\n\r\n즉, 위 재귀 함수의 기저 조건은 `index == 1`이다. `factorial(1)`은 1을 반환한다. 이 기저 조건을 토대로 `factorial(4)`의 동작을 전개하면 아래와 같다.\r\n\r\n1. $\\text{factorial(4)} = 4 \\times \\text{factorial(3)}$\r\n2. $\\text{factorial(4)} = 4 \\times 3 \\times \\text{factorial(2)}$\r\n3. $\\text{factorial(4)} = 4 \\times 3 \\times 2 \\times \\text{factorial(1)}$\r\n4. $\\text{factorial(4)} = 4 \\times 3 \\times 2 \\times 1 = 12$\r\n\r\n이와 같이 순차적으로 자기 자신을 호출하여 연산을 수행한다. 재귀 함수의 <span class=\"green-400\">기저 조건은 재귀를 멈추는 요인</span>이므로, 기저 조건을 바탕으로 전개하면 비교적 쉽게 연산을 이해할 수 있다.\r\n\r\n## 9-4. 컴퓨터의 눈으로 바라본 재귀\r\n\r\n우리가 재귀함수를 이해하는 것도 중요하지만, 결국 코드의 실행 주체는 어찌됐든 컴퓨터가 담당하게 된다. 즉, 우리가 이를 이해하는 것 만큼 컴퓨터가 이를 어떻게 이해하는지 아는 것 또한 매우 중요하다.\r\n\r\n이전 장에서, 우리는 <span class=\"amber-400\">스택</span>에 대해 다뤘었다. 컴퓨터가 재귀를 다룰 때 스택을 활용하여 관리한다. `factorial(4)`를 컴퓨터가 스택으로 어떻게 관리하는 지 알아보자.\r\n\r\n1. `factorial(4)`를 호출한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024009-1ee1fc5d-ecce-4711-b729-36a70b8592d1.png\" width=\"200px\" />\r\n\r\n`factorial(4)` 내부에서 `factorial(3)`을 호출하므로, `factorial(4)`를 스택에 삽입하고 `factorial(3)`을 수행한다. 이 때 `factorial(4)`는 종료된 것이 아니라, 재귀 호출로 인해 연산이 중단된 상태다.\r\n\r\n<br />\r\n<br />\r\n\r\n2. `factorial(3)`을 호출한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024019-b76d21a2-24f6-47f6-bf2f-f46350da31e1.png\" width=\"200px\" />\r\n\r\n마찬가지로 재귀로 인해 연산 과정에서 `factorial(2)`를 호출하므로, 마찬가지로 연산을 중단하고 스택에 삽입한다.\r\n\r\n<br />\r\n<br />\r\n\r\n3. `factorial(2)`를 호출한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024025-f96e2b60-943b-4abc-8200-043ffbb63821.png\" width=\"200px\" />\r\n\r\n위와 동일하다.\r\n\r\n<br />\r\n<br />\r\n\r\n4. `factorial(1)`를 호출한다.\r\n\r\n`factorial(1)`는 기저 조건이므로 재귀가 호출되지 않는다. 1을 반환하고 연산을 종료한다. 하지만 스택에 데이터가 남아있으므로, 전체 연산이 종료되지 않았음을 알 수 있다.\r\n\r\n<br />\r\n<br />\r\n\r\n5. `factorial(2)`를 종료한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024038-575615fd-5018-4c32-b205-a0fe3b0a34f2.png\" width=\"200px\" />\r\n\r\n`factorial(2)`의 연산 결과는 `factorial(1)`의 결과와 연관된다. `factorial(1)` 결과가 계산되었으므로, `factorial(2)`를 종료할 수 있다. 연산을 종료하고 스택에서 제거한다.\r\n\r\n<br />\r\n<br />\r\n\r\n6. `factorial(3)`을 종료한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024048-93fcb67e-c73e-4423-ab3f-415f2fa817d4.png\" width=\"200px\" />\r\n\r\n`factorial(3)`의 연산을 종료하고 스택에서 제거한다.\r\n\r\n<br />\r\n<br />\r\n\r\n7. `factorial(4)`을 종료한다.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/50317129/128024224-c83b0f90-388c-4264-8543-194c56cea310.png\" width=\"200px\" />\r\n\r\n`factorial(4)`의 연산을 종료하고 스택에서 제거한다. 스택에 데이터가 남아있지 않으므로 모든 연산이 종료된다.\r\n\r\n<br />\r\n<br />\r\n\r\n위와 같이 재귀는 스택을 활용하여 연산한다. 만약 기저 조건의 설정을 잘 못 해서 재귀 연산이 끝없이 일어날 수도 있다. 이 경우 스택 역시 끝없이 쌓이게 되서 메모리가 더 이상 감당할 수 없을 때 스택 오버플로우가 발생한다.\r\n\r\n## 9-5. 재귀 다뤄보기\r\n\r\n지금까지 다룬 팩토리얼 연산의 경우 사실 루프를 사용해도 그리 어렵지 않게 풀 수 있으며, 제시된 코드 역시 재귀를 사용했을 때 크게 이점이 있는 것도 아니였다.\r\n\r\n이번엔 좀 더 재귀를 사용했을 때 이점이 있을 법한 주제로 코드를 설계해보자. 재귀는 구조 상 알고리즘 내에서 자기 자신을 호출하는 알고리즘에 가장 적합하다. 즉, 재귀의 사용 여부는 루프의 보다 <span class=\"red-400\">나 자신을 다시 호출해야 하는지 여부</span>에 따라 갈린다.\r\n\r\n코드로 파일 리스트를 불러온 적이 있다면 익숙할 것이다. 우리가 생각하는 것처럼 특정 폴더 내의 파일 리스트 전체를 불러오는 것은 생각보다 까다롭다. 단순히 폴더 바로 밑의 파일 리스트만을 가져온다면 쉽겠지만, 그 하위, 하위의 하위 파일까지 가져오려면 그리 간단하지 않기 때문이다.\r\n\r\n현재 폴더 및 하위 폴더의 모든 폴더 리스트를 출력하는 코드를 작성해보자. 우선은 가장 간단하게, 하위 폴더는 신경쓰지 말고 현재 폴더에 존재하는 폴더 리스트만을 가져와보자.\r\n\r\n폴더 루트 경로는 `D:\\root`와 같으며, 구조는 아래와 같다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/128032026-9ad5c07e-c274-45b2-8865-0164ddd8f618.png)\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 폴더 리스트 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/08/04/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.03 Tue 22:55:59\r\n */\r\npublic class DirectoryList\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"폴더 리스트를 출력할 경로를 입력하세요 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tString path = reader.readLine();\r\n\t\t\r\n\t\tString[] list = getList(path);\r\n\t\t\r\n\t\twriter.write(Arrays.toString(list));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 폴더 리스트 반환 함수\r\n\t *\r\n\t * @param path: [String] 경로\r\n\t *\r\n\t * @return [String[]] 폴더 리스트\r\n\t */\r\n\tprivate static String[] getList(String path)\r\n\t{\r\n\t\treturn Arrays.stream(Objects.requireNonNull(new File(path).listFiles(File::isDirectory))).map(File::getName).toArray(String[]::new);\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nD:\\root\r\n```\r\n\r\n``` output\r\n[a, b, c]\r\n```\r\n\r\n현재 폴더의 직전 하위 폴더 리스트만을 출력한다. 한단계 하위 폴더 리스트를 출력하기 위해 코드를 개선해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 폴더 리스트 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/08/04/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.03 Tue 23:32:46\r\n */\r\npublic class MoreDirectoryList\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"폴더 리스트를 출력할 경로를 입력하세요 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tString path = reader.readLine();\r\n\t\t\r\n\t\tArrayList<String> list = getList(path);\r\n\t\t\r\n\t\twriter.write(String.valueOf(list));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 폴더 리스트 반환 함수\r\n\t *\r\n\t * @param path: [String] 경로\r\n\t *\r\n\t * @return [ArrayList<String>] 폴더 리스트\r\n\t */\r\n\tprivate static ArrayList<String> getList(String path)\r\n\t{\r\n\t\tArrayList<String> list = new ArrayList<>();\r\n\t\t\r\n\t\tFile[] files = new File(path).listFiles(File::isDirectory);\r\n\t\t\r\n\t\t// 파일 배열이 유효할 경우\r\n\t\tif (files != null)\r\n\t\t{\r\n\t\t\tfor (File file : files)\r\n\t\t\t{\r\n\t\t\t\tlist.add(file.getName());\r\n\t\t\t\t\r\n\t\t\t\tFile[] files1 = file.listFiles(File::isDirectory);\r\n\t\t\t\t\r\n\t\t\t\t// 파일 배열이 유효할 경우\r\n\t\t\t\tif (files1 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (File file1 : files1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist.add(file1.getName());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn list;\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nD:\\root\r\n```\r\n\r\n``` output\r\n[a, a1, a2, b, b1, b2, c, c1, c2]\r\n```\r\n\r\n각 폴더의 하위 폴더의 리스트까지 출력해준다. 소스를 봐도 폴더일 경우 동일한 소스가 한 번 더 동작된다. 하지만 이는 매우 제한적이다. 폴더의 깊이가 정해져있다면 이런 식으로 계속 동일한 소스를 반복하면 되겠지만, 이러한 케이스는 거의 존재하지 않아 무의미하다.\r\n\r\n이 경우 재귀를 사용하면 매우 손쉽게 모든 폴더의 하위 리스트를 출력할 수 있다.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 재귀 폴더 리스트 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/08/04/about-algorithm-chapter09/\">재귀를 사용한 재귀적 반복</a>\r\n * @since 2021.08.03 Tue 23:36:43\r\n */\r\npublic class RecursiveDirectoryList\r\n{\r\n\tprivate static final ArrayList<String> LIST = new ArrayList<>();\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"폴더 리스트를 출력할 경로를 입력하세요 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tString path = reader.readLine();\r\n\t\t\r\n\t\tgetList(path);\r\n\t\t\r\n\t\twriter.write(String.valueOf(LIST));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 폴더 리스트 산출 함수\r\n\t *\r\n\t * @param path: [String] 경로\r\n\t */\r\n\tprivate static void getList(String path)\r\n\t{\r\n\t\tFile[] files = new File(path).listFiles(File::isDirectory);\r\n\t\t\r\n\t\t// 파일 배열이 유효할 경우\r\n\t\tif (files != null)\r\n\t\t{\r\n\t\t\tfor (File file : files)\r\n\t\t\t{\r\n\t\t\t\tLIST.add(file.getName());\r\n\t\t\t\t\r\n\t\t\t\tgetList(file.getPath());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nD:\\root\r\n```\r\n\r\n``` output\r\n[a, a1, a2, b, b1, b11, b2, c, c1, c11, c12, c2]\r\n```\r\n\r\n재귀를 이용하여 하위 폴더의 전체 폴더명을 출력할 수 있다. 동일한 소스를 구태여 반복할 필요도 없고, 하위 깊이가 얼마나 되는지 알 필요 없이 폴더명 전체 리스트를 출력할 수 있다.\r\n\r\n탐색 순서는 아래와 같다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/128036750-4094185e-3e77-4f24-94c7-dd8ccc9428ef.png)\r\n\r\n# 마무리\r\n\r\n이 장의 핵심 내용은 아래와 같다.\r\n\r\n* 재귀는 자기 자신을 호출하는 구조다.\r\n* 대부분의 루프는 재귀로 대체할 수 있다.\r\n* 알고리즘 구조 상 자기 자신을 호출해야할 때 가장 적합하다.\r\n\r\n백준 알고리즘을 풀었을 때도, 재귀를 사용해야하는 문제가 적지 않았을 정도로 재귀는 알고리즘에서 그 쓰임새가 매우 높다. 이번 장을 통해 재귀의 특성을 정리함으로써, 앞으로 알고리즘을 푸는데 많은 도움이 될 것 같다.","url":["2021-08-04-about-algorithm-chapter09","2021","08","04","about-algorithm-chapter09"]},{"header":{"title":"해시 테이블로 매우 빠른 룩업","excerpt":"현재까지 다룬 데이터 형식 중 다수의 데이터를 다루는 데 가장 효과적인 형식은 배열일 것이다. 하지만 배열의 경우, 요소별로 단 하나의 값이 들어가는 데 특화되어 있다. 만약 하나의 요소에 두 값을 넣고자 한다면 어떻게 될까? [[A, 1], [B, 2], [C, 3]]과 같은 형태로 나타낼 것이다. 배열의 단점 중 하나는, 값을 빠르게 찾기 위해선 반드시 정렬을 수행해야 한다는 것이다. 하지만 저렇게 배열 안에 또다른 배열이 포함되는 것처럼 배열의 depth가 심해질 경우 구조가 복잡해서 배열을 다루기 점점 난해해진다. 더군다나 배열의 경우 원하는 요소를 탐색하기 위해선 적어도 O(logN) 이상의 시간복잡도를 필요로 한다. 만약, 배열과 같이 특정 데이터의 모음에서 내가 원하는 데이터를 O(1)과 같이 상수 시간으로 탐색할 수 있는 데이터가 있다면 어떨까? 왠지 이 장에서 그 해답을 찾을 수 있을 것 같다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-29T23:02:27","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","해시 테이블"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-29-about-algorithm-chapter07.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 7장 해시 테이블로 매우 빠른 룩업\r\n\r\n현재까지 다룬 데이터 형식 중 다수의 데이터를 다루는 데 가장 효과적인 형식은 <span class=\"primary\">배열</span>일 것이다. 하지만 배열의 경우, 요소별로 단 하나의 값이 들어가는 데 특화되어 있다. 만약 하나의 요소에 두 값을 넣고자 한다면 어떻게 될까? $[ [ \"A\", 1 ], [ \"B\", 2 ], [ \"C\", 3 ] ]$과 같은 형태로 나타낼 것이다.\r\n\r\n배열의 단점 중 하나는, 값을 빠르게 찾기 위해선 반드시 정렬을 수행해야 한다는 것이다. 하지만 저렇게 배열 안에 또다른 배열이 포함되는 것처럼 배열의 depth가 심해질 경우 구조가 복잡해서 배열을 다루기 점점 난해해진다.\r\n\r\n더군다나 배열의 경우 원하는 요소를 탐색하기 위해선 적어도 $O(\\log N)$ 이상의 시간복잡도를 필요로 한다. 만약, 배열과 같이 특정 데이터의 모음에서 내가 원하는 데이터를 $O(1)$과 같이 상수 시간으로 탐색할 수 있는 데이터가 있다면 어떨까? 왠지 이 장에서 그 해답을 찾을 수 있을 것 같다.\r\n\r\n## 7-1. 해시 테이블 소개\r\n\r\n<span class=\"orange-A400\">JAVA</span>를 포함한 대부분의 프로그래밍 언어에선 <span class=\"teal-400\">Hash Table</span>(해시 테이블)이란 개념이 존재한다. 언어에 따라 부르는 용어는 해시나 맵, 해시 맵 등으로 불리지만 궁극적인 개념은 해시 테이블이다.\r\n\r\n``` java\r\nHashMap<String, String> map = new HashMap<>();\r\nmap.put(\"A\", \"1\");\r\nmap.put(\"B\", \"2\");\r\nmap.put(\"C\", \"3\");\r\nmap.put(\"D\", \"4\");\r\n```\r\n\r\n자바는 이를 `HashMap` 클래스로 관리한다. <span class=\"yellow-700\">JavaScript</span>와 다르게 미리 선언된 데이터 형식만 입력 가능하다는 특징이 있다. `A: 1`, `B: 2`와 같이 하나의 쌍으로 이루어진 데이터를 흔히 <span class=\"blue-400\">key-value</span> 데이터라고 한다. 해시 테이블은 이러한 key-value 데이터를 관리하는데 매우 효과적이다.\r\n\r\n``` java\r\nHashMap<String, String> map = new HashMap<>();\r\nmap.put(\"A\", \"1\");\r\nmap.put(\"B\", \"2\");\r\nmap.put(\"C\", \"3\");\r\nmap.put(\"D\", \"4\");\r\n\r\nSystem.out.println(map.get(\"A\"));\r\n```\r\n\r\nHashMap의 데이터에 접근하기 위해선 위처럼 원하는 value의 key를 입력하여 접근할 수 있다. 그런데 재밌는 점은, 해시 테이블의 경우 이렇게 탐색하는 데 필요한 작업량이 1이다. 즉, $O(1)$의 시간 복잡도를 가진다. 우리가 배열에서 갖가지 정렬을 배워가면서 탐색 속도를 향상시키기 위해 노력했는데, 이 친구는 뭐길래 이런 작업량이 가능한걸까?\r\n\r\n## 7-2. 해시 함수로 해싱\r\n\r\n<span class=\"primary\">해싱</span>이라는 개념에 대해 들어본 적이 있는가? 데이터를 고유한 값으로 반환하는 것을 해싱이라고 한다. 간단한 예를 들자면, 아래와 같이 매칭되는 표가 있다고 가정하자.\r\n\r\n|    키    |    값    |\r\n| :------: | :------: |\r\n|    A     |    1     |\r\n|    B     |    2     |\r\n|    C     |    3     |\r\n| $\\dotsb$ | $\\dotsb$ |\r\n|    Y     |    25    |\r\n|    Z     |    26    |\r\n\r\n위 표에 의거하면, `ABC = 123`, `EAD = 514`와 같이 변환될 것이다. 매우 허술하지만, 이러한 변환도 일종의 해싱이라고 할 수 있다. 위 표와 같이 변환해주는 알고리즘을 <span class=\"primary\">해시 함수</span>라 부른다.\r\n\r\n만약, 우리가 사용하려는 해시 함수가 A-Z의 키를 위 표에 매칭되는 숫자로 변경하고, 이를 다 더하는 알고리즘이라고 가정해보자. `FAD`를 변환하면 아래의 순서로 변환이 진행된다.\r\n\r\n1. 해시 함수에 의해 FAD가 614로 변환된다.\r\n2. 각 숫자를 더하여 6 + 1 + 4를 연산한다.\r\n3. 11이라는 해시값을 얻는다.\r\n\r\n이렇게 `FAD = 11`이라는 해싱을 얻을 수 있다. 해싱에는 아래와 같은 조건이 중요하다.\r\n\r\n* 정해진 값을 해싱하면 항상 동일한 결과를 반환한다. (FAD는 언제나 11을 반환해야 함)\r\n* 서로 다른 값이 동일한 해시값을 가질 수 없다.\r\n\r\n> 🔒 **해시 함수**  \r\n> 위의 예제와 달리, 해싱 함수는 대부분 복호화가 불가능한 비대칭 암호화 방식을 취한다. 또한 보안을 위해 Salt라는 임의의 난수를 포함하여 해싱함으로써, Brute Force를 방지하기도 한다.  \r\n> 이러한 특성으로 해싱은 사용자 이외에 그 누구도 알아서는 안 되는 비밀번호, 개인정보 등을 암호화하는데 쓰이며, 그 종류는 MD5, SHA-1, SHA-256, SHA-512 등이 있다.\r\n\r\n하지만 예제의 해싱 함수는 단순 이해를 돕기 위한 예시로, 실제 해싱과는 맞지 않다. 위 해시 함수에 의하면 `FAD`와 `ADF`, `DAF` 모두 동일한 값 11을 가진다. 이는 해시의 요건 중 하나인 <span class=\"red-500\">서로 다른 값이 동일한 해시값을 가질 수 없다</span>는 조건을 정면으로 위반한다.\r\n\r\n이러한 문제점에 대한 얘기는 후에 다룬다.\r\n\r\n## 7-3. 재미와 이익, 특히 이익을 남길 유의어 사전 만들기\r\n\r\n책에서 표현한 대로, 특정 단어를 입력하면 가장 핫한 유의어를 반환해주는 키치한 사전을 만든다고 가정해보자.\r\n\r\n해시는 이전 문단에서 사용한 표를 기준으로 하며, 변환된 숫자를 각각 곱한 값이 해싱 결과가 된다.\r\n\r\n|  키   |  값   |\r\n| :---: | :---: |\r\n|   1   |       |\r\n|   2   |       |\r\n|   3   |       |\r\n|   4   |       |\r\n|   5   |       |\r\n|   6   |       |\r\n|   7   |       |\r\n|   8   |       |\r\n|   9   |       |\r\n|  10   |       |\r\n|  11   |       |\r\n|  12   |       |\r\n|  13   |       |\r\n|  14   |       |\r\n|  15   |       |\r\n|  16   |       |\r\n\r\n이 때 내부적으로 동작하는 해시 테이블을 도식화하면 위와 같을 것이다. `bad: evil`이라는 key-value가 있을 경우, 해시 함수에 의해 아래와 같이 변환된다.\r\n\r\n1. `bad: evil`의 키 `bad`를 변환한다.\r\n2. 변환값 214를 얻는다.\r\n3. 각 숫자를 곱하여 해시값 $2 \\times 1 \\times 4 = 8$을 얻는다.\r\n\r\n|  키   |  값   |\r\n| :---: | :---: |\r\n|   1   |       |\r\n|   2   |       |\r\n|   3   |       |\r\n|   4   |       |\r\n|   5   |       |\r\n|   6   |       |\r\n|   7   |       |\r\n|   8   | evil  |\r\n|   9   |       |\r\n|  10   |       |\r\n|  11   |       |\r\n|  12   |       |\r\n|  13   |       |\r\n|  14   |       |\r\n|  15   |       |\r\n|  16   |       |\r\n\r\n위와 같이 8에 evil 데이터가 삽입된다. 추가로 `cab: taxi`를 해싱해보자. 해시값이 6이다, 또한 `ace: star`의 경우 해시값이 15다.\r\n\r\n|  키   |  값   |\r\n| :---: | :---: |\r\n|   1   |       |\r\n|   2   |       |\r\n|   3   |       |\r\n|   4   |       |\r\n|   5   |       |\r\n|   6   | taxi  |\r\n|   7   |       |\r\n|   8   | evil  |\r\n|   9   |       |\r\n|  10   |       |\r\n|  11   |       |\r\n|  12   |       |\r\n|  13   |       |\r\n|  14   |       |\r\n|  15   | star  |\r\n|  16   |       |\r\n\r\n해시 테이블의 현황은 위와 같을 것이다. 여기서 만약 이전에 저장된 값을 호출하려면 어떻게 될까?\r\n\r\n사용했던 키 중 하나dls `cab`의 데이터를 호출해보자. 해싱 알고리즘에 의해 6으로 변환된다.\r\n\r\n해시값을 구했으므로, 인덱스 6의 요소 `taxi`에 접근하면 된다. 별다른 탐색 없이도 간단하게 원하는 값에 접근한 것이다.\r\n\r\n이러한 방식으로 해시 테이블은 $O(1)$의 시간복잡도를 가진다.\r\n\r\n## 7-4. 충돌 해결\r\n\r\n이전에 잠깐 언급했던 해시의 요건이 있다.\r\n\r\n* 서로 다른 값이 동일한 해시값을 가질 수 없다.\r\n\r\n이전 문단의 해시 테이블에 `dab: pat`을 추가한다고 생각해보자. `dab`의 해시값은 8이다. 이제 테이블에 넣어주기만 하면 되는데, 문제가 있다.\r\n\r\n|  키   |                  값                   |\r\n| :---: | :-----------------------------------: |\r\n|   8   | evil <span class=\"red-400\">pat</span> |\r\n\r\n이미 8번 인덱스에 evil이 들어가있다. 이렇게 서로 다른 값의 해시값이 동일한 현상을 <span class=\"primary\">충돌</span>이라고 한다.\r\n\r\n가장 전통적이고 간단하 방법은, 동일한 위치에 값이 할당될 경우, 배열과 같이 이중 구조를 추가하는 것이다.\r\n\r\n|  키   |        값         |\r\n| :---: | :---------------: |\r\n|   8   | [ \"evil\", \"pat\" ] |\r\n\r\n즉, 위와 같이 배치하면 된다. 그렇다면 이 경우 검색은 어떻게 진행될까? 키가 `dab`인 테이터를 탐색해보자.\r\n\r\n1. `dab`의 해시값 8을 구한다.\r\n2. 8번 인덱스에 충돌로 인해 배열이 있음을 확인한다.\r\n3. 각 배열의 key를 확인하여 일치 여부를 반한다.\r\n\r\n이 경우 검색은 잘 될지 모르나, $O(N)$이라는 시간 복잡도를 가진다. $O(1)$의 시간 복잡도를 가질 정도로 빠른 데이터 형식이 순식간에 일반적인 배열와 동급이 되어버렸다. 아무리 봐도 좋은 현상은 아니다.\r\n\r\n결론적으론 해싱은 최대한 충돌이 일어나지 않도록 설계해야한다.\r\n\r\n## 7-5. 훌륭한 충돌 조정\r\n\r\n책에서는 해시 테이블의 효율성은 아래의 세 가지 요인에 좌우된다고 설명한다.\r\n\r\n* 해시 테이블에 얼마나 많은 데이터를 저장하는가\r\n* 해시 테이블에서 얼마나 많은 셀을 쓸 수 있는가\r\n* 어떤 해시 함수를 사용하는가\r\n\r\n이전에 사용한 표의 매칭을 기준으로, 이번엔 변환된 각각의 숫자를 1의 자리가 될 때까지 더하는 함수를 사용한다고 가정하자.\r\n\r\n`put`의 경우 16 + 21 + 20 = 57의 변환값을 가지며, 다시 이 57을 각각 더하 5 + 7 = 12, 1 + 2 = 3으로 최종적으로 `put = 3`이 된다.\r\n\r\n|  키   |  값   |\r\n| :---: | :---: |\r\n|   1   |       |\r\n|   2   |       |\r\n|   3   |       |\r\n|   4   |       |\r\n|   5   |       |\r\n|   6   |       |\r\n|   7   |       |\r\n|   8   |       |\r\n|   9   |       |\r\n|  10   |       |\r\n|  11   |       |\r\n|  12   |       |\r\n|  13   |       |\r\n|  14   |       |\r\n|  15   |       |\r\n|  16   |       |\r\n\r\n위와 같은 해시 테이블이 있다고 가정하자. 16개의 할당 가능한 공간이 있지만, 해시 함수의 특성 상 언제나 1 ~ 9 사이의 해시값을 가지므로 10 ~ 16은 언제나 비어있다.\r\n\r\n즉, 해싱 테이블의 크기는 최소한 예상되는 해시값의 범위만큼 가지고 있어야한다. 만약 해시 범위가 1 ~ 10인데, 해시 테이블의 크기는 100이라고 한다면 충돌이 일어날 가능성은 매우 적겠지만 메모리 낭비가 너무 심하다.\r\n\r\n즉, <span class=\"red-400\">너무 많은 메모리를 낭비하지 않으면서 해시값을 전부 수용</span>할 수 있도록 적절히 충돌 조정을 수행해야한다.\r\n\r\n연구에 의하면 데이터가 7개일 때, 10개의 테이블 행이 있는 것이 이상적이다. 이를 <span class=\"primary\">부하율</span>이라고 하며, 부하율이 70%일 때가 최적이다. 다행히도 해시 테이블의 세부적인 사항은 컴파일러 단계에서 관리하니, 디테일한 튜닝을 하지 않는 이상 개발자가 신경쓸 부분은 없다.\r\n\r\n## 7-6. 실제 예제\r\n\r\n해시의 특성 덕분에 해시 테이블은 많은 곳에서 많은 용도로 사용되지만, 이 책에서는 해시 테이블을 통해 알고리즘의 속도를 높이는 데 초점을 맞추었다.\r\n\r\n1장에서 모든 요소가 중복되지 않는 <span class=\"primary\">집합</span>에 대해 다뤘다. 집합 알고리즘을 배열로 구성하면 탐색과 삽입 작업이 필요하며, 이 작업은 $O(N)$의 시간 복잡도를 가진다.\r\n\r\n모든 요소가 중복되지 않는 고유한 값을 가지는 집합의 특성은 여러 곳에서 굉장히 유용하게 쓸 수 있지만, $O(N)$이라는 선형적 시간 복잡도가 걸린다. 만약 여기서 탐색의 시간 복잡도가 $O(1)$을 가지는 해시 테이블을 적용한다면 어떨까?\r\n\r\n| 작업  |  집합  | 해시 테이블 |\r\n| :---: | :----: | :---------: |\r\n| 탐색  | $O(N)$ |   $O(1)$    |\r\n| 삽입  | $O(1)$ |   $O(1)$    |\r\n| 총합  | $O(N)$ |   $O(1)$    |\r\n\r\n위와 같이 작업량을 획기적으로 줄일 수 있을 것이다. 우리는 이미 4장에서 배열의 중복 요소를 체크하는 로직을 작성한 바 있다. 처음 설계한 알고리즘의 시간 복잡도는 $O(N^2)$였지만, 이후 개선을 통해 $O(N)$으로 단축할 수 있었다.\r\n\r\n``` java\r\n/**\r\n * 요소의 중복 여부 반환 함수\r\n *\r\n * @param array: [int[]] 배열\r\n *\r\n * @return [boolean] 중복 여부\r\n */\r\nprivate static boolean isDuplicated(int[] array)\r\n{\r\n\tfor (int i = 0; i < array.length; i++)\r\n\t{\r\n\t\tfor (int j = 0; j < array.length; j++)\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\t\r\n\t\t\t// 서로 다른 요소가 동일한 값을 가질 경우\r\n\t\t\tif (i != j && array[i] == array[j])\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn false;\r\n}\r\n```\r\n\r\n위 소스는 4장에서 다룬 중복 요소 체크 알고리즘 중 $O(N^2)$를 가지는 알고리즘이다. \r\n\r\n``` java\r\n/**\r\n * 요소의 중복 여부 반환 함수\r\n *\r\n * @param array: [int[]] 배열\r\n *\r\n * @return [boolean] 중복 여부\r\n */\r\nprivate static boolean isDuplicated(int[] array)\r\n{\r\n\tArrayList<Integer> list = new ArrayList<>();\r\n\t\r\n\tfor (int item : array)\r\n\t{\r\n\t\tcount++;\r\n\t\t\r\n\t\t// 중복되지 않았을 경우\r\n\t\tif (!list.contains(item))\r\n\t\t{\r\n\t\t\tlist.add(item);\r\n\t\t}\r\n\t\t\r\n\t\t// 중복된 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn false;\r\n}\r\n```\r\n\r\n위 소스는 4장에서 다룬 중복 요소 체크 알고리즘 중 $O(N)$을 가지는 알고리즘이다. 이러한 종류의 알고리즘을 해시 테이블을 활용하여 $O(1)$의 시간 복잡도를 가지게끔 줄여보자.\r\n\r\n책에서 제시한 주제대로, 투표자가 후보자 목록 중 하나를 고르거나, 임의의 후보를 추가할 수 있는 전자 투표 기계를 설계해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 전자 투표 기계 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/29/about-algorithm-chapter07/\">해시 테이블로 매우 빠른 룩업</a>\r\n * @since 2021.07.29 Thu 22:15:32\r\n */\r\npublic class Vote\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tArrayList<String> list = new ArrayList<>();\r\n\t\t\r\n\t\twhile (true)\r\n\t\t{\r\n\t\t\twriter.write(\"후보 이름 입력 (x: 종료) >> \");\r\n\t\t\twriter.flush();\r\n\t\t\t\r\n\t\t\tString name = reader.readLine().trim();\r\n\t\t\t\r\n\t\t\t// x가 입력되었을 경우\r\n\t\t\tif (name.equalsIgnoreCase(\"x\"))\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 빈 문자가 입력되었을 경우\r\n\t\t\telse if (name.equals(\"\") || name.isEmpty())\r\n\t\t\t{\r\n\t\t\t\twriter.newLine();\r\n\t\t\t\twriter.write(\"올바른 이름을 입력하세요.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 일반적인 이름이 입력되었을 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlist.add(name);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twriter.write(list.toString());\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nJay\r\nPark\r\nKim\r\nPark\r\nKim\r\nJay\r\nJay\r\nJay\r\nPark\r\nKim\r\nx\r\n```\r\n\r\n``` output\r\n[Jay, Park, Kim, Park, Kim, Jay, Jay, Jay, Park, Kim]\r\n```\r\n\r\n소스와 입력, 출력은 위와 같다. 단순히 입력을 받아서 중복 여부 상관없이 배열에 이어 붙이므로, 시간 복잡도는 삽입 과정 하나만 있으며 $O(1)$이다.\r\n\r\n빠르기야 하다만, 후보자가 많거나, 투표자가 많아지면 정리하기 매우 힘들다. 전자는 분류할 케이스가 많아지고, 후자는 분류할 데이터가 많아지기 때문\r\n\r\n해시 테이블을 활용하여 후보의 이름과 후보의 투표수를 서로 매칭해서 심플하게 보여주면 어떨까?\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 해시 테이블을 적용한 전자 투표 기계 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/29/about-algorithm-chapter07/\">해시 테이블로 매우 빠른 룩업</a>\r\n * @since 2021.07.29 Thu 22:27:23\r\n */\r\npublic class HashVote\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tArrayList<String> list = new ArrayList<>();\r\n\t\tHashMap<String, Integer> map = new HashMap<>();\r\n\t\t\r\n\t\twhile (true)\r\n\t\t{\r\n\t\t\twriter.write(\"후보 이름 입력 (x: 종료) >> \");\r\n\t\t\twriter.flush();\r\n\t\t\t\r\n\t\t\tString name = reader.readLine().trim();\r\n\t\t\t\r\n\t\t\t// x가 입력되었을 경우\r\n\t\t\tif (name.equalsIgnoreCase(\"x\"))\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 빈 문자가 입력되었을 경우\r\n\t\t\telse if (name.equals(\"\") || name.isEmpty())\r\n\t\t\t{\r\n\t\t\t\twriter.newLine();\r\n\t\t\t\twriter.write(\"올바른 이름을 입력하세요.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 일반적인 이름이 입력되었을 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlist.add(name);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (String name : list)\r\n\t\t{\r\n\t\t\t// 이미 등록된 이름일 경우\r\n\t\t\tif (map.containsKey(name))\r\n\t\t\t{\r\n\t\t\t\tmap.put(name, map.get(name) + 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 등록되지 않은 이름일 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmap.put(name, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twriter.write(map.toString());\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nJay\r\nPark\r\nKim\r\nPark\r\nKim\r\nJay\r\nJay\r\nJay\r\nPark\r\nKim\r\nx\r\n```\r\n\r\n``` output\r\n{Jay=4, Kim=3, Park=3}\r\n```\r\n\r\n소스와 입출력은 위와 같다. Jay가 4표, 나머지가 3표를 받았다. 깔끔하게 잘 동작하지만, 투표가 끝난 뒤 일괄적으로 표를 계산하므로, 탐색 $O(N)$ 작업이 추가되어 시간 복잡도가 상수에서 선형으로 늘어나게 됐다.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.HashMap;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 해시 테이블을 적용한 향상된 전자 투표 기계 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/29/about-algorithm-chapter07/\">해시 테이블로 매우 빠른 룩업</a>\r\n * @since 2021.07.29 Thu 22:31:45\r\n */\r\npublic class ImproveHashVote\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tHashMap<String, Integer> map = new HashMap<>();\r\n\t\t\r\n\t\twhile (true)\r\n\t\t{\r\n\t\t\twriter.write(\"후보 이름 입력 (x: 종료) >> \");\r\n\t\t\twriter.flush();\r\n\t\t\t\r\n\t\t\tString name = reader.readLine().trim();\r\n\t\t\t\r\n\t\t\t// x가 입력되었을 경우\r\n\t\t\tif (name.equalsIgnoreCase(\"x\"))\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 빈 문자가 입력되었을 경우\r\n\t\t\telse if (name.equals(\"\") || name.isEmpty())\r\n\t\t\t{\r\n\t\t\t\twriter.newLine();\r\n\t\t\t\twriter.write(\"올바른 이름을 입력하세요.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 일반적인 이름이 입력되었을 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// 이미 등록된 이름일 경우\r\n\t\t\t\tif (map.containsKey(name))\r\n\t\t\t\t{\r\n\t\t\t\t\tmap.put(name, map.get(name) + 1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 등록되지 않은 이름일 경우\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tmap.put(name, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twriter.write(map.toString());\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n}\r\n```\r\n\r\n``` input\r\nJay\r\nPark\r\nKim\r\nPark\r\nKim\r\nJay\r\nJay\r\nJay\r\nPark\r\nKim\r\nx\r\n```\r\n\r\n``` output\r\n{Jay=4, Kim=3, Park=3}\r\n```\r\n\r\n표 수를 계산하는 과정을 마지막이 아닌, 투표를 할 때마다 실시간으로 카운팅한다. 기본적인 원리나 결과가 같지만, 그 속도가 다르다.\r\n\r\n이미 등록되었는지 아닌지에 따라 탐색 + 삽입 혹은 단순히 삽입으로 나누어지지만, 탐색 또한 $O(1)$의 시간 복잡도를 가지므로 최종적으로는 $O(1)$로 표현할 수 있다.\r\n\r\n# 마무리\r\n\r\n이 장에서 핵심 내용은 아래와 같다.\r\n\r\n* 해시 테이블은 key-value 형태의 값을 저장한다.\r\n* 해시 테이블은 key를 임의의 함수로 해싱하여 관리한다.\r\n* 해시 테이블의 탐색 시간 복잡도는 $O(1)$이다.\r\n* 해시 함수는 충돌이 적어야 한다.\r\n\r\nkey-value로 데이터를 저장하는 특성, 빠른 탐색 속도는 여러 알고리즘에서 유용하게 쓰일 것이다. 다음 장에서는 이와 더불어 매우 클래식한 자료구조인 <span class=\"amber-500\">스택</span>(Stack)과 <span class=\"amber-500\">큐</span>(Queue)에 대해 다뤄본다.","url":["2021-07-29-about-algorithm-chapter07","2021","07","29","about-algorithm-chapter07"]},{"header":{"title":"긍정적인 시나리오 최적화","excerpt":"지금까지는 항상 알고리즘을 비관적인 관점으로 바라봤다. 이 경우의 장점은 명확하다. 어떠한 경우에도 최악을 대비하면 문제가 없다. 하지만 모든 데이터가 항상 최악의 경우는 아닐 뿐더러, 대부분의 케이스는 평범한 영역에 위치할 것이다. 이 장에서는 모든 시나리오를 고려하여 상황에 따른 적절한 알고리즘을 판단한다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-24T04:54:40","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","삽입 정렬"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-24-about-algorithm-chapter06.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 6장 긍정적인 시나리오 최적화\r\n\r\n지금까지는 항상 알고리즘을 <span class=\"orange-400\">비관적인 관점</span>으로 바라봤다. 이 경우의 장점은 명확하다. 어떠한 경우에도 최악을 대비하면 문제가 없다. 하지만 모든 데이터가 항상 최악의 경우는 아닐 뿐더러, 대부분의 케이스는 평범한 영역에 위치할 것이다.\r\n\r\n이 장에서는 모든 시나리오를 고려하여 상황에 따른 적절한 알고리즘을 판단한다.\r\n\r\n## 6-1. 삽입 정렬\r\n\r\n이 장에서는 <span class=\"primary\">삽입 정렬</span> 알고리즘을 토대로 전개한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834021-dcb0625e-80fb-4567-bd8d-982ae60a04c0.png\" width=\"600px\" />\r\n</p>\r\n\r\n정렬할 배열은 위와 같으며, 원리는 아래와 같다.\r\n\r\n1. 요소의 두 번째 값을 임시 변수에 저장하고 배열에서 제거한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834029-9a32e551-f1ef-4751-b0b1-46942455e737.png\" width=\"600px\" />\r\n</p>\r\n\r\n삽입 정렬은 배열의 두 번째 인덱스를 기준으로 시작한다.\r\n\r\n* 임시 변수: 3\r\n* 비교값: -\r\n\r\n첫 동작이므로, 임시 변수에 3을 할당한다.\r\n\r\n2. 기준 인덱스 왼쪽의 요소를 비교하고, 조건에 따라 시프트를 수행한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834036-d0c0cc1b-a968-4e79-a1b6-4957440c9a1b.png\" width=\"600px\" />\r\n</p>\r\n\r\n현재 기준 인덱스의 왼쪽에 위치한 요소들을 비교하고, 임시 변수의 값보다 클 경우 해당 값을 오른쪽으로 한 칸 시프트한다.\r\n\r\n* 임시 변수: 3\r\n* 비교값: 7\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834043-3cee3312-ff41-475d-93e3-482ac2849577.png\" width=\"600px\" />\r\n</p>\r\n\r\n임시 변수보다 비교값이 크므로, 해당 값을 오른쪽으로 한 칸 시프트한다.\r\n\r\n이 비교는 임시 변수보다 작은 값을 만나거나, 배열의 처음으로 갈때 까지 반복한다.\r\n\r\n3. 현재 공백에 임시 변수의 값을 삽입한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834049-06874e63-e166-4d43-a40f-bb9e59c0a4cf.png\" width=\"600px\" />\r\n</p>\r\n\r\n요소의 맨 처음에 도달했으므로 비교를 종료하고, 현재 공백에 임시 변수의 값 3을 삽입한다. 3은 아직 완전히 정렬된 것이 아니며, 다음 패스스루의 작업에 제외되지 않는다.\r\n\r\n## 6-2. 삽입 정렬해보기\r\n\r\n이전 문단의 원리를 토대로 삽입 정렬을 수행한다.\r\n\r\n1. 패스스루 1: 요소의 두 번째 값을 임시 변수에 저장하고 배열에서 제거한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834029-9a32e551-f1ef-4751-b0b1-46942455e737.png\" width=\"600px\" />\r\n</p>\r\n\r\n삽입 정렬은 배열의 두 번째 인덱스를 기준으로 시작한다.\r\n\r\n* 임시 변수: 3\r\n* 비교값: -\r\n\r\n첫 동작이므로, 임시 변수에 3을 할당한다.\r\n\r\n2. 패스스루 1: 기준 인덱스 왼쪽의 요소를 비교하고, 조건에 따라 시프트를 수행한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834036-d0c0cc1b-a968-4e79-a1b6-4957440c9a1b.png\" width=\"600px\" />\r\n</p>\r\n\r\n현재 기준 인덱스의 왼쪽에 위치한 요소들을 비교하고, 임시 변수의 값보다 클 경우 해당 값을 오른쪽으로 한 칸 시프트한다.\r\n\r\n* 임시 변수: 3\r\n* 비교값: 7\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834043-3cee3312-ff41-475d-93e3-482ac2849577.png\" width=\"600px\" />\r\n</p>\r\n\r\n임시 변수보다 비교값이 크므로, 해당 값을 오른쪽으로 한 칸 시프트한다.\r\n\r\n이 비교는 임시 변수보다 작은 값을 만나거나, 배열의 처음으로 갈때 까지 반복한다.\r\n\r\n1. 패스스루 1: 현재 공백에 임시 변수의 값을 삽입한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834049-06874e63-e166-4d43-a40f-bb9e59c0a4cf.png\" width=\"600px\" />\r\n</p>\r\n\r\n요소의 맨 처음에 도달했으므로 비교를 종료하고, 현재 공백에 임시 변수의 값 3을 삽입한다. 3은 아직 완전히 정렬된 것이 아니며, 다음 패스스루의 작업에 제외되지 않는다.\r\n\r\n4. 패스스루 2: 기준 인덱스를 한 칸 오른쪽으로 이동하여 과정 1을 수행한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834064-d8e10cd3-d825-47d4-9a29-ee3a95b9cb60.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 임시 변수: 9\r\n* 비교값: -\r\n\r\n세 번째 요소의 값인 9를 임시 변수로 할당한다.\r\n\r\n5. 패스스루 2: 기준 인덱스 왼쪽의 요소들을 비교하고, 조건에 따라 시프트를 수행한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834073-83c7f417-d7ac-43ce-8421-0119ef5d4712.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 임시 변수: 9\r\n* 비교값: 7\r\n\r\n임시 변수보다 비교값이 작을 경우, 비교를 종료하고 현재 공백에 임시 변수를 삽입한다. 이 케이스의 경우 바로 왼쪽에 위치한 요소가 7로 9보다 작으므로, 그 즉시 비교가 종료되며 삽입을 진행한다.\r\n\r\n5. 패스스루 2: 현재 공백에 임시 변수의 값을 삽입한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834078-3e4fda60-79af-4f58-9915-aca42d5babfd.png\" width=\"600px\" />\r\n</p>\r\n\r\n공교롭게도, 원래의 위치에 임시 변수 9가 삽입된다.\r\n\r\n6. 패스스루 3: 기준 인덱스를 한 칸 오른쪽으로 이동하여 과정 1을 수행한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834085-ce09440c-11a9-418c-ac7e-07c307bb16b5.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 임시 변수: 2\r\n* 비교값: -\r\n\r\n네 번째 요소의 값인 2를 임시 변수로 할당한다.\r\n\r\n7. 패스스루 3: 기준 인덱스 왼쪽의 요소들을 비교하고, 조건에 따라 시프트를 수행한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834098-f4dbef5a-0a59-4668-aa73-0e98b431895a.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 임시 변수: 2\r\n* 비교값: 9\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834107-74cc6e75-3a59-4fa3-8c66-56160cdb6913.png\" width=\"600px\" />\r\n</p>\r\n\r\n비교값 9가 임시 변수 2보다 크므로, 오른쪽으로 시프트한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834113-25e6eac5-d5eb-4380-918f-249eaf9de4d1.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 임시 변수: 2\r\n* 비교값: 7\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834120-2df440ae-cad4-4f7b-a3fd-708b2ec0b6d3.png\" width=\"600px\" />\r\n</p>\r\n\r\n비교값 7이 임시 변수 2보다 크므로, 오른쪽으로 시프트한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834129-5ee81114-faf3-43cd-ba96-4e3f46a705a8.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 임시 변수: 2\r\n* 비교값: 3\r\n\r\n비교값 3이 임시 변수 2보다 크므로, 오른쪽으로 시프트한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834134-09db5b58-6c7a-49af-a1e9-b3125e85dd6b.png\" width=\"600px\" />\r\n</p>\r\n\r\n8. 패스스루 3: 현재 공백에 임시 변수의 값을 삽입한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834141-cc23a70b-f809-4783-affb-cefae7faa2cf.png\" width=\"600px\" />\r\n</p>\r\n\r\n가장 맨 첫 요소에 임시 변수 2가 삽입된다.\r\n\r\n9. 패스스루 4: 기준 인덱스를 한 칸 오른쪽으로 이동하여 과정 1을 수행한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834150-6cd89c4c-6f2a-4360-b4cc-677d073ccd85.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 임시 변수: 5\r\n* 비교값: -\r\n\r\n다섯 번째 요소의 값인 5를 임시 변수로 할당한다.\r\n\r\n10. 패스스루 4: 기준 인덱스 왼쪽의 요소들을 비교하고, 조건에 따라 시프트를 수행한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834157-416ea349-6684-496b-bb98-cbd456232e54.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 임시 변수: 5\r\n* 비교값: 9\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834166-f03e3731-66b8-4b66-95e8-51d176a92bee.png\" width=\"600px\" />\r\n</p>\r\n\r\n비교값 9가 임시 변수 5보다 크므로, 오른쪽으로 시프트한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/127515837-4e39a0aa-3acb-465d-aede-b6b888d7816a.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 임시 변수: 5\r\n* 비교값: 7\r\n\r\n비교값 7이 임시 변수 5보다 크므로, 오른쪽으로 시프트한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/127515847-d1acdce7-805a-4f4a-9f5e-886955836dd7.png\" width=\"600px\" />\r\n</p>\r\n\r\n네 번째 요소에 임시 변수 5가 삽입된다.\r\n\r\n11. 패스스루 4: 현재 공백에 임시 변수의 값을 삽입한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/127515856-478930c0-b866-4b54-a0d7-13f49dfca11e.png\" width=\"600px\" />\r\n</p>\r\n\r\n세 번째 요소에 임시 변수 5가 삽입된다.\r\n\r\n가장 마지막 요소까지 기준 인덱스가 이동했으므로, 해당 패스스루를 마지막으로 종료한다.\r\n\r\n## 6-3. 삽입 정렬 구현\r\n\r\n삽입 정렬의 과정을 토대로 이를 <span class=\"orange-400\">JAVA</span>로 구현해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 삽입 정렬 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/24/about-algorithm-chapter06/\">긍정적인 시나리오 최적화</a>\r\n * @since 2021.07.24 Sat 02:40:19\r\n */\r\npublic class InsertionSort\r\n{\r\n\tprivate static int compareCount = 0;\r\n\tprivate static int shiftCount = 0;\r\n\tprivate static int deleteCount = 0;\r\n\tprivate static int insertCount = 0;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"중복 확인할 정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\t// 배열\r\n\t\tint[] array = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\tselectionSort(array);\r\n\t\t\r\n\t\twriter.write(Arrays.toString(array));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 비교 작업량: \");\r\n\t\twriter.write(String.valueOf(compareCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 시프트 작업량: \");\r\n\t\twriter.write(String.valueOf(shiftCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 삭제 작업량: \");\r\n\t\twriter.write(String.valueOf(deleteCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 삽입 작업량: \");\r\n\t\twriter.write(String.valueOf(insertCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 총 작업량: \");\r\n\t\twriter.write(String.valueOf(compareCount + shiftCount + deleteCount + insertCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 삽입 정렬 알고리즘\r\n\t *\r\n\t * @param array: [int[]] 대상 배열\r\n\t */\r\n\tprivate static void selectionSort(int[] array)\r\n\t{\r\n\t\tfor (int i = 1; i < array.length; i++)\r\n\t\t{\r\n\t\t\t// 임시 변수\r\n\t\t\tint temp = array[i];\r\n\t\t\t\r\n\t\t\t// 빈 공간\r\n\t\t\tint blank = i;\r\n\t\t\t\r\n\t\t\t// 삭제 작업 추가\r\n\t\t\tdeleteCount++;\r\n\t\t\t\r\n\t\t\t// 공백 표시\r\n\t\t\tarray[i] = Integer.MIN_VALUE;\r\n\t\t\t\r\n\t\t\tfor (int j = i - 1; j > -1; j--)\r\n\t\t\t{\r\n\t\t\t\t// 비교 작업 추가\r\n\t\t\t\tcompareCount++;\r\n\t\t\t\t\r\n\t\t\t\t// 현재 요소가 임시 변수보다 클 경우\r\n\t\t\t\tif (array[j] > temp)\r\n\t\t\t\t{\r\n\t\t\t\t\t// 시프트 작업 추가\r\n\t\t\t\t\tshiftCount++;\r\n\t\t\t\t\t\r\n\t\t\t\t\tarray[blank] = array[j];\r\n\t\t\t\t\t\r\n\t\t\t\t\tblank--;\r\n\t\t\t\t\t\r\n\t\t\t\t\tarray[blank] = Integer.MIN_VALUE;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 아닐 경우\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 삽입 작업 추가\r\n\t\t\tinsertCount++;\r\n\t\t\t\r\n\t\t\tarray[blank] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n* 입력\r\n\r\n``` tc\r\n10 9 8 7 6 5 4 3 2 1\r\n```\r\n\r\n* 출력\r\n\r\n``` tc\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n - 비교 작업량: 45\r\n - 시프트 작업량: 45\r\n - 삭제 작업량: 9\r\n - 삽입 작업량: 9\r\n - 총 작업량: 108\r\n```\r\n\r\n소스와 입력, 출력값은 위와 같다. 사용자로부터 임의의 배열을 입력받아 삽입 정렬을 수행하고, 졍렬 결과와 각 작업량을 구분하여 표시한다.\r\n\r\n실제 핵심 동작은 `selectionSort` 메소드에서 이루어진다. 공백은 `Integer.MIN_VALUE`를 삽입하여 표시하며, 삭제됨을 표현하기 위한 것으로 작업량에 포함되지 않는다.\r\n\r\n``` java\r\nfor (int i = 1; i < array.length; i++)\r\n{\r\n\t// 임시 변수\r\n\tint temp = array[i];\r\n\t\r\n\t// 빈 공간\r\n\tint blank = i;\r\n\t\r\n\t// 삭제 작업 추가\r\n\tdeleteCount++;\r\n\t\r\n\t// 공백 표시\r\n\tarray[i] = Integer.MIN_VALUE;\r\n\t\r\n\t// ...\r\n}\r\n```\r\n\r\n첫 번째 `for`문은 각 패스스루를 의미한다. 각 패스스루마다 기준 인덱스 `i`, 임시 변수 `temp`, 삭제된 요소의 인덱스 `blank`가 새로 정의된다. 이 과정에서 삭제 연산이 고정으로 한 번 수행된다.\r\n\r\n``` java\r\nfor (int j = i - 1; j > -1; j--)\r\n{\r\n\t// 비교 작업 추가\r\n\tcompareCount++;\r\n\t\r\n\t// 현재 요소가 임시 변수보다 클 경우\r\n\tif (array[j] > temp)\r\n\t{\r\n\t\t// 시프트 작업 추가\r\n\t\tshiftCount++;\r\n\t\t\r\n\t\tarray[blank] = array[j];\r\n\t\t\r\n\t\tblank--;\r\n\t\t\r\n\t\tarray[blank] = Integer.MIN_VALUE;\r\n\t}\r\n\t\r\n\t// 아닐 경우\r\n\telse\r\n\t{\r\n\t\tbreak;\r\n\t}\r\n}\r\n```\r\n\r\n두 번째 `for`문은 각 기준 인덱스 `i`의 왼쪽 요소부터 0까지 비교 및 시프트 작업을 의미한다. 각 사이클마다 비교 작업 한 번이 반드시 발생하며, 임시 변수와 현재 요소 간의 크기에 따라 시프트 작업이 발생할 수 있다.\r\n\r\n``` java\r\nfor (int i = 1; i < array.length; i++)\r\n{\r\n\t// ...\r\n\t\r\n\t// 삽입 작업 추가\r\n\tinsertCount++;\r\n\t\r\n\tarray[blank] = temp;\r\n}\r\n```\r\n\r\n모든 비교가 끝나면 현재 공백인 요소에 임시 변수를 삽입한다. 이 과정에서 삽입 작업 한 번이 반드시 발생한다.\r\n\r\n## 6-4. 삽입 정렬의 효율성\r\n\r\n삽입 정렬 시 발생하는 작업을 분석하여 그 효율성에 대해 알아보자. 삽입 정렬은 <span class=\"orange-400\">삭제</span>, <span class=\"orange-400\">비교</span>, <span class=\"orange-400\">시프트</span>, <span class=\"orange-400\">삽입</span>의 4개 작업으로 이루어져있다.\r\n\r\n삽입 정렬에서 가장 최악의 케이스는 요소가 역순으로 정렬된 배열이다. 모든 요소가 역순으로 정렬될 경우, 발생할 수 있는 모든 작업이 발생한다. 최악의 경우에 발생하는 각 작업량을 일반식으로 정의하면 아래와 같다.\r\n\r\n* 삭제: $N - 1$\r\n* 비교: $N^2 \\div 2$ (대략적인 값)\r\n* 시프트: $N^2 \\div 2$ (대략적인 값)\r\n* 삽입: $N - 1$\r\n\r\n이를 토대로 삽입 정렬의 시간 복잡도는 $O(N^2 + 2N - 2)$임을 알 수 있다. 빅 오 표기법은 <span class=\"blue-400\">상수를 무시</span>하므로 $O(N^2 + N)$으로 간략하게 표기할 수 있다. 하지만 빅 오 표기법은 상수만 무시하는 게 아니다. <span class=\"blue-400\">가장 높은 차수를 제외한 나머지 차수 또한 무시</span>한다. 그말인 즉슨, $N^2 + N$에서 가장 높은 차수는 $N^2$이므로, $N$은 무시한다. 따라서 최종적으로 삽입 정렬의 시간 복잡도는 $O(N^2)$이 된다.\r\n\r\n|  $N$  |   $N^2$   |     $N^3$     |       $N^4$       |\r\n| :---: | :-------: | :-----------: | :---------------: |\r\n|   2   |     4     |       8       |        16         |\r\n|   5   |    25     |      125      |        625        |\r\n|  10   |    100    |     1,000     |      10,000       |\r\n|  100  |  10,000   |   1,000,000   |    100,000,000    |\r\n| 1,000 | 1,000,000 | 1,000,000,000 | 1,000,000,000,000 |\r\n\r\n요소 $N$의 갯수가 100일 때, $N^4$와 $N^3$은 $N$의 값인 100배 차이가 난다. $N^4$ 입장에서는 $N^3$ 작업 한 사이클이 발생해도, 자신의 작업량의 1%밖에 되지 않는다. 차수가 높아질 수록 작업량의 차이가 기하급수적으로 벌어지기 때문에 무시하는 것이다.\r\n\r\n지금까지 버블, 선택, 삽입 정렬 세 가지를 다뤄봤다. 각 알고리즘의 시간 복잡도를 정리하면 아래와 같다.\r\n\r\n|       구분        | 버블 정렬 |    선택 정렬    |     삽입 정렬     |\r\n| :---------------: | :-------: | :-------------: | :---------------: |\r\n|   빅 오 표기법    | $O(N^2)$  |    $O(N^2)$     |     $O(N^2)$      |\r\n| 실제 빅 오 표기법 | $O(N^2)$  | $O(N^2 \\div 2)$ | $O(N^2 + 2N - 2)$ |\r\n\r\n4장 부터 6장까지 오면서, 우리는 각 정렬의 빅 오 표기법과 실제 나타나는 빅 오 표기법에 대해 알고있다. 위 표를 토대로 본다면, 세 정렬 기법 중 선택 정렬이 가장 빠르다고 할 수 있을 것이다. 단, 누누히 말했듯이 최악의 경우에 가깝다는 전제가 수반된다.\r\n\r\n그렇다면 평균적인 경우는 어떨까?\r\n\r\n## 6-5. 평균적인 경우\r\n\r\n데이터가 1억, 1조가 넘어간다면 모를까, 대부분의 일반적인 환경에선 그리 많은 데이터를 처리하지 않는다. 즉, 대부분의 경우 최악의 케이스에 도달하지 않는다는 뜻이기도 하다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834185-4dfa70f6-0a15-4069-a7a4-7f3ed43809f4.png\" width=\"600px\" />\r\n</p>\r\n\r\n대부분의 케이스는 위와 같은 정규 분포도를 따른다. 좌측으로 수렴할 수록 최악의 케이스, 우측으로 수렴할 수록 최선의 케이스, 정 가운데로 수렴할 수록 평균적인 케이스다. <span class=\"green-400\">대다수는 평균적인 영역에 포함</span>되며, 양 옆의 극단적인 케이스는 상대적으로 양이 적다.\r\n\r\n지금까지 다룬 정렬 알고리즘의 대부분은 역순으로 정렬될 경우가 최악의 케이스였다. 완전 무작위의 배열이 입력된다고 가정할 때, 정확히 역순으로 나열된 배열이 나올 확률이 얼마나 될지 생각해보자. 대부분의 배열은 어떠한 규칙도 없이 무작위로 나열됐을 것이다. 굳이 위 같은 정규 분포도가 아니더라도 일상 생활에서 비슷한 사례는 많이 있다. 여러 케이스 중 발생하는 특이 케이스는 다른 대다수의 케이스와는 어떠한 방향으로든 다르다는 뜻이다. 최선, 최악의 케이스는 어찌 보면 이러한 특이 케이스의 범주에 속한다.\r\n\r\n우리가 이번 장에서 다룬 삽입 정렬을 토대로 확인해보자.\r\n\r\n* 최악의 경우, $O(N^2 + 2N - 2)$. 즉, $O(N^2)$를 가진다.\r\n* 최선의 경우, $O(3(N - 1))$. 즉, $O(N)$를 가진다.\r\n* 일반적인 경우, $O(N^2 \\div 2)$. 즉, $O(N^2)$를 가진다.\r\n\r\n이를 표로 나타내면 아래와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126834196-63471f0e-41df-4715-ac15-8c79fd606fae.png\" width=\"600px\" />\r\n</p>\r\n\r\n삽입 정렬은 케이스에 따라 유의미한 성능의 차이가 존재한다. 반대로 선택 정렬의 경우 꽤 난감한데, 선택 정렬은 어떠한 케이스에서든 $O(N^2)$의 시간 복잡도를 가진다.\r\n\r\n``` java\r\n/**\r\n * 선택 정렬 함수\r\n *\r\n * @param array : [int[]] 대상 배열\r\n *\r\n * @return [int[]] 작업 갯수 배열\r\n */\r\nprivate static int[] selectionSort(int[] array)\r\n{\r\n\tint compareCount = 0;\r\n\tint swapCount = 0;\r\n\t\r\n\tfor (int i = 0; i < array.length; i++)\r\n\t{\r\n\t\t// 패스스루의 최소값 인덱스\r\n\t\tint min = i;\r\n\t\t\r\n\t\tfor (int j = i + 1; j < array.length; j++)\r\n\t\t{\r\n\t\t\tcompareCount++;\r\n\t\t\t\r\n\t\t\t// 현재 요소의 값이 패스스루의 최소값보다 작을 경우\r\n\t\t\tif (array[j] < array[min])\r\n\t\t\t{\r\n\t\t\t\tmin = j;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// 최소 인덱스에 변화가 있었을 경우\r\n\t\tif (min != i)\r\n\t\t{\r\n\t\t\tint temp = array[min];\r\n\t\t\t\r\n\t\t\tarray[min] = array[i];\r\n\t\t\tarray[i] = temp;\r\n\t\t\t\r\n\t\t\tswapCount++;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn new int[] { compareCount, swapCount };\r\n}\r\n```\r\n\r\n위 소스는 5장에서 다룬 선택 정렬 소스다. 보시다시피 `for`문이 2개나 존재함으로 $O(N^2)$의 시간 복잡도를 가진다는 것을 어렵지 않게 유추할 수 있다. 더군다나 소스를 자세히 보자. 중간에 반복문을 종료할 수 있는 `break` 또한 존재하지 않는다. 좋든 싫든 항상 $N^2$의 작업을 수행한다는 뜻이다. 실제로 5장의 소스를 구동하면 케이스별로 작업량의 차이가 그리 크지 않다.\r\n\r\n만약 사용할 데이터의 대부분이 어느정도 정렬되어있을 경우, 삽입 정렬이 훨씬 유리하다고 판단할 수 있다. 만약 데이터가 완전히 무작위라면 선택 정렬이나 삽입 정렬이나 크게 차이가 없다고 볼 수 있다.\r\n\r\n## 6-6. 실제 예제\r\n\r\n두 배열이 존재하며, 각 배열에 공통으로 존재하는 요소를 추출하여 반환하는 교집합 알고리즘을 설계해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 교집합 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/24/about-algorithm-chapter06/\">긍정적인 시나리오 최적화</a>\r\n * @since 2021.07.24 Sat 04:21:40\r\n */\r\npublic class InsertionSort\r\n{\r\n\tprivate static int compareCount = 0;\r\n\tprivate static int insertCount = 0;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"첫 번째 정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tint[] array1 = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\twriter.write(\"두 번째 정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tint[] array2 = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\tint[] result = intersection(array1, array2);\r\n\t\t\r\n\t\twriter.write(Arrays.toString(result));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 비교 작업량: \");\r\n\t\twriter.write(String.valueOf(compareCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 삽입 작업량: \");\r\n\t\twriter.write(String.valueOf(insertCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 총 작업량: \");\r\n\t\twriter.write(String.valueOf(compareCount + insertCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 교집합 배열 반환 함수\r\n\t *\r\n\t * @param array1: [int[]] 첫 번째 배열\r\n\t * @param array2: [int[]] 두 번째 배열\r\n\t *\r\n\t * @return [int[]] 교집합 배열\r\n\t */\r\n\tprivate static int[] intersection(int[] array1, int[] array2)\r\n\t{\r\n\t\tArrayList<Integer> list = new ArrayList<>();\r\n\t\t\r\n\t\tfor (int item1 : array1)\r\n\t\t{\r\n\t\t\tfor (int item2 : array2)\r\n\t\t\t{\r\n\t\t\t\tcompareCount++;\r\n\t\t\t\t\r\n\t\t\t\t// 두 배열의 요소가 같을 경우\r\n\t\t\t\tif (item1 == item2)\r\n\t\t\t\t{\r\n\t\t\t\t\tinsertCount++;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist.add(item1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn list.stream().mapToInt(Integer::intValue).toArray();\r\n\t}\r\n}\r\n```\r\n\r\n* 입력\r\n\r\n``` tc\r\n3 1 9 8 5\r\n2 4 7 5 1\r\n```\r\n\r\n* 출력\r\n\r\n``` tc\r\n[1, 5]\r\n - 비교 작업량: 25\r\n - 삽입 작업량: 2\r\n - 총 작업량: 27\r\n```\r\n\r\n이중 `for` 구조이므로 시간 복잡도는 당연히 $O(N^2)$일 것이다. 두 배열의 요소의 크기가 완전히 동일할 때, 나타날 수 있는 최악의 케이스는 $O(N^2 + N)$이다. 간략히 $O(N^2)$라고 할 수 있다.\r\n\r\n위 알고리즘의 경우 불필요한 연산을 수행하기도 한다. 이를 최적화해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 향상된 교집합 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/24/about-algorithm-chapter06/\">긍정적인 시나리오 최적화</a>\r\n * @since 2021.07.24 Sat 04:21:40\r\n */\r\npublic class ImproveIntersection\r\n{\r\n\tprivate static int compareCount = 0;\r\n\tprivate static int insertCount = 0;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"첫 번째 정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tint[] array1 = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\twriter.write(\"두 번째 정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tint[] array2 = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\tint[] result = intersection(array1, array2);\r\n\t\t\r\n\t\twriter.write(Arrays.toString(result));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 비교 작업량: \");\r\n\t\twriter.write(String.valueOf(compareCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 삽입 작업량: \");\r\n\t\twriter.write(String.valueOf(insertCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 총 작업량: \");\r\n\t\twriter.write(String.valueOf(compareCount + insertCount));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 교집합 배열 반환 함수\r\n\t *\r\n\t * @param array1: [int[]] 첫 번째 배열\r\n\t * @param array2: [int[]] 두 번째 배열\r\n\t *\r\n\t * @return [int[]] 교집합 배열\r\n\t */\r\n\tprivate static int[] intersection(int[] array1, int[] array2)\r\n\t{\r\n\t\tArrayList<Integer> list = new ArrayList<>();\r\n\t\t\r\n\t\tfor (int item1 : array1)\r\n\t\t{\r\n\t\t\tfor (int item2 : array2)\r\n\t\t\t{\r\n\t\t\t\tcompareCount++;\r\n\t\t\t\t\r\n\t\t\t\t// 두 배열의 요소가 같을 경우\r\n\t\t\t\tif (item1 == item2)\r\n\t\t\t\t{\r\n\t\t\t\t\tinsertCount++;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist.add(item1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn list.stream().mapToInt(Integer::intValue).toArray();\r\n\t}\r\n}\r\n```\r\n\r\n\r\n* 입력\r\n\r\n``` tc\r\n3 1 9 8 5\r\n2 4 7 5 1\r\n```\r\n\r\n* 출력\r\n\r\n``` tc\r\n[1, 5]\r\n - 비교 작업량: 24\r\n - 삽입 작업량: 2\r\n - 총 작업량: 27\r\n```\r\n\r\n차이점은 `for`문 안의 `if` 구문에 있다.\r\n\r\n``` java\r\n// 두 배열의 요소가 같을 경우\r\nif (item1 == item2)\r\n{\r\n\tinsertCount++;\r\n\t\r\n\tlist.add(item1);\r\n\t\r\n\tbreak;\r\n}\r\n```\r\n\r\n이처럼 동일한 요소가 탐색되었을 경우, `break`를 통해 패스스루 강제 종료 기능을 추가했다. 최악의 시나리오에선 $O(N^2)$로 동일하지만, 최선의 시나리오에선 $O(N)$으로 동작할 것이다. 이전의 알고리즘이 항상 $O(N^2)$임을 감안한다면 적절한 최적화라 할 수 있다.\r\n\r\n# 마무리\r\n\r\n이 장에서 주로 얘기한 내용은 아래와 같다.\r\n\r\n* 알고리즘을 꼭 비관적으로만 바라보는 것은 아니다.\r\n* 오히려 대부분의 케이스는 평균의 범주에 속한다.\r\n* 알고리즘의 로직에 따라 케이스의 양에 따라시간 복잡도가 유의미하게 달라지기도 한다.\r\n\r\n이 장에서는 알고리즘의 또 다른 관점에 대해 알아봤다. 대부분의 케이스가 평균의 범주에 속하므로, 평균 시간 복잡도 역시 성능을 측정함에 있어서 중요한 요소 중 하나일 것이다.\r\n\r\n다음 장에서는 새로운 개념인 해시 테이블에 대해 알아본다.","url":["2021-07-24-about-algorithm-chapter06","2021","07","24","about-algorithm-chapter06"]},{"header":{"title":"빅 오를 사용하거나 사용하지 않는 코드 최적화","excerpt":"지금까지 알고리즘의 퍼포먼스를 비교하면서 빅 오 표기법을 통해 수치화했다. 하지만 빅 오 표기법도 알고리즘의 퍼포먼스를 측정함에 있어서 완벽함을 보여주진 않는다. 이전 장에서 N(O^2)이나 N(N^2 - N) 모두 빅 오 표기법에선 N(O^2)로 간주한다고 설명했다. 이러한 특성으로 인해, 실제로는 명백한 차이를 보이는 알고리즘임에도 불구하고 빅 오 표기법으론 성능이 거의 동일하게 측정되기도 한다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-23T23:42:33","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","선택 정렬"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-23-about-algorithm-chapter05.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 5장 빅 오를 사용하거나 사용하지 않는 코드 최적화\r\n\r\n지금까지 알고리즘의 퍼포먼스를 비교하면서 <span class=\"primary\">빅 오 표기법</span>을 통해 수치화했다. 하지만 빅 오 표기법도 알고리즘의 퍼포먼스를 측정함에 있어서 완벽함을 보여주진 않는다.\r\n\r\n이전 장에서 $N(O^2)$이나 $N(N^2 - N)$ 모두 빅 오 표기법에선 $N(O^2)$로 간주한다고 설명했다. 이러한 특성으로 인해, 실제로는 명백한 차이를 보이는 알고리즘임에도 불구하고 빅 오 표기법으론 성능이 거의 동일하게 측정되기도 한다.\r\n\r\n알고리즘의 속도는 알고리즘을 선택하는 데 있어서 매우 중요한 척도이므로, 이를 정확비 측정하는 것은 매우 중요하다. 이 장에서는 앞서 설명한 것과 같이 대체로 성능이 <span class=\"pink-400\">비슷해</span>보이는 알고리즘을 구별하여 더욱 빠른 알고리즘을 판별해본다.\r\n\r\n## 5-1. 선택 정렬\r\n\r\n이전 장에서는 <span class=\"orange-400\">버블 정렬</span> 알고리즘을 통해 내용을 서술했다. 이번 장에서는 다른 정렬 알고리즘인 <span class=\"orange-400\">선택 정렬</span> 알고리즘을 통해 서술해본다.\r\n\r\n선택 정렬 알고리즘은 패스스루마다 요소를 탐색하여 최소값을 탐지하고, 이를 앞으로 보내어 정렬하는 방식이다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793171-d9677021-0ff9-414c-b83b-165dc037222f.png\" width=\"600px\" />\r\n</p>\r\n\r\n정렬에 사용할 배열은 위와 같으며, 과정은 아래의 순서대로 진행된다.\r\n\r\n1. 맨 첫 번째 값을 탐색한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793179-854c05e3-04cc-420a-8a42-22fe0145c4cb.png\" width=\"600px\" />\r\n</p>\r\n\r\n한 패스스루에서 가장 작은 요소를 찾는 것이 핵심이다. 아직 첫 단계이므로, 첫 요소는 그 자체로 최소값이 된다.\r\n\r\n2. 탐색 포인터를 한 칸 이동하여 패스스루 최소값과 비교한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793193-d865b162-9c02-44a0-a59c-d2e1674f4e5f.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 5\r\n* 탐색값: 3\r\n\r\n패스스루 최소값을 3으로 갱신한다.\r\n\r\n3. 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793202-90a4dfc3-d40c-4073-9127-763781156693.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 3\r\n* 탐색값: 9\r\n\r\n패스스루 최소값이 더 작으므로 갱신되지 않는다.\r\n\r\n4. 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793209-88b076db-fe26-4cee-9a0c-1f0540beb0c8.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 3\r\n* 탐색값: 2\r\n\r\n패스스루 최소값을 2로 갱신한다.\r\n\r\n5. 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793215-a5a7dde7-8fbf-42a4-b585-5b5778297cc3.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 2\r\n* 탐색값: 6\r\n\r\n패스스루 최소값이 더 작으므로 갱신되지 않는다. 마지막 요소이므로, 탐색이 종료되고 요소 하나를 정렬한다.\r\n\r\n6. 패스스루 최소값의 요소를 맨 앞으로 정렬한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793223-3580ae05-867b-464d-9d58-831e93b6142b.png\" width=\"600px\" />\r\n</p>\r\n\r\n맨 앞의 요소 5와 최소값 2의 자리를 서로 교환한다. 2는 완전히 매칭되었으므로, 앞으로의 패스스루에서 제외된다.\r\n\r\n## 5-2. 선택 정렬 실제로 해보기\r\n\r\n이전 문단에서 선택 정렬의 원리에 대해 알았으니, 전체 배열에 대한 선택 정렬을 수행해보자.\r\n\r\n<small class=\"red-A400\">패스스루 1은 이전 문단의 과정과 동일하다.</small>\r\n\r\n1. 패스스루 1: 맨 첫 번째 요소를 탐색한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793179-854c05e3-04cc-420a-8a42-22fe0145c4cb.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: -\r\n* 탐색값: 5\r\n\r\n한 패스스루에서 가장 작은 요소를 찾는 것이 핵심이다. 아직 첫 단계이므로, 첫 요소는 그 자체로 최소값이 된다.\r\n\r\n2. 패스스루 1: 탐색 포인터를 한 칸 이동하여 패스스루 최소값과 비교한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793193-d865b162-9c02-44a0-a59c-d2e1674f4e5f.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 5\r\n* 탐색값: 3\r\n\r\n패스스루 최소값을 3으로 갱신한다.\r\n\r\n3. 패스스루 1: 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793202-90a4dfc3-d40c-4073-9127-763781156693.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 3\r\n* 탐색값: 9\r\n\r\n패스스루 최소값이 더 작으므로 갱신되지 않는다.\r\n\r\n4. 패스스루 1: 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793209-88b076db-fe26-4cee-9a0c-1f0540beb0c8.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 3\r\n* 탐색값: 2\r\n\r\n패스스루 최소값을 2로 갱신한다.\r\n\r\n5. 패스스루 1: 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793215-a5a7dde7-8fbf-42a4-b585-5b5778297cc3.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 2\r\n* 탐색값: 6\r\n\r\n패스스루 최소값이 더 작으므로 갱신되지 않는다. 마지막 요소이므로, 탐색이 종료되고 요소 하나를 정렬한다.\r\n\r\n6. 패스스루 1: 패스스루 최소값의 요소를 맨 앞으로 정렬한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793223-3580ae05-867b-464d-9d58-831e93b6142b.png\" width=\"600px\" />\r\n</p>\r\n\r\n맨 앞의 요소 5와 최소값 2의 자리를 서로 교환한다. 2는 완전히 매칭되었으므로, **앞으로의 패스스루에서 제외**된다.\r\n\r\n7. 패스스루 2: 두 번째 요소를 탐색한다.\r\n\r\n* 최소값: -\r\n* 탐색값: 3\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793231-7c8448af-29e1-4d65-9c37-630dcec47e24.png\" width=\"600px\" />\r\n</p>\r\n\r\n해당 요소를 최소값으로 지정한다.\r\n\r\n8. 패스스루 2: 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793239-cefccd38-954e-4c49-85be-a007698d072b.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 3\r\n* 탐색값: 9\r\n\r\n패스스루 최소값이 더 작으므로 갱신되지 않는다.\r\n\r\n9. 패스스루 2: 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793255-354bc82f-0c65-4a75-bfde-c192f97344dc.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 3\r\n* 탐색값: 5\r\n\r\n패스스루 최소값이 더 작으므로 갱신되지 않는다.\r\n\r\n10. 패스스루 2: 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793276-bd4020c4-fcda-4b45-b993-2575ff7c1b69.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 3\r\n* 탐색값: 6\r\n\r\n패스스루 최소값이 더 작으므로 갱신되지 않는다.\r\n\r\n11. 패스스루 2: 패스스루 최소값의 요소를 두 번째 위치로 정렬한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793282-277dc152-91d4-47a8-bdcb-3f5280593040.png\" width=\"600px\" />\r\n</p>\r\n\r\n최소값 3이 우연히도 올바른 자리에 위치하고 있어서 자리 교환이 일어나지 않는다. 두 번째 요소까지 정렬되었으므로, 마찬가지로 다음 패스스루부터 제외된다.\r\n\r\n12. 패스스루 3: 세 번째 요소를 탐색한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793296-8e9c6a9b-8aff-4634-86cc-684338c990dc.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: -\r\n* 탐색값: 9\r\n\r\n해당 요소를 최소값으로 지정한다.\r\n\r\n13. 패스스루 3: 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793310-19358a00-e527-405d-8033-1eef2c11060b.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 9\r\n* 탐색값: 5\r\n\r\n패스스루 최소값을 5로 갱신한다.\r\n\r\n14. 패스스루 3: 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793315-ca00a872-d867-40e5-95c3-c9de2b7c7851.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 5\r\n* 탐색값: 6\r\n\r\n패스스루 최소값이 더 작으므로 갱신되지 않는다.\r\n\r\n15. 패스스루 3: 패스스루 최소값의 요소를 세 번째 위치로 정렬한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793330-af0a7836-5bfd-477c-b614-c8c2fc8f108f.png\" width=\"600px\" />\r\n</p>\r\n\r\n세 번째 요소 9와 최소값 5와의 자리를 서로 교환한다.\r\n\r\n16. 패스스루 4: 네 번째 요소를 탐색한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793337-f90959c9-c798-46f5-b64a-68807621edad.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: -\r\n* 탐색값: 9\r\n\r\n해당 요소를 최소값으로 지정한다.\r\n\r\n17. 패스스루 4: 2번 과정을 반복한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793345-4f6a2819-4dac-4c81-b9c6-4ca7fd4c8749.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: 9\r\n* 탐색값: 6\r\n\r\n패스스루 최소값을 6으로 갱신한다.\r\n\r\n18. 패스스루 4: 패스스루 최소값의 요소를 네 번째 위치로 정렬한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793357-e0e62399-9d03-48a8-8f23-721e43022a65.png\" width=\"600px\" />\r\n</p>\r\n\r\n네 번째 요소 9와 최소값 6와의 자리를 서로 교환한다.\r\n\r\n19. 패스스루 5: 마지막 요소를 탐색한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793365-b658adfc-df4b-4e56-b130-e78e81826d54.png\" width=\"600px\" />\r\n</p>\r\n\r\n* 최소값: -\r\n* 탐색값: 9\r\n\r\n패스스루 최소값을 9로 갱신한다.\r\n\r\n마지막 요소이므로 그 자체로 정렬된 위치에 있으며, 패스스루가 종료된다.\r\n\r\n이로써 선택 정렬을 통해 최종적으로 정렬된 배열의 형태는 아래와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793370-a6ec0819-47c7-49c6-8f30-b953d9311336.png\" width=\"600px\" />\r\n</p>\r\n\r\n## 5-3. 선택 정렬 구현\r\n\r\n선택 정렬의 과정을 토대로 이를 <span class=\"orange-400\">JAVA</span>로 구현해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 선택 정렬 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/23/about-algorithm-chapter05/\">빅 오를 사용하거나 사용하지 않는 코드 최적화</a>\r\n * @since 2021.07.23 Fri 01:12:20\r\n */\r\npublic class SelectionSort\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"중복 확인할 정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\t// 배열\r\n\t\tint[] array = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\tint[] processes = selectionSort(array);\r\n\t\t\r\n\t\twriter.write(Arrays.toString(array));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 비교 작업량: \");\r\n\t\twriter.write(String.valueOf(processes[0]));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 스왑 작업량: \");\r\n\t\twriter.write(String.valueOf(processes[1]));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 총 작업량: \");\r\n\t\twriter.write(String.valueOf(processes[0] + processes[1]));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 선택 정렬 함수\r\n\t *\r\n\t * @param array : [int[]] 대상 배열\r\n\t *\r\n\t * @return [int[]] 작업 갯수 배열\r\n\t */\r\n\tprivate static int[] selectionSort(int[] array)\r\n\t{\r\n\t\tint compareCount = 0;\r\n\t\tint swapCount = 0;\r\n\t\t\r\n\t\tfor (int i = 0; i < array.length; i++)\r\n\t\t{\r\n\t\t\t// 패스스루의 최소값 인덱스\r\n\t\t\tint min = i;\r\n\t\t\t\r\n\t\t\tfor (int j = i + 1; j < array.length; j++)\r\n\t\t\t{\r\n\t\t\t\tcompareCount++;\r\n\t\t\t\t\r\n\t\t\t\t// 현재 요소의 값이 패스스루의 최소값보다 작을 경우\r\n\t\t\t\tif (array[j] < array[min])\r\n\t\t\t\t{\r\n\t\t\t\t\tmin = j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 최소 인덱스에 변화가 있었을 경우\r\n\t\t\tif (min != i)\r\n\t\t\t{\r\n\t\t\t\tint temp = array[min];\r\n\t\t\t\t\r\n\t\t\t\tarray[min] = array[i];\r\n\t\t\t\tarray[i] = temp;\r\n\t\t\t\t\r\n\t\t\t\tswapCount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn new int[] { compareCount, swapCount };\r\n\t}\r\n}\r\n```\r\n\r\n* 입력\r\n\r\n``` tc\r\n5 3 4 1 2\r\n```\r\n\r\n* 출력\r\n\r\n``` tc\r\n[1, 2, 3, 4, 5]\r\n - 비교 작업량: 10\r\n - 스왑 작업량: 4\r\n - 총 작업량: 14\r\n```\r\n\r\n사용자로부터 공백으로 구분된 숫자 배열을 입력받아 선택 정렬을 수행하고, 작업량을 구분에 따라 표시한다. 핵심 동작은 `selectionSort` 메소드에서 수행한다.\r\n\r\n* 첫 번째 `for`: 패스스루\r\n* 두 번째 `for`: 비교 작업\r\n* `if`문: 스왑 작업\r\n\r\n``` java\r\nfor (int i = 0; i < array.length; i++)\r\n{\r\n\t// 패스스루의 최소값 인덱스\r\n\tint min = i;\r\n\t\r\n\tfor (int j = i + 1; j < array.length; j++)\r\n\t{\r\n\t\tcompareCount++;\r\n\t\t\r\n\t\t// 현재 요소의 값이 패스스루의 최소값보다 작을 경우\r\n\t\tif (array[j] < array[min])\r\n\t\t{\r\n\t\t\tmin = j;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// 최소 인덱스에 변화가 있었을 경우\r\n\tif (min != i)\r\n\t{\r\n\t\tint temp = array[min];\r\n\t\t\r\n\t\tarray[min] = array[i];\r\n\t\tarray[i] = temp;\r\n\t\t\r\n\t\tswapCount++;\r\n\t}\r\n}\r\n```\r\n\r\n패스스루마다 첫 요소를 최소값 `min`에 할당한다. 이후 다음 요소부터 마지막 요소까지 순차적으로 `min`과 비교한다.\r\n\r\n`min`보다 더 작은 요소가 탐색될 경우 이를 교체한다. 최종적으로 `min`에는 검색한 요소들 중 가장 최소값이 할당된다.\r\n\r\n`if`문에서 `min`에 변화가 있었는지를 확인한다. 패스스루의 첫 요소의 인덱스가 아닐 경우, `min`이 변경된 것이므로 스왑을 진행한다.\r\n\r\n\r\n## 5-4. 선택 정렬의 효율성\r\n\r\n선택 정렬의 효율성을 따져보자. 위에서 언급했듯이, 선택 정렬은 <span class=\"blue-400\">비교</span>, <span class=\"blue-400\">교환</span> 작업으로 이루어진다. 비교는 항상 일어나고, 교환의 경우 조건부로 일어난다.\r\n\r\n요소가 5개인 배열을 선택 정렬할 경우 발생하는 비교 작업량은 아래와 같다.\r\n\r\n| 패스스루 | 작업량 |\r\n| :------: | :----: |\r\n|    1     |   4    |\r\n|    2     |   3    |\r\n|    3     |   2    |\r\n|    4     |   1    |\r\n\r\n$4 + 3 + 2 + 1 = 10$으로 총 10번의 비교 작업이 수행된다. 일반화하면 $(N - 1) + (N - 2) + \\dots + 1$와 같이 정의할 수 있다.\r\n\r\n교환의 경우, 비교와 달리 패스스루 당 최대 한 번만 발생하며, 이 또한 조건에 따라 아예 일어나지 않기도 한다.\r\n\r\n가장 최악의 경우, 각 패스스루마다 교환이 발생하므로 요소가 5개 일 때, 최대 4번의 교환 작업을 예상할 수 있다.\r\n\r\n예시로, $[ 5, 3, 4, 1, 2 ]$의 경우 모든 패스스루에서 스왑이 일어난다.\r\n\r\n> **책에서는 역순일 때가 최악의 경우라는데요??**  \r\n> 역순 배열일 경우 오히려 교환이 두 번 밖에 일어나지 않는다. 반만 정렬하면 나머지 뒤쪽은 알아서 정렬하기 때문.\r\n\r\n버블 정렬과 선택 정렬을 비교하면 아래와 같다.\r\n\r\n|  $N$  | 버블 정렬 | 선택 정렬 | 차이  |\r\n| :---: | :-------: | :-------: | :---: |\r\n|   5   |    20     |    14     |  30%  |\r\n|  10   |    90     |    54     |  40%  |\r\n|  20   |    380    |    199    | 52.4% |\r\n|  40   |   1560    |    819    | 52.5% |\r\n|  80   |   6320    |   3229    | 51.1% |\r\n|  100  |   9900    |   5049    |  51%  |\r\n\r\n버블 정렬 대비 선택 정렬의 속도가 50%로 수렴한다. 즉, 최악의 경우에도 선택 정렬이 두 배 가량 빠르다는 걸 알 수 있다.\r\n\r\n## 5-5. 상수 무시하기\r\n\r\n이전 문단에서의 디테일한 비교로 버블 정렬과 선택 정렬 간의 유의미한 차이가 있음을 확인했다. 선택 정렬을 빅 오 표기법으로 나타내면 $O(N^2 / 2)$가 된다.\r\n\r\n|  $N$  | $N^2 / 2$ | 선택 정렬의 작업량 |\r\n| :---: | :-------: | :----------------: |\r\n|   5   |   12.5    |         14         |\r\n|  10   |    50     |         54         |\r\n|  20   |    200    |        199         |\r\n|  40   |    800    |        819         |\r\n|  80   |   3200    |        3229        |\r\n|  100  |   5000    |        5049        |\r\n\r\n위 표가 이를 뒷받침해준다. 하지만 실제 버블 정렬과 선택 정렬의 빅 오 표기법은 둘 다 동일하게 $O(N^2)$이다. 실제로 선택 정렬 또한 <span class=\"red-400\">반복문이 두 번 중첩</span>되어있다. $O(N^2)$의 특징이 그대로 나타나있는 것이다. 이는 빅 오 표기법이 처음 소개된 3장부터 꾸준히 언급되었던 특징으로, <span class=\"teal-400\">빅 오 표기법은 상수를 무시</span>한다.\r\n\r\n분명히 상수도 유의미한 수인데, 명색이 **성능**을 측정한다는 기법이 왜 이렇게 느슨한 형태를 가지는 걸까?\r\n\r\n## 5-6. 빅 오의 역할\r\n\r\n빅 오 표기법은 왜 상수를 무시할까? 이는 빅 오 표기법이 가지는 관점 때문이라고 설명할 수 있다. $O(N)$과 $O(N^2)$, $O(100N)$과 $O(N^2)$의 작업량을 비교하면서 빅 오 표기법이 알고리즘을 어떤 관점으로 바라보는지 확인해보자.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/126793374-db4248af-daf1-4e02-8622-c16d2a2c9f69.png\" width=\"800px\" />\r\n</p>\r\n\r\n$O(N^2)$의 경우, 어떠한 경우에든 $O(N)$보다 같거나 느리다. 하지만 $O(100N)$의 경우는 살짝 다르다. 데이터가 적은 앞 구간에선 오히려 $O(N^2)$이 더 빠르지만, 충분히 데이터가 많아진 이후로는 $O(100N)$이 더 빠르다.\r\n\r\n빅 오 표기법이 상수에 크게 미련을 갖지 않는 이유다. $O(N)$, $O(N^2)$과 같이 구간이 완전히 다를 경우 항상 빠르거나, 반대로 느리다.\r\n\r\n그러나 $O(100N)$, $O(N^2)$의 경우 데이터의 양에 따라 상대적으로 빠르기도 하고, 느리기도 하다. 이런 경우의 알고리즘을 서로 구분하기 위해 빅 오 표기법은 상수를 무시한다. 어차피 $O(N)$이나 $O(100N)$이나 장기적으론 $O(N^2)$보다는 빨라지기 때문이다.\r\n\r\n빅 오 표기법은 여전히 구간이 전혀 다른 알고리즘을 상대로는 유효한 성능 판단의 척도다. 시간 복잡도가 동일하더라도, 실제로 보여주는 알고리즘의 성능은 차이가 있을 수 있다는 점을 감안하자.\r\n\r\n## 5-7. 실제 예제\r\n\r\n요소 $N$개를 가진 배열에서 두 요소 중 하나만 선택하여 $N \\div 2$의 요소를 가지는 새로운 배열을 만드는 알고리즘을 설계해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 배열 선택 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/23/about-algorithm-chapter05/\">빅 오를 사용하거나 사용하지 않는 코드 최적화</a>\r\n * @since 2021.07.23 Fri 22:32:54\r\n */\r\npublic class HalfArray\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\t// 배열\r\n\t\tint[] array = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\tint[] result = solve(array);\r\n\t\t\r\n\t\twriter.write(Arrays.toString(result));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 알고리즘 결과 반환 함수\r\n\t *\r\n\t * @param array: [int[]] 대상 배열\r\n\t *\r\n\t * @return [int[]] 결과 배열\r\n\t */\r\n\tprivate static int[] solve(int[] array)\r\n\t{\r\n\t\tint length = (int) Math.ceil(array.length / 2D);\r\n\t\t\r\n\t\tint[] result = new int[length];\r\n\t\t\r\n\t\tint count = 0;\r\n\t\t\r\n\t\tfor (int i = 0; i < array.length; i++)\r\n\t\t{\r\n\t\t\t// 인덱스가 짝수일 경우\r\n\t\t\tif (i % 2 == 0)\r\n\t\t\t{\r\n\t\t\t\tresult[count] = array[i];\r\n\t\t\t\t\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n}\r\n```\r\n\r\n* 입력\r\n\r\n``` tc\r\n0 1 2 3 4 5 6 7 8 9\r\n```\r\n\r\n* 출력\r\n\r\n``` tc\r\n[0, 2, 4, 6, 8]\r\n```\r\n\r\n위 알고리즘은 배열의 모든 원소를 순회하며, 인덱스가 짝수일 경우 해당 값을 추출하여 새로운 배열로 만들어 반환한다.\r\n\r\n해당 알고리즘은 <span class=\"orange-400\">탐색</span>과 <span class=\"orange-400\">삽입</span>으로 이루어져있다.\r\n\r\n* 탐색: $N$개\r\n* 삽입: $N / 2$개\r\n\r\n즉, 위 알고리즘의 정확한 시간 복잡도는 $O(1.5N)$이며, 위에서 언급했듯이 상수를 무시하므로 $O(N)$으로 표기한다.\r\n\r\n위 알고리즘을 조금 더 최적화해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 향상된 배열 선택 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/23/about-algorithm-chapter05/\">빅 오를 사용하거나 사용하지 않는 코드 최적화</a>\r\n * @since 2021.07.23 Fri 22:51:52\r\n */\r\npublic class ImproveHalfArray\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"요소의 갯수가 짝수개인 정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\t// 배열\r\n\t\tint[] array = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\tint[] result = solve(array);\r\n\t\t\r\n\t\twriter.write(Arrays.toString(result));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 알고리즘 결과 반환 함수\r\n\t *\r\n\t * @param array: [int[]] 대상 배열\r\n\t *\r\n\t * @return [int[]] 결과 배열\r\n\t */\r\n\tprivate static int[] solve(int[] array)\r\n\t{\r\n\t\tint length = (int) Math.ceil(array.length / 2D);\r\n\t\t\r\n\t\tint[] result = new int[length];\r\n\t\t\r\n\t\tint count = 0;\r\n\t\t\r\n\t\tfor (int i = 0; i < array.length; i += 2)\r\n\t\t{\r\n\t\t\tresult[count] = array[i];\r\n\t\t\t\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n}\r\n```\r\n\r\n* 입력\r\n\r\n``` tc\r\n0 1 2 3 4 5 6 7 8 9\r\n```\r\n\r\n* 출력\r\n\r\n``` tc\r\n[0, 2, 4, 6, 8]\r\n```\r\n\r\n위 알고리즘은 `solve` 메소드의 `for`부분을 향상시킨 알고리즘이다.\r\n\r\n``` java\r\nfor (int i = 0; i < array.length; i += 2)\r\n{\r\n\tresult[count] = array[i];\r\n\t\r\n\tcount++;\r\n}\r\n```\r\n\r\n요소를 하나한 탐색하여 그 중 짝수인 인덱스를 판별하는 것이 아니라, 애초에 짝수 인덱스만을 탐색하여 삽입한다. 즉, 탐색의 작업이 50% 감소했다.\r\n\r\n* 탐색: $N / 2$개\r\n* 삽입: $N / 2$개\r\n\r\n이 알고리즘은 정직하게 $O(N)$의 시간 복잡도를 가진다. 엄밀히 따지면 아래의 알고리즘이 더 우수한 성능을 가지지만, 시간 복잡도의 관점에서는 둘 다 동일하다.\r\n\r\n같은 시간 복잡도를 가진다고 해도, 데이터의 양이 무수히 많을 경우 아래의 알고리즘이 더 적합할 것이다.\r\n\r\n# 마무리\r\n\r\n이 장에서 주로 얘기한 내용은 아래와 같다.\r\n\r\n* 빅 오 표기법은 비관적인 관점을 가지므로 시간 복잡도의 상수를 무시한다.\r\n* 시간 복잡도가 같아도, 실제 성능은 유의미하게 차이날 수 있다.\r\n\r\n간혹 여러 사람을 만나다보면 인생을 항상 부정적인 관점으로 바라보는 사람이 더러 있다. 아마 빅 오 표기법이 의인화된다면 이런 사람이 되지 않을까 싶다.\r\n\r\n부정적으로 보는 것이 좋을 때도 있겠지만, **언제나**라는 말이 통용되진 않는다. 세상엔 수 많은 관점이 존재하고, 이는 알고리즘도 예외는 아니다. 다행히, 현실에서 대부분의 일은 평범의 범주 안에서 일어난다.\r\n\r\n다음 장에서는 부정적인 관점에서 벗어나, 평균적인 관점으로 바라보는 시간을 가져보자.","url":["2021-07-23-about-algorithm-chapter05","2021","07","23","about-algorithm-chapter05"]},{"header":{"title":"빅 오로 코드 속도 올리기","excerpt":"이전 장에서 빅 오 코드 표기법을 배웠으니, 이를 통해 시간 복잡도를 비교함으로써 알고리즘을 서로 비교할 수 있음을 확인했다. 이 장에서는 버블 정렬 알고리즘을 설계하고, 이를 빅 오 표기법을 통해 어떻게 개선할 수 있는지 확인해본다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-16T21:39:54","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","버블 정렬"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-16-about-algorithm-chapter04.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 4장 빅 오로 코드 속도 올리기\r\n\r\n이전 장에서 빅 오 코드 표기법을 배웠으니, 이를 통해 시간 복잡도를 비교함으로써 알고리즘을 서로 비교할 수 있음을 확인했다. 이 장에서는 버블 정렬 알고리즘을 설계하고, 이를 빅 오 표기법을 통해 어떻게 개선할 수 있는지 확인해본다.\r\n\r\n## 4-1 버블 정렬\r\n\r\n배열을 효과적으로 다루기 위해 <span class=\"primary\">정렬</span> 기법이 폭넓게 이용된다. <span class=\"orange-A400\">이진 검색</span>에서도 겪었듯이, 정렬된 배열은 배열의 요소를 어느정도 **예측**할 수 있도록 규칙성을 부여한다. 이러한 이유로 배열을 정렬하는 다양한 기법이 고안되었으며, 이 문단에서는 정렬 중 가장 기본적이면서 상대적으로 비효율적인 <span class=\"orange-A400\">버블 정렬</span>에 대해 알아본다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947608-e434441d-f735-44d6-8634-32431c152333.png\" width=\"600px\" />\r\n</p>\r\n\r\n위와 같은 배열이 존재할 때, 버블 정렬은 이를 어떻게 오름차순으로 정렬하는 지 알아보자.\r\n\r\n1. 우선 맨 첫 요소와 그 다음 요소를 비교한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947619-042289cc-2740-445f-9b53-40f35bda9ba9.png\" width=\"600px\" />\r\n</p>\r\n\r\n2. 앞의 요소가 뒤의 요소보다 클 경우 서로 교환(swap)한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947623-68067599-90d6-458d-b8ec-6590f88e7b81.png\" width=\"600px\" />\r\n</p>\r\n\r\n3. 각각 한 칸씩 이동하여 다음 요소를 비교한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947629-459f452d-713d-443d-bf1d-d4d2a28db97f.png\" width=\"600px\" />\r\n</p>\r\n\r\n4. 1 ~ 3의 과정을 반복한다.\r\n\r\n더 이상 교환이 이루어지지 않을 때까지 1 ~ 3의 과정을 반복한다. 이러한 반복을 <span class=\"primary\">패스스루(passthrough)</span>라 명칭한다.\r\n\r\n## 4-2. 버블 정렬 실제로 해보기\r\n\r\n이전 문단에서 <span class=\"orange-A400\">버블 정렬</span>의 원리를 알았으니 실제로 적용하여 배열을 완전히 정렬해보자.\r\n\r\n대상 배열은 이전 문단에서 사용된 배열과 동일하다.\r\n\r\n1. 패스스루 1: 8과 4 비교\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947619-042289cc-2740-445f-9b53-40f35bda9ba9.png\" width=\"600px\" />\r\n</p>\r\n\r\n8과 4를 비교한다. 앞의 요소가 더 크므로, 스왑한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947623-68067599-90d6-458d-b8ec-6590f88e7b81.png\" width=\"600px\" />\r\n</p>\r\n\r\n2. 패스스루 1: 8과 6 비교\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947629-459f452d-713d-443d-bf1d-d4d2a28db97f.png\" width=\"600px\" />\r\n</p>\r\n\r\n8과 6을 비교한다. 앞의 요소가 더 크므로, 스왑한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947635-b30df0e3-2b2b-4bee-b727-8bf070c82c73.png\" width=\"600px\" />\r\n</p>\r\n\r\n3. 패스스루 1: 8과 7 비교\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947646-ce35e2d1-0428-4e84-b8da-c2b17a13485c.png\" width=\"600px\" />\r\n</p>\r\n\r\n8과 7을 비교한다. 앞의 요소가 더 크므로, 스왑한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947652-f53b26ef-f291-4c64-9719-e4886aff91b6.png\" width=\"600px\" />\r\n</p>\r\n\r\n4. 패스스루 1: 8과 3 비교\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947657-a374227c-855e-4b88-aba0-a8eb9ee881ca.png\" width=\"600px\" />\r\n</p>\r\n\r\n8과 3을 비교한다. 앞의 요소가 더 크므로, 스왑한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947666-5574d74d-9d9a-4ff3-b145-9e9b341df0c3.png\" width=\"600px\" />\r\n</p>\r\n\r\n가장 마지막 배열의 요소까지 도달했으므로, 가장 마지막 요소인 8은 올바른 위치에 정렬되어 있다. 오름차순에서 배열의 가장 마지막 요소에는 가장 큰 값이 와야하므로, 배열의 요소 중 가장 큰 값인 8이 오는 것이 적절하다.\r\n\r\n이미 정렬되어있으므로, 다음 패스스루에선 마지막 요소는 비교하지 않아도 된다. 즉, <span class=\"teal-400\">패스스루가 진행될 수록 비교할 요소의 범위가 작아진다.</span>\r\n\r\n정렬이 완료된 요소는 <span class=\"yellow-400\">노란색</span>으로 표시한다.\r\n\r\n5. 패스스루 2: 4와 6 비교\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947681-5b8ec91b-9da1-41da-9906-6d9e99c4fdd8.png\" width=\"600px\" />\r\n</p>\r\n\r\n4와 6을 비교한다. 뒤의 요소가 더 크므로, 스왑하지 않는다.\r\n\r\n6. 패스스루 2: 6과 7 비교\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947698-af6eae59-b9e5-4075-a7e5-e433c8888a6b.png\" width=\"600px\" />\r\n</p>\r\n\r\n6과 7을 비교한다. 뒤의 요소가 더 크므로, 스왑하지 않는다.\r\n\r\n7. 패스스루 2: 7과 3 비교\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947709-19eefa54-e834-41cc-9ba2-f57d23424e9c.png\" width=\"600px\" />\r\n</p>\r\n\r\n7과 3을 비교한다. 앞의 요소가 더 크므로, 스왑한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947720-2fca7b88-3f84-422b-af78-77e57779270f.png\" width=\"600px\" />\r\n</p>\r\n\r\n요소 7이 완전히 정렬됐다. 다음 패스스루를 시작한다.\r\n\r\n8. 패스스루 3: 4와 6 비교\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947722-d73f88f3-3c12-4c19-9c85-0feb6bd4b3a9.png\" width=\"600px\" />\r\n</p>\r\n\r\n4와 6을 비교한다. 뒤의 요소가 더 크므로, 스왑하지 않는다.\r\n\r\n9. 패스스루 3: 6과 3 비교\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947729-b420b29e-3c9b-42c2-8fe2-88d509da6b91.png\" width=\"600px\" />\r\n</p>\r\n\r\n6과 3을 비교한다. 앞의 요소가 더 크므로, 스왑한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947744-2d71db3b-e35b-457f-ba35-84d05e2a6088.png\" width=\"600px\" />\r\n</p>\r\n\r\n요소 6이 완전히 정렬됐다. 다음 패스스루를 시작한다.\r\n\r\n10. 패스스루 4: 4와 3 비교\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947755-4833cd65-a86e-48c7-8413-d5e8df9c624c.png\" width=\"600px\" />\r\n</p>\r\n\r\n4와 3을 비교한다. 앞의 요소가 더 크므로, 스왑한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947767-d8163c94-8fbc-43ec-9b17-5567b9714eb5.png\" width=\"600px\" />\r\n</p>\r\n\r\n가장 마지막 패스스루이므로, 모든 요소가 정렬됐다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947774-a376dc47-0102-4ff1-8b08-d65cb8175cf0.png\" width=\"600px\" />\r\n</p>\r\n\r\n정렬된 배열은 위와 같으며, 총 10번의 작업이 이루어졌다.\r\n\r\n## 4-3. 버블 정렬 구현\r\n\r\n<span class=\"orange-A400\">버블 정렬</span>을 직접 코드로 구현해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 버블 정렬 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/16/about-algorithm-chapter04/\">빅 오로 코드 속도 올리기</a>\r\n * @since 2021.07.16 Fri 19:11:19\r\n */\r\npublic class BubbleSort\r\n{\r\n\t// 배열\r\n\tprivate static int[] array;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"버블 정렬할 정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\tarray = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\tint[] count = bubbleSort();\r\n\t\t\r\n\t\twriter.newLine();\r\n\t\twriter.write(Arrays.toString(array));\r\n\t\twriter.newLine();\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 비교 작업량: \");\r\n\t\twriter.write(String.valueOf(count[0]));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 스왑 작업량: \");\r\n\t\twriter.write(String.valueOf(count[1]));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\" - 총 작업량: \");\r\n\t\twriter.write(String.valueOf(count[0] + count[1]));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 버블 정렬 및 작업량 반환 함수\r\n\t *\r\n\t * @return [int[]] 비교 작업량과 스왑 작업량\r\n\t */\r\n\tprivate static int[] bubbleSort()\r\n\t{\r\n\t\t// 비교 작업량\r\n\t\tint compareCount = 0;\r\n\t\t\r\n\t\t// 스왑 작업량\r\n\t\tint swapCount = 0;\r\n\t\t\r\n\t\t// 스왑 여부\r\n\t\tboolean isSwaped = true;\r\n\t\t\r\n\t\t// 비교 인덱스\r\n\t\tint index = array.length - 1;\r\n\t\t\r\n\t\t// 스왑이 일어나지 않을 때까지\r\n\t\twhile (isSwaped)\r\n\t\t{\r\n\t\t\tisSwaped = false;\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < index; i++)\r\n\t\t\t{\r\n\t\t\t\tcompareCount++;\r\n\t\t\t\t\r\n\t\t\t\t// 현재 요소가 다음 요소보다 클 경우\r\n\t\t\t\tif (array[i] > array[i + 1])\r\n\t\t\t\t{\r\n\t\t\t\t\t// 스왑 발생\r\n\t\t\t\t\tisSwaped = true;\r\n\t\t\t\t\tswapCount++;\r\n\t\t\t\t\t\r\n\t\t\t\t\tint temp = array[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\tarray[i] = array[i + 1];\r\n\t\t\t\t\tarray[i + 1] = temp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tindex--;\r\n\t\t}\r\n\t\t\r\n\t\treturn new int[] { compareCount, swapCount };\r\n\t}\r\n}\r\n```\r\n\r\n위 소스는 사용자로부터 공백으로 구분된 숫자를 입력받아 버블 정렬을 수행하는 알고리즘이다.\r\n\r\n* 입력\r\n\r\n``` tc\r\n5 4 12 6 77 32 1 9 11 59\r\n```\r\n\r\n* 출력\r\n\r\n``` tc\r\n[1, 4, 5, 6, 9, 11, 12, 32, 59, 77]\r\n\r\n - 읽기 작업량: 42\r\n - 스왑 작업량: 16\r\n - 총 작업량: 58\r\n```\r\n\r\n실제 버블 정렬이 수행되는 알고리즘은 아래와 같다.\r\n\r\n``` java\r\n/**\r\n * 버블 정렬 및 작업량 반환 함수\r\n *\r\n * @return [int[]] 비교 작업량과 스왑 작업량\r\n */\r\nprivate static int[] bubbleSort()\r\n{\r\n\t// 비교 작업량\r\n\tint compareCount = 0;\r\n\t\r\n\t// 스왑 작업량\r\n\tint swapCount = 0;\r\n\t\r\n\t// 스왑 여부\r\n\tboolean isSwaped = true;\r\n\t\r\n\t// 비교 인덱스\r\n\tint index = array.length - 1;\r\n\t\r\n\t// 스왑이 일어나지 않을 때까지\r\n\twhile (isSwaped)\r\n\t{\r\n\t\tisSwaped = false;\r\n\t\t\r\n\t\tfor (int i = 0; i < index; i++)\r\n\t\t{\r\n\t\t\tcompareCount++;\r\n\t\t\t\r\n\t\t\t// 현재 요소가 다음 요소보다 클 경우\r\n\t\t\tif (array[i] > array[i + 1])\r\n\t\t\t{\r\n\t\t\t\t// 스왑 발생\r\n\t\t\t\tisSwaped = true;\r\n\t\t\t\tswapCount++;\r\n\t\t\t\t\r\n\t\t\t\tint temp = array[i];\r\n\t\t\t\t\r\n\t\t\t\tarray[i] = array[i + 1];\r\n\t\t\t\tarray[i + 1] = temp;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tindex--;\r\n\t}\r\n\t\r\n\treturn new int[] { compareCount, swapCount };\r\n}\r\n```\r\n\r\n* `compareCount`: 비겨 작업량 카운트\r\n* `swapCount`: 스왑 작업량 카운트\r\n* `isSwaped`: 스왑 여부\r\n* `index`: 정렬 인덱스\r\n\r\n`index`는 정렬을 하기위한 배열의 최대 인덱스다. 1을 빼주는 이유는 버블 정렬의 특성 때문이다. $[0, 1, 2]$와 같은 배열의 최대 인덱스는 3이다. 배열의 최대 인덱스가 3일 때 첫 패스스루의 작업 갯수는 0과 1, 1과 2로 2번 일어난다. 최대 인덱스를 하나 빼주지 않으면 0과 1, 1과 2, 2와 무엇인가를 비교하려 하기 때문에 배열 초과 예외인 `ArrayIndexOutOfBoundsException`가 발생한다.\r\n\r\n`while`문을 통해 스왑이 일어나지 않을 때까지 반복한다. <span class=\"pink-A400\">패스스루 내에서 스왑이 한 번도 일어나지 않으면 정렬이 완료</span>된 것으로 간주하여 종료한다.\r\n\r\n`for`문을 통해 인덱스 크기까지 비교하여 현재 배열보다 다음 배열이 더 클 경우 스왑한다. 이 과정에서 `isSwaped`이 `true`로 할당된다. `isSwaped`가 `true`이므로 다음 프로세스가 패스스루가 진행될 것이다.\r\n\r\n해당하는 각 과정은 카운팅된다.\r\n\r\n## 4-4. 버블 정렬의 효율성\r\n\r\n버블 정렬은 두 가지 작업으로 이루어진다.\r\n\r\n* **비교**: 더 큰 수를 찾기위해 비교한다.\r\n* **교환**: 정렬하기 위해 스왑한다.\r\n\r\n요소 5개가 있을 때, 아래와 같은 <span class=\"blue-400\">비교</span>작업이 이루어진다.\r\n\r\n* 패스스루 1: 총 4번의 비교\r\n* 패스스루 2: 총 3번의 비교\r\n* 패스스루 3: 총 2번의 비교\r\n* 패스스루 4: 총 1번의 비교\r\n* 패스스루 5: 비교 없음 (정렬 완료)\r\n\r\n즉, 4 + 3 + 2 + 1로 총 10번의 비교가 일어난다.\r\n\r\n그렇다면 <span class=\"blue-400\">스왑</span>작업은 어떨까? 스왑은 상황에 따라 일어날 수도, 일어나지 않을 수도 있다.\r\n\r\n이전 장에서 <span class=\"red-400\">알고리즘은 언제나 비관적인 관점</span>으로 접근한다고 했으니, 스왑이 언제나 일어날 경우를 가정하자.\r\n\r\n> 가장 최악의 버블 정렬 케이스  \r\n> 버블 정렬은 하나의 요소와 다음 요소를 비교하여 정렬하는 알고리즘이다. 만약 오름차순으로 정렬할 경우, 내림차순으로 정렬된 배열을 입력할 때 가장 최악의 케이스가 된다. 이 경우 모든 요소에 비교와 스왑이 일어난다.\r\n\r\n최악의 케이스인 내림차순으로 정렬된 요소 5개가 있을 때, 아래와 같은 <span class=\"blue-400\">스왑</span>작업이 이루어진다.\r\n\r\n* 패스스루 1: 총 4번의 스왑\r\n* 패스스루 2: 총 3번의 스왑\r\n* 패스스루 3: 총 2번의 스왑\r\n* 패스스루 4: 총 1번의 스왑\r\n* 패스스루 5: 스왑 없음 (정렬 완료)\r\n\r\n비교와 동일한 작업량이 발생한다. 이를 표로 정리하면 아래와 같다.\r\n\r\n|  $N$  | 작업 수 | $N^2$ |\r\n| :---: | :-----: | :---: |\r\n|   5   |   20    |  25   |\r\n|  10   |   90    |  100  |\r\n|  20   |   380   |  400  |\r\n|  40   |  1560   | 1600  |\r\n|  80   |  6320   | 6400  |\r\n|  100  |  9900   | 10000 |\r\n\r\n요소 $N$개 배열에서 버블 정렬의 최대 작업량은 $N(N - 1)$이다. 이전 장에서도 언급했 듯이, 알고리즘은 $O(N^2)$와 $O(N^2 - N)$과 크게 차이를 두지 않는다. 즉, 버블 정렬의 시간 복잡도는 $O(N^2)$가 된다.\r\n\r\n$O(N^2)$은 $O(N)$ 보다도 작업량이 급격히 증가한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125947786-fb410c06-799f-4041-8827-9a946a8d076e.png\" width=\"600px\" />\r\n</p>\r\n\r\n이를 비교하면 더욱 한눈에 알 수 있다. 이 $O(N^2)$을 <span class=\"orange-A400\">이차 시간</span>이라고 명칭한다.\r\n\r\n## 4-5. 이차 문제\r\n\r\n위에서 버블 정렬에 대한 알고리즘을 설계했다. 시간 복잡도는 무려 $O(N^2)$을 가진다. 이전 장에서 선형 검색과 이진 검색을 비교하며 최대한 시간 복잡도를 줄이는게 좋다고 손아프게 적은게 무색할 정도로, 이 알고리즘의 효율은 지면을 뜷고 추락하고있다.\r\n\r\n여기 비슷한 이차 시간 알고리즘이 있다. 입력한 요소의 중복 여부를 판별하는 알고리즘이다.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 중복 확인 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/16/about-algorithm-chapter04/\">빅 오로 코드 속도 올리기</a>\r\n * @since 2021.07.16 Fri 20:46:15\r\n */\r\npublic class DuplicateCheck\r\n{\r\n\tprivate static int count = 0;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"중복 확인할 정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\t// 배열\r\n\t\tint[] array = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\tboolean result = isDuplicated(array);\r\n\t\t\r\n\t\t// 중복된 요소가 있을 경우\r\n\t\tif (result)\r\n\t\t{\r\n\t\t\twriter.write(\"중복된 요소가 존재합니다.\");\r\n\t\t}\r\n\t\t\r\n\t\t// 없을 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\twriter.write(\"중복된 요소가 존재하지 않습니다.\");\r\n\t\t}\r\n\t\t\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\"작업량: \");\r\n\t\twriter.write(String.valueOf(count));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 요소의 중복 여부 반환 함수\r\n\t *\r\n\t * @param array: [int[]] 배열\r\n\t *\r\n\t * @return [boolean] 중복 여부\r\n\t */\r\n\tprivate static boolean isDuplicated(int[] array)\r\n\t{\r\n\t\tfor (int i = 0; i < array.length; i++)\r\n\t\t{\r\n\t\t\tfor (int j = 0; j < array.length; j++)\r\n\t\t\t{\r\n\t\t\t\tcount++;\r\n\t\t\t\t\r\n\t\t\t\t// 서로 다른 요소가 동일한 값을 가질 경우\r\n\t\t\t\tif (i != j && array[i] == array[j])\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n}\r\n```\r\n\r\n소스는 위와 같다.\r\n\r\n* 입력\r\n\r\n``` java\r\n0 1 2 3 4 5 6 7 8 9\r\n```\r\n\r\n* 출력\r\n\r\n``` java\r\n중복된 요소가 존재하지 않습니다.\r\n작업량: 100\r\n```\r\n\r\n위 알고리즘도 마찬가지로 $N = 10$일 때 최악의 경우 $O(N^2)$의 시간 복잡도를 가진다.\r\n\r\n중복을 판별하는 핵심 동작을 보자.\r\n\r\n``` java\r\n/**\r\n * 요소의 중복 여부 반환 함수\r\n *\r\n * @param array: [int[]] 배열\r\n *\r\n * @return [boolean] 중복 여부\r\n */\r\nprivate static boolean isDuplicated(int[] array)\r\n{\r\n\tfor (int i = 0; i < array.length; i++)\r\n\t{\r\n\t\tfor (int j = 0; j < array.length; j++)\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\t\r\n\t\t\t// 서로 다른 요소가 동일한 값을 가질 경우\r\n\t\t\tif (i != j && array[i] == array[j])\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn false;\r\n}\r\n```\r\n\r\n버블 정렬과 마찬가지로 중첩 반복문이 존재한다. 중첩 반복문이 있을 경우, 반복문의 갯수만큼 시간 복잡도가 급격히 올라간다.\r\n\r\n중첩 반복문은 $N$개의 요소를 $N$번 만큼 작업한다. 반복문의 중첩이 심해지면 심해질 수록 $N$번의 $N$번의 $N$번의... 와 같은 작업을 반복할 것이다. 물론 시간 복잡도의 크기가 하늘 높은줄 모르고 치솟는 것도 포함된다.\r\n\r\n즉, 어디가서 중첩 반복문을 사용하는 알고리즘을 봤다면 그 알고리즘의 시간 복잡도는 최소 $O(N^2)$임을 바로 유추할 수 있다.\r\n\r\n## 4-6. 선형 해결법\r\n\r\n이전 장에서, 선형 검색과 이진 검색의 시간복잡도를 비교하며 $O(N)$이 $O(\\log N)$보다 얼마나 비효율적인지 손가락이 아플 정도로 설명했던 걸로 기억한다. 그런데 방금의 두 알고리즘은 아픈 손가락이 무색해질 정도로 미칠듯한 비효율을 선사하고 있다.\r\n\r\n<i align=\"center\">아니, 니가 알고리즘을 많이 안 짜봐서 그런가본데, 그렇게 설계할 수 밖에 없는 알고리즘도 있거든??</i>\r\n\r\n물론 맞는 말이다. 백준만 해도 로직이 복잡해서 중첩 반복문을 사용하기도 한다. 실무에서도 마찬가지다. 로직이 복잡하거나, 소스 최적화의 비용이 너무 높거나 혹은 효율이 극악이거나. 아니면 컴퓨터 성능이 충분히 좋아서 굳이 그렇게 머리 아픈일에 투자할 필요를 못 느낄 수도 있다.\r\n\r\n여담으로, 실제로 큰 기업은 이런 최적화 보다도 컴퓨팅 성능을 극대화시키는 방법을 많이 선택한다고 한다. 로직이야 어차피 한정적으로 적용되고, 차라리 컴퓨터 성능을 올리는게 오히려 싸게 먹히기도 한다. 로직과 달리 컴퓨팅 자원은 다른 곳에 써먹을 수도 있으니 이쪽이 더 범용적이다.\r\n\r\n필자의 컴퓨터도 작성일 기준으로 그리 못난 편은 아니지만, 안타깝게도 위에 작성한 중복 판별 알고리즘은 최적화의 비용이 매우 저렴한 편이다. 우리는 공부를 목적으로 하니 한 번 최적화해보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 향상된 중복 확인 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/16/about-algorithm-chapter04/\">빅 오로 코드 속도 올리기</a>\r\n * @since 2021.07.16 Fri 21:18:05\r\n */\r\npublic class ImproveDuplicateCheck\r\n{\r\n\tprivate static int count = 0;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"중복 확인할 정수 배열을 띄어쓰기로 구분하여 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\t// 배열\r\n\t\tint[] array = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\tboolean result = isDuplicated(array);\r\n\t\t\r\n\t\t// 중복된 요소가 있을 경우\r\n\t\tif (result)\r\n\t\t{\r\n\t\t\twriter.write(\"중복된 요소가 존재합니다.\");\r\n\t\t}\r\n\t\t\r\n\t\t// 없을 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\twriter.write(\"중복된 요소가 존재하지 않습니다.\");\r\n\t\t}\r\n\t\t\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.write(\"작업량: \");\r\n\t\twriter.write(String.valueOf(count));\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 요소의 중복 여부 반환 함수\r\n\t *\r\n\t * @param array: [int[]] 배열\r\n\t *\r\n\t * @return [boolean] 중복 여부\r\n\t */\r\n\tprivate static boolean isDuplicated(int[] array)\r\n\t{\r\n\t\tArrayList<Integer> list = new ArrayList<>();\r\n\t\t\r\n\t\tfor (int item : array)\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\t\r\n\t\t\t// 중복되지 않았을 경우\r\n\t\t\tif (!list.contains(item))\r\n\t\t\t{\r\n\t\t\t\tlist.add(item);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 중복된 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n}\r\n```\r\n\r\n소스는 위와 같다.\r\n\r\n* 입력\r\n\r\n``` java\r\n0 1 2 3 4 5 6 7 8 9\r\n```\r\n\r\n* 출력\r\n\r\n``` java\r\n중복된 요소가 존재하지 않습니다.\r\n작업량: 10\r\n```\r\n\r\nJAVA의 가변 배열 `ArrayList` 클래스를 활용하여 구현했다. 요소가 한 번도 나오지 않았을 경우, `list`에 존재하지 않을 것이므로 넣어준다. 이후 동작 중에 이미 `list`에 존재하는 숫자가 발견될 경우, 중복된 요소이므로 종료하고 결과를 반환한다.\r\n\r\n$N = 10$일 때 $O(N)$의 시간 복잡도로 대폭 개선됨을 확인할 수 있다. 이전의 결과와 비교하면 무려 <span class=\"lightBlue-A400\">10배의 차이</span>로, 산술적으로 이전 알고리즘이 1번 동작할 동안 개선된 알고리즘은 10번 동작할 수 있다.\r\n\r\n지금은 $N = 10$으로 요소 자체가 작아서 체감이 되지 않을 수도 있지만, $N = 10,000$일 경우 무려 <span class=\"lightBlue-A400\">10,000배의 차이</span>가 발생한다.\r\n\r\n알고리즘의 최적화가 중요한 이유가 여기에 있다. 처리하는 데이터가 빅데이터에 가까워질수록 그 효율이 미친듯이 상승하기 때문.\r\n\r\n# 마무리\r\n\r\n이 장에서 배운 점을 정리하면 아래와 같다.\r\n\r\n* 반복문의 중첩 여부, 갯수를 통해 시간 복잡도를 유추할 수 있다.\r\n* 시간 복잡도를 통해 알고리즘의 성능 향상을 수치상으로 비교, 표시할 수 있다.\r\n\r\n사실 정리해놓고 보니 뭐 별 거 아닌, 당연한 얘기를 가지고 광활하게 설명했나 싶기도 하다. 난 이 당연한 걸 제대로 몰랐던 거고.\r\n\r\n이런 알고리즘도 있다. 속도가 비슷해서 빅 오 표기로는 그 차이가 보이지 않을 경우. 하지만 그럼에도 확실히 어떠한 요인으로든 차이가 발생할 것이다. 다음 장에서는 이러한 알고리즘에 대한 최적화에 대해 알아본다.","url":["2021-07-16-about-algorithm-chapter04","2021","07","16","about-algorithm-chapter04"]},{"header":{"title":"빅 오 표기법","excerpt":"하나의 문제가 있어도, 이를 해결하는 수 많은 알고리즘이 존재할 수 있다. 어떠한 방법으로든 문제를 해결할 수 있다면 그 자체로 알고리즘이라 불러도 손색이 없지만, 알고리즘이라고 해서 다 같진 않다. 바로 문제를 해결하는 효율성의 차이 때문. 결과적으로 문제를 해결한다고 해도 그냥 무식하게 해결하는 알고리즘이 있는가 하면, 정말 효율적으로 문제를 해결하는 알고리즘도 있다. 그리고 우리는 통상 후자를 알고리즘이라는 명칭에 더 어울린다고 생각할 것이다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-14T04:21:37","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","빅 오 표기법"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-14-about-algorithm-chapter03.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 3장 빅 오 표기법\r\n\r\n하나의 문제가 있어도, 이를 해결하는 수 많은 알고리즘이 존재할 수 있다. 어떠한 방법으로든 문제를 해결할 수 있다면 그 자체로 알고리즘이라 불러도 손색이 없지만, 알고리즘이라고 해서 다 같진 않다. 바로 <span class=\"orange-A400\">문제를 해결하는 효율성의 차이</span> 때문. 결과적으로 문제를 해결한다고 해도 그냥 무식하게 해결하는 알고리즘이 있는가 하면, 정말 효율적으로 문제를 해결하는 알고리즘도 있다. 그리고 우리는 통상 후자를 알고리즘이라는 명칭에 더 어울린다고 생각할 것이다.\r\n\r\n이러한 알고리즘의 성능을 하나의 규칙으로 표기한 것이 <span class=\"primary\">빅 오 표기법</span>이다. 이 장에서는 알고리즘의 빅 오 표기법에 대해 설명한다.\r\n\r\n## 3-1. 빅 오: 단계 수 계산\r\n\r\n보통 알고리즘의 성능을 측정한다고 하면 소요시간을 생각하겠지만, 의외로 소요시간은 객관적인 성능 지표가 되지 못 한다. 그 이유는 컴퓨터마다 성능이 제각각이기 때문. 똑같은 게임을 구동해도 어떤 컴퓨터는 울트라옵으로 165 프레임을 뽑는다고 하면, 다른 컴퓨터는 최하옵으로도 버벅일 수 있다. <span class=\"teal-400\">동일한 작업을 수행해도 컴퓨터의 성능에 따라 그 소요시간이 천차만별</span>로 달라진다.\r\n\r\n때문에 <span class=\"green-A400\">알고리즘의 성능을 측정하는 적절한 지표는 처리 단계</span>라 할 수 있다. 이전 장의 <span class=\"primary\">읽기 연산</span>과 <span class=\"primary\">선형 검색</span>을 통해 예를 들어보자.\r\n\r\n읽기 연산의 경우, 배열이 10개가 있던 1억개가 있던 관계없이 인덱스 i의 요소를 읽는데 필요한 단계는 하나다. 반대로 선형 검색의 경우, 요소가 많아지면 많아질 수록 연산에 요구되는 단계가 늘어난다. 배열 $N$개가 있을 때, 찾는 요소가 배열 맨 끝에 있는 최악의 경우 $N$개의 단계가 필요하다.\r\n\r\n즉, 읽기 연산의 경우 언제나 한 단계만 필요하므로 $O(1)$로 표기할 수 있으머, 선형 검색의 경우 $O(N)$으로 표기할 수 있다. 이러한 표기를 <span class=\"amber-400\">시간 복잡도</span>라 한다.\r\n\r\n## 3-2. 상수 시간과 선형 시간\r\n\r\n읽기 연산처럼 요소의 갯수에 상관없이 일정한 단계만을 필요로하는 연산이 있는가 하면, 선형 검색처럼 요소의 크기에 따라 단계가 가변하는 연산도 존재한다. 이전 문단에서 언급했듯이 읽기 연산의 시간 복잡도는 $O(1)$, 선형 검색의 시간 복잡도는 $O(N)$으로 표기할 수 있다. 이를 그래프로 비교하면 아래와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125599099-db099ea5-e3e9-4b79-ad19-700870b07891.png\" width=\"600px\" />\r\n</p>\r\n\r\n$O(N)$의 경우 우리가 흔히 접한 1차원 그래프 $y = x$와 패턴이 동일하다. 요소의 수가 1씩 증가할 수록 단계 또한 1씩 정직하게 증가한다. 이러한 패턴을 <span class=\"primary\">선형 시간</span>이라고 표현한다. 그러나 $O(1)$의 경우 단계에 관계없이 일정한 상수 그래프 $y = 1$와 패턴이 동일하다. 이러한 패턴을 <span class=\"primary\">상수 시간</span>이라고 표현한다.\r\n\r\n$O(1)$의 경우 조금 특이한데, 아래의 모든 그래프는 $O(1)$의 시간 복잡도를 가진다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125599889-72b5cbb9-ca20-4b19-9f49-6d363b8ebec5.png\" width=\"600px\" />\r\n</p>\r\n\r\n요소의 수에 관계 없이 두 단계를 요구하면 $O(2)$, 100 단계를 요구하면 $O(100)$일 것 같지만, 빅 오 표기법은 단계가 일정할 경우 이를 크게 신경쓰지 않는다. 즉, 설령 단계가 1억개가 된다 하더라도 시간 복잡도는 $O(1)$이 된다.\r\n\r\n<span class=\"red-400\">상수 시간의 경우 기본적으로 선형 시간보다 효율적</span>이라고 판단한다. 그 이유는 아래 그래프와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125599827-0f58c448-9ab5-44dc-9bca-80d3ffd49d64.png\" width=\"600px\" />\r\n</p>\r\n\r\n<small class=\"red-400\">※ $O(1)$의 경우 값이 너무 작아 표시가 잘 안 되므로 우측의 보조축을 기준으로 표시한다.</small>\r\n\r\n깊게 생각하지 않더라도, 선형적으로 증가하는 그래프는 언젠가 상수 그래프를 넘어서게 된다. 즉, 요소가 무수히 많아지는 거시적 관점으로 보면 <span class=\"red-400\">언젠가 선형 시간의 효율이 상수 시간보다 떨어지는 시점에 도달</span>한다. 예제를 보면 요소가 10개 이상일 경우 선형 시간의 효율성이 점점 떨어진다.\r\n\r\n그런데 선형 시간의 경우를 생각해보자. 분명히 단계가 최대 $N$개가 소요될 수 있다는 뜻이지, 항상 $N$개가 소요된다는 것은 아니다. 예를 들어, 1부터 오름차순으로 정렬된 1억개의 배열에서 5를 검색한다고 가정하면, 필요한 단계는 5밖에 안 된다. 그럼에도 책에서는 선형 시간보다 상수 시간이 비교적 효율적이라고 설명하고 있다. 그 이유는 뭘까? 다음 문단에서 그 해답을 찾을 수 있다.\r\n\r\n## 3-3. 같은 알고리즘, 다른 시나리오\r\n\r\n선형 검색은 검색하려는 요소의 위치에 따라서 생각보다 많은 시간이 소요되지 않을 수도 있다. 최선의 경우 요소가 맨 앞에 있으므로 단계가 하나만 필요하여 $O(1)$과 동일한 시간 복잡도를 가질 수도 있다. 그러나 최악의 경우 요소가 맨 끝에 있으므로 온전히 $N$개의 단계가 필요하여 $O(N)$의 시간 복잡도를 가진다.\r\n\r\n통상 알고리즘이 어떤 데이터를 얼마나 많이 처리할지 미리 알 수 없다. $O(N)$의 시간 복잡도를 가지는 임의의 알고리즘에 최선의 케이스를 적용하여 처리하면 $O(1)$에 가깝게 동작할 것이고, 최악의 케이스를 적용하여 처리하면 $O(N)$에 가깝게 동작할 것이다. <span class=\"orange-A400\">알고리즘은 기본적으로 가장 비관적인 접근</span>으로 바라본다.\r\n\r\n우리가 어떤 물건을 온라인으로 주문한다고 생각해보자. 내가 원하는 물건을 여러 업체에서 동일한 가격에 팔고 있지만, 택배 도착에 걸리는 시간이 다르다. 이는 업체의 페이지에 각각 아래와 같이 써있으며, 택배 도착은 이 시간을 절대로 벗어나지 않는다고 가정하자.\r\n\r\n* A업체: 빠르면 오늘, 늦으면 일주일 뒤\r\n* B업체: 빠르면 내일, 늦으면 3일 뒤\r\n* C업체: 빠르면 3일, 늦으면 5일 뒤\r\n\r\n우리가 3일 안으로 물건을 반드시 받아야 한다면 B업체가 가장 안전할 것이다. 물론 A업체에 주문하면 오늘 당장이라도 올 가능성이 있지만, 최악의 경우 일주일을 꼬박 기다려야 받게 될 수도 있기 때문에 3일을 넘어버릴 가능성 또한 무시할 수 없다. 빠르게 오면 단순히 좋은 정도지만, 3일을 넘어서면 안 되므로 A업체 또한 적절하지 않은 것이다. C업체는 말할 필요도 없고.\r\n\r\n알고리즘도 이러한 관점과 동일하다. $N$이 최대 100인 $O(N)$ 알고리즘이 있을 때, 성능 상의 이유로 단계가 50이 넘어가면 크래쉬를 유발할 경우 이 알고리즘은 적절하지 않다. 이와 같이 최악의 상황을 알아야 장애를 대비할 수 있다. 이러한 이유로 알고리즘의 성능은 항상 최악을 기준으로 표시한다.\r\n\r\n## 3-4 세 번째 유형의 알고리즘\r\n\r\n물론 시간 복잡도가 $O(1)$, $O(N)$만 있는 것은 아니다. 우리가 2장에서 다뤘던 이진 검색의 경우, 요소에 따라 단계가 증가하긴 하지만 $O(N)$과 같이 선형적으로 증가하지는 않는다. 즉, $O(1)$도 아니고, $O(N)$도 아닌 그 사이의 시간 복잡도를 가진다.\r\n\r\n이진 검색의 시간 복잡도는 기본적으로 $O(\\log_2N)$을 가진다. $O(1)$, $O(\\log_2N)$, $O(N)$가 요구하는 단계를 표로 표현하면 아래와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125602081-0cc6075b-ba14-43c5-8aa6-52d8561559a3.png\" width=\"600px\" />\r\n</p>\r\n\r\n<small class=\"red-400\">※ $O(1)$, $O(\\log N)$의 경우 값이 너무 작아 표시가 잘 안 되므로 우측의 보조축을 기준으로 표시한다.</small>\r\n\r\n## 로가리즘\r\n\r\n우리가 흔히 부르는 $\\log$. 즉, 로그는 로가리즘(Logarithm)의 줄임말이다. $x^n = y$가 성립할 경우, 이를 로그로 표현하면 $\\log_xy = n$과 같다.\r\n\r\n예를 들어, $3^2 = 9$가 성립한다. 이를 로그로 표현하면 $\\log_39 =  2$가 된다. 이렇게 로그를 통해 수의 제곱수를 구할 수 있다.\r\n\r\n## $O(\\log N)$의 해석\r\n\r\n위 문단에서 로그에 대해 어느정도 이해를 했으니, $O(\\log N)$에 대해 논의해보자. 통상 수학에선 $\\log_{10}x$을 간략화하여 $\\log$로 표현했지만, 빅 오 표기법에서는 $\\log_2x$의 간략화다. <span class=\"orange-A400\">현실에선 십진법이 통용</span>되지만, <span class=\"orange-A400\">컴퓨터는 이진법을 사용</span>하기 때문.\r\n\r\n$O(N)$과 $O(\\log N)$를 비교하면 아래와 같다.\r\n\r\n|    $N$    |  $O(N)$   | $O(\\log N)$ |\r\n| :-------: | :-------: | :---------: |\r\n|     2     |     2     |      1      |\r\n|     4     |     4     |      2      |\r\n|     8     |     8     |      3      |\r\n|    16     |    16     |      4      |\r\n|    32     |    32     |      5      |\r\n|    64     |    64     |      6      |\r\n|    128    |    128    |      7      |\r\n|    256    |    256    |      8      |\r\n|    512    |    512    |      9      |\r\n|   1024    |   1024    |     10      |\r\n| $2^{100}$ | $2^{100}$ |     100     |\r\n\r\n$O(N)$는 $N$이 증가함에 따라 정직하게 같이 증가하지만, $O(\\log N)$은 $N$이 정확히 두 배가 될 때 1씩 증가한다.\r\n\r\n여담으로, 천문학같은 거시세계에서 로그가 중요한 이유가 위 표만으로도 쉽게 확인할 수 있다. $2^{100}$은 126,7650,6002,2822,9401,4967,0320,5376이다. 약 100양에 육박하는 수치로, 양은 수의 단위인 조를 아득히 뛰어넘는 단위다.\r\n\r\n> 거시적 수의 단위  \r\n> 일반적으로 사람이 접할 수 있는 의미 있는 단위는 조 단위로, 1억씩 천 번을 모아야 만들어지는 수치다.  \r\n> 조 단위 뒤로는 경, 해, 자, 양 순으로 나열되며, 현실에서 경 이후로는 그 수의 크기를 논하는게 의미가 없는 정도\r\n\r\n현실세계와 달리 수학이나 천문학과 같은 경우 우리에게 의미가 없을 정도로 큰 수를 다루기도 하는데, 이를 로그로 표현하면 이를 효과적으로 다룰 수 있다.\r\n\r\n## 3-7. 실제 예제\r\n\r\n지금까지 기술한 내용을 토대로 실제 코드에 적용해보자. 4개의 요소를 가진 배열이 있고, 배열의 값을 하나씩 출력하는 알고리즘이 있다고 가정해보자.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 빅 오 표기 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/14/about-algorithm-chapter03/\">빅 오 표기법</a>\r\n * @since 2021.07.14 Wed 17:40:00\r\n */\r\npublic class BigO\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 배열\r\n\t\tString[] things = { \"apples\", \"baboons\", \"cribs\", \"delcimers\" };\r\n\t\t\r\n\t\t// 배열마다 하나씩 순회\r\n\t\tfor (String thing : things)\r\n\t\t{\r\n\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\tbuilder.append(\"Here's a thing: \");\r\n\t\t\tbuilder.append(thing);\r\n\t\t\t\r\n\t\t\twriter.write(builder.toString());\r\n\t\t\twriter.newLine();\r\n\t\t}\r\n\t\t\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n}\r\n```\r\n\r\n소스는 위와 같다.\r\n\r\n``` tc\r\nHere's a thing: apples\r\nHere's a thing: baboons\r\nHere's a thing: cribs\r\nHere's a thing: delcimers\r\n```\r\n\r\n결과는 위와 같다.\r\n\r\n요소마다 하나씩 읽어 요소의 내용을 출력한다. 즉, <span class=\"blue-400\">요소가 많아지면 많아질 수록 같이 선형적으로 증가</span>하므로, 이 알고리즘의 시간 복잡도는 $O(N)$으로 표현할 수 있다.\r\n\r\n반대로 가장 기본적인 문자열 하나를 출력하는 알고리즘을 살펴보자.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 빅 오 표기 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/14/about-algorithm-chapter03/\">빅 오 표기법</a>\r\n * @since 2021.07.14 Wed 17:56:49\r\n */\r\npublic class BigO2\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"Hello world!\");\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n}\r\n```\r\n\r\n소스는 위와 같다.\r\n\r\n``` tc\r\nHello world!\r\n```\r\n\r\n결과는 위와 같다.\r\n\r\n알고리즘이라 부르기는 조금 뭐하지만, 어쨌든 이 알고리즘을 수행하는 데 <span class=\"blue-400\">필요한 단계는 무조건 하나</span>다. 즉 시간 복잡도는 $O(1)$이다.\r\n\r\n좀 더 실속있는 예제를 살펴보자.\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 소수 판별 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/14/about-algorithm-chapter03/\">빅 오 표기법</a>\r\n * @since 2021.07.14 Wed 18:01:20\r\n */\r\npublic class CheckPrime\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\twriter.write(\"소수를 판별할 값 입력 >> \");\r\n\t\twriter.flush();\r\n\t\t\r\n\t\t// 입력값\r\n\t\tint target = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\t// 소수일 경우\r\n\t\tif (isPrime(target))\r\n\t\t{\r\n\t\t\twriter.write(\"소수로 판별됨\");\r\n\t\t}\r\n\t\t\r\n\t\t// 아닐 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\twriter.write(\"소수가 아닌 것으로 판별됨\");\r\n\t\t}\r\n\t\t\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 소수 여부 반환 함수\r\n\t *\r\n\t * @param num: [int] 대상 값\r\n\t *\r\n\t * @return [boolean] 소수 여부\r\n\t */\r\n\tprivate static boolean isPrime(int num)\r\n\t{\r\n\t\tfor (int i = 2; i < num; i++)\r\n\t\t{\r\n\t\t\t// 나누어 떨어지는 수가 있을 경우\r\n\t\t\tif (num % i == 0)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n}\r\n```\r\n\r\n소스는 위와 같다.\r\n\r\n* 입력값\r\n\r\n``` tc\r\n156842101\r\n```\r\n\r\n* 출력값\r\n\r\n``` tc\r\n소수가 아닌 것으로 판별됨\r\n```\r\n\r\n이 소스는 임의의 값을 입력받아 소수인지 아닌지를 판별하는 알고리즘이다. 이 알고리즘을 통해 156842101은 소수가 아님을 쉽게 알 수 있다.\r\n\r\n해당 알고리즘은 가장 작은 소수인 2부터 입력값 `target`까지 하나씩 증가시킨 값을 `target`과 나눠서 정확히 나눠떨어지는지 아닌지를 통해 소수를 판별하는 매우 기초적인 알고리즘이다.\r\n\r\n최악의 케이스는 판별값이 소수일 경우로,  2부터 `target - 1`까지의 작업 전체를 요구하므로 총 `target - 2`의 작업이 발생한다. $N = target$일 때, -2는 그렇게 의미있는 값이 아니므로 위 알고리즘의 시간 복잡도는 $O(N)$으로 봐도 무방하다.\r\n\r\n# 마무리\r\n\r\n알고리즘을 정석적으로 공부하지 않아서, 빅 오 표기법과 같은 시간 복잡도를 제대로 이해하지 않았었다. 시간 복잡도의 개념과 그 계산 방식을 알 수 있었던 매우 의미있는 장이였다.\r\n\r\n다음 장에선 이 빅 오 표기법을 활용하여 알고리즘을 개선하는 방법에 대해 설명한다.","url":["2021-07-14-about-algorithm-chapter03","2021","07","14","about-algorithm-chapter03"]},{"header":{"title":"알고리즘이 중요한 까닭","excerpt":"IT영역에서의 알고리즘이란, 어떤 문제를 해결하는 방법을 형상화한 코드를 의미한다. 알고리즘을 잘 설계한다면, 단순한 로직으로 접근할 때보다 훨씬 빠르게 문제를 처리할 수 있다. 개발에는 정말 다양한 문제와 그보다 더욱 다양한 해결방법이 존재하기 때문에, 복잡한 문제일수록 정교한 알고리즘의 설계가 요구된다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-10T04:21:37","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","배열","정렬","이진 검색"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-10-about-algorithm-chapter02.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 2장 알고리즘이 중요한 까닭\r\n\r\nIT영역에서의 <span class=\"primary\">알고리즘</span>이란, 어떤 문제를 해결하는 방법을 형상화한 코드를 의미한다. 알고리즘을 잘 설계한다면, 단순한 로직으로 접근할 때보다 훨씬 빠르게 문제를 처리할 수 있다. <span class=\"teal-400\">개발에는 정말 다양한 문제와 그보다 더욱 다양한 해결방법이 존재하기 때문에, 복잡한 문제일수록 정교한 알고리즘의 설계가 요구</span>된다.\r\n\r\n이러한 특징으로 알고리즘은 뛰어난 문제 해결력과 수학적 사고 능력을 요한다. 때문에 많은 사람들이 어려워하는 분야 중 하나지만, 그 강력함과 효율로 인해 개발 역량의 척도를 확인하는데 사용하기도 한다. 흔히 기업에서 보는 <span class=\"teal-400\">코딩 테스트</span>가 좋은 예시다.\r\n\r\n이 장에서는 <span class=\"primary\">알고리즘</span>을 통해 검색 연산을 더욱 효과적으로 개선하는 방법에 대해 설명한다. 이전 장에서 언급했듯이, 검색 연산은 무수히 많은 읽기 연산의 모음이나 다름없다. 알고리즘이 어떻게 읽기 연산을 최적화시키는지 알아보자.\r\n\r\n## 2-1. 정렬된 배열\r\n\r\n<span class=\"primary\">정렬된 배열</span>이란, 기존의 배열에서 요소들이 특정 조건으로 정렬된 배열을 의미한다. 정렬된 배열은 그 요소들이 항상 정해진 조건에 따라 순서대로 배치된다. 이는 삽입을 할 때도 동일하다. 정렬된 배열이 항상 정렬된 상태를 유지하기 위해선 <span class=\"red-A400\">삽입 시에도 요소의 정렬에 따라 정렬을 훼손하지 않는 올바른 자리에 삽입</span>되어야 한다.\r\n\r\n기존의 배열이라면 배열의 크기가 허락하는 한, 원하는 위치 어디에서나 삽입이 가능하다. 배열에 55를 삽입할 때, 일반적인 배열은 아래처럼 삽입에 제한이 없다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125144062-a3b6c280-e157-11eb-88d6-20689d8f05b1.png\" width=\"600px\" />\r\n</p>\r\n\r\n하지만 정렬된 배열이라면 어떨까? 이번엔 배열이 오름차순으로 정렬된 배열이라고 가정해보자.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125144070-aa453a00-e157-11eb-9390-1550623a57bd.png\" width=\"600px\" />\r\n</p>\r\n\r\n정렬된 위 배열에서 55를 삽입한다면 어떨까?\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125144072-aca79400-e157-11eb-8939-cc0beb583b9b.png\" width=\"600px\" />\r\n</p>\r\n\r\n반드시 44와 94의 사이에 삽입되어야 오름차순 정렬을 유지할 수 있다. 그렇다면 우리는 여기서 정렬된 배열의 삽입은 기존의 삽입 연산에 비해 로직이 추가됨을 유추할 수 있다. 원리는 간단하다. 요소를 순차적으로 읽어서 55보다 큰 수가 나올 때까지 반복한다. 배열이 정렬되어 있으므로, 55보다 큰 수를 만나게 되면 이전의 요소는 모두 55보다 작을 것이다. 이 위치를 기준으로 삽입을 진행하면 된다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125144075-ae715780-e157-11eb-92ed-71ee06140c5f.png\" width=\"600px\" />\r\n</p>\r\n\r\n위 그림과 같이 순차적으로 요소를 검색하여 55보다 큰 요소를 찾는다. 94는 배열에서 55보다 큰 가장 작은 수다.\r\n\r\n94의 인덱스인 4번째 요소에 55를 삽입하고, 94를 한 칸 뒤로 미룬다. 이 과정을 통해 정렬된 배열의 연산을 수행할 수 있다.\r\n\r\n그렇다면 이 고생을 뭐하러 사서하는 것일까? 그 이유는 검색의 최적화에 있다. <span class=\"orange-A400\">정렬된 배열은 그 자체로 순서라는 규칙성을 지니기 때문에 이를 활용한 알고리즘 적용이 가능</span>하기 때문이다. 이를 통해 검색의 작업량을 효과적으로 줄여 더욱 빠른 검색이 가능하다.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 정렬된 배열 삽입 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/10/about-algorithm-chapter02/\">알고리즘이 중요한 까닭</a>\r\n * @since 2021.07.10 Sat 02:41:14\r\n */\r\npublic class SortedArrayInsert\r\n{\r\n\t// 배열\r\n\tprivate static final int[] ARRAY = { 6, 9, 14, 43, 94, -1, -1, -1, -1, -1 };\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 삽입할 요소\r\n\t\tint item = 55;\r\n\t\t\r\n\t\tint result = run(item);\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(result);\r\n\t\tbuilder.append(\"번 째 인덱스에 \");\r\n\t\tbuilder.append(item);\r\n\t\tbuilder.append(\" 삽입: \");\r\n\t\tbuilder.append(Arrays.toString(ARRAY));\r\n\t\t\r\n\t\twriter.write(builder.toString());\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 집합 배열 삽입 및 삽입된 인덱스 반환 함수\r\n\t *\r\n\t * @param item: [int] 삽입할 요소\r\n\t *\r\n\t * @return [int] 삽입된 인덱스\r\n\t */\r\n\tprivate static int run(int item)\r\n\t{\r\n\t\tint result = find(item);\r\n\t\t\r\n\t\tinsert(result, item);\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 요소 검색 및 인덱스 반환 함수\r\n\t *\r\n\t * @param target: [int] 목표 숫자\r\n\t *\r\n\t * @return [int] 인덱스\r\n\t */\r\n\tprivate static int find(int target)\r\n\t{\r\n\t\t// 인덱스\r\n\t\tint result = -1;\r\n\t\t\r\n\t\tfor (int i = 0; i < ARRAY.length; i++)\r\n\t\t{\r\n\t\t\t// 목표 숫자보다 배열의 값이 클 경우\r\n\t\t\tif (target < ARRAY[i])\r\n\t\t\t{\r\n\t\t\t\tresult = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 배열 삽입 함수\r\n\t *\r\n\t * @param index: [int] 삽입 위치\r\n\t * @param item: [int] 삽입할 요소\r\n\t */\r\n\t@SuppressWarnings(\"ManualArrayCopy\")\r\n\tprivate static void insert(int index, int item)\r\n\t{\r\n\t\t// 배열의 값이 -1(빈 요소)가 아닐 경우\r\n\t\tif (ARRAY[index] != -1)\r\n\t\t{\r\n\t\t\tfor (int i = ARRAY.length - 1; i > index; i--)\r\n\t\t\t{\r\n\t\t\t\tARRAY[i] = ARRAY[i - 1];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tARRAY[index] = item;\r\n\t}\r\n}\r\n```\r\n\r\n``` tc\r\n4번 째 인덱스에 55 삽입: [6, 9, 14, 43, 55, 94, -1, -1, -1, -1]\r\n```\r\n\r\n`insert` 함수는 이전 장에 나왔던 함수와 동일하지만, `find`의 경우 조금 달라졌다. `target == ARRAY[i]`로 동일한 값을 찾는 것이 아니라, `target < ARRAY[i]`로 삽입할 요소보다 큰 값을 찾도록 변경됐다. `run` 함수는 이를 적절히 구동하여 삽입된 인덱스를 반환한다.\r\n\r\n> **JAVA의 정렬 함수**  \r\n> 자바는 `Arrays.sort()`라는 함수가 제공되며, 인수로 정렬할 배열을 전달한다. 기본적으로 오름차순으로 정렬되며, 본인이 직접 정렬 함수를 오버라이딩함으로써 자신만의 조건으로 정렬되도록 설계할 수도 있다.\r\n\r\n## 2-3. 이진 검색\r\n\r\n우리가 앞에서 배열을 정렬한 이유가 바로 이 것이다. <span class=\"primary\">이진 검색</span>이라는 알고리즘을 적용하면 검색의 속도를 상당부분 개선할 수 있다. 심지어 이진 검색은 알고리즘 축에서는 매우 쉬운 편에 속한다. 심지어 우리는 이미 다른 형태로 이진 검색이라는 알고리즘을 접한 적이 있다.\r\n\r\n어렸을 때나, 혹은 술자리에서 Up & Down이라는 게임을 해본적이 있을 것이다. 진행자가 임의의 구간에 해당하는 임의의 수 하나를 머릿속으로 생각하면, 참가자들이 이 수를 맞추는 것이다. 참가자가 수를 말하면 진행자는 그 수가 자신의 수보다 큰 지, 작은 지 알려준다. 이걸 누군가 맞출 때까지 반복한다. 이진 검색의 원리는 이와 정확히 일치한다.\r\n\r\n<span class=\"red-A400\">이진 검색은 그 특성 상 정렬된 배열에서만 가능</span>하다. 1 ~ 100의 구간으로 순차적으로 정렬된 배열이 있다고 가정해보자. 찾아야 할 수가 68일 때, 이진 검색은 아래와 같이 이루어진다.\r\n\r\n1. 1과 100의 중간인 50과 비교한다. (작업 +1)\r\n2. 50은 68보다 작으로 51 ~ 100의 구간을 검색한다.\r\n3. 51과 100의 중간인 75와 비교한다. (작업 +1)\r\n4. 75는 68보다 크므로 51 ~ 74의 구간을 검색한다.\r\n5. 51과 74의 중간인 62와 비교한다. (작업 +1)\r\n6. 62는 68보다 작으므로 63 ~ 74의 구간을 검색한다.\r\n7. 63과 74의 중간인 68과 비교한다. (작업 +1)\r\n8. 검색이 종료된다.\r\n\r\n만약 순차적으로 검색했다면 1 부터 68까지 총 68번의 작업이 발생할 것을 단 4번의 작업으로 검색을 완료했다. 간단한 알고리즘을 적용하는 것으로도 작업량이 17배 줄어든 것이다. 지금은 구간이 작지만, 구간의 끝이 만 단위가 넘어간다면 검색하려는 숫자의 위치에 따라 작업량이 기하급수적으로 감소한다.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 이진 검색 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/10/about-algorithm-chapter02/\">알고리즘이 중요한 까닭</a>\r\n * @since 2021.07.10 Sat 03:24:26\r\n */\r\npublic class BinarySearch\r\n{\r\n\t// 배열 최대 크기\r\n\tprivate static final int MAX = 100;\r\n\t\r\n\t// 배열\r\n\tprivate static final int[] ARRAY = initArray(MAX);\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 검색 대상\r\n\t\tint target = 68;\r\n\t\t\r\n\t\tint result = binarySearch(target);\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(target);\r\n\t\tbuilder.append(\"을 탐색하는데 필요한 프로세스: \");\r\n\t\tbuilder.append(result);\r\n\t\t\r\n\t\twriter.write(builder.toString());\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 배열 초기화 함수\r\n\t *\r\n\t * @param max: [int] 배열 최대 크기\r\n\t *\r\n\t * @return [int[]] 1 ~ max가 할당된 정수 배열\r\n\t */\r\n\tprivate static int[] initArray(int max)\r\n\t{\r\n\t\tint[] temp = new int[max];\r\n\t\t\r\n\t\tfor (int i = 0; i < max; i++)\r\n\t\t{\r\n\t\t\ttemp[i] = i + 1;\r\n\t\t}\r\n\t\t\r\n\t\treturn temp;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 이진 검색 및 프로세스 소요량 반환 함수\r\n\t *\r\n\t * @param target: [int] 검색 대상\r\n\t *\r\n\t * @return [int] 프로세스 소요량\r\n\t */\r\n\tprivate static int binarySearch(int target)\r\n\t{\r\n\t\t// 프로세스 소요량\r\n\t\tint count = 0;\r\n\t\t\r\n\t\t// 중간값\r\n\t\tint mid = -1;\r\n\t\t\r\n\t\t// 구간 시작값\r\n\t\tint start = 1;\r\n\t\t\r\n\t\t// 구간 끝값\r\n\t\tint end = ARRAY.length;\r\n\t\t\r\n\t\twhile (target != mid)\r\n\t\t{\r\n\t\t\tmid = (end + start) / 2;\r\n\t\t\t\r\n\t\t\t// 목표가 중간값보다 클 경우\r\n\t\t\tif (target > mid)\r\n\t\t\t{\r\n\t\t\t\tstart = mid + 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 목표가 중간값보다 작거나 같을 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tend = mid - 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\t\r\n\t\treturn count;\r\n\t}\r\n}\r\n```\r\n\r\n이진 검색을 구현한 소스는 위와 같다. 눈여겨 볼 부분은 `binarySearch` 함수다. 시작값 `start`는 1로 초기화되고, 끝값 `max`는 배열의 크기와 동일하다.\r\n\r\n`mid`를 계산하여 `target`과 크기비교를 한다. `target`이 더 클 경우, 중간값을 기준으로 윗 구간이므로 `start`를 `mid + 1`로 보정한다. 반대로 `target`이 더 작을 경우, 중간값을 기준으로 아랫 구간이므로 `end`를 `mid - 1`로 보정한다. 검색 대상값인 `target`과 중간값 `mid`가 동일할 때까지 알고리즘을 반복한다.\r\n\r\n1 ~ 100까지 차례대로 배치되어 있으므로, 1은 `ARRAY[0]`, 43은 `ARRAY[42]`로 값 자체로 인덱스나 다름없기 때문에 인덱스는 따로 구하지 않는다.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 이진 검색 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/10/about-algorithm-chapter02/\">알고리즘이 중요한 까닭</a>\r\n * @since 2021.07.10 Sat 03:24:26\r\n */\r\npublic class BinarySearch\r\n{\r\n\t// 배열 최대 크기\r\n\tprivate static final int MAX = 100;\r\n\t\r\n\t// 배열\r\n\tprivate static final int[] ARRAY = initArray(MAX);\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 검색 대상\r\n\t\tint target = 68;\r\n\t\t\r\n\t\tint result = binarySearch(target);\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(target);\r\n\t\tbuilder.append(\"을 탐색하는데 필요한 프로세스: \");\r\n\t\tbuilder.append(result);\r\n\t\t\r\n\t\twriter.write(builder.toString());\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 배열 초기화 함수\r\n\t *\r\n\t * @param max: [int] 배열 최대 크기\r\n\t *\r\n\t * @return [int[]] 1 ~ max가 할당된 정수 배열\r\n\t */\r\n\tprivate static int[] initArray(int max)\r\n\t{\r\n\t\tint[] temp = new int[max];\r\n\t\t\r\n\t\tfor (int i = 0; i < max; i++)\r\n\t\t{\r\n\t\t\ttemp[i] = i + 1;\r\n\t\t}\r\n\t\t\r\n\t\treturn temp;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 이진 검색 및 프로세스 소요량 반환 함수\r\n\t *\r\n\t * @param target: [int] 검색 대상\r\n\t *\r\n\t * @return [int] 프로세스 소요량\r\n\t */\r\n\tprivate static int binarySearch(int target)\r\n\t{\r\n\t\t// 프로세스 소요량\r\n\t\tint count = 0;\r\n\t\t\r\n\t\t// 중간값\r\n\t\tint mid = -1;\r\n\t\t\r\n\t\t// 구간 시작값\r\n\t\tint start = 1;\r\n\t\t\r\n\t\t// 구간 끝값\r\n\t\tint end = ARRAY.length;\r\n\t\t\r\n\t\twhile (target != mid)\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\t\r\n\t\t\t// 목표가 시간 구간 혹은 끝 구간과 일치할 경우\r\n\t\t\tif (target == start || target == end)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmid = (end + start) / 2;\r\n\t\t\t\r\n\t\t\t// 목표가 중간값보다 클 경우\r\n\t\t\tif (target > mid)\r\n\t\t\t{\r\n\t\t\t\tstart = mid + 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 목표가 중간값보다 작거나 같을 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tend = mid - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn count;\r\n\t}\r\n}\r\n```\r\n\r\n이진 검색의 단점이 있는데, 1 ~ 100의 구간이 있다고 가정하면, 1이나 100과 같은 <span class=\"orange-A400\">구간의 시작과 끝을 검색하는데 시간이 매우 오래 걸린다.</span> 이는 이진 검색이 중간값을 기준으로 검색한다는 특징으로 인한 단점이다. 위의 소스는 구간의 시작과 끝도 비교함으로써 이진 검색을 강화한 소스다.\r\n\r\n``` java\r\n// 목표가 시간 구간 혹은 끝 구간과 일치할 경우\r\nif (target == start || target == end)\r\n{\r\n\tbreak;\r\n}\r\n```\r\n\r\n눈여겨 볼 부분은 `binarySearch` 함수의 해당 부분이다. 기존에 없던 `start`와 `end`의 비교 로직이 추가되어, <span class=\"orange-A400\">구간의 시작과 끝이 목표일 경우 더욱 빠르게 검색</span>할 수 있도록 보정한 것이다.\r\n\r\n| 구분  | 보정 전 | 보정 후 |\r\n| :---: | :-----: | :-----: |\r\n|   1   |    6    |    1    |\r\n|  51   |    6    |    2    |\r\n|  100  |    7    |    1    |\r\n\r\n## 2-4. 이진 검색 대 선형 검색\r\n\r\n1부터 순차적으로 하나하나 검색하는 알고리즘을 <span class=\"primary\">선형 검색</span>, 구간의 중간값을 기준으로 검색하는 알고리즘을 <span class=\"primary\">이진 검색</span>이라 한다. 우리가 2장까지 진행하면서, 배열의 일반적인 검색과 이진 검색에 대해 설계하고 차이점을 비교했다.\r\n\r\n선형 검색의 경우 요소의 갯수 $N$이 늘어나면 늘어날수록 예상되는 최대 작업량도 $N$개로 비례하여 늘어난다. 이에 비해 이진 검색의 경우 $N = 10,000$일 때, 책에 의하면 최대 작업량이 13이라고 한다. $N = 1,000,000$이면 작업량은 20으로, 선형 검색의 작업량이 1,000,000임을 감안하면 <span class=\"green-A400\">데이터가 많아질 수록 이진 검색으로 절약할 수 있는 기대 비용이 더욱 큼</span>을 알 수 있다.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 검색 퍼포먼스 비교 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/10/about-algorithm-chapter02/\">알고리즘이 중요한 까닭</a>\r\n * @since 2021.07.10 Sat 04:21:37\r\n */\r\npublic class SearchCompare\r\n{\r\n\t// 배열 최대 크기\r\n\tprivate static final int MAX = 100000000;\r\n\t\r\n\t// 배열\r\n\tprivate static final int[] ARRAY = initArray(MAX);\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 검색 대상\r\n\t\tint target = 86421478;\r\n\t\t\r\n\t\tlong tic = System.nanoTime();\r\n\t\t\r\n\t\tint linearResult = find(target);\r\n\t\t\r\n\t\tlong toc1 = System.nanoTime() - tic;\r\n\t\t\r\n\t\ttic = System.nanoTime();\r\n\t\t\r\n\t\tint binaryResult = binarySearch(target);\r\n\t\t\r\n\t\tlong toc2 = System.nanoTime() - tic;\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(target);\r\n\t\tbuilder.append(\"을 탐색하는데 소요된 선형 검색 프로세스: \");\r\n\t\tbuilder.append(linearResult);\r\n\t\tbuilder.append(\"(\").append(toc1).append(\"ns)\\n\");\r\n\t\tbuilder.append(target);\r\n\t\tbuilder.append(\"을 탐색하는데 소요된 이진 검색 프로세스: \");\r\n\t\tbuilder.append(binaryResult);\r\n\t\tbuilder.append(\"(\").append(toc2).append(\"ns)\\n\\n\");\r\n\t\tbuilder.append(\"이진 검색이 약 \").append(toc1 / toc2).append(\"배 더 빠릅니다.\");\r\n\t\t\r\n\t\twriter.write(builder.toString());\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 배열 초기화 함수\r\n\t *\r\n\t * @param max: [int] 배열 최대 크기\r\n\t *\r\n\t * @return [int[]] 1 ~ max가 할당된 정수 배열\r\n\t */\r\n\tprivate static int[] initArray(int max)\r\n\t{\r\n\t\tint[] temp = new int[max];\r\n\t\t\r\n\t\tfor (int i = 0; i < max; i++)\r\n\t\t{\r\n\t\t\ttemp[i] = i + 1;\r\n\t\t}\r\n\t\t\r\n\t\treturn temp;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 이진 검색 및 프로세스 소요량 반환 함수\r\n\t *\r\n\t * @param target: [int] 검색 대상\r\n\t *\r\n\t * @return [int] 프로세스 소요량\r\n\t */\r\n\tprivate static int binarySearch(int target)\r\n\t{\r\n\t\t// 프로세스 소요량\r\n\t\tint count = 0;\r\n\t\t\r\n\t\t// 중간값\r\n\t\tint mid = -1;\r\n\t\t\r\n\t\t// 구간 시작값\r\n\t\tint start = 1;\r\n\t\t\r\n\t\t// 구간 끝값\r\n\t\tint end = ARRAY.length;\r\n\t\t\r\n\t\twhile (target != mid)\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\t\r\n\t\t\t// 목표가 시간 구간 혹은 끝 구간과 일치할 경우\r\n\t\t\tif (target == start || target == end)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmid = (end + start) / 2;\r\n\t\t\t\r\n\t\t\t// 목표가 중간값보다 클 경우\r\n\t\t\tif (target > mid)\r\n\t\t\t{\r\n\t\t\t\tstart = mid + 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 목표가 중간값보다 작거나 같을 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tend = mid - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn count;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 요소 검색 및 인덱스 반환 함수\r\n\t *\r\n\t * @param target: [int] 목표 숫자\r\n\t *\r\n\t * @return [int] 인덱스\r\n\t */\r\n\tprivate static int find(int target)\r\n\t{\r\n\t\t// 인덱스\r\n\t\tint result = -1;\r\n\t\t\r\n\t\tfor (int i = 0; i < ARRAY.length; i++)\r\n\t\t{\r\n\t\t\t// 목표 숫자와 배열의 값이 일치할 경우\r\n\t\t\tif (target == ARRAY[i])\r\n\t\t\t{\r\n\t\t\t\tresult = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n}\r\n```\r\n\r\n``` tc\r\n86421478을 탐색하는데 소요된 선형 검색 프로세스: 86421477(26936600ns)\r\n86421478을 탐색하는데 소요된 이진 검색 프로세스: 26(5100ns)\r\n\r\n이진 검색이 약 5281배 더 빠릅니다.\r\n```\r\n\r\n위 소스는 선형 검색과 이진 검색을 통합해 퍼포먼스를 비교할 수 있는 소스다. 100,000,000(1억)의 구간에서 임의의 수 `target`을 검색한다. 해당 소스에서는 86,421,478으로 지정했다.\r\n\r\n|    구분     | 선형 검색  | 이진 검색 |    차이    |\r\n| :---------: | :--------: | :-------: | :--------: |\r\n| 프로세스 수 | 86,421,477 |    26     |     -      |\r\n|  테스트 1   | $2.442ms$  |  $5.2us$  | 약 4,699배 |\r\n|  테스트 2   | $2.463ms$  |  $5.3us$  | 약 4,648배 |\r\n|  테스트 3   | $2.434ms$  |  $5.5us$  | 약 4,424배 |\r\n|  테스트 4   | $2.536ms$  |  $5.3us$  | 약 4,785배 |\r\n|  테스트 5   | $2.383ms$  |   $5us$   | 약 4,766배 |\r\n|  테스트 6   | $2.509ms$  |  $5.1us$  | 약 4,919배 |\r\n|  테스트 7   | $2.487ms$  |  $5.4us$  | 약 4,605배 |\r\n|  테스트 8   | $2.394ms$  |  $4.5us$  | 약 5,320배 |\r\n|  테스트 9   | $2.666ms$  |  $5.3us$  | 약 5,030배 |\r\n|  테스트 10  | $2.352ms$  |  $5.3us$  | 약 4,438배 |\r\n\r\n<small class=\"red-400\">※ 위 테스트는 CPU i7-10700K, RAM 32GB에서 테스트한 결과물로, 구동 환경에 따라 연산 결과가 달라질 수 있음</small>\r\n\r\n이진검색이 선형검색에 비해 약 5000배 까지도 차이가 남을 확인할 수 있다. 단위가 $ms$, $us$니까 사람 입장에선 그게 그거지만, 기계 입장에선 이진 검색으로 5000번 수행할 동안 선형 검색은 한 번 수행하는 셈이니 실로 어마어마한 차이다.\r\n\r\n# 마무리\r\n\r\n이 장에서는 알고리즘을 적용한 이진 검색을 구현하고 이를 기존의 선형 검색과 비교함으로써 알고리즘의 강력함을 체감할 수 있었다.\r\n\r\n현업에서 일하면서 알고리즘이 강력하다는 건 알고있었지만, 이렇게 간단하게 구현해서 직접 비교해보니 역시나 알고리즘이 중요한 이유를 알 것 같다.\r\n\r\n원래 오늘같이 내일 쉬는 날이면 새벽 네 다섯시까지 공부하긴 하는데, 포스팅 때문에 풀타임으로 집중하다 보니 유난히 더 피곤하다....","url":["2021-07-10-about-algorithm-chapter02","2021","07","10","about-algorithm-chapter02"]},{"header":{"title":"자료구조가 중요한 까닭","excerpt":"혼자 공부하는건 다 좋은데 효율이 떨어진다. 컴퓨터 앞에 앉아있는 시간은 거의 대부분이라 할 수 있지만, 순수하게 공부하는 시간이 얼마나 되냐고 물어보면 눈치보기 바쁘다. 마침 블로그도 새로 개발해서 쓰고 있고, 공부도 할 겸 적절한 스터디에 하나 참가했다. 노트북 팔아버린 뒤로 스터디에 가입하고 싶어도 할 수가 없었던 차에, 노트북 없이도 할 수 있다는 말에 바로 들어갔다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-10T01:30:56","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","배열"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-10-about-algorithm-chapter01.md","content":"\r\n<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\r\n\r\n# 개요\r\n\r\n혼자 공부하는건 다 좋은데 효율이 떨어진다. 컴퓨터 앞에 앉아있는 시간은 거의 대부분이라 할 수 있지만, 순수하게 공부하는 시간이 얼마나 되냐고 물어보면 눈치보기 바쁘다.\r\n\r\n마침 블로그도 새로 개발해서 쓰고 있고, 공부도 할 겸 적절한 스터디에 하나 참가했다. 노트북 팔아버린 뒤로 스터디에 가입하고 싶어도 할 수가 없었던 차에, 노트북 없이도 할 수 있다는 말에 바로 들어갔다.\r\n\r\n비전공자가 자료구조같은 기초지식이 항상 아킬레스건이였다. 특히 백준 풀 때 뼈저리게 느끼지만. 이 스터디가 끝나면 자료구조에 대해 기초정도는 알 수 있었음 한다.\r\n\r\n언어는 가급적 <span class=\"orange-400\">JAVA</span>로 진행한다.\r\n\r\n# 1장 자료 구조가 중요한 까닭\r\n\r\n이 장에서는 배열의 기초와 그에 해당하는 연산들에 대한 내용을 소개하면서 사용자에게 배열에 관한 러프한 개념을 설명해준다.\r\n\r\n배열과 <span class=\"primary\">집합</span>이라는 개념에 대한 내용을 기술한다. 저자에 의하면 챕터가 진행될 수록 연산 성능에 대한 점진적인 비교를 한다고 하니, 알고리즘 적용에 따른 성능 향상의 차이를 확인해 볼 수 있을 것이다.\r\n\r\n## 1-1. 배열: 기초 자료 구조\r\n\r\n<span class=\"primary\">배열</span>은 거의 모든 언어에 존재하는 매우 기초적인 자료구조다.\r\n\r\nJAVA에는 `int`, `boolean`과 같은 <span class=\"green-A400\">기본형 타입(Primitive Type)</span>과 `String`, `HashMap`과 같은 <span class=\"green-A400\">참조형 타입(Reference Type)</span>으로 구분된다.\r\n\r\n이와 같은 데이터들은 각각 단일로 사용할 수도 있지만, 다수의 데이터를 동시에 다뤄야하는 경우가 심심치않게 발생한다. 이러한 데이터들이 모여 하나의 배열이 될 수 있다.\r\n\r\n`String` 데이터가 모여 `String[]`이라는 <span class=\"primary\">문자열 배열</span>이 되며, `int` 데이터가 모여 `int[]`라는 <span class=\"primary\">정수 배열</span>이 된다.\r\n\r\nJAVA에서의 배열은 이처럼 특정한 데이터가 여러개 모인 자료 구조이며, 반드시 <span class=\"red-A400\">지정된 데이터만을 요소로 받아들일 수 있다.</span>\r\n\r\n예를 들어, `boolean`은 `true`, `false`로 이루어진 데이터 형식이다. `boolean[]`은 `boolean` 데이터가 여러개 모인 배열이며, 이렇게 선언된 배열은 `boolean`에 해당하는 `true`, `false`만 받아들일 수 있다. 즉, 1이나 \"A\"와 같은 문자열은 배열에 삽입할 수 없다.\r\n\r\n또한 <span class=\"red-A400\">배열은 고정 길이를 가진다.</span> 한 번 할당된 배열의 길이는 재할당되지 않는 이상 절대로 길이가 변경되지 않는다.\r\n\r\n> **⚠잠깐! 이건 어디까지나 JAVA 얘기에요!**  \r\n> 지금 설명하는 배열의 특징은 JAVA에 국한되는 예시다. 당장 JavaScript만 봐도, 배열에 별다른 제약이 존재하지 않는다. 길이는 필요에 따라 증축할 수 있으며, 요소에 아무 데이터 타입이나 할당 가능하다.\r\n\r\nJAVA에서 배열은 <span class=\"green-A400\">참조형 타입(Reference Type)</span>에 해당한다.\r\n\r\n배열에서 수행 가능한 연산에는 4가지가 존재한다.\r\n\r\n* 읽기\r\n* 검색\r\n* 삽입\r\n* 삭제\r\n\r\n위 4가지 연산은 배열의 가장 기초적인 연산이다. 이 4가지 연산을 JAVA로 직접 구현하며 어떤 단계를 거치는지 확인해보자.\r\n\r\n## 1-2 읽기\r\n\r\n<span class=\"primary\">읽기</span>연산은 배열의 특정 인덱스에 어떠한 값이 있는지 읽는 연산이다.\r\n\r\n대부분 모든 언어의 런타임에서 할당되는 데이터들은 메모리에 기록된다. 많은 양의 데이터가 할당될수록 프로그램이 요구하는 메모리, 즉 RAM의 요구사항이 높아진다. 배틀그라운드나, 스타크래프트2와 같은 게임들은 많은 양의 메모리를 요구한다. 그 만큼 기록되고 처리되는 데이터의 양이 매우 방대하기 때문이다.\r\n\r\n데이터가 메모리에 할당될 때, 가용한 임의의 메모리 주소에 저장된다. 해당 메모리 주소에 원하는 값이 존재할 것이므로, 값을 호출하기 위해선 해당 값이 저장된 메모리 주소에 접근하여 값을 조회한다. JAVA를 포함한 대부분의 언어들은 이러한 과정이 개발자에게까지 노출되지 않는 내부의 영역에 존재한다. 이걸 직접 다루는 것이 C언어의 그 악명높은 포인터다.\r\n\r\nJAVA의 메모리는 JVM(Java Virtual Machine, 자바 가상머신)이 관리한다. JVM의 메모리 구조부터 시작하면 한도끝도 없이 브랜치가 뻗어나가니, 핵심만 찝어보자.\r\n\r\n위에서 언급했듯이, 배열은 참조형 타입이며, 이 참조형 타입은 JVM의 Heap 영역에서 관리한다. 메모리를 간략하게 도식화하면 아래와 같이 표현할 수 있다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111131-7dc1fb80-e120-11eb-8a75-0cf615c9c020.png\" width=\"600px\" />\r\n</p>\r\n\r\n네모 한 칸에 하나의 데이터를 할당할 수 있다고 해보자. 만약 6, 43, 14, 9, 94 5개의 정수로 이루어진 정수형 배열을 메모리에 할당한다고 가정하자. JVM이 해당 배열의 크기를 메모리에 기록할 수 있는지 확인하고, 가능하다면 기록한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111294-b2ce4e00-e120-11eb-8a6e-d5fc241db0ee.png\" width=\"600px\" />\r\n</p>\r\n\r\n위 처럼 메모리 상의 적절한 위치에 배열이 기록될 것이다. 여기서 배열의 4번째 데이터를 읽어보자.\r\n\r\n프로그램은 해당 배열의 주소를 알고있다. 자기가 직접 할당했으니 당연하다. 배열의 주소를 0x0404라고 가정하면 아래와 같이 도식할 수 있다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111152-86b2cd00-e120-11eb-9abe-477f4ec60f29.png\" width=\"600px\" />\r\n</p>\r\n\r\n0x0404에서 4번째 데이터를 호출하므로 0x0407의 데이터를 조회하면 된다.\r\n\r\n> **😒아니 4번째 데이터라면서요...**  \r\n> 거의 대부분의 컴퓨터 언어는 시작 인덱스를 0으로 지정한다. 그 이유는 메모리에 있는데, 메모리를 기준으로 배열의 첫 번째 데이터는 주소의 이동이 없다.  \r\n> 만약 주소가 0x0101이라면, 첫 번째 데이터는 0x0101이 되기 때문에 주소의 이동이 없으므로 0번째 데이터라고 정의하는 것이다. 이는 관점의 차이로, 초대 프로그램의 언어가 이와 같은 방식을 차용했다. 이후 이를 기반으로 생겨난 수 많은 언어들이 이 영향을 받았다.\r\n\r\n이처럼 배열의 주소에서 해당 인덱스만큼 주소에 더해 데이터를 읽는 것이므로, 동작은 아래와 같다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111156-887c9080-e120-11eb-94db-46545b8a5e9c.png\" width=\"600px\" />\r\n</p>\r\n\r\n주소 0x0404를 시작으로 4번째 데이터인 0x0407인 주소에 접근한다. 배열의 주소와 배열의 인덱스를 알고 있으므로 별도의 연산 없이 바로 접근 가능하다. 이로써 0x0407의 값 9에 접근할 수 있다.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 배열 읽기 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/10/about-algorithm-chapter01/\">자료구조가 중요한 까닭</a>\r\n * @since 2021.07.09 Fri 22:53:39\r\n */\r\npublic class ArrayRead\r\n{\r\n\t// 배열\r\n\tprivate static final int[] ARRAY = { 6, 43, 14, 9, 94 };\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 읽을 인덱스\r\n\t\tint index = 4;\r\n\t\t\r\n\t\tint result = read(index);\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(\"4번 째 아이템: \");\r\n\t\tbuilder.append(result);\r\n\t\t\r\n\t\twriter.write(builder.toString());\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 배열 읽기 결과 반환 함수\r\n\t *\r\n\t * @param index: [int] 인덱스\r\n\t *\r\n\t * @return [int] 인덱스에 해당하는 값\r\n\t */\r\n\tprivate static int read(int index)\r\n\t{\r\n\t\treturn ARRAY[index];\r\n\t}\r\n}\r\n```\r\n\r\n``` tc\r\n4번 째 아이템: 9\r\n```\r\n\r\nJAVA 소스는 위와 같다. 배열 `array`을 선언하고, `array[3]`을 호출하면 배열의 4번째 값인 94가 변수 `four`에 할당된다. 목표에 바로 접근하므로 작업에 필요한 단계는 단 하나다.\r\n\r\n## 1-3. 검색\r\n\r\n이처럼 주소의 값이나 인덱스를 정확히 알고 있다면, 별도의 연산 없이 바로 해당하는 값을 갖고올 수 있다. 하지만 실제로 배열을 다루다보면 꼭 이렇게 간단한 케이스만 있지는 않다.\r\n\r\n우리가 구조를 알지 못하는 배열이 있다고 가정할 때, 해당 배열에서 우리가 원하는 값을 찾아야할 경우가 적지않게 발생한다. 이 경우 원하는 값의 인덱스를 가지고 있지도 않으며, 심지어 배열 내부에 원하는 값이 존재하는지조차 알 수 없다. 이 경우 <span class=\"primary\">검색</span>연산을 통해 배열의 값을 찾아야 한다.\r\n\r\n위에서 선언했던 배열을 다시 가져와보자.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111152-86b2cd00-e120-11eb-9abe-477f4ec60f29.png\" width=\"600px\" />\r\n</p>\r\n\r\n이번엔 우리가 이 배열에 대한 정확한 정보를 가지고있지 않다고 가정해보자. 현재 우리는 이 배열의 어떤 인덱스에 어떤 값이 있는지 전혀 모르는 상태다.\r\n\r\n이 상황에서 14라는 값을 검색해보자.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111164-8a465400-e120-11eb-9432-8c127bfed9b2.png\" width=\"600px\" />\r\n</p>\r\n\r\n검색은 읽기 작업의 반복이라고 봐도 무방하다. 위 그림은 이러한 검색의 특성을 여실히 보여준다. 목표값인 14를 찾기 위해 `array[0]` 부터 순차적으로 읽음으로써 14를 찾는다.\r\n\r\n만약 어떠한 방법으로든 읽기과정을 줄이면서도 정상적인 검색이 가능하다면 소요시간이 효과적으로 감소할 것이다.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 배열 검색 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/10/about-algorithm-chapter01/\">자료구조가 중요한 까닭</a>\r\n * @since 2021.07.09 Fri 23:47:03\r\n */\r\npublic class ArrayFind\r\n{\r\n\tprivate static final int[] ARRAY = { 6, 43, 14, 9, 94 };\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 목표 숫자\r\n\t\tint target = 14;\r\n\t\t\r\n\t\tint result = find(target);\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(target);\r\n\t\tbuilder.append(\"이 포함된 인덱스: \");\r\n\t\tbuilder.append(result);\r\n\t\t\r\n\t\twriter.write(builder.toString());\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 요소 검색 및 인덱스 반환 함수\r\n\t *\r\n\t * @param target: [int] 목표 숫자\r\n\t *\r\n\t * @return [int] 인덱스\r\n\t */\r\n\tprivate static int find(int target)\r\n\t{\r\n\t\t// 인덱스\r\n\t\tint result = -1;\r\n\t\t\r\n\t\tfor (int i = 0; i < ARRAY.length; i++)\r\n\t\t{\r\n\t\t\t// 목표 숫자와 배열의 값이 일치할 경우\r\n\t\t\tif (target == ARRAY[i])\r\n\t\t\t{\r\n\t\t\t\tresult = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n}\r\n```\r\n\r\n``` tc\r\n14이 포함된 인덱스: 2\r\n```\r\n\r\n하지만 위는 가장 기초적인 검색 알고리즘을 적용한 것이다. 3번째 요소를 찾기 위해선 3개 과정이 필요하고, 5484번째 요소를 찾기 위해선 5484개 과정이 필요하다.\r\n\r\n그러나, 요소가 맨 끝에 있거나, 불행히도 배열 내에 존재하지 않을 경우 배열 전체를 검색해야할 수도 있다. 즉 배열에 $N$개의 요소가 있다면, 검색의 최대 작업 갯수는 $N$개가 된다.\r\n\r\n## 1-4. 삽입\r\n\r\n배열에 새로운 요소를 넣는 작업을 <span class=\"primary\">삽입</span> 연산이라 한다. 배열에서 55를 삽입하는 과정을 통해 삽입 연산에 대해 알아보자.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111179-8d414480-e120-11eb-9c36-965d4506fd8c.png\" width=\"600px\" />\r\n</p>\r\n\r\n런타임 시 배열을 할당했다면 우리는 배열의 주소를 알고 있을 것이다. 배열의 맨 끝에 요소를 추가한다면 그냥 이어붙이면 된다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111188-8fa39e80-e120-11eb-8576-aee6d30ae3a7.png\" width=\"600px\" />\r\n</p>\r\n\r\n하지만 배열의 중간에 삽입한다면 이야기가 조금 달라진다. 삽입하려는 위치 이후의 요소를 한 칸씩 뒤로 미루고, 해당 위치에 값을 삽입하게 된다.\r\n\r\n최악의 경우, 배열의 가장 첫 인덱스인 0의 위치에 요소를 삽입한다면 모든 배열의 요소를 한 칸씩 뒤로 미룬뒤 55를 삽입해야한다. 즉, 배열에 $N$개의 요소가 있을 경우 삽입에 필요한 작업량은 $N$개의 요소를 하나씩 이동하는 작업 $N$개, 해당 인덱스에 요소를 삽입하는 작업 1개로 최대 $N + 1$의 작업량이 발생할 수 있다.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 배열 삽입 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/10/about-algorithm-chapter01/\">자료구조가 중요한 까닭</a>\r\n * @since 2021.07.09 Sat 00:27:47\r\n */\r\npublic class ArrayInsert\r\n{\r\n\t// 배열\r\n\tprivate static final int[] ARRAY = { 6, 43, 14, 9, 94, -1, -1, -1, -1, -1 };\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 삽입할 인덱스\r\n\t\tint index = 2;\r\n\t\t\r\n\t\t// 삽입할 요소\r\n\t\tint item = 55;\r\n\t\t\r\n\t\tinsert(index, item);\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(index);\r\n\t\tbuilder.append(\"번 째 요소에 \");\r\n\t\tbuilder.append(item);\r\n\t\tbuilder.append(\" 삽입: \");\r\n\t\tbuilder.append(Arrays.toString(ARRAY));\r\n\t\t\r\n\t\twriter.write(builder.toString());\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 배열 삽입 함수\r\n\t *\r\n\t * @param index: [int] 삽입 위치\r\n\t * @param item: [int] 삽입할 요소\r\n\t */\r\n\t@SuppressWarnings(\"ManualArrayCopy\")\r\n\tprivate static void insert(int index, int item)\r\n\t{\r\n\t\t// 배열의 값이 -1(빈 요소)가 아닐 경우\r\n\t\tif (ARRAY[index] != -1)\r\n\t\t{\r\n\t\t\tfor (int i = ARRAY.length - 1; i > index; i--)\r\n\t\t\t{\r\n\t\t\t\tARRAY[i] = ARRAY[i - 1];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tARRAY[index] = item;\r\n\t}\r\n}\r\n```\r\n\r\n``` tc\r\n2번 째 요소에 55 삽입: [6, 43, 55, 14, 9, 94, -1, -1, -1, -1]\r\n```\r\n\r\n삽입 소스는 위와 같다.\r\n\r\n> **@SuppressWarnings는 뭔가요?**  \r\n> Eclipse, IntelliJ와 같은 IDE는 코드를 분석하는 과정에서 오류 또는 경고를 개발자에게 알려줌으로써 잠재적 위험을 제거할 수 있도록 유도한다. 간혹 의도된 동작임에도, IDE의 최적화 설정과 맞지 않아 경고를 띄우기도 한다. 이 경우 @SuppressWarnings 애노테이션을 쓰면 해당 경고를 무시할 수 있다. @@SuppressWarnings를 지워도 소스 동작엔 아무런 문제가 없다.\r\n\r\n위에서도 언급했지만, JAVA의 배열은 고정길이를 가진다. 삽입 연산을 하기 위해선 필연적으로 현재 배열의 크기보다 하나 이상 커야하므로, 이전과 달이 총 길이가 10인 배열을 선언했다. 배열의 요소가 -1일 경우, 해당 요소는 아직 할당되지 않은 빈 요소로 간주한다.\r\n\r\n> **가변 길이를 가지는 List**  \r\n> JAVA에서도 얼마든지 가변길이 배열이 필요한 경우가 생긴다. 이 경우 `ArrayList`와 같은 `List` 데이터를 활용하면 된다. `List`는 가변길이를 가짐으로써 비정형화된 배열 데이터를 다루는데 유리하다.\r\n\r\n배열의 가장 끝 요소부터 삽입하려는 인덱스 이전까지 순차적으로 내려오며 현재 요소의 값을 이전 요소의 값으로 할당하여 요소를 이동시킨다. 이후 삽입하려는 인덱스에 요소를 할당함으로써 삽입이 완료된다.\r\n\r\n## 1-5. 삭제\r\n\r\n삽입을 했으니, 반대로 <span class=\"primary\">삭제</span>도 필요할 수 있다. 삭제 연산은 원하는 인덱스의 요소를 삭제하는 것이다. 간단히 말하자면, 삽입과 정 반대의 프로세스를 가진다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111198-93372580-e120-11eb-9949-aa21aef11dfa.png\" width=\"600px\" />\r\n</p>\r\n\r\n마찬가지로, 배열의 맨 끝에 요소를 삭제한다면 그냥 끝의 요소를 삭제하면 그만이다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111204-9500e900-e120-11eb-8c44-c45faeb459fd.png\" width=\"600px\" />\r\n</p>\r\n\r\n하지만 배열의 중간을 삭제한다면 동일한 작업이 필요하다. 삭제하려는 위치의 요소를 삭제하고, 요소를 한 칸씩 당겨야 한다.\r\n\r\n최악의 경우, 배열의 가장 첫 인덱스인 0의 위치의 요소를 삭제한다면 해당 요소를 삭제한 뒤 모든 배열의 요소를 한 칸씩 앞으로 당길 것이다. 즉, 배열에 $N$개의 요소가 있을 경우 삭제에 필요한 작업량은 해당 인덱스의 요소를 삭제하는 작업 1개, $N - 1$개의 요소를 하나씩 이동하는 작업 $N - 1$개로 최대 $N$의 작업량이 발생할 수 있다.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 배열 삭제 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/10/about-algorithm-chapter01/\">자료구조가 중요한 까닭</a>\r\n * @since 2021.07.09 Sat 00:59:02\r\n */\r\npublic class ArrayDelete\r\n{\r\n\t// 배열\r\n\tprivate static final int[] ARRAY = { 6, 43, 14, 9, 94 };\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 삭제할 인덱스\r\n\t\tint index = 2;\r\n\t\t\r\n\t\tremove(index);\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(index);\r\n\t\tbuilder.append(\"번째 요소 삭제 \");\r\n\t\tbuilder.append(Arrays.toString(ARRAY));\r\n\t\t\r\n\t\twriter.write(builder.toString());\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 배열 삭제 함수\r\n\t *\r\n\t * @param index: [int] 삭제 위치\r\n\t */\r\n\t@SuppressWarnings(\"ManualArrayCopy\")\r\n\tprivate static void remove(int index)\r\n\t{\r\n\t\t// 배열의 값이 -1(빈 요소)가 아닐 경우\r\n\t\tif (ARRAY[index] != -1)\r\n\t\t{\r\n\t\t\tfor (int i = index; i < ARRAY.length - 1; i++)\r\n\t\t\t{\r\n\t\t\t\tARRAY[i] = ARRAY[i + 1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tARRAY[ARRAY.length - 1] = -1;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n``` tc\r\n2번째 요소 삭제 [6, 43, 9, 94, -1, -1, -1, -1, -1, -1]\r\n```\r\n\r\n삭제 소스는 위와 같다.\r\n\r\n삭제는 삽입과 달리 배열의 크기가 증가할 필요가 없다. 마찬가지로 배열의 요소가 -1일 경우, 해당 요소는 삭제된 빈 요소로 간주한다.\r\n\r\n삽입과는 반대로, 삭제하려는 인덱스부터 배열의 끝까지 순차적으로 올라가며 현재 요소의 값을 이후 요소의 값으로 할당하여 요소를 이동시킨다. 이후 배열의 끝 요소를 제거함으로써 삭제가 완료된다.\r\n\r\n## 1-6. 집합: 단 하나의 규칙이 효율성을 바꾼다\r\n\r\n배열의 경우 요소의 타입만 맞다면 별다른 신경을 쓰지 않는다. 이말인즉슨, 중복되는 요소에 대한 처리도 이루어지지 않는다. 하지만 종종 중복되는 값을 허용하지 않는 배열의 필요성이 생기기도 한다. 책에서는 이를 <span class=\"primary\">집합</span>이라는 개념으로 설명한다.\r\n\r\n배열에 요소를 삽입할 때, 중복여부를 확인하기 위해선 검색 작업이 선행되어야 한다. 검색을 통해 집합에 해당 요소가 없는 것이 확인될 경우에만 삽입이 이루어지는 방식이다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111212-97634300-e120-11eb-8d2e-c024761e23ff.png\" width=\"600px\" />\r\n</p>\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/125111220-992d0680-e120-11eb-97a2-3e1e8eda7518.png\" width=\"600px\" />\r\n</p>\r\n\r\n위의 두 그림은 집합 개념이 적용된 배열에서 존재하지 않는 값 55와, 존재하는 값 14를 삽입했을 때 나타나는 결과를 도식화한 것이다.\r\n\r\n55의 경우 기존에 존재하지 않았으므로 삽입이 가능하지만, 14의 경우 이미 2번 째 인덱스에 동일한 값이 있으므로 삽입이 불가능하다.\r\n\r\n검증이 완료된 이후의 삽입 과정은 기존의 삽입 과정과 동일하다. 단, 작업량은 달라진다. 기존의 삽입 작업량에서 검색의 작업량이 추가되기 때문이다.\r\n\r\n가장 최악의 케이스는 중복되지 않는 임의의 값을 배열의 0번 째 인덱스에 삽입하는 것이다. $N$개의 요소를 가진 배열에서 $N$개 요소를 검색하는 작업량 $N$개, $N$개의 요소를 하나씩 이동하는 작업 $N$개, 해당 인덱스에 요소를 삽입하는 작업 1개로 최대 $2N + 1$개의 작업량이 발생한다.\r\n\r\n``` java\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\n\r\n/**\r\n * 누구나 자료 구조와 알고리즘 집합 배열 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://blog.itcode.dev/posts/2021/07/10/about-algorithm-chapter01/\">자료구조가 중요한 까닭</a>\r\n * @since 2021.07.10 Sat 01:30:56\r\n */\r\npublic class UniqueArray\r\n{\r\n\t// 배열\r\n\tprivate static final int[] ARRAY = { 6, 43, 14, 9, 94 };\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 삽입할 인덱스\r\n\t\tint index = 2;\r\n\t\t\r\n\t\t// 삽입할 요소\r\n\t\tint item = 55;\r\n\t\t\r\n\t\tboolean result = hasInserted(index, item);\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tbuilder.append(index);\r\n\t\tbuilder.append(\"번 째 인덱스에 \");\r\n\t\tbuilder.append(item);\r\n\t\tbuilder.append(\" 삽입 결과: \");\r\n\t\tbuilder.append(result);\r\n\t\t\r\n\t\twriter.write(builder.toString());\r\n\t\twriter.newLine();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 집합 배열 삽입 결과 반환 함수\r\n\t *\r\n\t * @param index: [int] 삽입 위치\r\n\t * @param item: [int] 삽입할 요소\r\n\t *\r\n\t * @return [boolean] 삽입 결과\r\n\t */\r\n\tprivate static boolean hasInserted(int index, int item)\r\n\t{\r\n\t\tint result = find(item);\r\n\t\t\r\n\t\t// 중복되지 않을 경우\r\n\t\tif (result == -1)\r\n\t\t{\r\n\t\t\tinsert(index, item);\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\t// 중복될 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * 요소 검색 및 인덱스 반환 함수\r\n\t *\r\n\t * @param target: [int] 목표 숫자\r\n\t *\r\n\t * @return [int] 인덱스\r\n\t */\r\n\tprivate static int find(int target)\r\n\t{\r\n\t\t// 인덱스\r\n\t\tint result = -1;\r\n\t\t\r\n\t\tfor (int i = 0; i < ARRAY.length; i++)\r\n\t\t{\r\n\t\t\t// 목표 숫자와 배열의 값이 일치할 경우\r\n\t\t\tif (target == ARRAY[i])\r\n\t\t\t{\r\n\t\t\t\tresult = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 배열 삽입 함수\r\n\t *\r\n\t * @param index: [int] 삽입 위치\r\n\t * @param item: [int] 삽입할 요소\r\n\t */\r\n\t@SuppressWarnings(\"ManualArrayCopy\")\r\n\tprivate static void insert(int index, int item)\r\n\t{\r\n\t\t// 배열의 값이 -1(빈 요소)가 아닐 경우\r\n\t\tif (ARRAY[index] != -1)\r\n\t\t{\r\n\t\t\tfor (int i = ARRAY.length - 1; i > index; i--)\r\n\t\t\t{\r\n\t\t\t\tARRAY[i] = ARRAY[i - 1];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tARRAY[index] = item;\r\n\t}\r\n}\r\n```\r\n\r\n``` tc\r\n2번 째 인덱스에 55 삽입 결과: true\r\n```\r\n\r\n집합 배열의 삽입 소스는 위와 같다.\r\n\r\n`find`와 `insert` 함수는 검색과 삽입 파트에서 사용한 로직과 동일한 로직이다. 집합 배열은 반드시 고유한 요소만을 삽입해야 하므로, `hasInserted` 함수를 구성하여 중복 여부를 검증한 뒤 삽입을 진행한다.\r\n\r\n`find` 함수는 검색되는 요소가 없을 경우 -1을 반환한다. 즉, -1을 반환하는 숫자는 고유한 숫자다. `find`가 -1을 반환할 경우 `insert` 함수로 삽입을 진행한다.\r\n\r\n> **Set 객체는 중복을 허용하지 않아요**  \r\n> JAVA의 배열은 기본적으로 요소의 중복같은건 신경쓰지 않는다. 때문에, 요소의 중복을 감지하기 위해선 별도의 검증 로직을 구성해야한다.  \r\n> 하지만 `HashSet`과 같은 `Set` 객체를 활용하면 항상 고유한 값만 삽입할 수 있다.\r\n\r\n# 마무리\r\n\r\n이 장에서는 최대한 개념 위주로 설명하며, 설명에 어떠한 알고리즘 지식이 들어가지 않은 것으로 보인다. 이러한 저자의 의도를 최대한 반영하여, 내 로직 역시 가능한 기본 데이터 타입을 사용했으며, 복잡한 로직을 최대한 지양했다. 철저히 연산이 동작하는 기본 원리에 입각하도록 소스를 구성했다.\r\n\r\n다음 장에서는 알고리즘에 대한 본격적인 내용이 기술될 것이다.","url":["2021-07-10-about-algorithm-chapter01","2021","07","10","about-algorithm-chapter01"]}],"data":{"header":{"title":"스택과 큐로 간결한 코드 생성","excerpt":"이 장에서는 스택과 큐에 대해 알아본다. 사실 이 두 자료구조는 배열에 특정한 제약을 건 자료구조다. 제약이라는 개념 때문에 특수한 상황에서만 쓰이지 않을까 싶지만, 오히려 이러한 제약이 주는 규칙으로 인해 굉장히 많은 곳에서 쓰인다. 스택과 큐의 가장 큰 특징은 데이터 처리에 순서가 있다는 점이다. 스택과 큐는 그 제약에 따라 반드시 정해진 순서로 데이터를 처리한다. 이러한 특징 덕에 순서가 필요한 작업들에 유용하게 사용된다. 대표적으로 스케쥴러, 대기 등이 있으며 OS의 인터럽트(Interrupt) 작업에서 스택이 쓰인다.","coverImage":"https://user-images.githubusercontent.com/50317129/125144706-add9c080-e159-11eb-9522-063c655ddf36.png","date":"2021-07-31T11:58:37","type":"posts","category":"알고리즘","tag":["자료구조","알고리즘","누구나 자료 구조와 알고리즘","큐","스택"],"group":"누구나 자료 구조와 알고리즘","comment":true,"publish":true},"name":"2021-07-31-about-algorithm-chapter08.md","content":"<p class=\"orange-A400\" align=\"center\">본 포스팅은 개인 스터디 모임 활동의 일환으로, \"누구나 자료구조와 알고리즘\" 도서를 정독한 뒤 해당 내용을 정리한 포스팅입니다.</p>\n\n<h1 id=\"8장-스택과 큐로 간결한 코드 생성\">8장 스택과 큐로 간결한 코드 생성 <a href=\"#8장-스택과 큐로 간결한 코드 생성\">🔗</a></h1><p>이 장에서는 <span class=\"amber-400\">스택</span>과 <span class=\"amber-400\">큐</span>에 대해 알아본다. 사실 이 두 자료구조는 배열에 특정한 제약을 건 자료구조다. <span class=\"red-400\">제약</span>이라는 개념 때문에 특수한 상황에서만 쓰이지 않을까 싶지만, 오히려 이러한 제약이 주는 규칙으로 인해 굉장히 많은 곳에서 쓰인다.</p>\n<p>스택과 큐의 가장 큰 특징은 <span class=\"green-400\">데이터 처리에 순서</span>가 있다는 점이다. 스택과 큐는 그 제약에 따라 반드시 정해진 순서로 데이터를 처리한다. 이러한 특징 덕에 순서가 필요한 작업들에 유용하게 사용된다. 대표적으로 스케쥴러, 대기 등이 있으며 OS의 인터럽트(Interrupt) 작업에서 스택이 쓰인다.</p>\n<h2 id=\"8-1.-스택\">8-1. 스택 <a href=\"#8-1.-스택\">🔗</a></h2><p><span class=\"amber-400\">스택</span>이 데이터를 관리하는 방식은 배열의 그것과 매우 유사하다. 아까도 말했듯이, 스택과 큐엔 특정한 제약이 걸려있으며 그 중 스택의 제약은 아래와 같다.</p>\n<ul>\n<li>데이터는 반드시 스택의 입구에서만 삽입할 수 있다.</li>\n<li>스택의 가장 끝에 위치한 데이터만 읽을 수 있다.</li>\n<li>스택의 가장 끝에 위치한 데이터만 삭제할 수 있다.</li>\n</ul>\n<p>스택의 입구는 하나 뿐이며, 이 <span class=\"red-400\">입구에서 모든 연산</span>이 일어난다. 길쭉한 프링글스 통을 연상하면 이해하기 쉽다. 프링글스 칩을 꺼내먹기 위해선 반드시 정해진 입구에서만 꺼내서 먹을 수 있으며, 맨 위의 칩만 꺼낼 수 있다. 스택의 데이터와 연산을 이에 대입하면 매우 유사하다.</p>\n<p>스택의 입구. 즉, 끝을 위(top)이라 하며, 스택의 가장 밑을 아래(bottom)라 한다. 스택의 연산은 두 가지로 나뉜다.</p>\n\n\t\t\t<div class=\"table-wrapper\">\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n<th align=\"center\">구분</th>\n<th align=\"center\">내용</th>\n</tr>\n\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n<td align=\"center\">PUSH</td>\n<td align=\"center\">데이터를 삽입</td>\n</tr>\n<tr>\n<td align=\"center\">POP</td>\n<td align=\"center\">데이터를 삭제</td>\n</tr>\n\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t<p>스택의 푸시 연산을 도식화하면 아래와 같다.</p>\n<ol>\n<li>스택에 2를 푸시한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127523633-6a838ba9-339f-4443-bfd7-bea18c4d6558.png\" width=\"200px\" />\n\n<ol start=\"2\">\n<li>스택에 6을 푸시한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127523640-caec6583-e44a-43f8-95d0-678f1aac1523.png\" width=\"200px\" />\n\n<ol start=\"3\">\n<li>스택에 9를 푸시한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127523649-7046261f-d896-4c24-bd68-648a795c8b58.png\" width=\"200px\" />\n\n<p>푸시는 항상 스택의 위에서 이루어진다는 점을 기억하자.</p>\n<p>스택의 팝 연산은 아래와 같다.</p>\n<ol>\n<li>스택에 9를 팝한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127523655-40e026a8-5631-41c8-a300-03d0ce237242.png\" width=\"200px\" />\n\n<ol start=\"2\">\n<li>스택에 6을 팝한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127523665-e28389b1-27d0-4fb9-b29a-aa4c5278c253.png\" width=\"200px\" />\n\n<p>이 과정 후엔 스택에 5만 남게된다. 스택은 항상 위에만 데이터를 삽입할 수 있으므로, 스택의 중간에 데이터를 삽입하려면 해당 위치까지 모든 데이터를 팝한 뒤 푸시해야한다.</p>\n<p>이렇게 먼저 들어온 게 가장 늦게 나가고. 반대로 가장 늦게 들어온 게 가장 빨리 나가는 걸 <span class=\"primary\">LIFO</span>(Last In, First Out)이라 한다.</p>\n<p>월요일의 출근길을 생각해보자. 최대한 늦게 들어가고 최대한 빨리 나오고 싶지 않은가?</p>\n<h2 id=\"8-2.-스택 다뤄보기\">8-2. 스택 다뤄보기 <a href=\"#8-2.-스택 다뤄보기\">🔗</a></h2><p>필자는 코드 규칙에 굉장히 민감한 편이다. 쓸데없이 예민해서, 내 방식대로 포맷팅이 되어있지 않은 소스는 리딩만으로도 스트레스를 받는다. 굳이 내 방식이 아니더라도 일관성있는 규칙이라면 그나마 나은데, 일관성도 없이 막 짠 코드를 보는 건 정말이지.... 가뜩이나 코드 리딩도 제대로 못 하는데 코드가 난잡하기까지 하면 당연히 답이 없을 것 같다.</p>\n<p>그래서 나는 ESLint를 굉장히 선호한다. TypeScript, HTML 등의 코드를 내가 정의한 규칙에 부합한지 알려주고, 틀리다면 수정까지 해준다. 나같이 코드 규칙에 예민한 사람에겐 필수품이나 다름없다.</p>\n<p>이렇게 코드를 정렬해주는 Lint는 언어별로 다른 규칙을 일일히 이해하고 틀린 부분을 잘 찾아야 하므로 딱 봐도 구현하기 매우 어려워 보인다. 이 문단에서는 스택을 활용하여 간단한 코드 Lint를 만들어본다.</p>\n<p>예를 들어, 아래와 같은 코드가 있다고 가정하자.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVASCRIPT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-javascript\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\">// 정상</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token keyword\">const</span> list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token comment\" data-tag=\"new\">// 오류1. 닫는 대괄호 없음</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token keyword\">const</span> list2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\">// 오류2. 여는 대괄호 없음</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token keyword\">const</span> list3 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9><span class=\"token comment\" data-tag=\"new\">// 오류3. 괄호 쌍이 맞지 않음</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token keyword\">const</span> list4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>모든 언어에서, 괄호는 항상 한 쌍으로 이루어진다. 따라서 <code class=\"inline-code\">list1</code>을 제외한 나머지 코드에는 오류가 표시된다. 스택을 사용한다 해서 린트 구현이 쉬워지는 건 아니다. 온전한 동작을 하는 하나의 린트를 설계하는 것은 매우 어려우므로, 여기서는 <span class=\"green-400\">괄호</span>에 대해서만 생각한다.</p>\n<p>책에서 정의한 괄호 린트의 규칙은 아래와 같다.</p>\n<ol>\n<li>괄호가 아닌 문자는 모두 무시한다.</li>\n<li>여는 괄호가 나오면 스택에 푸시한다. 스택에 넣는다는 것은 해당 괄호가 닫히기를 기다린다는 의미이다.</li>\n<li>닫는 괄호가 나오면 스택 위의 원소를 확인하고, 아래와 같이 분석한다.<ul>\n<li>스택에 원소가 없으면 이전에 여는 괄호가 나오지 않은 것으로, <span class=\"red-400\">오류 2</span>와 같다.</li>\n<li>스택에 데이터가 있지만, 닫는 괄호가 스택 위에 있는 원소와 종류가 일치하지 않을 경우, <span class=\"red-400\">오류 3</span>과 같다.</li>\n<li>닫는 괄호가 스택 위에 있는 원소와 괄호 종류가 같을 경우, 괄호가 성공적으로 닫혔으므로 정상적인 케이스다. 해당 괄호는 더 이상 기록할 필요가 없으므로 스택 위 원소를 POP한다.</li>\n</ul>\n</li>\n<li>줄 끝에 도달했는데, 스택에 여전히 원소가 남아있을 경우, 닫는 괄호가 없는 <span class=\"red-400\">오류 1</span>과 같다.</li>\n</ol>\n<p>정의한 규칙을 토대로 예제를 기술하면 아래와 같다.</p>\n<img src=\"https://user-images.githubusercontent.com/50317129/127666476-c4e4a04d-bfc7-4a64-9861-554fab1c41d7.png\" width=\"400px\" />\n\n<p>예제는 위 구문을 토대로 서술하며, 스택 역시 그림과 같다.</p>\n<ol>\n<li>여는 소괄호를 스택에 푸시한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127666490-27aa0e68-7d97-4285-9ab5-564b4ae3fa34.png\" width=\"400px\" />\n\n<p>만약 닫는 괄호였다면 오류였을 것이다.</p>\n<ol start=\"2\">\n<li>다음 괄호가 나올 때까지 포인터를 이동한다.</li>\n</ol>\n<p><code class=\"inline-code\">var</code>, <code class=\"inline-code\">x</code> 등 괄호가 아닌 구문은 모두 무시한다. 이후부터는 2번 과정의 기술은 생략한다.</p>\n<ol start=\"3\">\n<li>여는 중괄호를 스택에 푸시한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127666497-84783779-d69a-49a2-941e-1c45fa3daafe.png\" width=\"400px\" />\n\n<p>비록 스택 밑의 괄호와 종류는 다르지만, 둘 다 여는 괄호이므로 제대로 닫히기만 하면 오류는 아니다.</p>\n<ol start=\"4\">\n<li>여는 대괄호를 스택에 푸시한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127666504-41da2695-b18f-494c-bbc9-e63bd9199866.png\" width=\"400px\" />\n\n<p>마찬가지로 스택에 푸시한다.</p>\n<ol start=\"5\">\n<li>닫는 대괄호가 감지되었으므로, 스택의 맨 위 원소와 비교하여 팝한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127666509-840346c4-7b4a-4b33-ab01-cd0fc558b536.png\" width=\"400px\" />\n\n<p>아래와 같을 경우 팝 연산이 가능하다.</p>\n<ul>\n<li>스택의 맨 위 괄호와 현재 포인터의 괄호 종류가 같다.</li>\n<li>스택의 맨 위 괄호는 반드시 여는 괄호다.</li>\n</ul>\n<p>이 경우 위 두 조건을 충족하므로, 여는 대괄호를 스택에서 팝하여 제거한다.</p>\n<ol start=\"6\">\n<li>닫는 중괄호가 감지되었으므로, 스택의 맨 위 원소와 비교하여 팝한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127666517-95b68f96-48c9-4883-a1c5-765658a85bd2.png\" width=\"400px\" />\n\n<p>여는 대괄호가 팝 연산으로 인해 스택에서 삭제되었으므로, 현재 스택의 가장 맨 위 요소는 여는 중괄호다. 조건을 충족하므로 마찬가지로 스택에서 팝하여 제거한다.</p>\n<ol start=\"7\">\n<li>닫는 소괄호가 감지되었으므로, 스택의 맨 위 원소와 비교하여 팝한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127666523-8a33d330-933a-47fe-b3bc-e4bcbfde07d5.png\" width=\"400px\" />\n\n<p>마찬가지로 조건을 충족하므로 요소를 팝한다.</p>\n<ol start=\"8\">\n<li>코드 끝에 도달했으므로, 스택의 상태를 확인하여 오류 여부를 판단한다.</li>\n</ol>\n<p>코드의 모든 요소들을 확인했다. 만약 스택에 원소가 하나라도 남아있다면 해당 구문은 오류가 발생한 것이다.</p>\n<p>이 경우 스택에 원소가 하나도 없으므로 정상적인 구문으로 판단할 수 있다. 즉 위 구문에서 우리가 설계한 린트는 오류를 표시하지 않는다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token comment\" data-tag=\"new\"> * 누구나 자료 구조와 알고리즘 괄호 린트 클래스</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9><span class=\"token comment\" data-tag=\"new\"> *</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token comment\" data-tag=\"new\"> * @author RWB</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11><span class=\"token comment\" data-tag=\"new\"> * @see &lt;a href=\"https://blog.itcode.dev/posts/2021/07/31/about-algorithm-chapter08/\">스택과 큐로 간결한 코드 생성&lt;/a></span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12><span class=\"token comment\" data-tag=\"new\"> * @since 2021.07.30 Fri 23:30:56</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Linter</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17><span class=\"token comment\" data-tag=\"new\">     * 메인 함수</span></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19><span class=\"token comment\" data-tag=\"new\">     * @param args: [String[]] 매개변수</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21><span class=\"token comment\" data-tag=\"new\">     * @throws IOException 데이터 입출력 예외</span></td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=23><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span></td></tr>\n<tr data-number=24><td class=\"line-number\" data-number=\"24\">24</td><td class=\"line-code\" data-number=24>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=25><td class=\"line-number\" data-number=\"25\">25</td><td class=\"line-code\" data-number=25>        <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=26><td class=\"line-number\" data-number=\"26\">26</td><td class=\"line-code\" data-number=26>        <span class=\"token class-name\">BufferedWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=27><td class=\"line-number\" data-number=\"27\">27</td><td class=\"line-code\" data-number=27>        </td></tr>\n<tr data-number=28><td class=\"line-number\" data-number=\"28\">28</td><td class=\"line-code\" data-number=28>        writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"후보 이름 입력 (x: 종료) >> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=29><td class=\"line-number\" data-number=\"29\">29</td><td class=\"line-code\" data-number=29>        writer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=30><td class=\"line-number\" data-number=\"30\">30</td><td class=\"line-code\" data-number=30>        </td></tr>\n<tr data-number=31><td class=\"line-number\" data-number=\"31\">31</td><td class=\"line-code\" data-number=31>        <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=32><td class=\"line-number\" data-number=\"32\">32</td><td class=\"line-code\" data-number=32>        </td></tr>\n<tr data-number=33><td class=\"line-number\" data-number=\"33\">33</td><td class=\"line-code\" data-number=33>        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token function\">lint</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=34><td class=\"line-number\" data-number=\"34\">34</td><td class=\"line-code\" data-number=34>        </td></tr>\n<tr data-number=35><td class=\"line-number\" data-number=\"35\">35</td><td class=\"line-code\" data-number=35>        <span class=\"token comment\" data-tag=\"new\">// 린트 결과가 정상일 경우</span></td></tr>\n<tr data-number=36><td class=\"line-number\" data-number=\"36\">36</td><td class=\"line-code\" data-number=36>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=37><td class=\"line-number\" data-number=\"37\">37</td><td class=\"line-code\" data-number=37>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=38><td class=\"line-number\" data-number=\"38\">38</td><td class=\"line-code\" data-number=38>            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"오류 없음\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=39><td class=\"line-number\" data-number=\"39\">39</td><td class=\"line-code\" data-number=39>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=40><td class=\"line-number\" data-number=\"40\">40</td><td class=\"line-code\" data-number=40>        </td></tr>\n<tr data-number=41><td class=\"line-number\" data-number=\"41\">41</td><td class=\"line-code\" data-number=41>        <span class=\"token comment\" data-tag=\"new\">// 여는 괄호가 없을 경우</span></td></tr>\n<tr data-number=42><td class=\"line-number\" data-number=\"42\">42</td><td class=\"line-code\" data-number=42>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=43><td class=\"line-number\" data-number=\"43\">43</td><td class=\"line-code\" data-number=43>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=44><td class=\"line-number\" data-number=\"44\">44</td><td class=\"line-code\" data-number=44>            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"여는 괄호 존재하지 않음\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=45><td class=\"line-number\" data-number=\"45\">45</td><td class=\"line-code\" data-number=45>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=46><td class=\"line-number\" data-number=\"46\">46</td><td class=\"line-code\" data-number=46>        </td></tr>\n<tr data-number=47><td class=\"line-number\" data-number=\"47\">47</td><td class=\"line-code\" data-number=47>        <span class=\"token comment\" data-tag=\"new\">// 닫는 괄호가 없을 경우</span></td></tr>\n<tr data-number=48><td class=\"line-number\" data-number=\"48\">48</td><td class=\"line-code\" data-number=48>        <span class=\"token keyword\">else</span></td></tr>\n<tr data-number=49><td class=\"line-number\" data-number=\"49\">49</td><td class=\"line-code\" data-number=49>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=50><td class=\"line-number\" data-number=\"50\">50</td><td class=\"line-code\" data-number=50>            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=51><td class=\"line-number\" data-number=\"51\">51</td><td class=\"line-code\" data-number=51>            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 닫는 괄호 존재하지 않음\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=52><td class=\"line-number\" data-number=\"52\">52</td><td class=\"line-code\" data-number=52>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=53><td class=\"line-number\" data-number=\"53\">53</td><td class=\"line-code\" data-number=53>        </td></tr>\n<tr data-number=54><td class=\"line-number\" data-number=\"54\">54</td><td class=\"line-code\" data-number=54>        writer<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=55><td class=\"line-number\" data-number=\"55\">55</td><td class=\"line-code\" data-number=55>        writer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=56><td class=\"line-number\" data-number=\"56\">56</td><td class=\"line-code\" data-number=56>        </td></tr>\n<tr data-number=57><td class=\"line-number\" data-number=\"57\">57</td><td class=\"line-code\" data-number=57>        writer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=58><td class=\"line-number\" data-number=\"58\">58</td><td class=\"line-code\" data-number=58>        reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=59><td class=\"line-number\" data-number=\"59\">59</td><td class=\"line-code\" data-number=59>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=60><td class=\"line-number\" data-number=\"60\">60</td><td class=\"line-code\" data-number=60>    </td></tr>\n<tr data-number=61><td class=\"line-number\" data-number=\"61\">61</td><td class=\"line-code\" data-number=61>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=62><td class=\"line-number\" data-number=\"62\">62</td><td class=\"line-code\" data-number=62><span class=\"token comment\" data-tag=\"new\">     * 린트 결과 반환 함수</span></td></tr>\n<tr data-number=63><td class=\"line-number\" data-number=\"63\">63</td><td class=\"line-code\" data-number=63><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=64><td class=\"line-number\" data-number=\"64\">64</td><td class=\"line-code\" data-number=64><span class=\"token comment\" data-tag=\"new\">     * @param text: [String] 구문</span></td></tr>\n<tr data-number=65><td class=\"line-number\" data-number=\"65\">65</td><td class=\"line-code\" data-number=65><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=66><td class=\"line-number\" data-number=\"66\">66</td><td class=\"line-code\" data-number=66><span class=\"token comment\" data-tag=\"new\">     * @return [char] 린트 결과</span></td></tr>\n<tr data-number=67><td class=\"line-number\" data-number=\"67\">67</td><td class=\"line-code\" data-number=67><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=68><td class=\"line-number\" data-number=\"68\">68</td><td class=\"line-code\" data-number=68>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token function\">lint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=69><td class=\"line-number\" data-number=\"69\">69</td><td class=\"line-code\" data-number=69>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=70><td class=\"line-number\" data-number=\"70\">70</td><td class=\"line-code\" data-number=70>        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=71><td class=\"line-number\" data-number=\"71\">71</td><td class=\"line-code\" data-number=71>        </td></tr>\n<tr data-number=72><td class=\"line-number\" data-number=\"72\">72</td><td class=\"line-code\" data-number=72>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=73><td class=\"line-number\" data-number=\"73\">73</td><td class=\"line-code\" data-number=73>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=74><td class=\"line-number\" data-number=\"74\">74</td><td class=\"line-code\" data-number=74>            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=75><td class=\"line-number\" data-number=\"75\">75</td><td class=\"line-code\" data-number=75>            </td></tr>\n<tr data-number=76><td class=\"line-number\" data-number=\"76\">76</td><td class=\"line-code\" data-number=76>            <span class=\"token comment\" data-tag=\"new\">// 여는 괄호일 경우</span></td></tr>\n<tr data-number=77><td class=\"line-number\" data-number=\"77\">77</td><td class=\"line-code\" data-number=77>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isOpenBrace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=78><td class=\"line-number\" data-number=\"78\">78</td><td class=\"line-code\" data-number=78>            <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=79><td class=\"line-number\" data-number=\"79\">79</td><td class=\"line-code\" data-number=79>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=80><td class=\"line-number\" data-number=\"80\">80</td><td class=\"line-code\" data-number=80>            <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=81><td class=\"line-number\" data-number=\"81\">81</td><td class=\"line-code\" data-number=81>            </td></tr>\n<tr data-number=82><td class=\"line-number\" data-number=\"82\">82</td><td class=\"line-code\" data-number=82>            <span class=\"token comment\" data-tag=\"new\">// 닫는 괄호일 경우</span></td></tr>\n<tr data-number=83><td class=\"line-number\" data-number=\"83\">83</td><td class=\"line-code\" data-number=83>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isCloseBrace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=84><td class=\"line-number\" data-number=\"84\">84</td><td class=\"line-code\" data-number=84>            <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=85><td class=\"line-number\" data-number=\"85\">85</td><td class=\"line-code\" data-number=85>                <span class=\"token comment\" data-tag=\"new\">// 스택이 비어있을 경우</span></td></tr>\n<tr data-number=86><td class=\"line-number\" data-number=\"86\">86</td><td class=\"line-code\" data-number=86>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=87><td class=\"line-number\" data-number=\"87\">87</td><td class=\"line-code\" data-number=87>                <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=88><td class=\"line-number\" data-number=\"88\">88</td><td class=\"line-code\" data-number=88>                    <span class=\"token keyword\">return</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=89><td class=\"line-number\" data-number=\"89\">89</td><td class=\"line-code\" data-number=89>                <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=90><td class=\"line-number\" data-number=\"90\">90</td><td class=\"line-code\" data-number=90>                </td></tr>\n<tr data-number=91><td class=\"line-number\" data-number=\"91\">91</td><td class=\"line-code\" data-number=91>                <span class=\"token comment\" data-tag=\"new\">// 스택이 비어있지 않을 경우</span></td></tr>\n<tr data-number=92><td class=\"line-number\" data-number=\"92\">92</td><td class=\"line-code\" data-number=92>                <span class=\"token keyword\">else</span></td></tr>\n<tr data-number=93><td class=\"line-number\" data-number=\"93\">93</td><td class=\"line-code\" data-number=93>                <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=94><td class=\"line-number\" data-number=\"94\">94</td><td class=\"line-code\" data-number=94>                    <span class=\"token keyword\">char</span> co <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=95><td class=\"line-number\" data-number=\"95\">95</td><td class=\"line-code\" data-number=95>                    </td></tr>\n<tr data-number=96><td class=\"line-number\" data-number=\"96\">96</td><td class=\"line-code\" data-number=96>                    <span class=\"token comment\" data-tag=\"new\">// 괄호가 서로 매칭되지 않을 경우</span></td></tr>\n<tr data-number=97><td class=\"line-number\" data-number=\"97\">97</td><td class=\"line-code\" data-number=97>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isMatched</span><span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=98><td class=\"line-number\" data-number=\"98\">98</td><td class=\"line-code\" data-number=98>                    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=99><td class=\"line-number\" data-number=\"99\">99</td><td class=\"line-code\" data-number=99>                        <span class=\"token keyword\">return</span> co<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=100><td class=\"line-number\" data-number=\"100\">100</td><td class=\"line-code\" data-number=100>                    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=101><td class=\"line-number\" data-number=\"101\">101</td><td class=\"line-code\" data-number=101>                <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=102><td class=\"line-number\" data-number=\"102\">102</td><td class=\"line-code\" data-number=102>            <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=103><td class=\"line-number\" data-number=\"103\">103</td><td class=\"line-code\" data-number=103>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=104><td class=\"line-number\" data-number=\"104\">104</td><td class=\"line-code\" data-number=104>        </td></tr>\n<tr data-number=105><td class=\"line-number\" data-number=\"105\">105</td><td class=\"line-code\" data-number=105>        <span class=\"token comment\" data-tag=\"new\">// 스택이 비어이쓸 경우</span></td></tr>\n<tr data-number=106><td class=\"line-number\" data-number=\"106\">106</td><td class=\"line-code\" data-number=106>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=107><td class=\"line-number\" data-number=\"107\">107</td><td class=\"line-code\" data-number=107>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=108><td class=\"line-number\" data-number=\"108\">108</td><td class=\"line-code\" data-number=108>            <span class=\"token keyword\">return</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=109><td class=\"line-number\" data-number=\"109\">109</td><td class=\"line-code\" data-number=109>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=110><td class=\"line-number\" data-number=\"110\">110</td><td class=\"line-code\" data-number=110>        </td></tr>\n<tr data-number=111><td class=\"line-number\" data-number=\"111\">111</td><td class=\"line-code\" data-number=111>        <span class=\"token comment\" data-tag=\"new\">// 스택이 비어있지 않을 경우</span></td></tr>\n<tr data-number=112><td class=\"line-number\" data-number=\"112\">112</td><td class=\"line-code\" data-number=112>        <span class=\"token keyword\">else</span></td></tr>\n<tr data-number=113><td class=\"line-number\" data-number=\"113\">113</td><td class=\"line-code\" data-number=113>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=114><td class=\"line-number\" data-number=\"114\">114</td><td class=\"line-code\" data-number=114>            <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=115><td class=\"line-number\" data-number=\"115\">115</td><td class=\"line-code\" data-number=115>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=116><td class=\"line-number\" data-number=\"116\">116</td><td class=\"line-code\" data-number=116>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=117><td class=\"line-number\" data-number=\"117\">117</td><td class=\"line-code\" data-number=117>    </td></tr>\n<tr data-number=118><td class=\"line-number\" data-number=\"118\">118</td><td class=\"line-code\" data-number=118>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=119><td class=\"line-number\" data-number=\"119\">119</td><td class=\"line-code\" data-number=119><span class=\"token comment\" data-tag=\"new\">     * 여는 괄호 여부 반환 함수</span></td></tr>\n<tr data-number=120><td class=\"line-number\" data-number=\"120\">120</td><td class=\"line-code\" data-number=120><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=121><td class=\"line-number\" data-number=\"121\">121</td><td class=\"line-code\" data-number=121><span class=\"token comment\" data-tag=\"new\">     * @param c: [char] 문자</span></td></tr>\n<tr data-number=122><td class=\"line-number\" data-number=\"122\">122</td><td class=\"line-code\" data-number=122><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=123><td class=\"line-number\" data-number=\"123\">123</td><td class=\"line-code\" data-number=123><span class=\"token comment\" data-tag=\"new\">     * @return [boolean] 여는 괄호 여부</span></td></tr>\n<tr data-number=124><td class=\"line-number\" data-number=\"124\">124</td><td class=\"line-code\" data-number=124><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=125><td class=\"line-number\" data-number=\"125\">125</td><td class=\"line-code\" data-number=125>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isOpenBrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=126><td class=\"line-number\" data-number=\"126\">126</td><td class=\"line-code\" data-number=126>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=127><td class=\"line-number\" data-number=\"127\">127</td><td class=\"line-code\" data-number=127>        <span class=\"token keyword\">return</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'('</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'{'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'['</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=128><td class=\"line-number\" data-number=\"128\">128</td><td class=\"line-code\" data-number=128>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=129><td class=\"line-number\" data-number=\"129\">129</td><td class=\"line-code\" data-number=129>    </td></tr>\n<tr data-number=130><td class=\"line-number\" data-number=\"130\">130</td><td class=\"line-code\" data-number=130>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=131><td class=\"line-number\" data-number=\"131\">131</td><td class=\"line-code\" data-number=131><span class=\"token comment\" data-tag=\"new\">     * 닫는 괄호 여부 반환 함수</span></td></tr>\n<tr data-number=132><td class=\"line-number\" data-number=\"132\">132</td><td class=\"line-code\" data-number=132><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=133><td class=\"line-number\" data-number=\"133\">133</td><td class=\"line-code\" data-number=133><span class=\"token comment\" data-tag=\"new\">     * @param c: [char] 문자</span></td></tr>\n<tr data-number=134><td class=\"line-number\" data-number=\"134\">134</td><td class=\"line-code\" data-number=134><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=135><td class=\"line-number\" data-number=\"135\">135</td><td class=\"line-code\" data-number=135><span class=\"token comment\" data-tag=\"new\">     * @return [boolean] 여는 괄호 여부</span></td></tr>\n<tr data-number=136><td class=\"line-number\" data-number=\"136\">136</td><td class=\"line-code\" data-number=136><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=137><td class=\"line-number\" data-number=\"137\">137</td><td class=\"line-code\" data-number=137>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCloseBrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=138><td class=\"line-number\" data-number=\"138\">138</td><td class=\"line-code\" data-number=138>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=139><td class=\"line-number\" data-number=\"139\">139</td><td class=\"line-code\" data-number=139>        <span class=\"token keyword\">return</span> c <span class=\"token operator\">==</span> <span class=\"token string\">')'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'}'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=140><td class=\"line-number\" data-number=\"140\">140</td><td class=\"line-code\" data-number=140>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=141><td class=\"line-number\" data-number=\"141\">141</td><td class=\"line-code\" data-number=141>    </td></tr>\n<tr data-number=142><td class=\"line-number\" data-number=\"142\">142</td><td class=\"line-code\" data-number=142>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=143><td class=\"line-number\" data-number=\"143\">143</td><td class=\"line-code\" data-number=143><span class=\"token comment\" data-tag=\"new\">     * 괄호 매칭 여부 반환 함수</span></td></tr>\n<tr data-number=144><td class=\"line-number\" data-number=\"144\">144</td><td class=\"line-code\" data-number=144><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=145><td class=\"line-number\" data-number=\"145\">145</td><td class=\"line-code\" data-number=145><span class=\"token comment\" data-tag=\"new\">     * @param open: [char] 여는 괄호</span></td></tr>\n<tr data-number=146><td class=\"line-number\" data-number=\"146\">146</td><td class=\"line-code\" data-number=146><span class=\"token comment\" data-tag=\"new\">     * @param close: [char] 닫는 괄호</span></td></tr>\n<tr data-number=147><td class=\"line-number\" data-number=\"147\">147</td><td class=\"line-code\" data-number=147><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=148><td class=\"line-number\" data-number=\"148\">148</td><td class=\"line-code\" data-number=148><span class=\"token comment\" data-tag=\"new\">     * @return [boolean] 괄호 매칭 여부</span></td></tr>\n<tr data-number=149><td class=\"line-number\" data-number=\"149\">149</td><td class=\"line-code\" data-number=149><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=150><td class=\"line-number\" data-number=\"150\">150</td><td class=\"line-code\" data-number=150>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMatched</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> close<span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=151><td class=\"line-number\" data-number=\"151\">151</td><td class=\"line-code\" data-number=151>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=152><td class=\"line-number\" data-number=\"152\">152</td><td class=\"line-code\" data-number=152>        <span class=\"token comment\" data-tag=\"new\">// 소괄호가 서로 매칭될 경우</span></td></tr>\n<tr data-number=153><td class=\"line-number\" data-number=\"153\">153</td><td class=\"line-code\" data-number=153>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">open</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span> <span class=\"token operator\">&amp;&amp;</span> close <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=154><td class=\"line-number\" data-number=\"154\">154</td><td class=\"line-code\" data-number=154>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=155><td class=\"line-number\" data-number=\"155\">155</td><td class=\"line-code\" data-number=155>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=156><td class=\"line-number\" data-number=\"156\">156</td><td class=\"line-code\" data-number=156>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=157><td class=\"line-number\" data-number=\"157\">157</td><td class=\"line-code\" data-number=157>        </td></tr>\n<tr data-number=158><td class=\"line-number\" data-number=\"158\">158</td><td class=\"line-code\" data-number=158>        <span class=\"token comment\" data-tag=\"new\">// 중괄호가 서로 매칭될 경우</span></td></tr>\n<tr data-number=159><td class=\"line-number\" data-number=\"159\">159</td><td class=\"line-code\" data-number=159>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">open</span> <span class=\"token operator\">==</span> <span class=\"token string\">'{'</span> <span class=\"token operator\">&amp;&amp;</span> close <span class=\"token operator\">==</span> <span class=\"token string\">'}'</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=160><td class=\"line-number\" data-number=\"160\">160</td><td class=\"line-code\" data-number=160>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=161><td class=\"line-number\" data-number=\"161\">161</td><td class=\"line-code\" data-number=161>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=162><td class=\"line-number\" data-number=\"162\">162</td><td class=\"line-code\" data-number=162>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=163><td class=\"line-number\" data-number=\"163\">163</td><td class=\"line-code\" data-number=163>        </td></tr>\n<tr data-number=164><td class=\"line-number\" data-number=\"164\">164</td><td class=\"line-code\" data-number=164>        <span class=\"token comment\" data-tag=\"new\">// 아닐 경우</span></td></tr>\n<tr data-number=165><td class=\"line-number\" data-number=\"165\">165</td><td class=\"line-code\" data-number=165>        <span class=\"token keyword\">else</span></td></tr>\n<tr data-number=166><td class=\"line-number\" data-number=\"166\">166</td><td class=\"line-code\" data-number=166>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=167><td class=\"line-number\" data-number=\"167\">167</td><td class=\"line-code\" data-number=167>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">open</span> <span class=\"token operator\">==</span> <span class=\"token string\">'['</span> <span class=\"token operator\">&amp;&amp;</span> close <span class=\"token operator\">==</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=168><td class=\"line-number\" data-number=\"168\">168</td><td class=\"line-code\" data-number=168>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=169><td class=\"line-number\" data-number=\"169\">169</td><td class=\"line-code\" data-number=169>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=170><td class=\"line-number\" data-number=\"170\">170</td><td class=\"line-code\" data-number=170><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>INPUT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-input\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>const a = (1 + 2 * 3;</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>OUTPUT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-output\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>( 닫는 괄호 존재하지 않음</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>소스와 입출력은 위와 같다. 문자열을 하나하나 분석하여 여는 괄호가 있을 때까지 분석하여, 여는 괄호가 감지되면 스택에 푸시한다.</p>\n<p>분석 중에 닫는 괄호가 나오면, 스택을 팝하여 닫는 괄호와 종류가 일치하는지 비교한다. 만약 일치할 경우 계속 진행하며, 일치하지 않다면 관련 오류를 표시한다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>    <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>    </td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>    <span class=\"token comment\" data-tag=\"new\">// 여는 괄호일 경우</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isOpenBrace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7>        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>    </td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10>    <span class=\"token comment\" data-tag=\"new\">// 닫는 괄호일 경우</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isCloseBrace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13>        <span class=\"token comment\" data-tag=\"new\">// 스택이 비어있을 경우</span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16>            <span class=\"token keyword\">return</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18>        </td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19>        <span class=\"token comment\" data-tag=\"new\">// 스택이 비어있지 않을 경우</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20>        <span class=\"token keyword\">else</span></td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22>            <span class=\"token keyword\">char</span> co <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=23><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23>            </td></tr>\n<tr data-number=24><td class=\"line-number\" data-number=\"24\">24</td><td class=\"line-code\" data-number=24>            <span class=\"token comment\" data-tag=\"new\">// 괄호가 서로 매칭되지 않을 경우</span></td></tr>\n<tr data-number=25><td class=\"line-number\" data-number=\"25\">25</td><td class=\"line-code\" data-number=25>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isMatched</span><span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=26><td class=\"line-number\" data-number=\"26\">26</td><td class=\"line-code\" data-number=26>            <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=27><td class=\"line-number\" data-number=\"27\">27</td><td class=\"line-code\" data-number=27>                <span class=\"token keyword\">return</span> co<span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=28><td class=\"line-number\" data-number=\"28\">28</td><td class=\"line-code\" data-number=28>            <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=29><td class=\"line-number\" data-number=\"29\">29</td><td class=\"line-code\" data-number=29>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=30><td class=\"line-number\" data-number=\"30\">30</td><td class=\"line-code\" data-number=30>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=31><td class=\"line-number\" data-number=\"31\">31</td><td class=\"line-code\" data-number=31><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>해당 동작은 위 소스에서 제어한다. 또한 모든 동작 이후에도 스택에 원소가 남아있을 경우, 정상적으로 닫히지 않은 괄호가 있는 것이므로 역시 오류를 표시한다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token comment\" data-tag=\"new\">// 스택이 비어있을 경우</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>    <span class=\"token keyword\">return</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token comment\" data-tag=\"new\">// 스택이 비어있지 않을 경우</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token keyword\">else</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9>    <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>해당 동작은 모든 감지가 끝난 뒤, 위 소스에서 제어한다.</p>\n<p>이와 같이 스택은 가장 나중에 들어온 데이터를 먼저 처리해야할 경우에 굉장히 유용하다. 방금과 같은 린트나, 우리의 실수를 막아주는 <code class=\"inline-code\">Ctrl + z</code> 등에 사용된다.</p>\n<h2 id=\"8-3.-큐\">8-3. 큐 <a href=\"#8-3.-큐\">🔗</a></h2><p>큐 역시 스택과 비슷하게 배열에 특정 규칙이 적용된 자료구조다. 큐의 제약사항은 아래와 같다.</p>\n<ul>\n<li>데이터는 큐의 끝에만 삽입할 수 있다. (스택과 동일)</li>\n<li>데이터는 큐의 앞에서만 읽을 수 있다. (스택과 반대)</li>\n<li>데이터는 큐의 앞에서만 삭제할 수 있다. (스택과 반대)</li>\n</ul>\n<p>스택과 골자는 비슷하나, 연산을 보면 살짝 다르다. 스택이 출입구가 하나로 통일된 형태라면, 큐는 출입구가 서로 나뉜 형태다. 스택은 프링글스 통을, 큐는 일반적인 파이프를 연상하면 쉽다. 단, 이 파이프는 한 쪽 방향으로만 흘러간다.</p>\n<p>스택과 달리 큐는 PUSH 같은 연산명이 따로 있진 않다. 큐의 연산을 도식화하면 아래와 같다.</p>\n<ol>\n<li>큐에 8을 삽입한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127694394-a849f2e6-591e-46f3-aef5-e94332f61df6.png\" width=\"400px\" />\n\n<ol start=\"2\">\n<li>큐에 93을 삽입한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127694400-dfc6ccda-f609-4dcc-b9b0-4365fb21abf3.png\" width=\"400px\" />\n\n<ol start=\"3\">\n<li>큐에 51을 삽입한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127694406-70a9119d-e29f-4ad9-9fa1-f3259c3b537f.png\" width=\"400px\" />\n\n<p>여기까지는 스택의 PUSH 연산과 크게 다른 점이 없다.</p>\n<ol start=\"4\">\n<li>큐의 8을 삭제한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127694414-d59f5897-2f8c-481c-bd5f-e66c77875907.png\" width=\"400px\" />\n\n<p>스택과 달리 큐는 데이터 입구의 반대편에서 데이터를 삭제할 수 있다.</p>\n<ol start=\"5\">\n<li>큐의 93을 삭제한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127694425-97870074-8a27-412f-945f-50c458f991d7.png\" width=\"400px\" />\n\n<ol start=\"6\">\n<li>큐의 51을 삭제한다.</li>\n</ol>\n<img src=\"https://user-images.githubusercontent.com/50317129/127694428-f3bb5a80-ec75-446a-b8f0-6d12b0d74abd.png\" width=\"400px\" />\n\n<p>컨테이너 벨트처럼 순차적으로 처리하는 특징을 확인할 수 있다.</p>\n<h2 id=\"8-4.-큐 다뤄보기\">8-4. 큐 다뤄보기 <a href=\"#8-4.-큐 다뤄보기\">🔗</a></h2><p>스택과는 다른 방식으로 데이터를 순차적으로 처리하는 큐의 특성 덕분에 여러 곳에서 유용하게 쓰인다. 대기열이나 작업 예약 등 먼저 들어온 요소가 먼저 나가는 <span class=\"primary\">FIFO</span>(First In, First Out)으로 동작한다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>JAVA</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-java\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=6><td class=\"line-number\" data-number=\"6\">6</td><td class=\"line-code\" data-number=6><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=7><td class=\"line-number\" data-number=\"7\">7</td><td class=\"line-code\" data-number=7><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Queue</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=8><td class=\"line-number\" data-number=\"8\">8</td><td class=\"line-code\" data-number=8></td></tr>\n<tr data-number=9><td class=\"line-number\" data-number=\"9\">9</td><td class=\"line-code\" data-number=9><span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=10><td class=\"line-number\" data-number=\"10\">10</td><td class=\"line-code\" data-number=10><span class=\"token comment\" data-tag=\"new\"> * 누구나 자료 구조와 알고리즘 큐 프린터 클래스</span></td></tr>\n<tr data-number=11><td class=\"line-number\" data-number=\"11\">11</td><td class=\"line-code\" data-number=11><span class=\"token comment\" data-tag=\"new\"> *</span></td></tr>\n<tr data-number=12><td class=\"line-number\" data-number=\"12\">12</td><td class=\"line-code\" data-number=12><span class=\"token comment\" data-tag=\"new\"> * @author RWB</span></td></tr>\n<tr data-number=13><td class=\"line-number\" data-number=\"13\">13</td><td class=\"line-code\" data-number=13><span class=\"token comment\" data-tag=\"new\"> * @see &lt;a href=\"https://blog.itcode.dev/posts/2021/07/31/about-algorithm-chapter08/\">스택과 큐로 간결한 코드 생성&lt;/a></span></td></tr>\n<tr data-number=14><td class=\"line-number\" data-number=\"14\">14</td><td class=\"line-code\" data-number=14><span class=\"token comment\" data-tag=\"new\"> * @since 2021.07.31 Sat 03:21:35</span></td></tr>\n<tr data-number=15><td class=\"line-number\" data-number=\"15\">15</td><td class=\"line-code\" data-number=15><span class=\"token comment\" data-tag=\"new\"> */</span></td></tr>\n<tr data-number=16><td class=\"line-number\" data-number=\"16\">16</td><td class=\"line-code\" data-number=16><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Printer</span></td></tr>\n<tr data-number=17><td class=\"line-number\" data-number=\"17\">17</td><td class=\"line-code\" data-number=17><span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=18><td class=\"line-number\" data-number=\"18\">18</td><td class=\"line-code\" data-number=18>    <span class=\"token comment\" data-tag=\"new\">/**</span></td></tr>\n<tr data-number=19><td class=\"line-number\" data-number=\"19\">19</td><td class=\"line-code\" data-number=19><span class=\"token comment\" data-tag=\"new\">     * 메인 함수</span></td></tr>\n<tr data-number=20><td class=\"line-number\" data-number=\"20\">20</td><td class=\"line-code\" data-number=20><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=21><td class=\"line-number\" data-number=\"21\">21</td><td class=\"line-code\" data-number=21><span class=\"token comment\" data-tag=\"new\">     * @param args: [String[]] 매개변수</span></td></tr>\n<tr data-number=22><td class=\"line-number\" data-number=\"22\">22</td><td class=\"line-code\" data-number=22><span class=\"token comment\" data-tag=\"new\">     *</span></td></tr>\n<tr data-number=23><td class=\"line-number\" data-number=\"23\">23</td><td class=\"line-code\" data-number=23><span class=\"token comment\" data-tag=\"new\">     * @throws IOException 데이터 입출력 예외</span></td></tr>\n<tr data-number=24><td class=\"line-number\" data-number=\"24\">24</td><td class=\"line-code\" data-number=24><span class=\"token comment\" data-tag=\"new\">     */</span></td></tr>\n<tr data-number=25><td class=\"line-number\" data-number=\"25\">25</td><td class=\"line-code\" data-number=25>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span></td></tr>\n<tr data-number=26><td class=\"line-number\" data-number=\"26\">26</td><td class=\"line-code\" data-number=26>    <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=27><td class=\"line-number\" data-number=\"27\">27</td><td class=\"line-code\" data-number=27>        <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=28><td class=\"line-number\" data-number=\"28\">28</td><td class=\"line-code\" data-number=28>        <span class=\"token class-name\">BufferedWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=29><td class=\"line-number\" data-number=\"29\">29</td><td class=\"line-code\" data-number=29>        </td></tr>\n<tr data-number=30><td class=\"line-number\" data-number=\"30\">30</td><td class=\"line-code\" data-number=30>        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=31><td class=\"line-number\" data-number=\"31\">31</td><td class=\"line-code\" data-number=31>        </td></tr>\n<tr data-number=32><td class=\"line-number\" data-number=\"32\">32</td><td class=\"line-code\" data-number=32>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=33><td class=\"line-number\" data-number=\"33\">33</td><td class=\"line-code\" data-number=33>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=34><td class=\"line-number\" data-number=\"34\">34</td><td class=\"line-code\" data-number=34>            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"출력할 문자열 입력 (x: 종료) >> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=35><td class=\"line-number\" data-number=\"35\">35</td><td class=\"line-code\" data-number=35>            writer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=36><td class=\"line-number\" data-number=\"36\">36</td><td class=\"line-code\" data-number=36>            </td></tr>\n<tr data-number=37><td class=\"line-number\" data-number=\"37\">37</td><td class=\"line-code\" data-number=37>            <span class=\"token class-name\">String</span> work <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=38><td class=\"line-number\" data-number=\"38\">38</td><td class=\"line-code\" data-number=38>            </td></tr>\n<tr data-number=39><td class=\"line-number\" data-number=\"39\">39</td><td class=\"line-code\" data-number=39>            <span class=\"token comment\" data-tag=\"new\">// 입력을 종료할 경우</span></td></tr>\n<tr data-number=40><td class=\"line-number\" data-number=\"40\">40</td><td class=\"line-code\" data-number=40>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=41><td class=\"line-number\" data-number=\"41\">41</td><td class=\"line-code\" data-number=41>            <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=42><td class=\"line-number\" data-number=\"42\">42</td><td class=\"line-code\" data-number=42>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=43><td class=\"line-number\" data-number=\"43\">43</td><td class=\"line-code\" data-number=43>            <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=44><td class=\"line-number\" data-number=\"44\">44</td><td class=\"line-code\" data-number=44>            </td></tr>\n<tr data-number=45><td class=\"line-number\" data-number=\"45\">45</td><td class=\"line-code\" data-number=45>            <span class=\"token comment\" data-tag=\"new\">// 작업할 입력이 들어올 경우</span></td></tr>\n<tr data-number=46><td class=\"line-number\" data-number=\"46\">46</td><td class=\"line-code\" data-number=46>            <span class=\"token keyword\">else</span></td></tr>\n<tr data-number=47><td class=\"line-number\" data-number=\"47\">47</td><td class=\"line-code\" data-number=47>            <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=48><td class=\"line-number\" data-number=\"48\">48</td><td class=\"line-code\" data-number=48>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=49><td class=\"line-number\" data-number=\"49\">49</td><td class=\"line-code\" data-number=49>            <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=50><td class=\"line-number\" data-number=\"50\">50</td><td class=\"line-code\" data-number=50>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=51><td class=\"line-number\" data-number=\"51\">51</td><td class=\"line-code\" data-number=51>        </td></tr>\n<tr data-number=52><td class=\"line-number\" data-number=\"52\">52</td><td class=\"line-code\" data-number=52>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></td></tr>\n<tr data-number=53><td class=\"line-number\" data-number=\"53\">53</td><td class=\"line-code\" data-number=53>        <span class=\"token punctuation\">{</span></td></tr>\n<tr data-number=54><td class=\"line-number\" data-number=\"54\">54</td><td class=\"line-code\" data-number=54>            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[INFO] \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=55><td class=\"line-number\" data-number=\"55\">55</td><td class=\"line-code\" data-number=55>            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=56><td class=\"line-number\" data-number=\"56\">56</td><td class=\"line-code\" data-number=56>            writer<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=57><td class=\"line-number\" data-number=\"57\">57</td><td class=\"line-code\" data-number=57>            writer<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=58><td class=\"line-number\" data-number=\"58\">58</td><td class=\"line-code\" data-number=58>        <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=59><td class=\"line-number\" data-number=\"59\">59</td><td class=\"line-code\" data-number=59>        </td></tr>\n<tr data-number=60><td class=\"line-number\" data-number=\"60\">60</td><td class=\"line-code\" data-number=60>        writer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=61><td class=\"line-number\" data-number=\"61\">61</td><td class=\"line-code\" data-number=61>        reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></td></tr>\n<tr data-number=62><td class=\"line-number\" data-number=\"62\">62</td><td class=\"line-code\" data-number=62>    <span class=\"token punctuation\">}</span></td></tr>\n<tr data-number=63><td class=\"line-number\" data-number=\"63\">63</td><td class=\"line-code\" data-number=63><span class=\"token punctuation\">}</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>INPUT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-input\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>First Document</td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>Second Document</td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>Third Document</td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>Fourth Document</td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>Fifth Document</td></tr>\n<tr data-number=5><td class=\"line-number\" data-number=\"5\">5</td><td class=\"line-code\" data-number=5>x</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>OUTPUT</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-output\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>[INFO] First Document</td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1>[INFO] Second Document</td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2>[INFO] Third Document</td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3>[INFO] Fourth Document</td></tr>\n<tr data-number=4><td class=\"line-number\" data-number=\"4\">4</td><td class=\"line-code\" data-number=4>[INFO] Fifth Document</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>얼핏 보면 그냥 입력받은 순서대로 바로 콘솔에 뿌려주는 것 처럼 보이지만, 이는 소스가 간단하기 때문에 일어나는 착각이다.</p>\n<p>실제로 복잡한 작업을 하다보면, 조건에 따라 작업을 저장했다가 후에 순차적으로 후처리를 해야하는 등의 작업이 필요하다. 이런 경우에 큐의 특징은 매우 유용하다. </p>\n<p>우리가 흔히 아는 배열에 담아도 되지 않냐 반문할 수 있지만, 수시로 작업이 추가/삭제될 경우 배열은 그 인덱스를 신경써주어야한다. 반면 큐의 경우 작업의 IO에 있어서 정해진 규약이 있기 때문에 인덱스에 구애받지 않고 추가하고 삭제하면 된다.</p>\n<h1 id=\"마무리\">마무리 <a href=\"#마무리\">🔗</a></h1><p>이 장의 핵심은 아래와 같이 정리할 수 있다.</p>\n<ul>\n<li>스택은 후입선출(LIFO) 방식이다.</li>\n<li>스택은 원소의 추가/삭제 모두 스택의 위(TOP)에서 발생한다.</li>\n<li>스택 중간에 원소를 삽입하려면, 해당 위치에 도달할 때까지 모든 원소를 삭제해야한다.</li>\n<li>큐는 선입선출(FIFO) 방식이다.</li>\n<li>큐는 원소의 추가가 한 쪽, 삭제가 다른 쪽에서 각각 따로 발생한다.</li>\n</ul>\n<p>스택과 큐의 개념 자체는 어렵지 않았지만, JAVA에서 이를 다루는 것은 익숙치 않았었다. 이 장을 정리하면서 스택과 큐의 특성은 물론, JAVA에서 이를 어떻게 다루는 지도 알 수 있었다.</p>\n<p>다음 장에서는 반복적인 연산을 단축하는데 매우 효과적인 재귀에 대해 다룰 예정이다.</p>\n","url":["2021-07-31-about-algorithm-chapter08","2021","07","31","about-algorithm-chapter08"],"toc":[{"text":"8장 스택과 큐로 간결한 코드 생성","tag":"8장-스택과 큐로 간결한 코드 생성","depth":1},{"text":"8-1. 스택","tag":"8-1.-스택","depth":2},{"text":"8-2. 스택 다뤄보기","tag":"8-2.-스택 다뤄보기","depth":2},{"text":"8-3. 큐","tag":"8-3.-큐","depth":2},{"text":"8-4. 큐 다뤄보기","tag":"8-4.-큐 다뤄보기","depth":2},{"text":"마무리","tag":"마무리","depth":1}]},"hash":"29815e25018"},"__N_SSG":true}