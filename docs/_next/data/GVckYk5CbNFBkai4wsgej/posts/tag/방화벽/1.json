{"pageProps":{"posts":[{"header":{"title":"[Ubuntu] ufw로 방화벽 포트 설정하기","excerpt":"모든 건물에는 입구가 존재한다. 일반적인 상황에서, 누구든지 해당 건물에 드나들기 위해선 좋든 싫든 입구를 통과해야한다. 이 입구라는 것이 또 마냥 열려있는 건 아니라서, 필요 시엔 개방되어있다가도 특정 시간에는 폐쇄되기도 한다. 심지어 어떤 곳은 까다롭기 그지없어서, 사람을 가려받기도 한다. 이를테면 보안구역이라던가, 금요일 밤의 클럽이라던가. PC통신도 이와 원리가 별반 다를 바 없다. 보기엔 그냥 막 통신하는 것 같아도, 저마다 할당받은 입구를 통해 PC에 드나든다. PC가 건물이라고 한다면, PC의 입구는 포트(PORT)라 할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/132039520-3efc64ec-28c2-499c-af29-dfe153f53852.png","date":"2021-09-04T01:26:20","type":"posts","category":"Ubuntu","tag":["Ubuntu","방화벽"],"comment":true,"publish":true},"name":"2021-09-04-firewall-with-ufw.md","content":"\r\n# 개요\r\n\r\n모든 건물에는 입구가 존재한다. 일반적인 상황에서, 누구든지 해당 건물에 드나들기 위해선 좋든 싫든 입구를 통과해야한다.\r\n\r\n이 입구라는 것이 또 마냥 열려있는 건 아니라서, 필요 시엔 개방되어있다가도 특정 시간에는 폐쇄되기도 한다.\r\n\r\n심지어 어떤 곳은 까다롭기 그지없어서, 사람을 가려받기도 한다. 이를테면 보안구역이라던가, 금요일 밤의 클럽이라던가.\r\n\r\n<br />\r\n\r\nPC통신도 이와 원리가 별반 다를 바 없다. 보기엔 그냥 막 통신하는 것 같아도, 저마다 할당받은 입구를 통해 PC에 드나든다.\r\n\r\nPC가 건물이라고 한다면, PC의 입구는 포트(PORT)라 할 수 있다.\r\n\r\n<br />\r\n\r\n모든 프로그램은 PC와의 통신 시 임의의 입구, 포트를 할당받는다. 프로그램은 해당 포트를 통해 들어오고, 나가며 정해진 동작을 수행한다.\r\n\r\n만약 해당 포트가 막혀있다면, 해당 컴퓨터를 대상으론 정상적으로 동작할 수 없을 것이다.\r\n\r\n이 프로그램이 내 PC에 필요하다면 포트를 열어주면 될 것이고, 아니라면 포트를 닫음으로써 접근하지 못하게 함이 바람직하다. 혹은 인증된 소수의 프로그램에게만 포트를 허용할 수도 있을 것이다.\r\n\r\n<br />\r\n\r\n말 그대로 보안과 매우 밀접한 개념으로써, <span class=\"red-600\">방화벽 설정을 통해 원하는 포트를 원하는 대상에게 개방/폐쇄</span>할 수 있다.\r\n\r\nUbuntu에서 ufw를 통해 방화벽 설정을 원하는대로 설정해보자.\r\n\r\n# 그냥 다 열면 안 돼?\r\n\r\n조선시대 제주도는 문을 잠근다는 개념이 매우 미약했다고 한다.\r\n\r\n옛 교통방식과 섬이라는 폐쇄적인 환경 덕분에 유동인구가 매우 적었고, 각 마을 주민에 대한 신원이 확실했을 것이다. 내륙에 비해 외지인이 방문/거주할 일도 매우 적었을 것이다.\r\n\r\n이처럼 주변 환경과 사람들 간의 신뢰성이 있다면 굳이 그렇게 폐쇄적일 필요는 없을지도 모른다.\r\n\r\n<br />\r\n\r\n하지만 인터넷이라는 환경은 이와 결이 매우 다르다. 인터넷에 연결만 되어있다면 누구나 내 PC에 접근할 수 있는 잠재적 가능성을 가진다. 누가, 왜, 무엇을 위해 오는지도 알 수 없다.\r\n\r\n이 경우 문을 아무렇게나 열어재껴놓는건 바람직한 상황이 아닐 것이다.\r\n\r\n<br />\r\n\r\n방화벽은 이러한 문제로부터 PC를 최대한 보호하기위해, <span class=\"green-600\">기본적으로 폐쇄적인 설정</span>을 가진다. 일단 안 된다고 질러놓고 보는 셈이다.\r\n\r\n보안을 위해서 방화벽은 가급적 폐쇄하되, 필요한 프로그램만 개방하는 화이트리스트 방식을 쓰는 습관을 들이도록 하자.\r\n\r\n# ufw\r\n\r\n기본적인 방화벽 명령어 `iptables`가 있지만, 명령어가 그리 직관적이지 않다는 단점이 있다. 이에 비해 `ufw`는 `iptables`에 비해 훨씬 쉽고 직관적인 명령어로 다룰 수 있다.\r\n\r\n`iptables`과 성능상의 차이가 거의 없다는 점을 감안하면 확실한 장점.\r\n\r\n## ufw 설치\r\n\r\nufw는 기본 명령어가 아니다. <span class=\"blue-400\">ufw를 설치</span>하자.\r\n\r\n``` bash\r\nsudo apt-get install ufw\r\n```\r\n\r\n위 명령어를 통해 설치할 수 있다.\r\n\r\n## ufw 상태 관리 명령어\r\n\r\nufw의 상태를 관리하는 명령어다.\r\n\r\n``` bash\r\n# ufw 활성화\r\nsudo ufw enable\r\n\r\n# ufw 비활성화\r\nsudo ufw disable\r\n\r\n# ufw 상태 확인\r\nsudo ufw status verbose\r\n```\r\n\r\nufw가 설치된 후 방화벽에 영향을 주는 걸 방지하기 위해 <span class=\"blue-400\">기본적으로 비활성화 상태</span>로 설치된다.\r\n\r\n`sudo ufw enable` 명령어를 입력하여 활성화하자.\r\n\r\n## ufw 정책 관리 명령어\r\n\r\nufw에 적용된 <span class=\"blue-400\">정책을 관리</span>한다.\r\n\r\n``` bash\r\n# 정책 조회\r\nsudo ufw show raw\r\n\r\n# 기본 정책 허용\r\nsudo ufw default allow\r\n\r\n# 기본 정책 차단\r\nsudo ufw default deny\r\n```\r\n\r\n모든 포트 통신에 대한 일괄 허용/차단이 가능하다.\r\n\r\n``` bash\r\n# 들어오는 통신 차단\r\nsudo ufw default deny incoming\r\n\r\n# 나가는 통신 허용\r\nsudo ufw default allow outgoing\r\n```\r\n\r\n오는사람 막고 가는사람 안 막는다라는 말을 들어본 적이 있을 것이다. 보안도 똑같다. 내게 들어오는 통신은 최대한 폐쇄적으로, 내게서 나가는 통신은 개방적으로 대한다.\r\n\r\n## ufw 정책 설정 명령어\r\n\r\n``` bash\r\n# 80포트(HTTP) 허용\r\nsudo ufw allow 80\r\n\r\n# 80포트(HTTP) TCP 허용\r\nsudo ufw allow 80/tcp\r\n\r\n# 80포트(HTTP) UDP 허용\r\nsudo ufw allow 80/udp\r\n\r\n# 80포트(HTTP) 허용\r\nsudo ufw allow http\r\n```\r\n\r\n위 명령어는 <span class=\"blue-400\">HTTP 포트 80을 허용하는 명령어</span>들의 모음이다.\r\n\r\nufw는 고유 서비스 이름을 사용해서 포트를 관리할 수 있다. HTTP(80), HTTPS(443), FTP(21), SSH(22) 등이 이에 해당한다.\r\n\r\n`allow` 이외에도 `deny`를 통해 통신을 거부하거나, `delete`를 통해 해당 정책을 아예 지워버릴 수도 있다.\r\n\r\n정책을 지우게 되면 ufw에 설정된 기본 정책을 따르게 된다.\r\n\r\n## ufw 정책 세부설정 명령어\r\n\r\n### IP 통신 정책\r\n\r\n``` bash\r\n# 192.168.0.100 IP의 통신 허용\r\nsudo ufw allow from 192.168.0.100\r\n\r\n# 192.168.0.100 ~ 200 대역의 IP의 통신 허용\r\nsudo ufw allow from 192.168.0.100/200\r\n```\r\n\r\n위 명령어를 통해서 <span class=\"blue-400\">특정 IP 혹은 IP 대역의 통신을 관리</span>할 수 있다.\r\n\r\n### IP 및 포트 통신 정책\r\n\r\n``` bash\r\n# 192.168.0.100 IP의 80포트 허용\r\nsudo ufw allow from 192.168.0.100 to any port 80\r\n\r\n# 192.168.0.100 IP의 80포트 TCP 허용\r\nsudo ufw allow from 192.168.0.100 to any port 80 proto tcp\r\n```\r\n\r\n<span class=\"blue-400\">특정 IP의 특정 포트만 허용/차단</span>할 수도 있다.\r\n\r\n## ufw 정책 수정 명령어\r\n\r\n``` bash\r\nsudo ufw status numbered\r\n```\r\n\r\n현재 적용된 정책을 인덱스 번호와 함께 보여준다.\r\n\r\n해당 번호를 통해 <span class=\"blue-400\">정책을 수정, 삭제</span>할 수 있다.\r\n\r\n``` bash\r\n# 1번 정책을 80포트 차단 정책으로 변경\r\nsudo ufw insert 1 deny 80\r\n\r\n# 2번 정책을 192.168.0.100 IP의 통신 허용 정책으로 변경\r\nsudo ufw insert 2 allow from 192.168.0.100\r\n```\r\n\r\n## ufw 정책 삭제 명령어\r\n\r\n``` bash\r\n# 1번 정책 삭제\r\nsudo ufw delete 1\r\n```\r\n\r\n# 정리\r\n\r\n서비스에서 서버가 갖는 역할과 비중을 생각해본다면, 서버의 보안은 서비스의 안정성과 직결되는 중요한 문제다.\r\n\r\n때문에 서버의 보안은 귀찮을정도로 견고하게 구성되는 것이 바람직하다.\r\n\r\n<br />\r\n\r\n프로그램, 웹 등 모든 서비스의 기초는 데이터의 통신이므로, 통신을 잘 제어하는 것이 중요하다.\r\n\r\n반드시 필요한 통신만을 허가하고 관리하여 서버가 항상 최상의 보안을 유지할 수 있도록 보안정책을 구성하자.","url":["2021-09-04-firewall-with-ufw","2021","09","04","firewall-with-ufw"]}],"categories":{"All":{"count":67,"flag":true},"Ubuntu":{"count":3,"flag":true},"RaspberryPi":{"count":3,"flag":true},"알고리즘":{"count":32,"flag":false},"잡담":{"count":2,"flag":false},"WEB":{"count":7,"flag":false},"CS":{"count":10,"flag":false},"React":{"count":1,"flag":false},"JAVA":{"count":3,"flag":false},"Jekyll":{"count":4,"flag":false},"WAS":{"count":2,"flag":false}},"images":["celeb1.gif","celeb10.gif","celeb11.gif","celeb12.gif","celeb13.gif","celeb14.gif","celeb15.gif","celeb16.gif","celeb2.gif","celeb3.gif","celeb4.gif","celeb5.gif","celeb6.gif","celeb7.gif","celeb8.gif","celeb9.gif","city1.gif","city10.gif","city11.gif","city12.gif","city13.gif","city14.gif","city15.gif","city2.gif","city3.gif","city4.gif","city4.jpg","city5.gif","city6.gif","city7.gif","city8.gif","city9.gif","code1.gif","code2.gif","code3.gif","funk1.gif","funk2.gif","funk3.gif","funk4.gif","funk5.gif","funk6.gif","game1.gif","signal.gif"],"tag":"방화벽","page":1,"hash":"15a6cc3cb67"},"__N_SSG":true}