{"pageProps":{"posts":[{"header":{"title":"[라즈베리파이 4] Let's Ecrypt로 Ubuntu 서버에 HTTPS 통신 제공하기","excerpt":"이전 장에서 Google Domains를 통해 dev 도메인을 발급받았다. 이 블로그의 주소는 실제로 구입한 https://blog.itcode.dev 도메인이 적용되어있다. dev 도메인은 강화된 보안정책이 적용되어있다. 해당 도메인으로의 모든 HTTP 통신은 반드시 HTTPS 보안 통신으로만 제공된다. 네트워크 계층에서 https 프로토콜로 라우팅하므로 좋든 싫든 HTTPS 서비스를 제공해야만 한다.","coverImage":"https://user-images.githubusercontent.com/50317129/131238727-666f2aaa-d759-4f62-af73-3856086da73d.png","date":"2021-09-06T16:50:40","type":"posts","category":"Ubuntu","tag":["라즈베리파이","Ubuntu","Tomcat(톰캣)","SSL"],"comment":true,"publish":true},"name":"2021-09-06-raspberry-ssl-domain.md","content":"\r\n# 개요\r\n\r\n이전 장에서 Google Domains를 통해 `dev` 도메인을 발급받았다. 이 블로그의 주소는 실제로 구입한 https://blog.itcode.dev 도메인이 적용되어있다.\r\n\r\n`dev` 도메인은 강화된 보안정책이 적용되어있다. 해당 도메인으로의 모든 HTTP 통신은 반드시 HTTPS 보안 통신으로만 제공된다. 네트워크 계층에서 https 프로토콜로 라우팅하므로 좋든 싫든 HTTPS 서비스를 제공해야만 한다.\r\n\r\n<br />\r\n\r\n이 장에서는 Let's Encrypt로 SSL 인증서를 발급받아 라즈베이파이서버의 Tomcat에 적용한다. 기존의 1:1 도메인 매칭 SSL이 아니라, 여러 서브도메인에 전부 대응 가능한 와일드카드 인증서를 받을 것이다.\r\n\r\n> <b class=\"teal-600\">와일드카드(Wildcard) 인증서?</b>  \r\n> 프로그래밍에서의 <span class=\"primary\">와일드카드</span>란 무작위 대상의 허용이란 의미를 가진다. 도메인과 1:1 매칭되는 기존의 인증서와 달리, 와일드카드 인증서는 주체가 `*.example.com`로 표기되며, 모든 서브도메인에 적용이 가능하다.\r\n\r\n# Cerbot으로 SSL 인증서 발급하기\r\n\r\nUbuntu 서버에서 SSL 인증서를 발급받아보자. 일반적인 SSL 인증서는 인증 과정에서 웹 서버에 특정 파일을 배포한 뒤, 인증 서버에서 해당 파일의 접근 및 유효성 검증을 통해 도메인의 소유권을 확인한다.  \r\n하지만 와일드카드 인증서는 여러 서브도메인에 전부 적용되는 특별한 인증서라 위의 인증방식을 사용하지 않는다. 위의 인증방식은 하나의 도메인의 소유권만 보증하기 때문. 와일드카드 인증서는 DNS 레코드를 통해 소유권을 인증한다. DNS 레코드는 도메인의 소유권자만 설정 가능하기 때문.\r\n\r\n만약, 어떠한 이유로든 도메인의 DNS 설정을 변경할 수 없다면 와일드카드 인증서를 발급받을 수 없다.\r\n\r\n## 어? 전 윈도우로 하고싶은데....\r\n\r\nDNS 레코드 인증으로 진행하기 때문에 Tomcat에 파일을 배포할 필요가 없어서 아무데서나 진행해도 상관 없다.\r\n\r\nWindows 환경에서 인증서를 발급받는 방법은 이전에 작성한 게시물 [[SSL] Windows 10에서 Let's Encrypt로 SSL 인증서 무료 발급받기](/posts/2021/08/19/lets-encrypt)을 참고하길 바란다.\r\n\r\n## 준비물\r\n\r\n* Ubuntu OS\r\n* DNS Record 설정 권한\r\n\r\n필자는 Google Domains에서 도메인을 구입했으므로, Google Domains에서 DNS 설정을 관리할 수 있다. 만약, 가비아나 후이즈, 도레지 등 다른 도메인 사이트에서 도메인을 구매했다면 그 사이트에서 DNS 설정을 할 수 있으니 참고할 것.\r\n\r\n이 장에서는 Google Domains를 기준으로 진행한다.\r\n\r\n## 1. Certbot 설치하기\r\n\r\nUbuntu에서 Certbot을 설치한다.\r\n\r\n``` bash\r\nsudo apt-get install certbot\r\n```\r\n\r\n## 2. Certbot으로 인증 수행하기\r\n\r\nCertbot을 수행하여 인증서 발급을 수행한다.\r\n\r\n<p class=\"red-500\" align=\"center\">※ 아래의 itcode.dev 도메인은 예시로, 실제로 입력 시엔 직접 사용할 자신의 도메인을 입력한다.</p>\r\n\r\n``` bash\r\nsudo certbot certonly --manual --preferred-challenges dns --email psj2716@gmail.com -d *.itcode.dev\r\n```\r\n\r\n* `--manual` - 수동 설정\r\n* `--preferred-challenges` - 인증방식 지정\r\n* `--email` 소유주 이메일\r\n* `-d` - 도메인 지정\r\n\r\n위 명령어를 사용하면 별다른 명령어 입력 없이 즉시 인증을 수행할 수 있다. `-d`의 인자값으로 구입한 도메인을 입력하되, 서브도메인을 `*`로 지정함을 잊지말자.\r\n\r\n``` output\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nPlease read the Terms of Service at\r\nhttps://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must\r\nagree in order to register with the ACME server at\r\nhttps://acme-v02.api.letsencrypt.org/directory\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n(A)gree/(C)ancel:\r\n```\r\n\r\n서비스 이용 약관에 동의해달라는 의미로, A를 입력하여 동의한다. 동의하지 않으면 SSL 발급을 진행할 수 없다.\r\n\r\n``` output\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nWould you be willing to share your email address with the Electronic Frontier\r\nFoundation, a founding partner of the Let's Encrypt project and the non-profit\r\norganization that develops Certbot? We'd like to send you email about our work\r\nencrypting the web, EFF news, campaigns, and ways to support digital freedom.\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n(Y)es/(N)o:\r\n```\r\n\r\nCertbot 개발기관에서 웹 암호화, EFF 뉴스, 이벤트 등의 정보를 소유주의 이메일로 받아보겠냐는 질문이다.\r\n\r\n좋으면 Y, 싫으면 N을 입력하자. 동의하지 않아도 SSL 발급엔 지장없다.\r\n\r\n``` output\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nNOTE: The IP of this machine will be publicly logged as having requested this\r\ncertificate. If you're running certbot in manual mode on a machine that is not\r\nyour server, please ensure you're okay with that.\r\n\r\nAre you OK with your IP being logged?\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n(Y)es/(N)o:\r\n```\r\n\r\nIP 수집에 동의하냐는 질문으로, Y를 입력하여 동의한다. 동의하지 않으면 SSL 발급을 진행할 수 없다.\r\n\r\n``` output\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nPlease deploy a DNS TXT record under the name\r\n_acme-challenge.itcode.dev with the following value:\r\n\r\n1sz-pJgM-3jL7mZacyByOO0S2lclAF0QmxtqujRuRHM\r\n\r\nBefore continuing, verify the record is deployed.\r\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\nPress Enter to Continue\r\n```\r\n\r\ncertbot에서 서브도메인명 `_acme-challenge`과 랜덤한 문자열을 제공한다. 제시한 도메인 `_acme-challenge.itcode.dev`의 DNS TXT Record에 제공한 값 `O3WQbIWv73aOzneZBu_4XAoE9ieZT1ZLdvbX7UPCkyk`을 할당하면 된다.\r\n\r\n도메인은 사용자가 입력한 값에 따라 달라지니 참고할 것.\r\n\r\n## 3. DNS TXT Record 설정\r\n\r\nDNS Record 종류엔 A, CNAME 등 여러 종류가 존재한다. 이 중 TXT 레코드에 값을 할당하면 된다.\r\n\r\nGoogle Domains의 DNS 설정에서 Record 하나를 추가하고, 타입을 TXT로 설정한다. 이후 certbot에서 제시한 값을 입력한다. 설정한 DNS 정보가 전파되기까지 수 분의 시간이 걸릴 수 있다. Google Domains의 경우 전파속도는 빠른 것 같다.\r\n\r\n``` bash\r\nnslookup -q=txt _acme-challenge.itcode.dev\r\n```\r\n\r\nTXT Record이므로 브라우저에서 해당 도메인에 접근해도 별다른 내용이 출력되지 않는다. `nslookup` 명령어를 통해 Record의 종류를 지정하여 조회해야한다.\r\n\r\n``` output\r\nServer:         127.0.0.53\r\nAddress:        127.0.0.53#53\r\n\r\nNon-authoritative answer:\r\n_acme-challenge.itcode.dev      text = \"1sz-pJgM-3jL7mZacyByOO0S2lclAF0QmxtqujRuRHM\"\r\n\r\nAuthoritative answers can be found from:\r\n```\r\n\r\n위 처럼 해당 도메인의 TXT Record에 입력한 문자열이 나오면 성공이다. 만약, 값이 나오지 않는다면 값이 나올 때까지 시간을 두고 기다리자.\r\n\r\n### 주의점\r\n\r\nDNS TXT Record가 미처 전파되지 않았음에도 불구하고 한국인 특성이 발동하여 certbot에 Enter를 눌러 인증확인 단계로 넘어가는 경우가 왕왕 발생한다.\r\n\r\n만약, TXT Record가 확인되지 않는다면, 관련 메시지와 함께 인증과정을 다시 시작한다. 문제는 이 때 <span class=\"red-600\">TXT Record에 등록할 문자열을 새로 갱신</span>한다. 즉, DNS TXT Record을 갱신된 값으로 재지정해야한다.\r\n\r\nDNS 전파가 느리다면 대기시간이 많이 늘어나버리니 주의할 것. 반드시 `nslookup` 명령어를 통해 DNS 적용 여부를 확인하자.\r\n\r\n## 4. 인증 확인 요청\r\n\r\nDNS TXT Record가 정상적으로 전파됐다면, 콘솔에서 Enter를 눌러 다음 단계로 넘어간다. certbot이 인증확인을 시도하며, 인증이 완료되면 인증서를 발급해준다.\r\n\r\n``` bash\r\n# itcode.dev는 인증한 도메인 이름\r\ncd /etc/letsencrypt/live/itcode.dev\r\n```\r\n\r\n기본적으로 위 경로에 인증서가 생성된다. 마지막 폴더 `itcode.dev`는 도메인 이름이니, 각자가 입력한 도메인으로 변경하여 입력한다.\r\n\r\n* `cert.pem` - 도메인의 인증서\r\n* `chain.pem` - 발급기관의 인증서\r\n* `fullchain.pem` - 도메인과 발급기관의 통합 인증서\r\n* `privkey.pem` - 인증서의 개인키\r\n\r\nSSL은 도메인의 인증서 뿐만 아니라, 이를 발급해준 CA의 인증서까지 같이 검증한다. 도메인의 인증이 올바르더라도, 이를 발급해준 기관이 이상할 경우 해당 인증서 또한 믿을 수 없기 때문. 일종의 보증서라고 봐도 무방하다.\r\n\r\n일례로, 한국의 화폐 만원권이 만원의 가치를 가질 수 있는 이유는 한국은행이 이를 보증하기 때문. 반대로 핫한 가상화폐의 경우, 가상화폐의 가치를 보증해주는 기관이 없다. 때문에 가치가 수시로 변동하며, 언제든 그 가치와 기능을 잃을 수 있다.\r\n\r\n> <b class=\"teal-600\">fullchain.pem</b>의 존재의미  \r\n> 어차피 `cert.pem`과 `chain.pem`이 제공되는데, 둘의 통합인증서가 무슨 의미가 있냐고 생각할 수 있다. `fullchain.pem`은 두 인증서를 통합함으로써, `cert.pem`과 `chain.pem`의 매칭여부를 확인할 수 있다.\r\n\r\n# Tomcat에 SSL 인증서 적용하기\r\n\r\nTomcat Native 설치여부에 따라 적용방법이 조금씩 달라진다. SSL 인증서는 기본적으로 `pem` 확장자로 제공된다.\r\n\r\nTomcat Native는 `pem` 확장자 인증서를 바로 인식할 수 있지만, 일반적인 Tomcat은 `pem`을 인식할 수 없어 `jks` 등 다른 형태의 인증서로 변환해야한다.\r\n\r\n## Tomcat Native 설치\r\n\r\n``` bash\r\nsudo apt-get install libtcnative-1\r\n```\r\n\r\nUbuntu에선 위 라이브러리 설치를 통해 Tomcat Native를 적용할 수 있다.\r\n\r\n## Tomcat의 server.xml에 인증서 적용하기\r\n\r\n[[SSL] Tomcat에 SSL 적용하기](/posts/2021/08/20/apply-ssl#SSL-인증서%20적용하기) 게시글에서 자세한 내용을 확인할 수 있다.\r\n\r\n위 게시글의 방법대로 인증서를 적용하고 Tomcat을 재기동한 뒤 `https://itcode.dev`와 같이 HTTPS 프로토콜을 사용하여 접속을 시도하자. 반드시 접속 전에 HTTPS의 서비스 포트를 확인하자. Tomcat의 기본 HTTPS 포트는 8443이다.\r\n\r\nHTTPS 접속이 정상적이라면 성공이다. 인증서 정보 또한 확인할 수 있다.\r\n\r\n# 목표\r\n\r\n* <del class=\"grey-400\">라즈베리파이에 Ubuntu 서버를 구축한다.</del>\r\n* <del class=\"grey-400\">Tomcat을 구동하여 페이지를 호스팅한다.</del>\r\n* <del class=\"grey-400\">도메인을 입힌다.</del>\r\n* <del class=\"grey-400\">SSL 인증서를 발급하여 HTTPS 통신을 제공한다.</del>\r\n* SSH, RDP 등의 원격 통신환경을 구축한다.\r\n* MariaDB를 설치하여 DB 통신을 수행한다.","url":["2021-09-06-raspberry-ssl-domain","2021","09","06","raspberry-ssl-domain"]},{"header":{"title":"[라즈베리파이 4] 라즈베리파이에 도메인 입히기","excerpt":"지금까지 과정을 거치면서 라즈베리파이에 OS를 설치하고, Tomcat을 구동하여 웹 서버로 동작할 수 있도록 환경을 구축했다. 이제 우리는 라즈베리파이의 IP로 접속하여 웹 사이트를 호스팅할 수 있다. 하지만 정상적인 페이지라면 IP를 입력하여 접속하지 않는다. Domain을 발급받아 IP에 연동하고, 이를 URL 주소로 사용할 것이다. 이 장에서는 Domain을 직접 구입하고 라즈베리파이 서버에 이를 연동한다.","coverImage":"https://user-images.githubusercontent.com/50317129/131238727-666f2aaa-d759-4f62-af73-3856086da73d.png","date":"2021-09-04T12:09:04","type":"posts","category":"Ubuntu","tag":["라즈베리파이","Ubuntu","도메인"],"comment":true,"publish":true},"name":"2021-09-04-raspberry-domain.md","content":"\r\n# 개요\r\n\r\n지금까지 과정을 거치면서 라즈베리파이에 OS를 설치하고, Tomcat을 구동하여 웹 서버로 동작할 수 있도록 환경을 구축했다.\r\n\r\n이제 우리는 라즈베리파이의 IP로 접속하여 웹 사이트를 호스팅할 수 있다.\r\n\r\n하지만 정상적인 페이지라면 IP를 입력하여 접속하지 않는다. Domain을 발급받아 IP에 연동하고, 이를 URL 주소로 사용할 것이다.\r\n\r\n이 장에서는 Domain을 직접 구입하고 라즈베리파이 서버에 이를 연동한다.\r\n\r\n# 무슨 도메인을 쓰지?\r\n\r\n일전 [게시글](/posts/2021/08/18/freenom-domain)에서 Freenom을 통해 무료로 도메인을 받는 과정에 대해 다룬적이 있다.\r\n\r\n무료도 상관없지만, Freenom은 실 서비스에 사용하기에 매우 부적합하다.\r\n\r\nTLD 중 어떤 걸 사용할까 고민했다. 개인적으론 `io` 도메인의 트렌디함에 끌렸지만, 가비아 기준 도메인 비용이 무려 연 20만원... 반드시 `io`가 필요하지도 않은 마당에 연에 20을 태우는 건 너무 비효율적이라 생각했다.\r\n\r\n원랜 대중적인 `com`으로 하려했으나, 조사 중 `dev`라는 개발자스러운 도메인이 있음을 확인하여 이를 선택하기로 했다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132054483-01b3e988-376d-444f-9d5e-8415368e0822.png)\r\n\r\n[Google Domains](https://domains.google/)에서 구매하기로 했으며, Google Domains 기준 일반가는 12$다.\r\n\r\n<br />\r\n\r\n뭐든지 네이밍이 제일 어렵다. 게임 캐릭터 닉네임을 정하는 것도 그렇고, 변수명을 짓는 것도 그렇다.\r\n\r\n유명한 도메인인 `socket.io`처럼 뭔가 `dev`를 적절히 이용하여 하나의 문장처럼 보이는 도메인을 생성하고 싶었다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132054569-31a96ab2-652f-4631-849f-759d3c82f823.png)\r\n\r\n<br />\r\n\r\n<p class=\"orange-600\" align=\"center\">단어에 따라 프리미엄가가 붙기도 하며, 단어의 고유화 정도에 따라 같은 프리미엄이라도 가격이 다르게 적용된다.</p>\r\n\r\n<br />\r\n\r\n그렇다고 너무 <span class=\"amber-600\">범용적인 단어를 사용하면 프리미엄</span>이랍시고 가격을 매우 비싸게 받는다.... 일례로 `unix.dev`는 unix라는 보통명사가 들어갔음에도 아직 발급되지 않았는데, 프리미엄 가격이 무려 1,000$가 넘어간다. `webapps.dev`도 매우 비싸긴 마찬가지.\r\n\r\n하지만 여러 단어를 조합해서 만드는 문장은 인식을 잘 못하는지, 찾다보면 꽤 괜찮은 도메인임에도 프리미엄이 붙지 않기도 하다.\r\n\r\n고민끝에 선정한 후보는 아래와 같다.\r\n\r\n* itcode.dev\r\n* mustdo.dev\r\n* imnow.dev\r\n\r\n셋 다 프리미엄이 붙지 않으며, 최대한 도메인에 개발자스러움을 담았다. 원랜 `mustdo.dev`로 하려 했으나, `itcode.dev`의 깔끔함 때문에 막판에 이 쪽으로 선회했다.\r\n\r\n# Google Domains에서 도메인 발급받기\r\n\r\n도메인을 발급받을 수 있는 사이트는 여러군데가 있으나, 이 장에서는 Google Domains를 기준으로 설명한다.\r\n\r\n이유는 그냥 구글이라서.\r\n\r\n## 준비물\r\n\r\n* 서버\r\n* 해외결제를 지원하는 결제수단\r\n\r\n필자가 도메인을 발급받을 때 필요했던 준비물은 위와 같다.\r\n\r\n만약 Google Domains가 아닌 국내 사이트에서 결제한다면 해외결제는 신경쓰지 않아도 된다. Google의 경우 해외 서비스이므로 해외결제가 지원되야 한다.\r\n\r\n## 1. 도메인 결정하기\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132057934-b103e4ef-157d-46e1-b9aa-52a9b8f273c1.png)\r\n\r\n원하는 도메인을 검색하자.\r\n\r\n도메인을 골랐다면 우측 가운데 [카트] 버튼을 클릭하여 장바구니에 담는다.\r\n\r\n`dev` 도메인과 같이 몇몇 일부 도메인은 <span class=\"red-400\">More secure</span> 정책이 적용되어 SSL을 강제한다.\r\n\r\n이러한 정책이 적용된 도메인은 <span class=\"red-600\">HTTP 서비스가 불가능하며, 반드시 HTTPS 서비스만을 제공</span>함에 유의하자.\r\n\r\n## 2. 화폐 단위 선택하기\r\n\r\n첫 결제라면 결제할 화폐 단위를 선택해야한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132058739-2766fbd9-791c-4e19-971f-7520e46de5b2.png)\r\n\r\n아쉽게도 원화는 지원되지 않으므로, 지원되는 화폐 중 하나를 선택한다.\r\n\r\n이 장에서는 달러($)를 기준으로 수행한다.\r\n\r\n> <span class=\"yellow-600\">해외결제의 경우 달러가 수수료 측면에서 이득이다</span>  \r\n> 필자는 군대 전역 후 카드사 콜센터에서 잠깐 일을 한 적이 있었다. 거기서 얻은 지식 중 하나로, <span class=\"orange-600\">해외결제는 달러를 기준으로 환전</span>한다. 만약 원화 -> 유로로 결제한다면, 실제론 <span class=\"blue-600\">원화 -> 달러 -> 유로</span>로 두 차례 환전이 일어나 수수료 역시 이중으로 나간다.  \r\n> 이는 해외에서 원화를 결제할때도 마찬가지. 해외에서 국내 카드로 원화결제를 수행할 경우 <span class=\"blue-600\">원화 -> 달러 -> 원화</span>라는 해괴한 매커니즘으로 결제되니, 해외결제는 그냥 속편하게 달러로 하자.\r\n\r\n## 3. 사용자 정보 입력\r\n\r\n첫 결재라면 도메인 소유주 정보를 입력받는다. 적절히 입력하자.\r\n\r\n우편번호의 경우 <span class=\"red-600\">미국 우편번호만을 입력</span>받으니, 구글에 그냥 미국 주소 아무거나 쳐서 우편번호 하나 확인하여 입력하자.\r\n\r\n## 4. 도메인 구매\r\n\r\n도메인 구매를 수행한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132058813-3eb136bc-d801-40ac-a1c3-83a68478f6e4.png)\r\n\r\n<span class=\"red-600\">[Read trademark notice]</span>는 starcraft라는 브랜드명을 도메인으로 사용함에 따라 관련 약관의 동의를 받는 것이다.\r\n\r\n일반적인 도메인엔 해당 과정이 존재하지 않다.\r\n\r\n* <span class=\"amber-600\">Registration</span> - 소유 기간 선택 (최소 1년)\r\n* <span class=\"amber-600\">Privacy protection is on</span> - 도메인 소유주 정보를 숨긴다. 후이즈(WHOIS) 등에서 도메인 정보를 조회할 경우, 소유주에 대한 정보를 숨긴 채 제공한다.\r\n* <span class=\"amber-600\">Auto-renew is on</span> - 도메인 자동 갱신 활성화\r\n* <span class=\"grey-600\">Custom email</span> - 도메인 이메일계정 활성화\r\n\r\nCustom email은 자신의 도메인으로 된 구글 이메일을 만드는 것이다. 즉, `example@starcraft.dev`와 같이 <span class=\"orange-500\">자신이 구입한 도메인으로 이메일 아이디를 생성</span>해주는 서비스다.\r\n\r\n물론 무료는 아니고, 유저당 월 12$ 비용이 청구된다. 도메인 유지 비용이 연 12$임을 감안하면 10배에 달하는 비용이다. 비즈니스 등 반드시 필요한 서비스가 아니라면 해당 서비스는 체크를 해제하자.\r\n\r\n# IP와 도메인 연결하기\r\n\r\n도메인 구입이 완료되면 소유주 정보에 입력한 이메일로 구매 영수증과 함께 안내 메일이 수신된다.\r\n\r\n구입 이후 도메인은 즉시 사용이 가능하다. 이 도메인을 라즈베리파이에 연동하기 위해선 DNS 설정을 통해 <span class=\"green-600\">라즈베이파이의 IP와 도메인을 연결</span>해주면 된다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132080600-d1083686-ceb4-4046-a6ab-c4a0c7a83f90.png)\r\n\r\nGoogle Domains의 DNS 메뉴에서 DNS 설정을 관리할 수 있다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132080643-7a92c2ec-8b8a-4428-b4c3-4ba149bb6875.png)\r\n\r\n[맞춤 레코드 관리]를 클릭하여 DNS Record를 추가한다.\r\n\r\n<span class=\"green-600\">A Record를 하나 추가하여 데이터에 라즈베리파이의 IP를 입력</span>하고 저장한다. 수 분 이내로 반영이 완료된다.\r\n\r\n> <b class=\"teal-A400\">사설 IP 입력? 멈춰!</b>  \r\n> 공유기 환경을 사용한다면 IP 확인 시 <span class=\"pink-600\">192.168.0.xxx</span>와 같은 사설 IP가 출력될 것이다. A Record엔 사설 IP가 아닌 실제 IP를 입력해야한다. 공유기 설정이나 [findIP](https://www.findip.kr/)에서 확인할 수 있다.\r\n\r\n# 도메인 연동 확인\r\n\r\n``` bash\r\nnslookup [도메인]\r\n```\r\n\r\n윈도우든 Ubuntu든 위 명령어를 입력하여 도메인과 연동된 IP를 확인할 수 있다.\r\n\r\n내가 입력한 IP가 정상적으로 나온다면 성공이다.\r\n\r\n라즈베리파이에서 Tomcat을 기동하고 `example.com:8080`에 접속하여 페이지가 잘 출력되는지 확인하자.\r\n\r\n## 연결이 되지 않아요!\r\n\r\n* `xxx.xxx.xxx.xxx:8080`으로 접속되는지 확인\r\n* 접속이 될 경우 외부에서 문제없이 접속되므로, 도메인에 연결한 IP가 올바른지 확인\r\n* 접속되지 않을 경우 애초에 외부에서 접속되지 않는 것이므로 방화벽이나 포트 통신에 문제가 없는지 확인\r\n* 공유기 환경일 경우 IP주소의 포트포워딩이 설정되어있는지 확인\r\n\r\n# 목표\r\n\r\n* <del class=\"grey-400\">라즈베리파이에 Ubuntu 서버를 구축한다.</del>\r\n* <del class=\"grey-400\">Tomcat을 구동하여 페이지를 호스팅한다.</del>\r\n* <del class=\"grey-400\">도메인을 입힌다.</del>\r\n* SSL 인증서를 발급하여 HTTPS 통신을 제공한다.\r\n* SSH, RDP 등의 원격 통신환경을 구축한다.\r\n* MariaDB를 설치하여 DB 통신을 수행한다.\r\n\r\n`dev` 도메인은 반드시 SSL이 필요하다. 더군다나 현재에 배포되는 모든 웹 페이지엔 HTTPS 적용을 거의 강제하다시피 함으로 HTTPS 적용을 목표에 추가한다.","url":["2021-09-04-raspberry-domain","2021","09","04","raspberry-domain"]},{"header":{"title":"[Ubuntu] ufw로 방화벽 포트 설정하기","excerpt":"모든 건물에는 입구가 존재한다. 일반적인 상황에서, 누구든지 해당 건물에 드나들기 위해선 좋든 싫든 입구를 통과해야한다. 이 입구라는 것이 또 마냥 열려있는 건 아니라서, 필요 시엔 개방되어있다가도 특정 시간에는 폐쇄되기도 한다. 심지어 어떤 곳은 까다롭기 그지없어서, 사람을 가려받기도 한다. 이를테면 보안구역이라던가, 금요일 밤의 클럽이라던가. PC통신도 이와 원리가 별반 다를 바 없다. 보기엔 그냥 막 통신하는 것 같아도, 저마다 할당받은 입구를 통해 PC에 드나든다. PC가 건물이라고 한다면, PC의 입구는 포트(PORT)라 할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/132039520-3efc64ec-28c2-499c-af29-dfe153f53852.png","date":"2021-09-04T01:26:20","type":"posts","category":"Ubuntu","tag":["Ubuntu","방화벽"],"comment":true,"publish":true},"name":"2021-09-04-firewall-with-ufw.md","content":"\r\n# 개요\r\n\r\n모든 건물에는 입구가 존재한다. 일반적인 상황에서, 누구든지 해당 건물에 드나들기 위해선 좋든 싫든 입구를 통과해야한다.\r\n\r\n이 입구라는 것이 또 마냥 열려있는 건 아니라서, 필요 시엔 개방되어있다가도 특정 시간에는 폐쇄되기도 한다.\r\n\r\n심지어 어떤 곳은 까다롭기 그지없어서, 사람을 가려받기도 한다. 이를테면 보안구역이라던가, 금요일 밤의 클럽이라던가.\r\n\r\n<br />\r\n\r\nPC통신도 이와 원리가 별반 다를 바 없다. 보기엔 그냥 막 통신하는 것 같아도, 저마다 할당받은 입구를 통해 PC에 드나든다.\r\n\r\nPC가 건물이라고 한다면, PC의 입구는 포트(PORT)라 할 수 있다.\r\n\r\n<br />\r\n\r\n모든 프로그램은 PC와의 통신 시 임의의 입구, 포트를 할당받는다. 프로그램은 해당 포트를 통해 들어오고, 나가며 정해진 동작을 수행한다.\r\n\r\n만약 해당 포트가 막혀있다면, 해당 컴퓨터를 대상으론 정상적으로 동작할 수 없을 것이다.\r\n\r\n이 프로그램이 내 PC에 필요하다면 포트를 열어주면 될 것이고, 아니라면 포트를 닫음으로써 접근하지 못하게 함이 바람직하다. 혹은 인증된 소수의 프로그램에게만 포트를 허용할 수도 있을 것이다.\r\n\r\n<br />\r\n\r\n말 그대로 보안과 매우 밀접한 개념으로써, <span class=\"red-600\">방화벽 설정을 통해 원하는 포트를 원하는 대상에게 개방/폐쇄</span>할 수 있다.\r\n\r\nUbuntu에서 ufw를 통해 방화벽 설정을 원하는대로 설정해보자.\r\n\r\n# 그냥 다 열면 안 돼?\r\n\r\n조선시대 제주도는 문을 잠근다는 개념이 매우 미약했다고 한다.\r\n\r\n옛 교통방식과 섬이라는 폐쇄적인 환경 덕분에 유동인구가 매우 적었고, 각 마을 주민에 대한 신원이 확실했을 것이다. 내륙에 비해 외지인이 방문/거주할 일도 매우 적었을 것이다.\r\n\r\n이처럼 주변 환경과 사람들 간의 신뢰성이 있다면 굳이 그렇게 폐쇄적일 필요는 없을지도 모른다.\r\n\r\n<br />\r\n\r\n하지만 인터넷이라는 환경은 이와 결이 매우 다르다. 인터넷에 연결만 되어있다면 누구나 내 PC에 접근할 수 있는 잠재적 가능성을 가진다. 누가, 왜, 무엇을 위해 오는지도 알 수 없다.\r\n\r\n이 경우 문을 아무렇게나 열어재껴놓는건 바람직한 상황이 아닐 것이다.\r\n\r\n<br />\r\n\r\n방화벽은 이러한 문제로부터 PC를 최대한 보호하기위해, <span class=\"green-600\">기본적으로 폐쇄적인 설정</span>을 가진다. 일단 안 된다고 질러놓고 보는 셈이다.\r\n\r\n보안을 위해서 방화벽은 가급적 폐쇄하되, 필요한 프로그램만 개방하는 화이트리스트 방식을 쓰는 습관을 들이도록 하자.\r\n\r\n# ufw\r\n\r\n기본적인 방화벽 명령어 `iptables`가 있지만, 명령어가 그리 직관적이지 않다는 단점이 있다. 이에 비해 `ufw`는 `iptables`에 비해 훨씬 쉽고 직관적인 명령어로 다룰 수 있다.\r\n\r\n`iptables`과 성능상의 차이가 거의 없다는 점을 감안하면 확실한 장점.\r\n\r\n## ufw 설치\r\n\r\nufw는 기본 명령어가 아니다. <span class=\"blue-400\">ufw를 설치</span>하자.\r\n\r\n``` bash\r\nsudo apt-get install ufw\r\n```\r\n\r\n위 명령어를 통해 설치할 수 있다.\r\n\r\n## ufw 상태 관리 명령어\r\n\r\nufw의 상태를 관리하는 명령어다.\r\n\r\n``` bash\r\n# ufw 활성화\r\nsudo ufw enable\r\n\r\n# ufw 비활성화\r\nsudo ufw disable\r\n\r\n# ufw 상태 확인\r\nsudo ufw status verbose\r\n```\r\n\r\nufw가 설치된 후 방화벽에 영향을 주는 걸 방지하기 위해 <span class=\"blue-400\">기본적으로 비활성화 상태</span>로 설치된다.\r\n\r\n`sudo ufw enable` 명령어를 입력하여 활성화하자.\r\n\r\n## ufw 정책 관리 명령어\r\n\r\nufw에 적용된 <span class=\"blue-400\">정책을 관리</span>한다.\r\n\r\n``` bash\r\n# 정책 조회\r\nsudo ufw show raw\r\n\r\n# 기본 정책 허용\r\nsudo ufw default allow\r\n\r\n# 기본 정책 차단\r\nsudo ufw default deny\r\n```\r\n\r\n모든 포트 통신에 대한 일괄 허용/차단이 가능하다.\r\n\r\n``` bash\r\n# 들어오는 통신 차단\r\nsudo ufw default deny incoming\r\n\r\n# 나가는 통신 허용\r\nsudo ufw default allow outgoing\r\n```\r\n\r\n오는사람 막고 가는사람 안 막는다라는 말을 들어본 적이 있을 것이다. 보안도 똑같다. 내게 들어오는 통신은 최대한 폐쇄적으로, 내게서 나가는 통신은 개방적으로 대한다.\r\n\r\n## ufw 정책 설정 명령어\r\n\r\n``` bash\r\n# 80포트(HTTP) 허용\r\nsudo ufw allow 80\r\n\r\n# 80포트(HTTP) TCP 허용\r\nsudo ufw allow 80/tcp\r\n\r\n# 80포트(HTTP) UDP 허용\r\nsudo ufw allow 80/udp\r\n\r\n# 80포트(HTTP) 허용\r\nsudo ufw allow http\r\n```\r\n\r\n위 명령어는 <span class=\"blue-400\">HTTP 포트 80을 허용하는 명령어</span>들의 모음이다.\r\n\r\nufw는 고유 서비스 이름을 사용해서 포트를 관리할 수 있다. HTTP(80), HTTPS(443), FTP(21), SSH(22) 등이 이에 해당한다.\r\n\r\n`allow` 이외에도 `deny`를 통해 통신을 거부하거나, `delete`를 통해 해당 정책을 아예 지워버릴 수도 있다.\r\n\r\n정책을 지우게 되면 ufw에 설정된 기본 정책을 따르게 된다.\r\n\r\n## ufw 정책 세부설정 명령어\r\n\r\n### IP 통신 정책\r\n\r\n``` bash\r\n# 192.168.0.100 IP의 통신 허용\r\nsudo ufw allow from 192.168.0.100\r\n\r\n# 192.168.0.100 ~ 200 대역의 IP의 통신 허용\r\nsudo ufw allow from 192.168.0.100/200\r\n```\r\n\r\n위 명령어를 통해서 <span class=\"blue-400\">특정 IP 혹은 IP 대역의 통신을 관리</span>할 수 있다.\r\n\r\n### IP 및 포트 통신 정책\r\n\r\n``` bash\r\n# 192.168.0.100 IP의 80포트 허용\r\nsudo ufw allow from 192.168.0.100 to any port 80\r\n\r\n# 192.168.0.100 IP의 80포트 TCP 허용\r\nsudo ufw allow from 192.168.0.100 to any port 80 proto tcp\r\n```\r\n\r\n<span class=\"blue-400\">특정 IP의 특정 포트만 허용/차단</span>할 수도 있다.\r\n\r\n## ufw 정책 수정 명령어\r\n\r\n``` bash\r\nsudo ufw status numbered\r\n```\r\n\r\n현재 적용된 정책을 인덱스 번호와 함께 보여준다.\r\n\r\n해당 번호를 통해 <span class=\"blue-400\">정책을 수정, 삭제</span>할 수 있다.\r\n\r\n``` bash\r\n# 1번 정책을 80포트 차단 정책으로 변경\r\nsudo ufw insert 1 deny 80\r\n\r\n# 2번 정책을 192.168.0.100 IP의 통신 허용 정책으로 변경\r\nsudo ufw insert 2 allow from 192.168.0.100\r\n```\r\n\r\n## ufw 정책 삭제 명령어\r\n\r\n``` bash\r\n# 1번 정책 삭제\r\nsudo ufw delete 1\r\n```\r\n\r\n# 정리\r\n\r\n서비스에서 서버가 갖는 역할과 비중을 생각해본다면, 서버의 보안은 서비스의 안정성과 직결되는 중요한 문제다.\r\n\r\n때문에 서버의 보안은 귀찮을정도로 견고하게 구성되는 것이 바람직하다.\r\n\r\n<br />\r\n\r\n프로그램, 웹 등 모든 서비스의 기초는 데이터의 통신이므로, 통신을 잘 제어하는 것이 중요하다.\r\n\r\n반드시 필요한 통신만을 허가하고 관리하여 서버가 항상 최상의 보안을 유지할 수 있도록 보안정책을 구성하자.","url":["2021-09-04-firewall-with-ufw","2021","09","04","firewall-with-ufw"]}],"categories":{"All":{"count":67,"flag":true},"Ubuntu":{"count":3,"flag":true},"RaspberryPi":{"count":3,"flag":true},"알고리즘":{"count":32,"flag":false},"잡담":{"count":2,"flag":false},"WEB":{"count":7,"flag":false},"CS":{"count":10,"flag":false},"React":{"count":1,"flag":false},"JAVA":{"count":3,"flag":false},"Jekyll":{"count":4,"flag":false},"WAS":{"count":2,"flag":false}},"images":["celeb1.gif","celeb10.gif","celeb11.gif","celeb12.gif","celeb13.gif","celeb14.gif","celeb15.gif","celeb16.gif","celeb2.gif","celeb3.gif","celeb4.gif","celeb5.gif","celeb6.gif","celeb7.gif","celeb8.gif","celeb9.gif","city1.gif","city10.gif","city11.gif","city12.gif","city13.gif","city14.gif","city15.gif","city2.gif","city3.gif","city4.gif","city4.jpg","city5.gif","city6.gif","city7.gif","city8.gif","city9.gif","code1.gif","code2.gif","code3.gif","funk1.gif","funk2.gif","funk3.gif","funk4.gif","funk5.gif","funk6.gif","game1.gif","signal.gif"],"category":"Ubuntu","page":1,"hash":"15a6cc3cb67"},"__N_SSG":true}