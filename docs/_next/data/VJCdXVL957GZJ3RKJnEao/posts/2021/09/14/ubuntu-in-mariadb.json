{"pageProps":{"page":{"type":"posts","prev":{"header":{"title":"[라즈베리파이 4] 원격 환경 구축하기 (SSH, RDP)","excerpt":"이제 얼추 라즈베리파이에 그럴듯한 웹서버 환경이 구축됐다. 하지만 라즈베리파이를 다루기 위해서 기기에 직접 모니터랑 키보드, 마우스를 연결해서 쓰긴 좀 번거롭다. 이 주제에서의 라즈베리파이는 어디까지나 서브로 운영되는 웹서버이므로, 메인 컴퓨터가 될 수 없다. 즉, 개발같은 대부분의 작업은 메인 컴퓨터에서 진행하고, 배포만 서버가 담당하는 방식이다. 이렇게 디바이스가 서로 나뉠 경우, 두 디바이스의 접근이 서로 원활해야한다. 한 마디로, 원격 환경이 필요하다. 이 장에서는 라즈베리파이에 원격 환경을 구축한다. SSH, RDP 통신을 구축함으로써 SSH 혹은 윈도우 PC 어디에서나 라즈베리파이에 접근할 수 있도록 구성한다.","coverImage":"https://user-images.githubusercontent.com/50317129/131238727-666f2aaa-d759-4f62-af73-3856086da73d.png","date":"2021-09-08T22:40:38","type":"posts","category":"RaspberryPi","tag":["라즈베리파이","Ubuntu","SSH","RDP"],"comment":true,"publish":true},"name":"2021-09-08-raspberry-remote.md","content":"\r\n# 개요\r\n\r\n이제 얼추 라즈베리파이에 그럴듯한 웹서버 환경이 구축됐다. 하지만 라즈베리파이를 다루기 위해서 기기에 직접 모니터랑 키보드, 마우스를 연결해서 쓰긴 좀 번거롭다.\r\n\r\n이 주제에서의 라즈베리파이는 어디까지나 서브로 운영되는 웹서버이므로, 메인 컴퓨터가 될 수 없다. 즉, 개발같은 대부분의 작업은 메인 컴퓨터에서 진행하고, 배포만 서버가 담당하는 방식이다. 이렇게 디바이스가 서로 나뉠 경우, 두 디바이스의 접근이 서로 원활해야한다.\r\n\r\n한 마디로, 원격 환경이 필요하다. 이 장에서는 <span class=\"amber-600\">라즈베리파이에 원격 환경을 구축</span>한다. <span class=\"primary\">SSH</span>, <span class=\"primary\">RDP</span> 통신을 구축함으로써 SSH 혹은 윈도우 PC 어디에서나 라즈베리파이에 접근할 수 있도록 구성한다.\r\n\r\n# SSH 환경 구축하기\r\n\r\n<span class=\"primary\">SSH(Secure SHell)</span>는 네트워크에 연결된 PC에 로그인하여 원격 PC에서 해당 PC로 명령어를 실행하는 등의 Shell 통신을 수행하는 프로토콜이다.\r\n\r\nSSH 환경을 구축하여 원격으로 Ubuntu Shell에 접근할 수 있다. 이를 통해 원격으로 명령어를 입력하여 Ubuntu를 다룰 수 있다. Windows와 달리 Linux는 거의 모든 프로그램이 명령어 기반으로 동작하므로 어려움없이 Ubuntu를 다룰 수 있다.\r\n\r\n## 준비물\r\n\r\n* openssh-server 패키지\r\n* SSH(22) 서비스 포트 개방\r\n\r\n## OpenSSH Server 패키지 설치\r\n\r\nOpenSSH 패키지는 크게 두 가지가 있는데, 하나는 OpenSSH Client, 다른 하나는 OpenSSH Server다.\r\n\r\n* <span class=\"teal-500\">OpenSSH Server</span> - 해당 OS에 SSH 서비스 환경을 구축함\r\n* <span class=\"teal-500\">OpenSSH Client</span> - 타 PC의 SSH 접속 기능을 추가함\r\n\r\nOpenSSH Server를 설치하여 Ubuntu에 SSH에 접근할 수 있도록 환경을 구성하자.\r\n\r\n``` bash\r\nsudo apt-get install -y openssh-server\r\n```\r\n\r\n설치후 추가로 해야할 작업은 없다.\r\n\r\n## 포트 개방\r\n\r\nSSH가 서비스되는 포트를 개방한다. 기본적으로 22번 포트를 사용한다.\r\n\r\n``` bash\r\nsudo ufw allow 22\r\n```\r\n\r\nufw를 통해 22번 포트를 개방한다.\r\n\r\n## SSH 접속하기\r\n\r\n다른 PC에서 Ubuntu로 접속해보자. Windows 혹은 다른 Linux 기반 OS 등, SSH 프로토콜을 사용할 수 있는 모든 OS 및 프로그램이라면 가능하다.\r\n\r\n``` bash\r\nssh username@xxx.xxx.xxx.xxx\r\n```\r\n\r\n위 명령어를 통해 입력한 IP와 계정명으로 접근을 시도할 수 있다. IP는 라즈베리파이의 IP를, 계정명은 라즈베리파이의 계정명을 입력하면 된다. IP 대신 도메인을 입력해도 된다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132518427-796d71c2-7331-4a99-8d7f-65eef29344bb.png)\r\n\r\n접속정보가 유효하다면 비밀번호를 입력하여 로그인을 수행해야한다. 로그인이 완료되면 Shell에 명령어를 입력할 수 있으며, 이를 통해 원격지에서도 Ubuntu를 다룰 수 있게된다.\r\n\r\n# RDP 환경 구축하기\r\n\r\n<p class=\"red-500\" align=\"center\">※ Ubuntu에 UI가 존재하는 Ubuntu Desktop 혹은 이에 준하는 UI 패키지가 설치된 OS에만 적용 가능합니다.</p>\r\n\r\n비록 Ubuntu가 대부분의 동작을 명령어로만 처리할 수 있긴 하지만, 간혹 몇몇 작업들은 반드시 UI가 필요하기도 하다. 이를테면 브라우저로 리눅스에서의 웹 페이지를 디버깅한다던가, 동영상을 본다던가. 혹시 Oracle DBMS를 설치하고자 한다면 반드시 UI를 사용할 수 있는 환경이 필요하다.\r\n\r\n심지어 우리가 설치한 Ubuntu도 UI가 있는데, 기껏 설치한 UI는 놀리고 SSH만 쓰기도 난감하다. 물론 라즈베리파이에 HDMI를 연결해서 쓰면 된다지만, 그 것도 번거롭긴 마찬가지다.\r\n\r\n내 경우 듀얼모니터를 사용하고 있어서 여건이 나쁘진 않다. 그러나 모니터가 하나라면 라즈베리파이를 연결한 순간 원래 PC는 사용이 제한되버린다.\r\n\r\n<br />\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132518566-fb8858ce-0b0c-4483-9a84-c3dc718f3e5f.png)\r\n\r\nWindows에는 <span class=\"primary\">원격 데스크톱 연결</span>이라는 기능이 존재한다. Windows 간 원격이 가능한 기능으로써, 팀뷰어나 AnyDesk를 생각하면 된다. 일종의 내장 원격 프로그램.\r\n\r\n말로만 들어보면 왠지 Windows 간 통신만 지원할 것 같다. 필자도 그렇게 생각했었다. 하지만 Ubuntu는 내 생각 이상으로 잡다한게 많았다. xrdp 패키지를 설치하면 Windows의 RDP와 통신이 가능하다.\r\n\r\n## 준비물\r\n\r\n* xrdp 패키지\r\n* RDP(3389) 서비스 포트 개방\r\n\r\n## xrdp 패키지 설치\r\n\r\n``` bash\r\nsudo apt-get install -y xrdp\r\n```\r\n\r\n위 명령어를 입력하여 설치한다.\r\n\r\n## 포트 개방\r\n\r\nRDP가 서비스되는 포트를 개방한다. 기본적으로 3389번 포트를 사용한다.\r\n\r\n``` bash\r\nsudo ufw allow 3389\r\n```\r\n\r\nufw를 통해 3389번 포트를 개방한다.\r\n\r\n## RDP 접속하기\r\n\r\n다른 Windows PC에서 Ubuntu로 접속해보자. 시작 프로그램에서 <span class=\"blue-400\">[원격 데스크톱 연결]</span>을 입력하여 프로그램을 실행하자.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132518999-0293653c-ccef-4181-a084-71022f83fc47.png)\r\n\r\nUbuntu IP를 입력하여 연결한다. 정상적으로 연결되면 Ubuntu의 접속정보를 통해 로그인을 수행한다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/132519253-e4ec536d-d6a4-4fea-8905-50451a892a5b.png)\r\n\r\n접속에 성공하면 원격으로 Ununtu UI를 다룰 수 있게 된다. 하지만 여러 기술적 한계와 효용성으로 인해 성능이 그리 좋지는 않은 것 같다. 끊김 현상이 좀 심한 것으로 보인다.\r\n\r\n## 검은 화면만 나와요!\r\n\r\n분명히 정상적으로 잘 접속했는데, <span class=\"red-500\">검은화면만 뜨는 경우가 발생</span>하기도 한다.\r\n\r\n꽤 유명한 이슈로, 설정 몇 개만 수정하면 해결된다.\r\n\r\n``` bash\r\nsudo vi /etc/xrdp/startwm.sh\r\n\r\n# 파일의 맨 아랫 줄에 아래 내용 추가\r\nunset DBUS_SESSION_BUS_ADDRESS\r\nunset XDG_RUNTIME_DIR\r\n\r\ntest -x /etc/X11/Xsession && exec /etc/X11/Xsession\r\nexec /bin/sh /etc/X11/Xsession\r\n\r\n# 파일 저장\r\n:wq\r\n```\r\n\r\n`/etc/xrdp/startwm.sh` 파일에 위 내용을 추가하고 저장하면 된다.\r\n\r\n``` bash\r\nservice xrdp restart\r\n```\r\n\r\n이후 서비스를 재시작하고 시도하면 정상적으로 접속될 것이다.\r\n\r\n# 목표\r\n\r\n* <del class=\"grey-400\">라즈베리파이에 Ubuntu 서버를 구축한다.</del>\r\n* <del class=\"grey-400\">Tomcat을 구동하여 페이지를 호스팅한다.</del>\r\n* <del class=\"grey-400\">도메인을 입힌다.</del>\r\n* <del class=\"grey-400\">SSL 인증서를 발급하여 HTTPS 통신을 제공한다.</del>\r\n* <del class=\"grey-400\">SSH, RDP 등의 원격 통신환경을 구축한다.</del>\r\n* MariaDB를 설치하여 DB 통신을 수행한다.\r\n\r\n이로써 어디에서나 라즈베리파이의 Ubuntu에 접속하여 조작할 수 있다. Shell과 UI 둘 다 조작이 가능하므로 필요에 따라 원하는 방식으로 접근하면 될 것이다.","url":["2021-09-08-raspberry-remote","2021","09","08","raspberry-remote"]},"next":null},"group":[],"data":{"header":{"title":"[라즈베리파이 4] MariaDB 구축하기","excerpt":"드디어 라즈베리파이 개발환경 구축의 마지막 장이다. DBMS는 다양한 데이터를 저장하는 저장소인 DB(Database)를 관리하는 시스템이다. 필요한 데이터를 DB에 저장하고, 이를 적재적소에 꺼내어 데이터를 다룰 수 있도록 해준다. 웹 서버와 DBMS를 연동하면 사용자의 계정 정보, 설정 등을 저장하고 활용할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/131238727-666f2aaa-d759-4f62-af73-3856086da73d.png","date":"2021-09-14T02:04:02","type":"posts","category":"RaspberryPi","tag":["라즈베리파이","Ubuntu","MariaDB","RDBMS"],"comment":"tru","publish":true},"name":"2021-09-14-ubuntu-in-mariadb.md","content":"<h1 id=\"개요\">개요 <a href=\"#개요\">🔗</a></h1><p>드디어 라즈베리파이 개발환경 구축의 마지막 장이다. 라즈베리파이에 DBMS를 구축한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/50317129/133107200-6b527196-5ee8-41fb-a74d-3faf70e97dda.png\" alt=\"image\"></p>\n<p><span class=\"primary\">DBMS</span>는 다양한 데이터를 저장하는 저장소인 DB(Database)를 관리하는 시스템이다. 필요한 데이터를 DB에 저장하고, 이를 적재적소에 꺼내어 데이터를 다룰 수 있도록 해준다. 웹 서버와 DBMS를 연동하면 사용자의 계정 정보, 설정 등을 저장하고 활용할 수 있다.</p>\n<h1 id=\"if-(!storage.equals(\"dbms\"))\">if (!storage.equals(\"dbms\")) <a href=\"#if-(!storage.equals(\"dbms\"))\">🔗</a></h1><p>HTTP 소켓 통신은 기본적으로 요청이 끝나는 순간 모든 데이터가 소멸된다. 즉, 내 <span class=\"red-400\">브라우저와 웹 사이에서 일어나는 모든 상호작용은 해당 페이지가 닫히는 순간 사라진다</span>는 뜻이다. 때문에 이러한 데이터들의 보관해야 할 경우 별도의 영구적인 보관소가 필요하다.</p>\n<h2 id=\"else-if (storage.equals(\"browser\"))\">else if (storage.equals(\"browser\")) <a href=\"#else-if (storage.equals(\"browser\"))\">🔗</a></h2><p>이를 해소하기 위한 가장 간단한 방법으로, <span class=\"indigo-400\">브라우저에선 쿠키와 로컬/세션 스토리지라는 저장소를 제공</span>한다. JavaScript에서 간단한 API를 통홰 데이터를 저장, 추출할 수 있지만, 주력으로 쓰기엔 여러 제약이 있다.</p>\n<ol>\n<li><span class=\"red-400\">용량 제한</span>이 있으며, 제한 또한 작다.</li>\n<li>모든 데이터가 문자열로 저장되므로, <span class=\"red-400\">데이터의 형태에 제약</span>이 생긴다.</li>\n<li>브라우저에 저장하므로, <span class=\"red-400\">브라우저나 컴퓨터가 바뀌면 데이터가 소실</span>된다.</li>\n<li>동일한 PC의 동일한 브라우저로 다른 사람이 데이터를 저장하면 <span class=\"red-400\">이전 데이터는 덮어씌워진다.</span></li>\n<li>동일한 PC의 동일한 브라우저를 사용하는 <span class=\"red-400\">모든 구성원이 데이터에 제약없이 접근, 수정, 삭제</span>할 수 있다.</li>\n<li>저장소에 별도의 <span class=\"red-400\">보안장치가 마련되지 않는다.</span></li>\n</ol>\n<p>위와 같은 여러 문제점이 존재한다. 데이터의 보안이 제대로 이루어지지도 않으며, 유저별로 데이터를 저장할 수도 없다. 즉, 주요 데이터를 저장하기엔 적합하지 않은 셈.</p>\n<h2 id=\"else-if (storage.equals(\"system\"))\">else if (storage.equals(\"system\")) <a href=\"#else-if (storage.equals(\"system\"))\">🔗</a></h2><p>즉, 브라우저에 영향을 받지않는 외부의 공간에 데이터를 저장해야한다. 가장 간단한 방법으로 서버 파일시스템 내부에 txt나 csv같은 <span class=\"indigo-400\">파일 형태로 저장소를 구성하는 방법</span>을 생각해볼 수 있다. 하지만 이 경우도 어딘가 하나씩 나사가 빠져있다.</p>\n<ol>\n<li>데이터 쓰기 작업이 <span class=\"red-400\">쓰레드에 매우 취약</span>해진다.</li>\n<li>읽기, 쓰기 작업의 경우 <span class=\"red-400\">데이터의 검색 로직이 필요</span>하며, 조건의 복잡도에 따라 검색 로직이 기하급수적으로 복잡해진다.</li>\n<li>데이터 검색 시 전체 데이터를 호출해야하며, <span class=\"red-400\">데이터의 양이 많아질수록 검색에 요구되는 자원 소요량이 많아진다.</span></li>\n</ol>\n<p>쿠키나 브라우저 스토리지가 가진 대다수의 문제들이 해소됐지만, 데이터 관리 영역의 문제들은 여전히 존재하며, 그 규모 또한 무시할 수 없는 수준이다. 즉, 필요한 데이터만을 특정하는 데 많은 자원이 소요되며, 대용량 데이터를 다루는 데 적합하지 않다.</p>\n<h1 id=\"else-if (storage.equals(\"dbms\"))\">else if (storage.equals(\"dbms\")) <a href=\"#else-if (storage.equals(\"dbms\"))\">🔗</a></h1><p>DBMS는 위 저장소들의 문제 대부분을 매우 깔끔하게 해소시켜준다.</p>\n<ol>\n<li><span class=\"green-A400\">하나의 DBMS에 여러 저장소</span>를 생성할 수 있다.</li>\n<li><span class=\"green-A400\">인가된 요청만 DBMS에 접근</span>이 가능하다.</li>\n<li>데이터의 읽기, 쓰기가 <span class=\"green-400\">쓰레드에 구애받지 않는다.</span></li>\n<li>관계형 데이터베이스(RDBMS)의 경우 <span class=\"green-400\">SQL 스크립트</span>를 통해 데이터의 읽기, 쓰기를 효과적으로 수행할 수 있다.</li>\n<li><span class=\"green-400\">PL/SQL</span>을 통해 DBMS 자체적으로 함수나, 스케쥴링을 수행할 수 있다.</li>\n</ol>\n<p>그 밖에도 여러 장점이 있으나, 앞서 언급한 스토리지와 연관된 특징만 나열하면 위와 같이 정리할 수 있다.</p>\n<p>이처럼 DBMS의 존재는 웹 서비스가 좀 더 다채로운 서비스를 제공하는 데 있어서 필수적인 요소나 다름없다.</p>\n<h1 id=\"MariaDB-설치하기\">MariaDB 설치하기 <a href=\"#MariaDB-설치하기\">🔗</a></h1><p>이 장에서는 MariaDB를 설치한다. 여러 DBMS를 사용해봤지만, 대표적인 RDBMS인 ORACLE은 조금 무겁다는 느낌을 받았다. 또한 Linux 환경에 그리 친절하지도 않다. 설치에 반드시 GUI 환경을 요구하거나, 커널 변수의 수정을 요구하는 것은 확실히 부담인 부분. MySQL의 경우 개발진 대부분이 MariaDB로 넘어가기도 했고, 업데이트도 MariaDB가 훨씬 자주 일어나므로 MariaDB의 하위호환이라는 느낌이 강했다.</p>\n<p>NoSQL의 경우 RDBMS와 결이 다르고, 현재 개발 구상 중인 대부분의 서비스가 비정형 데이터를 다루지 않으므로 논외.</p>\n<p>또한 애초에 ORACLE이든 MariaDB든 <span class=\"orange-600\">RDBMS는 기본 기능이 거의 비슷</span>하므로, 단순 데이터 CRUD나 간단한 PL/SQL를 사용하는데 차이가 없다.</p>\n<blockquote>\n<p><b class=\"teal-400\">CRUD?</b><br>Create, Read, Update, Delete의 이니셜로, 데이터에서 할 수 있는 작업인 생성, 읽기, 수정, 삭제를 통칭하는 단어.</p>\n</blockquote>\n<h2 id=\"MariaDB-설치하기\">MariaDB 설치하기 <a href=\"#MariaDB-설치하기\">🔗</a></h2>\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> -y mariadb-server</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>위 명령어를 입력하여 MariaDB를 설치한다. 간단하다. 이게 끝이다.</p>\n<p>만약 궁금하다면 Linux에 ORACLE 설치 과정을 찾아보라. MariaDB가 얼마나 간단한지 체감할 수 있을 것이다.</p>\n<h2 id=\"MariaDB-접속 테스트\">MariaDB 접속 테스트 <a href=\"#MariaDB-접속 테스트\">🔗</a></h2>\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token function\">sudo</span> mariadb</td></tr>\n<tr data-number=1><td class=\"line-number\" data-number=\"1\">1</td><td class=\"line-code\" data-number=1></td></tr>\n<tr data-number=2><td class=\"line-number\" data-number=\"2\">2</td><td class=\"line-code\" data-number=2><span class=\"token comment\" data-tag=\"new\"># 혹은</span></td></tr>\n<tr data-number=3><td class=\"line-number\" data-number=\"3\">3</td><td class=\"line-code\" data-number=3><span class=\"token function\">sudo</span> mysql</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>위 명령어를 입력하여 MariaDB에 접속해보자. 비교적 최신 버전(10 이상)이라면 <span class=\"lightBlue-600\">MariaDB는 시스템 계정을 MariaDB root 계정과 대응</span>되도록 설정한다. 위 명령어를 입력하면 별도의 비밀번호 입력 없이 MariaDB를 연결할 수 있다.</p>\n<p><code class=\"inline-code\">sudo mysql</code>을 사용해도 접속할 수 있다. MariaDB와 MySQL의 유사성을 체감할 수 있는 부분.</p>\n<p><img src=\"https://user-images.githubusercontent.com/50317129/133102225-7d63de47-0b70-49e4-9452-c202fad098c4.png\" alt=\"image\"></p>\n<p>위와 같이 접속되면 MariaDB가 정상적으로 동작하는 것이다.</p>\n<h2 id=\"Windows에서-MariaDB 관리 툴 설치하기\">Windows에서 MariaDB 관리 툴 설치하기 <a href=\"#Windows에서-MariaDB 관리 툴 설치하기\">🔗</a></h2><p>DBMS는 Linux와 같이 명령어 기반으로 동작한다. 하지만 모든 명령어 기반이 그렇듯 사용자에게 편안함을 주는 환경이 아니다보니, 명령어를 일일히 치고 있긴 좀 귀찮다. 더군다나 이런 CLI 환경은 데이터 조회할 때 그 단점이 극명하게 드러나는데, 출력한 데이터를 어떻게든 표 형식으로 보여주기 위해 안간힘을 쓴다. 그러나 그 노력에도 불구하고 콘솔은 텍스트가 화면 길이를 넘어갈 경우 강제로 줄바꿈해서 보여준다. 수평 스크롤의 개념이 아예 없어 데이터가 일정량 이상 길어질 경우 극악의 가독성을 보여준다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/50317129/133102630-3a33dd50-18d6-4b16-848b-919000c75f2e.png\" alt=\"image\"></p>\n<p>이러한 특징으로 DBMS는 서버에서 돌리더라도 그 관리는 Window같은 GUI 환경에서 관리 툴을 사용하는 것이 보편적이다. 적어도 위와 같은 꼴은 보기 싫다면 더더욱.</p>\n<p>MariaDB 전용 관리 툴은 대표적으로 두 가지가 존재하는데, <span class=\"lightBlue-600\">MySQL Workbench</span>와 <span class=\"lightBlue-600\">SQLyog</span>다. 둘 중 어느 툴을 사용해도 상관없으나, 이 장에서는 MySQL Workbench를 기준으로 설명한다. 이름은 MySQL이라고 명시되어있지만, 앞서 언급했듯이 <span class=\"green-600\">MariaDB가 MySQL 기반이므로 잡속 인터페이스가 동일한 모양인지 지장없이 사용</span>할 수 있다.</p>\n<p>SQLyog는 커뮤니티 버전과 Ultimate 버전이 나누어져 있으며, 커뮤니티 버전에선 일부 심화기능이 제한된다. 데이터베이스의 간편 백업이나 다른 데이터베이스로 연결하여 복사하는 등의 심화적인 기능같은 것들이 대부분이다. DBMS의 기능을 제한하는 것이 아니라 관리 도구 단계에서 제공하는 디테일한 편의기능이므로, 일반적인 DBMS 사용에는 전혀 영향이 없으니 걱정하지 않아도 된다.</p>\n<p>이 사이트에 접속하여 MySQL Workbench를 다운로드한다.</p>\n<p>설치가 완료된다. 아직은 라즈베리파이의 IP를 입력해도 포트가 열려있지 않다면 접근할 수 없을 것이다.</p>\n<h2 id=\"MariaDB-외부접속 허용하기\">MariaDB 외부접속 허용하기 <a href=\"#MariaDB-외부접속 허용하기\">🔗</a></h2><p>포트가 막혀있다면 Windows에서 MariaDB로 접속할 수 없다. <span class=\"primary\">서비스 포트를 허용하여 외부 통신을 수행</span>하자.</p>\n<p>우선 서비스하는 포트를 확인하자. MariaDB의 기본 서비스포트는 3306이며, MariaDB에서 아래의 SQL을 입력하면 서비스 포트를 확인할 수 있다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>mariadb -u root -p</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>콘솔에서 위 명령어를 입력하여 MariaDB로 접근하자.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>SQL</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-sql\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0>SHOW GLOBAL VARIABLES LIKE 'PORT';</td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>MariaDB를 접속한 상태에서 위 SQL을 입력하면 포트를 확인할 수 있다. 포트를 변경하지 않았다면 3306이 표시될 것이다.</p>\n\n\t\t\t\t\t<div class=\"codeblock\">\n\t\t\t\t\t\t<div class=\"top\">\n\t\t\t\t\t\t\t<p>BASH</p>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button onclick=\"copyCode(this);\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" data-icon=\"clipboard\" class=\"i-clipboard\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg></button>\n\n\t\t\t\t\t\t<pre class=\"language-bash\"><table><tbody><tr data-number=0><td class=\"line-number\" data-number=\"0\">0</td><td class=\"line-code\" data-number=0><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">3306</span></td></tr></tbody></table></pre>\n\t\t\t\t\t</div>\n\t\t\t\t<p>위 명령어를 입력하여 3306 포트를 허용하자.</p>\n<p>이후 MySQL Workbench에서 접속정보를 입력하고 연결을 시도해보자. 위와 같이 뜬다면 성공이다.</p>\n<h1 id=\"목표\">목표 <a href=\"#목표\">🔗</a></h1><ul>\n<li><del class=\"grey-400\">라즈베리파이에 Ubuntu 서버를 구축한다.</del></li>\n<li><del class=\"grey-400\">Tomcat을 구동하여 페이지를 호스팅한다.</del></li>\n<li><del class=\"grey-400\">도메인을 입힌다.</del></li>\n<li><del class=\"grey-400\">SSL 인증서를 발급하여 HTTPS 통신을 제공한다.</del></li>\n<li><del class=\"grey-400\">SSH, RDP 등의 원격 통신환경을 구축한다.</del></li>\n<li><del class=\"grey-400\">MariaDB를 설치하여 DB 통신을 수행한다.</del></li>\n</ul>\n<p>이로써 라즈베리파이의 웹 개발환경의 구축이 끝났다. 이젠 내가 원하는대로 서비스를 개발/배포할 수 있을 것이다.</p>\n","url":["2021-09-14-ubuntu-in-mariadb","2021","09","14","ubuntu-in-mariadb"],"toc":[{"text":"개요","tag":"개요","depth":1},{"text":"if (!storage.equals(\"dbms\"))","tag":"if-(!storage.equals(\"dbms\"))","depth":1},{"text":"else if (storage.equals(\"browser\"))","tag":"else-if (storage.equals(\"browser\"))","depth":2},{"text":"else if (storage.equals(\"system\"))","tag":"else-if (storage.equals(\"system\"))","depth":2},{"text":"else if (storage.equals(\"dbms\"))","tag":"else-if (storage.equals(\"dbms\"))","depth":1},{"text":"MariaDB 설치하기","tag":"MariaDB-설치하기","depth":1},{"text":"MariaDB 설치하기","tag":"MariaDB-설치하기","depth":2},{"text":"MariaDB 접속 테스트","tag":"MariaDB-접속 테스트","depth":2},{"text":"Windows에서 MariaDB 관리 툴 설치하기","tag":"Windows에서-MariaDB 관리 툴 설치하기","depth":2},{"text":"MariaDB 외부접속 허용하기","tag":"MariaDB-외부접속 허용하기","depth":2},{"text":"목표","tag":"목표","depth":1}]},"hash":"1f3a3a07344"},"__N_SSG":true}