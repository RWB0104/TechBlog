{"pageProps":{"posts":[{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1018번 체스판 다시 칠하기","excerpt":"지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M*N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8*8 크기의 체스판으로 만들려고 한다. 체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다. 보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 8 X 8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 8*8 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-26T16:46:20","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","SILVER","SILVER V","Brute Force(무차별 대입 공격)"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-26-a1018.md","content":"\r\n# 체스판 다시 칠하기\r\n\r\n# h1\r\n## h2\r\n\r\n\r\n\r\n![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange)\r\n\r\n🔗 [전체 1018번 문제](https://www.acmicpc.net/problem/1018)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    128MB    |\r\n\r\n## 문제\r\n\r\n지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 $M \\times N$ 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 $8 \\times 8$ 크기의 체스판으로 만들려고 한다.\r\n\r\n체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.\r\n\r\n보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 $8 \\times 8$ 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 $8 \\times 8$ 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.\r\n\r\n## 입력\r\n\r\n첫째 줄에 $N$과 $M$이 주어진다. $N$과 $M$은 8보다 크거나 같고, 50보다 작거나 같은 자연수이다. 둘째 줄부터 $N$개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.\r\n\r\n## 출력\r\n\r\n첫째 줄에 지민이가 다시 칠해야 하는 정사각형 개수의 최솟값을 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n8 8\r\nWBWBWBWB\r\nBWBWBWBW\r\nWBWBWBWB\r\nBWBBBWBW\r\nWBWBWBWB\r\nBWBWBWBW\r\nWBWBWBWB\r\nBWBWBWBW\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n1\r\n```\r\n\r\n### 예제 2\r\n\r\n+ 입력\r\n\r\n``` tc\r\n10 13\r\nBBBBBBBBWBWBW\r\nBBBBBBBBBWBWB\r\nBBBBBBBBWBWBW\r\nBBBBBBBBBWBWB\r\nBBBBBBBBWBWBW\r\nBBBBBBBBBWBWB\r\nBBBBBBBBWBWBW\r\nBBBBBBBBBWBWB\r\nWWWWWWWWWWBWB\r\nWWWWWWWWWWBWB\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n12\r\n```\r\n\r\n# 풀이\r\n\r\n각 칸이 흰색 또는 검은색으로 칠해진 커다란 판에서 임의의 위치부터 $8 \\times 8$ 크기로 잘라 체스판을 만든다. 그 중 가장 적은 칸을 칠하여 체스판을 만들고자 할 때, 칠해야하는 최소값을 구하는 문제. 주어진 변수의 범위가 적어 그냥 무식하게 하나하나 비교하면 된다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/123507886-2430ea00-d6a7-11eb-8c98-eecd7655f352.png\" width=\"600px\" />\r\n</p>\r\n\r\n위 처럼 $N \\times M$의 배열에서 무작위 $8 \\times 8$ 크기의 배열을 뽑아내야한다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/123507891-2c892500-d6a7-11eb-85b3-eb4d7803450d.png\" width=\"800px\" />\r\n</p>\r\n\r\n$10 \\times 10$짜리 배열을 기준으로, 해당 판에서 $8 \\times 8$ 배열을 선택하는 경우의 수는 총 9가지이며, 이를 도식화하면 위 그림과 같다. 이처럼 전체 배열에서 $8 \\times 8$만큼 한 칸씩 이동하며 비교하면 된다.\r\n\r\n``` java\r\nfor (int n = 0; n < N - 7; n++)\r\n{\r\n\tfor (int m = 0; m < M - 7; m++)\r\n\t{\r\n\t\t// TODO\r\n\t}\r\n}\r\n```\r\n\r\n위 코드와 같이 기술하면 가로부터 한 칸씩 이동하며, 끝에 도달할 경우 세로로 한 칸 이동한 뒤 다시 가로부터 한 칸씩 이동할 것이다. `n < N - 7`인 이유는 비교할 배열의 세로 길이가 8이기 때문. 살짝 헷갈린다면 `n <= N - 8`으로 대체해도 무방하다.\r\n\r\n체스판에는 두 가지 경우의 수가 있다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/123507898-33179c80-d6a7-11eb-9f2e-71a4829134df.png\" width=\"700px\" />\r\n</p>\r\n\r\n체스판의 상단 좌측을 기준으로 하얀색으로 시작하는 판과, 검은색으로 시작하는 판으로 두 가지가 존재한다. 하얀색을 `true`, 검은색을 `false`로 치환하여 하얀색 체스판과 검은색 체스판을 만들어 비교할 것이다.\r\n\r\n``` java\r\n// 상단 좌측이 하얀색으로 시작하는 체스판\r\nprivate static final boolean[][] WHITE = {\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n};\r\n\r\n// 상단 좌측이 검은색으로 시작하는 체스판\r\nprivate static final boolean[][] BLACK = {\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t{ true, false, true, false, true, false, true, false },\r\n};\r\n```\r\n\r\n코드는 위와 같다. 흑백과 같이 이지선다일 경우 `boolean`을 사용하는 것을 더 선호하므로 위와 같이 설계했다. `String` 배열로 \"W\", \"B\"를 넣어 만들어도 비교만 잘 해준다면 크게 상관없다. 이를 $8 \\times 8$의 모든 경우의 수와 비교하여 가장 작은 수를 출력하면 된다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 백준 전체 1018 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/06/26/a1018\">1018 풀이</a>\r\n * @since 2021.06.26 Sat 16:46:20\r\n */\r\npublic class Main\r\n{\r\n\t// 상단 좌측이 하얀색으로 시작하는 체스판\r\n\tprivate static final boolean[][] WHITE = {\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t};\r\n\t\r\n\t// 상단 좌측이 검은색으로 시작하는 체스판\r\n\tprivate static final boolean[][] BLACK = {\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t\t\t{ false, true, false, true, false, true, false, true },\r\n\t\t\t{ true, false, true, false, true, false, true, false },\r\n\t};\r\n\t\r\n\t// 체스판\r\n\tprivate static boolean[][] board;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tint[] temp = Arrays.stream(reader.readLine().split(\" \")).mapToInt(Integer::parseInt).toArray();\r\n\t\t\r\n\t\t// 세로 길이\r\n\t\tint N = temp[0];\r\n\t\t\r\n\t\t// 가로 길이\r\n\t\tint M = temp[1];\r\n\t\t\r\n\t\tboard = new boolean[N][M];\r\n\t\t\r\n\t\tfor (int n = 0; n < N; n++)\r\n\t\t{\r\n\t\t\tString[] line = reader.readLine().split(\"\");\r\n\t\t\t\r\n\t\t\tfor (int m = 0; m < M; m++)\r\n\t\t\t{\r\n\t\t\t\tboard[n][m] = line[m].equals(\"W\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// 결과\r\n\t\tint result = Integer.MAX_VALUE;\r\n\t\t\r\n\t\t// 0 ~ 7까지 총 8칸을 전달하므로 최대값에서 7을 뺀다.\r\n\t\tfor (int n = 0; n < N - 7; n++)\r\n\t\t{\r\n\t\t\tfor (int m = 0; m < M - 7; m++)\r\n\t\t\t{\r\n\t\t\t\tint count = solve(n, m);\r\n\t\t\t\t\r\n\t\t\t\t// 현재 결과보다 더 작은 수일 경우\r\n\t\t\t\tif (result > count)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = count;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twriter.write(Integer.toString(result));\r\n\t\twriter.newLine();\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 새로 덧칠할 칸의 갯수 반환 함수\r\n\t *\r\n\t * @param x: [int] x의 시작좌표\r\n\t * @param y: [int] y의 시작좌표\r\n\t *\r\n\t * @return [int] 새로 덧칠할 칸의 갯수\r\n\t */\r\n\tprivate static int solve(int x, int y)\r\n\t{\r\n\t\tint white = 0;\r\n\t\tint black = 0;\r\n\t\t\r\n\t\tfor (int n = x; n < x + 8; n++)\r\n\t\t{\r\n\t\t\tfor (int m = y; m < y + 8; m++)\r\n\t\t\t{\r\n\t\t\t\t// 하얀색으로 시작하는 체스판과 색이 다를 경우\r\n\t\t\t\tif (board[n][m] != WHITE[n - x][m - y])\r\n\t\t\t\t{\r\n\t\t\t\t\twhite++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// 검은색으로 시작하는 체스판과 색이 다를 경우\r\n\t\t\t\tif (board[n][m] != BLACK[n - x][m - y])\r\n\t\t\t\t{\r\n\t\t\t\t\tblack++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// 둘 중 더 적게 칠할 수 있는 체스판의 값을 반환\r\n\t\treturn Math.min(white, black);\r\n\t}\r\n}\r\n```\r\n\r\n처음에 설계했을 땐, 잘라낸 $8 \\times 8$ 배열 `board`의 좌측 상단값인 `board[x][y]`의 색을 찾아서, 하얀색(true)일 경우 `WHITE`를, 검은색(false)일 경우 `BLACK`을 갖고 비교했는데 계속 틀렸다. 아래 케이스를 보면 이해가 쉽다.\r\n\r\n+ 입력\r\n\r\n``` tc\r\n8 8\r\nBBWBWBWB\r\nBWBWBWBW\r\nWBWBWBWB\r\nBWBWBWBW\r\nWBWBWBWB\r\nBWBWBWBW\r\nWBWBWBWB\r\nBWBWBWBW\r\n```\r\n\r\n+ 출력\r\n\r\n```\r\n1\r\n```\r\n\r\n전체 판 자체가 $8 \\times 8$이므로 경우의 수는 판 자체로 하나다. 만약 처음 설계한대로 동작한다면 위 케이스에서 문제가 발생한다.\r\n\r\n위 케이스의 $board[0][0] = false$이므로 `BLACK`과 비교하게 된다. 이러면 $board[0][0]$를 제외한 나머지 63개의 칸을 전부 칠해야한다. 그런데 저 케이스, 자세히 한 번 보자. 사실 $board[0][0]$만 하얀색(true)로 칠해주면 그만이다. 즉, `BLACK`이 아닌 `WHITE`와 비교하면 값이 1인 것이다.\r\n\r\n``` java\r\n/**\r\n * 새로 덧칠할 칸의 갯수 반환 함수\r\n *\r\n * @param x: [int] x의 시작좌표\r\n * @param y: [int] y의 시작좌표\r\n *\r\n * @return [int] 새로 덧칠할 칸의 갯수\r\n */\r\nprivate static int solve(int x, int y)\r\n{\r\n\tint white = 0;\r\n\tint black = 0;\r\n\t\r\n\tfor (int n = x; n < x + 8; n++)\r\n\t{\r\n\t\tfor (int m = y; m < y + 8; m++)\r\n\t\t{\r\n\t\t\t// 하얀색으로 시작하는 체스판과 색이 다를 경우\r\n\t\t\tif (board[n][m] != WHITE[n - x][m - y])\r\n\t\t\t{\r\n\t\t\t\twhite++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 검은색으로 시작하는 체스판과 색이 다를 경우\r\n\t\t\tif (board[n][m] != BLACK[n - x][m - y])\r\n\t\t\t{\r\n\t\t\t\tblack++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// 둘 중 더 적게 칠할 수 있는 체스판의 값을 반환\r\n\treturn Math.min(white, black);\r\n}\r\n```\r\n\r\n`solve()` 메소드는 알고리즘의 핵심 동작이다. `WHITE`와 `BLACK`을 전부 비교하는 이유가 여기에 있는데, 현재 배열에서 `WHITE`와 `BLACK`을 만드는데 필요한 칸의 숫자를 각각 구해서, 그 중 더 작은 수를 반환해야 올바르게 동작한다.\r\n\r\n## 분류\r\n\r\n* 브루트포스 알고리즘","url":["2021-06-26-a1018","2021","06","26","a1018"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1015번 수열 정렬","excerpt":"P[0], P[1], ..., P[N - 1]은 0부터 N - 1까지(포함)의 수를 한 번씩 포함하고 있는 수열이다. 수열 P를 길이가 N인 배열 A에 적용하면 길이가 N인 배열 B가 된다. 적용하는 방법은 B[P[i]] = A[i]이다. 배열 A가 주어졌을 때, 수열 P를 적용한 결과가 비내림차순이 되는 수열을 찾는 프로그램을 작성하시오. 비내림차순이란, 각각의 원소가 바로 앞에 있는 원소보다 크거나 같을 경우를 말한다. 만약 그러한 수열이 여러개라면 사전순으로 앞서는 것을 출력한다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-22T01:23:31","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","SILVER","SILVER IV","정렬"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-22-a1015.md","content":"\r\n# 수열 정렬\r\n\r\n![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange)\r\n\r\n🔗 [전체 1015번 문제](https://www.acmicpc.net/problem/1015)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    128MB    |\r\n\r\n## 문제\r\n\r\n$P[0], P[1], \\, \\dots \\, P[N - 1]$은 $0$부터 $N - 1$까지(포함)의 수를 한 번씩 포함하고 있는 수열이다. 수열 $P$를 길이가 $N$인 배열 $A$에 적용하면 길이가 $N$인 배열 $B$가 된다. 적용하는 방법은 $B[P[i]] = A[i]$이다.\r\n\r\n배열 $A$가 주어졌을 때, 수열 $P$를 적용한 결과가 비내림차순이 되는 수열을 찾는 프로그램을 작성하시오. 비내림차순이란, 각각의 원소가 바로 앞에 있는 원소보다 크거나 같을 경우를 말한다. 만약 그러한 수열이 여러개라면 사전순으로 앞서는 것을 출력한다.\r\n\r\n## 입력\r\n\r\n첫째 줄에 배열 $A$의 크기 $N$이 주어진다. 둘째 줄에는 배열 $A$의 원소가 0번부터 차례대로 주어진다. $N$은 50보다 작거나 같은 자연수이고, 배열의 원소는 1,000보다 작거나 같은 자연수이다.\r\n\r\n## 출력\r\n\r\n첫째 줄에 비내림차순으로 만드는 수열 $P$를 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n3\r\n2 3 1\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n1 2 0\r\n```\r\n\r\n# 풀이\r\n\r\n정렬에 대해 잘 알고 있다면 쉬어가는 문제. 한 마디로, <span class=\"amber-A400\">배열 속 요소들을 크기별 등수로 바꾸어 동일한 자리에 표시</span>해주면 된다.\r\n\r\n예제의 경우, 배열 $A$가 $[ 2, 3, 1 ]$로 주어졌는데, 이를 오름차순으로 표시하여 배열 $A1$로 만들면 $[ 1, 2, 3 ]$이 된다. 즉 $A1[0] = 1$이 된다. $A1$의 인덱스를 $A$의 요소의 순서에 맞게 출력하는 것이 알고리즘의 최종 동작이다.\r\n\r\n## 배열 A의 순서 기억하기\r\n\r\n첫 번째로, 정수형 배열의 오름차순 정렬은 매우 쉽다. `Arrays.sort(A);`만 적용해주면 될 일이기 때문. 문제는 정렬한 인덱스를 원본 배열 $A$의 순서대로 출력해야 한다는 것.\r\n\r\n이를 기억하는 장치로 배열 $A$를 2차원 배열로 만들어 $A[i][0]$에는 <span class=\"orange-A400\">i번째 입력값의 값</span>, $A[i][1]$에는 순번 인덱스 <span class=\"orange-A400\">i</span>를 입력한다.\r\n\r\n이를 표로 도식화하면 아래와 같다.\r\n\r\n|    $i$    |   0   |   1   |   2   |\r\n| :-------: | :---: | :---: | :---: |\r\n| $A[i][0]$ |   2   |   3   |   1   |\r\n| $A[i][1]$ |   0   |   1   |   2   |\r\n\r\n따라서 배열 $A$를 정렬해도, 순서를 기억할 수 있게 된다.\r\n\r\n|    $i$    |   0   |   1   |   2   |\r\n| :-------: | :---: | :---: | :---: |\r\n| $A[i][0]$ |   1   |   2   |   3   |\r\n| $A[i][1]$ |   2   |   0   |   1   |\r\n\r\n위 표는 오름차순 정렬을 적용한 것으로, $A[i][1]$을 통해 원래의 순서로 되돌릴 수 있을 것이다.\r\n\r\n## 정렬 후 되돌리기\r\n\r\n배열 $A$에 수열 $P$를 적용한 결과인 $B$를 구한다. 위에서 정렬을 통해 크기 순위를 계산했으므로, 이를 <span class=\"green-A400\">위치에 맞게 순서를 되돌려 출력</span>하면 된다.\r\n\r\n원래의 위치값은 $A[i][1]$이 가지고 있으므로, 이 인덱스를 활용하자. 배열 $B$의 식은 $B[A[i][1]] = i$와 같은 형태로 계산할 수 있다. 예를 들어, $i = 1$일 때 정렬된 배열 $A[1][1] = 0$이므로 $B[0] = 1$이 된다. 이를 코드로 구현하면 완성된다.\r\n\r\n## 이차원 배열 정렬하기\r\n\r\n여기서 작은 문제가 하나 생기는데, 바로 정렬이다. 대표적인 정렬 메소드인 `Arrays.sort(A);`의 경우 1차원 배열에서는 의도에 맞게 동작하나, 그 이상인 $n$차원 배열부터는 의도한대로 동작하지 않는다. 또한 `Arrays.sort(A);`는 무조건 오름차순으로만 동작한다.\r\n\r\n이를 해결하기 위해선, `sort()` 메소드를 직접 오버라이딩하면 된다. 물론 아예 구현해도 되지만, 여기서는 기본 API를 최대한 살려 sort 함수를 우리 의도에 맞게 오버라이딩한다.\r\n\r\n``` java\r\nArrays.sort(A, (next, current) -> {\r\n\t// 다음 원소가 현재 원소보다 클 경우\r\n\tif (next[0] < current[0])\r\n\t{\r\n\t\t// 현재 원소를 다음 원소의 뒤로 정렬\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t// 다음 원소가 현재 원소보다 작을 경우\r\n\telse if (next[0] > current[0])\r\n\t{\r\n\t\t// 현재 원소를 다음 원소의 앞으로 정렬\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t// 다음 원소가 현재 원소와 동일할 경우\r\n\telse\r\n\t{\r\n\t\t// 현 위치 유지\r\n\t\treturn 0;\r\n\t}\r\n})\r\n```\r\n\r\n`Comparater` 인터페이스를 lambda 함수의 형태로 구현한 코드다. `current`는 <span class=\"blue-400\">현재 요소</span>를, `next`는 <span class=\"blue-400\">다음 요소</span>를 의미하며 <span class=\"blue-400\">반환값이 양수일 경우 현재 요소가 다음 요소보다 뒤로 정렬</span>되며, <span class=\"blue-400\">반환값이 음수일 경우 현재 요소가 다음 요소보다 앞으로 정렬</span>된다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * 백준 전체 1015 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/06/22/a1015\">1015 풀이</a>\r\n * @since 2021.06.22 Tue 01:23:31\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\t// 배열의 크기\r\n\t\tint N = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\t// 원본 배열\r\n\t\tint[][] A = new int[N][2];\r\n\t\t\r\n\t\t// 정렬 배열\r\n\t\tint[] B = new int[N];\r\n\t\t\r\n\t\tString[] temp = reader.readLine().split(\" \");\r\n\t\t\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\r\n\t\tfor (int i = 0; i < N; i++)\r\n\t\t{\r\n\t\t\tA[i][0] = Integer.parseInt(temp[i]);\r\n\t\t\tA[i][1] = i;\r\n\t\t}\r\n\t\t\r\n\t\t// 정렬 수행\r\n\t\tsort(A);\r\n\t\t\r\n\t\tfor (int i = 0; i < N; i++)\r\n\t\t{\r\n\t\t\tint index = A[i][1];\r\n\t\t\t\r\n\t\t\tB[index] = i;\r\n\t\t}\r\n\t\t\r\n\t\tfor (int b : B)\r\n\t\t{\r\n\t\t\tbuilder.append(b).append(\" \");\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(builder.toString().trim());\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 정렬 함수\r\n\t *\r\n\t * @param A: [int[][]] 대상 배열\r\n\t */\r\n\tprivate static void sort(int[][] A)\r\n\t{\r\n\t\tArrays.sort(A, (next, current) -> {\r\n\t\t\t// 현재값이 더 클 경우\r\n\t\t\tif (next[0] < current[0])\r\n\t\t\t{\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 다음값이 더 클 경우\r\n\t\t\telse if (next[0] > current[0])\r\n\t\t\t{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 현재값과 다음값이 같을 경우, 사전순 정렬\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn Integer.compare(next[1], current[1]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n```\r\n\r\n## 분류\r\n\r\n* 정렬","url":["2021-06-22-a1015","2021","06","22","a1015"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1012번 유기농 배추","excerpt":"차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다.(한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있다고 간주한다)","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-13T01:42:10","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","DFS(깊이 우선 탐색)","BFS(너비 우선 탐색)","SILVER","SILVER II"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-13-a1012.md","content":"\r\n# 유기농 배추\r\n\r\n![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange)\r\n\r\n🔗 [전체 1012번 문제](https://www.acmicpc.net/problem/1012)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   1초    |    512MB    |\r\n\r\n## 문제\r\n\r\n차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다.(한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있다고 간주한다)\r\n\r\n한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어놓았다. 배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다.\r\n\r\n예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다.\r\n\r\n(0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.)\r\n\r\n<div class=\"table-wrapper\">\r\n\t<table>\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<th colspan=\"10\">밭</th>\r\n\t\t\t</tr>\r\n\t\t</thead>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">0</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t\t<td align=\"center\">1</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n</div>\r\n\r\n## 입력\r\n\r\n입력의 첫 줄에는 테스트 케이스의 개수 $T$가 주어진다. 그 다음 줄부터 각각의 테스트 케이스에 대해 첫째 줄에는 배추를 심은 배추밭의 가로길이 $M(1 ≤ M ≤ 50)$과 세로길이 $N(1 ≤ N ≤ 50)$, 그리고 배추가 심어져 있는 위치의 개수 $K(1 ≤ K ≤ 2500)$이 주어진다. 그 다음 $K$줄에는 배추의 위치 $X(0 ≤ X ≤ M-1)$, $Y(0 ≤ Y ≤ N-1)$가 주어진다.\r\n\r\n## 출력\r\n\r\n각 테스트 케이스에 대해 필요한 최소의 배추흰지렁이 마리수를 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n2\r\n10 8 17\r\n0 0\r\n1 0\r\n1 1\r\n4 2\r\n4 3\r\n4 5\r\n2 4\r\n3 4\r\n7 4\r\n8 4\r\n9 4\r\n7 5\r\n8 5\r\n9 5\r\n7 6\r\n8 6\r\n9 6\r\n10 10 1\r\n5 5\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n5\r\n1\r\n```\r\n\r\n### 예제 2\r\n\r\n+ 입력\r\n\r\n``` tc\r\n1\r\n5 3 6\r\n0 2\r\n1 2\r\n2 2\r\n3 2\r\n4 2\r\n4 0\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n2\r\n```\r\n\r\n# 풀이\r\n\r\n<span class=\"primary\">DFS(깊이 우선 탐색)</span> 혹은 <span class=\"primary\">BFS(너비 우선 탐색)</span>을 활용하는 기본적인 알고리즘. 추가적인 연산 없이 두 알고리즘 중 익숙한걸 적용하면 끝난다.\r\n\r\n배추흰지렁이는 배추 위에 놓을 수 있으며, 이 벌레는 <span class=\"green-A400\">배추에서 상하좌우로 인접한 배추로 이동</span>할 수 있다. 즉, 배추가 상하좌우로 연결되어있는 구역들의 갯수가 벌레가 필요한 갯수다.\r\n\r\n문제에 예시로 주어진 테이블을 기준으로 보면 아래와 같이 배추가 심어진 구역을 나눌 수 있다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/121783894-45e09a80-cbec-11eb-99b4-5ed3f3acecd1.png\" width=\"500px\" />\r\n</p>\r\n\r\n위 그림과 같이 총 5개의 구역이 있으므로 벌레 또한 5마리가 필요하다.\r\n\r\nDFS를 적용하면 아래와 같은 절차로 동작한다.\r\n\r\n1. 현재 구역에 배추가 있는지 확인한다.\r\n   1. 배추가 없을 경우 통과한다.\r\n2. 배추가 있을 경우 현재 구역을 처음 탐색하는지 확인한다.\r\n   1. 이미 탐색한 구역일 경우 통과한다.\r\n3. 현재 구역을 방문처리하고, 벌레의 수를 하나 추가한다.\r\n4. 상하좌우로 인접한 구역에 배추가 있는지 확인한다.\r\n   1. 상: $(x, y - 1)$\r\n   2. 하: $(x, y + 1)$\r\n   3. 좌: $(x - 1, y)$\r\n   4. 우: $(x + 1, y)$\r\n5. 배추가 있고, 처음 탐색하는지 확인한다.\r\n   1. 이미 탐색한 구역일 경우 통과한다.\r\n6. 현재 구역을 방문처리한다. 같은 구역이므로 벌레의 수는 추가하지 않는다.\r\n7. 1 ~ 7과정을 반복한다.\r\n\r\nDFS에서의 깊이는 각 구역의 상하좌우 개념과 동일하다. 상하좌우를 비교할 경우, $x$, $y$값이 정해진 밭의 크기 안에 포함되어야 함을 잊지 말자.\r\n\r\n이를 도식화하면 아래와 같이 나타낼 수 있다. 이미 방문한 구역을 녹색으로 표시한다.\r\n\r\n<b class=\"teal-A400 large\">탐색을 수행한다.</b>\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/121786679-82b48d80-cbfc-11eb-8360-9dae381cc44d.png\" width=\"500px\" />\r\n</p>\r\n\r\n탐색 중인 위치에 배추가 있는지, 처음 방문한 곳인지 확인한다. 그림의 $(0, 0)$의 경우 배추가 있으며 처음 방문한 구역이므로 조건에 해당된다.\r\n\r\n<b class=\"teal-A400 large\">벌레를 추가하고 방문 표시를 한다.</b>\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/121786686-94963080-cbfc-11eb-9a6a-722d7e3723f2.png\" width=\"500px\" />\r\n</p>\r\n\r\n새로운 구역이므로 벌레 하나를 추가한다. 방문한 구역은 방문 표시를 함으로써 중복 검색을 방지한다.\r\n\r\n<b class=\"teal-A400 large\">인접구역을 탐색한다.</b>\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/121786712-a677d380-cbfc-11eb-8150-daf8d827a0eb.png\" width=\"500px\" />\r\n</p>\r\n\r\n인접구역인 상하좌우 구역을 탐색한다. $(0, 0)$을 기준으로 $(0, 1)$, $(0, -1)$, $(-1, 0)$, $(1, 0)$이다. 구역의 좌표는 0 이상이어야 하므로, 유효한 구역은 $(0, 1)$, $(1, 0)$ 두 곳이다.\r\n\r\n<b class=\"teal-A400 large\">인접구역에 대해 방문 표시를 한다.</b>\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/121786730-c27b7500-cbfc-11eb-822c-1956cfd2b954.png\" width=\"500px\" />\r\n</p>\r\n\r\n$(1, 0)$ 역시 방문 전이며, 배추가 있는 구역이다. 인접구역이므로 벌레는 추가하지 않으며, 방문 표시만 한다. 또 다른 인접구역에 대해 동일한 과정을 반복한다.\r\n\r\n위와 같은 과정을 반복하여 구역의 수를 계산할 수 있다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\n/**\r\n * 백준 전체 1012 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/06/13/a1012\">1012 풀이</a>\r\n * @since 2021.06.13 Sun 01:30:12\r\n */\r\npublic class Main\r\n{\r\n\t// 배추밭의 가로 길이(x)\r\n\tprivate static int M;\r\n\t\r\n\t// 배추밭의 세로 길이(y)\r\n\tprivate static int N;\r\n\t\r\n\t// 배추밭\r\n\tprivate static int[][] area;\r\n\t\r\n\t// 구역 방문 여부\r\n\tprivate static boolean[][] isVisit;\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\t// 케이스 수\r\n\t\tint T = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\tfor (int i = 0; i < T; i++)\r\n\t\t{\r\n\t\t\tString[] temp = reader.readLine().split(\" \");\r\n\t\t\t\r\n\t\t\tM = Integer.parseInt(temp[0]);\r\n\t\t\t\r\n\t\t\tN = Integer.parseInt(temp[1]);\r\n\t\t\t\r\n\t\t\t// 배추 갯수\r\n\t\t\tint K = Integer.parseInt(temp[2]);\r\n\t\t\t\r\n\t\t\tarea = new int[M][N];\r\n\t\t\t\r\n\t\t\tisVisit = new boolean[M][N];\r\n\t\t\t\r\n\t\t\t// 필요한 배추흰지렁이 수\r\n\t\t\tint bugs = 0;\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < K; j++)\r\n\t\t\t{\r\n\t\t\t\ttemp = reader.readLine().split(\" \");\r\n\t\t\t\t\r\n\t\t\t\tint x = Integer.parseInt(temp[0]);\r\n\t\t\t\tint y = Integer.parseInt(temp[1]);\r\n\t\t\t\t\r\n\t\t\t\tarea[x][y] = 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int y = 0; y < N; y++)\r\n\t\t\t{\r\n\t\t\t\tfor (int x = 0; x < M; x++)\r\n\t\t\t\t{\r\n\t\t\t\t\t// 방문하지 않은 구역에 배추가 있을 경우\r\n\t\t\t\t\tif (area[x][y] == 1 && !isVisit[x][y])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbugs++;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdfs(x, y);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(bugs);\r\n\t\t}\r\n\t\t\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 깊이 우선 탐색 알고리즘\r\n\t *\r\n\t * @param x: [int] x좌표\r\n\t * @param y: [int] y좌표\r\n\t */\r\n\tprivate static void dfs(int x, int y)\r\n\t{\r\n\t\t// x의 상하좌우 이동\r\n\t\tint[] dx = { 0, 0, -1, 1 };\r\n\t\t\r\n\t\t// y의 상하좌우 이동\r\n\t\tint[] dy = { -1, +1, 0, 0 };\r\n\t\t\r\n\t\tisVisit[x][y] = true;\r\n\t\t\r\n\t\tfor (int i = 0; i < 4; i++)\r\n\t\t{\r\n\t\t\tint xn = x + dx[i];\r\n\t\t\tint yn = y + dy[i];\r\n\t\t\t\r\n\t\t\t// x, y좌표가 구역 내부에 있으며, 방문하지 않은 구역에 배추가 있을 경우\r\n\t\t\tif ((xn > -1 && xn < M) && (yn > -1 && yn < N) && area[xn][yn] == 1 && !isVisit[xn][yn])\r\n\t\t\t{\r\n\t\t\t\tdfs(xn, yn);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n## 분류\r\n\r\n* 그래프 이론\r\n* 그래프 탐색\r\n* 너비 우선 탐색\r\n* 깊이 우선 탐색","url":["2021-06-13-a1012","2021","06","13","a1012"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1011번 Fly me to the Alpha Centauri","excerpt":"우현이는 어린 시절, 지구 외의 다른 행성에서도 인류들이 살아갈 수 있는 미래가 오리라 믿었다. 그리고 그가 지구라는 세상에 발을 내려 놓은 지 23년이 지난 지금, 세계 최연소 ASNA 우주 비행사가 되어 새로운 세계에 발을 내려 놓는 영광의 순간을 기다리고 있다. 그가 탑승하게 될 우주선은 Alpha Centauri라는 새로운 인류의 보금자리를 개척하기 위한 대규모 생활 유지 시스템을 탑재하고 있기 때문에, 그 크기와 질량이 엄청난 이유로 최신기술력을 총 동원하여 개발한 공간이동 장치를 탑재하였다. 하지만 이 공간이동 장치는 이동 거리를 급격하게 늘릴 경우 기계에 심각한 결함이 발생하는 단점이 있어서, 이전 작동시기에 k광년을 이동하였을 때는 k - 1 , k 혹은 k + 1 광년만을 다시 이동할 수 있다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-11T14:14:09","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","SILVER","SILVER I"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-11-a1011.md","content":"\r\n# 다리 놓기\r\n\r\n![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange)\r\n\r\n🔗 [전체 1011번 문제](https://www.acmicpc.net/problem/1011)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    512MB    |\r\n\r\n## 문제\r\n\r\n우현이는 어린 시절, 지구 외의 다른 행성에서도 인류들이 살아갈 수 있는 미래가 오리라 믿었다. 그리고 그가 지구라는 세상에 발을 내려 놓은 지 23년이 지난 지금, 세계 최연소 ASNA 우주 비행사가 되어 새로운 세계에 발을 내려 놓는 영광의 순간을 기다리고 있다.\r\n\r\n그가 탑승하게 될 우주선은 Alpha Centauri라는 새로운 인류의 보금자리를 개척하기 위한 대규모 생활 유지 시스템을 탑재하고 있기 때문에, 그 크기와 질량이 엄청난 이유로 최신기술력을 총 동원하여 개발한 공간이동 장치를 탑재하였다. 하지만 이 공간이동 장치는 이동 거리를 급격하게 늘릴 경우 기계에 심각한 결함이 발생하는 단점이 있어서, 이전 작동시기에 $k$광년을 이동하였을 때는 $k - 1$ , $k$ 혹은 $k + 1$ 광년만을 다시 이동할 수 있다. 예를 들어, 이 장치를 처음 작동시킬 경우 -1 , 0 , 1 광년을 이론상 이동할 수 있으나 사실상 음수 혹은 0 거리만큼의 이동은 의미가 없으므로 1 광년을 이동할 수 있으며, 그 다음에는 0 , 1 , 2 광년을 이동할 수 있는 것이다. ( 여기서 다시 2광년을 이동한다면 다음 시기엔 1, 2, 3 광년을 이동할 수 있다)\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://www.acmicpc.net/upload/201003/rlaehdgur.JPG\" width=\"600px\" />\r\n</p>\r\n\r\n김우현은 공간이동 장치 작동시의 에너지 소모가 크다는 점을 잘 알고 있기 때문에 $x$지점에서 $y$지점을 향해 최소한의 작동 횟수로 이동하려 한다. 하지만 $y$지점에 도착해서도 공간 이동장치의 안전성을 위하여 $y$지점에 도착하기 바로 직전의 이동거리는 반드시 1광년으로 하려 한다.\r\n\r\n김우현을 위해 $x$지점부터 정확히 $y$지점으로 이동하는데 필요한 공간 이동 장치 작동 횟수의 최솟값을 구하는 프로그램을 작성하라.\r\n\r\n## 입력\r\n\r\n입력의 첫 줄에는 테스트케이스의 개수 $T$가 주어진다. 각각의 테스트 케이스에 대해 현재 위치 $x$와 목표 위치 $y$가 정수로 주어지며, $x$는 항상 $y$보다 작은 값을 갖는다. $(0 ≤ x < y < 2^31)$\r\n\r\n## 출력\r\n\r\n각 테스트 케이스에 대해 $x$지점으로부터 $y$지점까지 정확히 도달하는데 필요한 최소한의 공간이동 장치 작동 횟수를 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n3\r\n0 3\r\n1 5\r\n45 50\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n3\r\n3\r\n4\r\n```\r\n\r\n# 풀이\r\n\r\nFrank Sinatra의 [Fly me to the moon](https://www.youtube.com/embed/ZEcqHA7dbwM)을 오마주한 제목인 거 같다.\r\n\r\n<p align=\"center\">\r\n\t<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZEcqHA7dbwM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n</p>\r\n\r\n시나트라를 Fallout NV의 Blue Moon으로 처음 접했었는데, 그 후에 Come fly with me나 Theme from Newyork Newyork 같이 좋은 곡들이 너무 많아서 자주 듣는 편이다.\r\n\r\n문제로 돌아와서, 러프하게 보면 \"무작정 빨리가면 되지 않나?\"라고 생각할 수 있다. 하지만 아래 두 조건이 발목을 잡는다.\r\n\r\n1. 처음, 끝 구간은 반드시 <span class=\"primary\">한 칸만 워프</span>할 수 있다.\r\n2. $k$만큼 이동할 경우, <span class=\"primary\">$k - 1$ ~ $k + 1$만큼만 이동 가능</span>함\r\n3. 반드시 <span class=\"primary\">정확한 지점에 도착</span>해야함 (통과 X)\r\n\r\n위 조건들 때문에 새벽 2시 강남의 \"과학\"마냥 쏘다니면 안 된다.\r\n\r\n경우의 수는 아니고, 정해진 규칙이 있으니 이를 계산하여 순서대로 나열하면 단서를 발견할 수 있을 것 같다.\r\n\r\n| 거리  | 내용          | 가동 횟수 |\r\n| :---: | :------------ | :-------: |\r\n|   1   | 1             |     1     |\r\n|   2   | 1 1           |     2     |\r\n|   3   | 1 1 1         |     3     |\r\n|   4   | 1 2 1         |     3     |\r\n|   5   | 1 2 1 1       |     4     |\r\n|   6   | 1 2 2 1       |     4     |\r\n|   7   | 1 2 2 1 1     |     5     |\r\n|   8   | 1 2 2 2 1     |     5     |\r\n|   9   | 1 2 3 2 1     |     5     |\r\n|  10   | 1 2 3 2 1 1   |     6     |\r\n|  11   | 1 2 3 2 2 1   |     6     |\r\n|  12   | 1 2 3 3 2 1   |     6     |\r\n|  13   | 1 2 3 3 2 1 1 |     7     |\r\n|  14   | 1 2 3 3 2 2 1 |     7     |\r\n|  15   | 1 2 3 3 3 2 1 |     7     |\r\n|  16   | 1 2 3 4 3 2 1 |     7     |\r\n\r\n잘 안 보일 수도 있으나, 규칙성 찾을 때 가장 만만한 제곱수(1, 4, 9...)를 기준으로 규칙을 정의할 수 있다. 특징은 아래와 같다.\r\n\r\n* 제곱수 이후로 가동 횟수가 1 증가한다.\r\n* 현재 제곱수와 다음 제곱수의 중간에서 가동 횟수가 1 증가한다.\r\n\r\n즉, 제곱수 이후로 가시적인 변화가 있으며, 제곱수를 기준으로 구간의 중간에서 가동률이 1 증가한다.\r\n\r\n### 제곱수의 가동 횟수 일반식\r\n\r\n| 거리  | 내용          | 가동 횟수 |\r\n| :---: | :------------ | :-------: |\r\n|   1   | 1             |     1     |\r\n|   4   | 1 2 1         |     3     |\r\n|   9   | 1 2 3 2 1     |     5     |\r\n|  16   | 1 2 3 4 3 2 1 |     7     |\r\n\r\n제곱수의 가동률은 아래와 같다. 제곱수 $n$의 가동 횟수 일반식은 아래와 같다.\r\n\r\n$$\r\n2\\sqrt{n} - 1\r\n$$\r\n\r\n9의 경우 $2 * 3 - 1 = 5$이므로 식이 성립함을 알 수 있다.\r\n\r\n### 제곱수가 아닌 수의 가동 횟수 일반식\r\n\r\n제곱수 사이의 중간에서 가동 횟수가 바뀌므로, 이 중간값을 계산하면 된다. 제곱수가 아닌 일반적인 숫자 $k$가 있다고 가정하자. 이 규칙은 제곱수를 중심으로 돌아가므로, $k$를 통해 제곱수를 구해야 한다. 구해야 할 요소는 아래와 같다.\r\n\r\n* $k$보다 크면서 가장 가까운 제곱수\r\n* $k$가 속한 제곱수 구간의 중간값\r\n\r\n1. $k$에 제곱근 연산을 수행하고 이를 반올림한다. $k$보다 크면서 $k$와 가장 가까운 제곱수의 제곱근 $\\sqrt{n}$이 계산된다.\r\n2. $\\sqrt{n}$을 제곱하여 가장 근접한 제곱수 $n$을 계산한다.\r\n3. $n - \\sqrt{n}$의 식으로 $k$가 속한 제곱수 구간의 중간값$t$을 계산한다.\r\n4. $k > t$일 경우, $n$의 가동 횟수와 동일한 $2\\sqrt{n} - 1$식을 적용한다.\r\n5. $k <= t$일 경우, $n$의 가동 횟수에서 1을 뺀 $2\\sqrt{n} - 2$식을 적용한다.\r\n\r\n위 방법을 토대로 7의 가동 횟수를 계산해보자.\r\n\r\n$\\sqrt{7} \\fallingdotseq 2.646$이므로, 이를 반올림하면 3이 계산된다. 즉, 7보다 크면서 가장 가까운 제곱수는 $3^2 = 9$다.\r\n\r\n$9 - \\sqrt{9} = 9 - 3 = 6$이므로, $k$가 속한 제곱수 구간의 중간값은 6이다. 숫자가 6보다 클 경우 9와 가동 횟수가 동일하다. 주어진 숫자는 7이므로 9의 가동 횟수와 동일하다.\r\n\r\n9의 가동횟수는 $2\\sqrt{9} - 1 = 6 - 1 = 5$이므로 7의 가동 횟수 역시 5가 된다.\r\n\r\n위 절차를 코드로 녹여내면 된다. 코드 구현 난이도는 낮다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\n/**\r\n * 백준 전체 1011 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/06/11/a1011\">1011 풀이</a>\r\n * @since 2021.06.11 Fri 09:06:34\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\t// 케이스 수\r\n\t\tint T = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\tfor (int i = 0; i < T; i++)\r\n\t\t{\r\n\t\t\tString[] temp = reader.readLine().split(\" \");\r\n\t\t\t\r\n\t\t\t// 현재 위치\r\n\t\t\tdouble x = Double.parseDouble(temp[0]);\r\n\t\t\t\r\n\t\t\t// 목표 위치\r\n\t\t\tdouble y = Double.parseDouble(temp[1]);\r\n\t\t\t\r\n\t\t\t// x, y 사이의 거리\r\n\t\t\tdouble distance = y - x;\r\n\t\t\t\r\n\t\t\tSystem.out.println(solve(distance));\r\n\t\t}\r\n\t\t\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 가동횟수 반환 함수\r\n\t *\r\n\t * @param distance: [double] 거리\r\n\t *\r\n\t * @return [int] 가동횟수\r\n\t */\r\n\tprivate static int solve(double distance)\r\n\t{\r\n\t\tint result;\r\n\t\t\r\n\t\tdouble ref = Math.sqrt(distance);\r\n\t\t\r\n\t\t// 제곱수일 경우\r\n\t\tif (ref % 1 == 0)\r\n\t\t{\r\n\t\t\tresult = (int) (2 * ref - 1);\r\n\t\t}\r\n\t\t\r\n\t\t// 아닐 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\tdouble next = Math.ceil(ref);\r\n\t\t\t\r\n\t\t\t// 이전 제곱수와 다음 제곱수의 중간보다 큰 수일 경우\r\n\t\t\tif (distance > Math.pow(next, 2) - next)\r\n\t\t\t{\r\n\t\t\t\tresult = (int) (2 * next - 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 아닐 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tresult = (int) (2 * next - 2);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n}\r\n```\r\n\r\n주의할 점이 하나 있는데, $x$와 $y$의 최대값이 $2^31$이다. int의 최대값은 2,147,483,647이지만, $2^31$은 2,147,483,64<span class=\"red-A200\">8</span>이므로 $x$, $y$의 거리 계산 시 int를 사용하면 안 된다. 결과만 int형으로 출력해야 한다.\r\n\r\n메모이제이션을 적용할까 했지만, 배열을 $2^31$ 크기만큼 초기화해야 하므로 오히려 오버헤드가 더 심하게 발생할 것 같다. 재귀함수도 아니니 메모이제이션을 적용해도 별차이 없을 것 같다.\r\n\r\n## 분류\r\n\r\n* 수학","url":["2021-06-11-a1011","2021","06","11","a1011"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1010번 다리 놓기","excerpt":"재원이는 한 도시의 시장이 되었다. 이 도시에는 도시를 동쪽과 서쪽으로 나누는 큰 일직선 모양의 강이 흐르고 있다. 하지만 재원이는 다리가 없어서 시민들이 강을 건너는데 큰 불편을 겪고 있음을 알고 다리를 짓기로 결심하였다. 강 주변에서 다리를 짓기에 적합한 곳을 사이트라고 한다. 재원이는 강 주변을 면밀히 조사해 본 결과 강의 서쪽에는 N개의 사이트가 있고 동쪽에는 M개의 사이트가 있다는 것을 알았다. (N ≤ M)","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-06-09T14:14:09","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","Combination(조합)","SILVER","SILVER V"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-06-09-a1010.md","content":"\r\n# 다리 놓기\r\n\r\n![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange)\r\n\r\n🔗 [전체 1010번 문제](https://www.acmicpc.net/problem/1010)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|  0.5초   |    128MB    |\r\n\r\n## 문제\r\n\r\n재원이는 한 도시의 시장이 되었다. 이 도시에는 도시를 동쪽과 서쪽으로 나누는 큰 일직선 모양의 강이 흐르고 있다. 하지만 재원이는 다리가 없어서 시민들이 강을 건너는데 큰 불편을 겪고 있음을 알고 다리를 짓기로 결심하였다. 강 주변에서 다리를 짓기에 적합한 곳을 <span class=\"primary\">사이트</span>라고 한다. 재원이는 강 주변을 면밀히 조사해 본 결과 강의 서쪽에는 $N$개의 사이트가 있고 동쪽에는 $M$개의 사이트가 있다는 것을 알았다. $(N ≤ M)$\r\n\r\n재원이는 서쪽의 사이트와 동쪽의 사이트를 다리로 연결하려고 한다. <span class=\"red-600\">(이때 한 사이트에는 최대 한 개의 다리만 연결될 수 있다.)</span> 재원이는 다리를 최대한 많이 지으려고 하기 때문에 서쪽의 사이트 개수만큼 ($N$개) 다리를 지으려고 한다. <span class=\"red-600\">다리끼리는 서로 겹쳐질 수 없다</span>고 할 때 다리를 지을 수 있는 경우의 수를 구하는 프로그램을 작성하라.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://www.acmicpc.net/upload/201003/pic1.JPG\" width=\"400px\" />\r\n</p>\r\n\r\n## 입력\r\n\r\n입력의 첫 줄에는 테스트 케이스의 개수 $T$가 주어진다. 그 다음 줄부터 각각의 테스트케이스에 대해 강의 서쪽과 동쪽에 있는 사이트의 개수 정수 $N$, $M$ $(0 < N ≤ M < 30)$이 주어진다.\r\n\r\n## 출력\r\n\r\n각 테스트 케이스에 대해 주어진 조건하에 다리를 지을 수 있는 경우의 수를 출력한다.\r\n\r\n## 케이스\r\n\r\n### 예제 1\r\n\r\n+ 입력\r\n\r\n``` tc\r\n3\r\n2 2\r\n1 5\r\n13 29\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n1\r\n5\r\n67863915\r\n```\r\n\r\n# 풀이\r\n\r\n규칙을 정리하면 아래와 같다.\r\n\r\n1. $N$구역에서 $M$구역으로 다리를 건설한다.\r\n2. $N <= M$이다.\r\n3. 사이트 당 연결된 다리는 하나다.\r\n4. 다리끼리는 서로 겹쳐서 연결되면 안 된다.\r\n\r\n1000번 부터 문제 풀면서, [1007번 벡터](/posts/2021/06/09/a1007)로 인해 조합이라는 키워드를 쉽게 연상할 수 있었다. 문제에서 $N$구역에서 $M$구역으로 다리를 건설한다고 서술하므로 $N$을 기준으로 생각하기 쉽다. 반대로 $M$을 기준으로 생각하면 해결의 실마리가 보인다. $M$구역의 사이트에서 $N$구역의 사이트 갯수만큼 연결할 사이트에 대한 조합을 계산하면 되기 때문.\r\n\r\n예를 들어 $N$구역에 3개의 사이트가 있고, $M$구역에 5개의 사이트가 있다고 가정하자.\r\n\r\n| 구분  | $M_1$ | $M_2$ | $M_3$ | $M_4$ | $M_5$ |\r\n| :---: | :---: | :---: | :---: | :---: | :---: |\r\n|   1   |   O   |   O   |   O   |       |       |\r\n|   2   |   O   |   O   |       |   O   |       |\r\n|   3   |   O   |   O   |       |       |   O   |\r\n|   4   |   O   |       |   O   |   O   |       |\r\n|   5   |   O   |       |   O   |       |   O   |\r\n|   6   |   O   |       |       |   O   |   O   |\r\n|   7   |       |   O   |   O   |   O   |       |\r\n|   8   |       |   O   |   O   |       |   O   |\r\n|   9   |       |   O   |       |   O   |   O   |\r\n|  10   |       |       |   O   |   O   |   O   |\r\n\r\n총 10개의 경우의 수가 존재한다. 이는 $_5C_3$의 계산 결과와 일치한다.\r\n\r\n$$\r\n_5C_3 = \\frac{5!}{3! \\times 2!} = \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{(3 \\times 2 \\times 1) \\times (2 \\times 1)} = \\frac{5 \\times 4}{2 \\times 1} = 10\r\n$$\r\n\r\n> ❓ **숫자가 왜 감탄(!)을 하죠?**  \r\n> Factorial(팩토리얼) 연산자로 $n! = n \\times (n - 1) \\times (n - 2) \\times ... \\times 1$과 같은 형태로 연산한다.\r\n\r\n더도말고 덜도말고 조합 알고리즘을 설계하면 된다. 조합의 요소를 반환할 필요 없이, 조합의 갯수만 구하면 되므로 [1007번 벡터](/posts/2021/06/09/a1007)문제보다 더 간단하다.\r\n\r\n## Gotta Go FAST!\r\n\r\n무턱대로 위 식으로 조합 알고리즘을 짜면 <span class=\"red-A400\">시간 초과</span> 오류를 볼 수 있다. 그도 그럴 것이, 원리 자체는 쉽지만 시간제한이 0.5s로 매우 짧기 때문. $M$의 값이 최대 30이므로, 최대 $30!$에 대한 연산을 수행해야하기 때문이다. 그러므로 <span class=\"blue-A400\">Memoization(메모이제이션)</span>이라는 최적화를 적용해야 한다.\r\n\r\n> ❓ **Memoization(메모이제이션)이란?**  \r\n> 동일한 계산을 반복할 때, 이전에 계산한 값을 메모리에 저장해놓고 필요 시 사용하여 반복적인 연산 작업을 제거하는 기술.\r\n\r\n조합을 재귀적으로 표현하면 아래와 같이 표현할 수 있다.\r\n\r\n$$\r\n_nC_r = _{n-1}C_{r-1} + _{n-1}C_r\r\n$$\r\n\r\n아래의 그림을 보면 이해하기 쉽다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/121479130-b036e680-ca04-11eb-96ed-620c4fc3086a.png\" width=\"700px\" />\r\n</p>\r\n\r\n만약, $_5C_3$을 연산한다면 아래와 같이 진행된다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/121479160-b6c55e00-ca04-11eb-97da-a4708798a715.png\" width=\"700px\" />\r\n</p>\r\n\r\n이 중, $_3C_2$의 경우 $_4C_2$, $_4C_3$을 계산할 때 필요하므로 여러번 호출된다. 만약, 메모이제이션이 적용되지 않았다면, $_3C_2$이 필요할 때마다 1에서부터 다시 연산해야한다. $_{30}C_{14}$와 같이 숫자가 커지면 위 그림의 깊이도 깊어지기 때문에 많은 오버헤드가 발생한다.\r\n\r\n만약 이렇게 연산된 값을 버리지 않고 메모리상에 저장한 뒤 쓸 수 있다면 연산에서 엄청난 이점이 발생한다. $_3C_2$을 이미 저장했다면 $_4C_2$, $_4C_3$을 계산할 때 저장된 $_3C_2$을 즉시 꺼내 사용할 수 있다. 복잡한 연산을 건너뛸 수 있으며, 동일한 값이 여러번 호출되도 상관없다.\r\n\r\n해당 문제의 조합 알고리즘의 연산에서 한 번 연산된 값을 임의의 배열에 저장하여 이를 활용하면 0.5초라는 짧은 시간을 충족할 수 있을 것이다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\n/**\r\n * 백준 전체 1010 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @see <a href=\"https://rwb0104.github.io/posts/2021/06/09/a1010\">1010 풀이</a>\r\n * @since 2021.06.09 Tue 14:14:09\r\n */\r\npublic class Main\r\n{\r\n\t// 다리 건설 경우의 수\r\n\tprivate static final int[][] dp = new int[31][31];\r\n\t\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t *\r\n\t * @throws IOException 데이터 입출력 예외\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\t// 케이스 수\r\n\t\tint T = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\tfor (int i = 0; i < T; i++)\r\n\t\t{\r\n\t\t\tString[] temp = reader.readLine().split(\" \");\r\n\t\t\t\r\n\t\t\tint N = Integer.parseInt(temp[0]);\r\n\t\t\tint M = Integer.parseInt(temp[1]);\r\n\t\t\t\r\n\t\t\tSystem.out.println(combination(M, N));\r\n\t\t}\r\n\t\t\r\n\t\treader.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 조합 결과 반환 함수\r\n\t *\r\n\t * @param n: 원소 갯수\r\n\t * @param r: 조합 갯수\r\n\t *\r\n\t * @return {int} 조합\r\n\t */\r\n\tprivate static int combination(int n, int r)\r\n\t{\r\n\t\t// 이미 계산된 값일 경우\r\n\t\tif (dp[n][r] > 0)\r\n\t\t{\r\n\t\t\treturn dp[n][r];\r\n\t\t}\r\n\t\t\r\n\t\t// 원소의 갯수가 조합의 갯수와 동일하거나 0일 경우\r\n\t\telse if (n == r || r == 0)\r\n\t\t{\r\n\t\t\treturn dp[n][r] = 1;\r\n\t\t}\r\n\t\t\r\n\t\t// 일반적인 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn dp[n][r] = combination(n - 1, r - 1) + combination(n - 1, r);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n$dp[n][r]$는 int형 배열이므로 기본값이 0이다. 즉, $dp[n][r] > 0$일 경우 $_nC_r$가 이미 계산되었다는 뜻이므로, 이미 저장된 값을 반환한다.\r\n\r\n$_5C_0$, $_5C_5$와 같이 $_nC_0$, $_nC_n$일 경우 그 값은 1이다. 해당 케이스의 경우 1을 반환한다. (전체를 선택하거나, 아무것도 선택하지 않는 방법은 하나뿐이다.)\r\n\r\n나머지 일반적인 경우 $_nC_r$의 재귀적 표현 방식인 $_{n-1}C_{r-1} + _{n-1}C_{r}$을 적용하면 된다.\r\n\r\n또한 $dp$ 이차원 배열은 31행렬로 초기화되는데, 그 이유는 $dp$의 행렬이 되는 $N$과 $M$의 최대값이 30이기 때문. 배열은 인덱스가 0부터 시작하므로 1을 더해야 한다.\r\n\r\n또한 케이스별로 $dp$를 초기화하지 않는데, 이는 <span class=\"green-A400\">조합이 범용적이므로 재사용이 가능하기 때문</span>이다. 1번 케이스나 100번 케이스나 $_5C_3$의 값은 10이다. 따라서 초기화를 하지 않으면 오히려 이전 케이스에서 계산했던 내용을 그대로 사용할 수 있어서 이득이다. 만약 첫 번째 케이스에서 $_{30}C_{12}$와 같이 큰 수를 계산했다면, 이후 케이스의 $_{12}C_{5}$와 같은 모든 하위 조합들은 연산을 통째로 건너뛸 수도 있을 것이다.\r\n\r\n## 분류\r\n\r\n* 수학\r\n* 다이나믹 프로그래밍\r\n* 조합론","url":["2021-06-09-a1010","2021","06","09","a1010"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1004번 어린 왕자","excerpt":"어린 왕자는 소혹성 B-664에서 자신이 사랑하는 한 송이 장미를 위해 살아간다. 어느 날 장미가 위험에 빠지게 된 것을 알게 된 어린 왕자는, 장미를 구하기 위해 은하수를 따라 긴 여행을 하기 시작했다. 하지만 어린 왕자의 우주선은 그렇게 좋지 않아서 행성계 간의 이동을 최대한 피해서 여행해야 한다. 아래의 그림은 어린 왕자가 펼쳐본 은하수 지도의 일부이다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-05-22T21:42:23","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","기하학","SILVER","SILVER III"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-05-22-a1004.md","content":"\r\n# 어린 왕자\r\n\r\n![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange)\r\n\r\n🔗 [전체 1004번 문제](https://www.acmicpc.net/problem/1004)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    128MB    |\r\n\r\n## 문제\r\n\r\n어린 왕자는 소혹성 B-664에서 자신이 사랑하는 한 송이 장미를 위해 살아간다. 어느 날 장미가 위험에 빠지게 된 것을 알게 된 어린 왕자는, 장미를 구하기 위해 은하수를 따라 긴 여행을 하기 시작했다. 하지만 어린 왕자의 우주선은 그렇게 좋지 않아서 행성계 간의 이동을 최대한 피해서 여행해야 한다. 아래의 그림은 어린 왕자가 펼쳐본 은하수 지도의 일부이다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/upload/201003/dfcmhrjj_113gw6bcng2_b.gif\" width=\"512px\" />\r\n</p>\r\n\r\n빨간 실선은 어린 왕자가 출발점에서 도착점까지 도달하는데 있어서 필요한 행성계 진입/이탈 횟수를 최소화하는 경로이며, 원은 행성계의 경계를 의미한다. 이러한 경로는 여러 개 존재할 수 있지만 적어도 3번의 행성계 진입/이탈이 필요하다는 것을 알 수 있다.\r\n\r\n위와 같은 은하수 지도, 출발점, 도착점이 주어졌을 때 어린 왕자에게 필요한 최소의 행성계 진입/이탈 횟수를 구하는 프로그램을 작성해 보자. (행성계의 경계가 맞닿거나 서로 교차하는 경우는 없다고 가정한다. 또한, 출발점이나 도착점이 행성계 경계에 걸쳐진 경우 역시 입력으로 주어지지 않는다.)\r\n\r\n## 입력\r\n\r\n입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 그 다음 줄부터 각각의 테스트케이스에 대해 첫째 줄에 출발점 $(x_1, y_1)$과 도착점 $(x_2, y_2)$이 주어진다. 두 번째 줄에는 행성계의 개수 $n$이 주어지며, 세 번째 줄부터 n줄에 걸쳐 행성계의 중점과 반지름 $(c_x, c_y, r)$이 주어진다. 입력제한은 다음과 같다. $(-1000 ≤ x_1, y_1, x_2, y_2, c_x, c_y ≤ 1000, 1 ≤ r ≤ 1000, 1 ≤ n ≤ 50)$\r\n\r\n좌표와 반지름은 모두 정수이다.\r\n\r\n## 출력\r\n\r\n각 테스트 케이스에 대해 어린 왕자가 거쳐야 할 최소의 행성계 진입/이탈 횟수를 출력한다.\r\n\r\n## 케이스\r\n\r\n+ 입력\r\n\r\n``` tc\r\n2\r\n-5 1 12 1\r\n7\r\n1 1 8\r\n-3 -1 1\r\n2 2 2\r\n5 5 1\r\n-4 5 1\r\n12 1 1\r\n12 1 2\r\n-5 1 5 1\r\n1\r\n0 0 2\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n3\r\n0\r\n```\r\n\r\n# 풀이\r\n\r\n1002번째 알고리즘의 내용을 응용하면 쉽게 풀 수 있는 문제인 것 같다. 실제로 별다른 레퍼런스를 찾지도 않고 풀 수 있었으니.\r\n\r\n문제를 풀기 전에 몇 가지 집고 넘아갈 게 있다.  \r\n숫자들 때문에 입력의 한 세트를 착각하기 쉽다.\r\n\r\n위 예제를 기준으로 설명하면, 첫 번째 숫자는 세트의 갯수. 본문에서는 `2`이므로, 두 세트를 테스트하므로 결과는 두 줄이 출력된다.  \r\n이후 테스트에 필요한 데이터가 출력된다.\r\n\r\n-5 1 12 1 <= $x_1, y_1, x_2, y_2$  \r\n7 <= 행성 갯수  \r\n1 1 8 <= $c_{x1}, c_{y1}, r_1$  \r\n-3 -1 1  \r\n2 2 2  \r\n5 5 1  \r\n-4 5 1  \r\n12 1 1  \r\n12 1 2 <= 행성 갯수만큼 출력됨\r\n\r\n또한, 결과는 행성계의 진입/이탈 횟수를 통틀어서 출력하므로 굳이 진입/이탈을 구분하여 저장할 필요는 없다.\r\n\r\n문제에서 **출발점에서 도착점까지 가는데 통과해야하는 행성계(이하 원, circle)의 최소**를 목적으로 두기 때문에, 반드시 통과해야하는 원만 계산하면 된다.  \r\n출발/도착점이 임의의 원 안에 포함될 경우 반드시 진입/이탈이 일어난다. 따라서, 출발/도착점을 온전히 포함하는 원의 갯수를 계산하면 진입/이탈의 횟수를 구할 수 있다.  \r\n주의할 점이 있는데, **한 원이 출발/도착점을 모두 포함할 경우 계산에서 제외**시켜야 한다.  \r\n하나의 원이 출발/도착점을 전부 포함할 경우, 원 안에서 이동하기 때문에 진입/이탈이 일어나지 않기 때문.  \r\n\r\n![example](https://user-images.githubusercontent.com/50317129/120758690-188d5000-c54d-11eb-917c-f910eb7b3199.png)\r\n\r\n원리는 간단하다. 원점과 점의 거리를 계산한다. 계산한 거리가 원의 반지름보다 짧을 경우, 해당 원은 점을 포함하는 셈이다.  \r\n이를 식으로 정리하면 아래와 같다.\r\n\r\n|     변수     |      의미      |\r\n| :----------: | :------------: |\r\n|   $x$, $y$   |   원점 좌표    |\r\n| $x_o$, $y_o$ | 원의 원점 좌표 |\r\n|     $r$      |  원의 반지름   |\r\n\r\n변수는 위 표와 같이 정의하고 <span class=\"green-A700\">한 원이 원점을 포함하는 식</span>을 전개한다.\r\n\r\n$$\r\n\\sqrt{(x_0 - x)^2 + (y_0 - y)^2} < r\r\n$$\r\n\r\n위 식을 코드로 표현하면 되는 비교적 간단한 알고리즘이다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * 백준 전체 1004 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @since 2021.04.24 Sat 02:15:31\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\t\r\n\t\tint length = scanner.nextInt();\r\n\t\tscanner.nextLine();\r\n\t\t\r\n\t\tfor (int i = 0; i < length; i++)\r\n\t\t{\r\n\t\t\tString base = scanner.nextLine();\r\n\t\t\t\r\n\t\t\tint x_start = Integer.parseInt(base.split(\" \")[0]);\r\n\t\t\tint y_start = Integer.parseInt(base.split(\" \")[1]);\r\n\t\t\t\r\n\t\t\tint x_end = Integer.parseInt(base.split(\" \")[2]);\r\n\t\t\tint y_end = Integer.parseInt(base.split(\" \")[3]);\r\n\t\t\t\r\n\t\t\tint through = 0;\r\n\t\t\t\r\n\t\t\tint count = scanner.nextInt();\r\n\t\t\tscanner.nextLine();\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < count; j++)\r\n\t\t\t{\r\n\t\t\t\tString circle = scanner.nextLine();\r\n\t\t\t\t\r\n\t\t\t\tint x = Integer.parseInt(circle.split(\" \")[0]);\r\n\t\t\t\tint y = Integer.parseInt(circle.split(\" \")[1]);\r\n\t\t\t\tint r = Integer.parseInt(circle.split(\" \")[2]);\r\n\t\t\t\t\r\n\t\t\t\tboolean hasStartContain = hasContain(x_start, y_start, x, y, r);\r\n\t\t\t\tboolean hasEndContain = hasContain(x_end, y_end, x, y, r);\r\n\t\t\t\t\r\n\t\t\t\t// 해당 행성이 출발 혹은 도착점 중 하나만을 포함할 경우\r\n\t\t\t\tif (!(hasStartContain && hasEndContain) && (hasStartContain || hasEndContain))\r\n\t\t\t\t{\r\n\t\t\t\t\tthrough++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(through);\r\n\t\t}\r\n\t\t\r\n\t\tscanner.close();\r\n\t}\r\n\t\r\n\t/**\r\n\t * 출발/도착점 포함 여부 반환 함수\r\n\t *\r\n\t * @param xo: [int] 출발/도착점의 x좌표\r\n\t * @param yo: [int] 출발/도착점의 y좌표\r\n\t * @param x: [int] 행성의 x좌표\r\n\t * @param y: [int] 행성의 y좌표\r\n\t * @param r: [int] 행성의 반지름\r\n\t *\r\n\t * @return [boolean] 출발/도착점 포함 여부\r\n\t */\r\n\tprivate static boolean hasContain(int xo, int yo, int x, int y, int r)\r\n\t{\r\n\t\treturn Math.sqrt(Math.pow(xo - x, 2) + Math.pow(yo - y, 2)) < r;\r\n\t}\r\n}\r\n```\r\n\r\n## 분류\r\n\r\n* 기하학","url":["2021-05-22-a1004","2021","05","22","a1004"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1003번 피보나치 함수","excerpt":"다음 소스는 N번째 피보나치 수를 구하는 C++ 함수이다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-05-21T23:29:03","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","피보나치 수열","Dynamic Programming(동적 프로그래밍)","SILVER","SILVER III"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-05-21-a1003.md","content":"\r\n# 피보나치 함수\r\n\r\n![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange)\r\n\r\n🔗 [전체 1003번 문제](https://www.acmicpc.net/problem/1003)\r\n\r\n## 조건\r\n\r\n|        시간제한         | 메모리 제한 |\r\n| :---------------------: | :---------: |\r\n| 0.25초 (추가 시간 없음) |    128MB    |\r\n\r\n## 문제\r\n\r\n다음 소스는 N번째 피보나치 수를 구하는 C++ 함수이다.\r\n\r\n``` cpp\r\nint fibonacci(int n) {\r\n    if (n == 0) {\r\n        printf(\"0\");\r\n        return 0;\r\n    } else if (n == 1) {\r\n        printf(\"1\");\r\n        return 1;\r\n    } else {\r\n        return fibonacci(n‐1) + fibonacci(n‐2);\r\n    }\r\n}\r\n```\r\n\r\n$fibonacci(3)$을 호출하면 다음과 같은 일이 일어난다.\r\n\r\n* $fibonacci(3)$은 $fibonacci(2)$와 $fibonacci(1)$ (첫 번째 호출)을 호출한다.\r\n* $fibonacci(2)$는 $fibonacci(1)$ (두 번째 호출)과 $fibonacci(0)$을 호출한다.\r\n* 두 번째 호출한 $fibonacci(1)$은 1을 출력하고 1을 리턴한다.\r\n* $fibonacci(0)$은 0을 출력하고 0을 리턴한다.\r\n* $fibonacci(2)$는 $fibonacci(1)$과 $fibonacci(0)$의 결과를 얻고, 1을 리턴한다.\r\n* 첫 번째 호출한 $fibonacci(1)$은 1을 출력하고, 1을 리턴한다.\r\n* $fibonacci(3)$은 $fibonacci(2)$와 $fibonacci(1)$의 결과를 얻고, 2를 리턴한다.\r\n\r\n1은 2번 출력되고, 0은 1번 출력된다. N이 주어졌을 때, $fibonacci(N)$을 호출했을 때, 0과 1이 각각 몇 번 출력되는지 구하는 프로그램을 적성하시오.\r\n\r\n## 입력\r\n\r\n첫째 줄에 테스트 케이스의 개수 T가 주어진다.  \r\n각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. N은 40보다 작거나 같은 자연수 또는 0이다.\r\n\r\n## 출력\r\n\r\n각 테스트 케이스마다 0이 출력되는 횟수와 1이 출력되는 횟수를 공백으로 구분해서 출력한다.\r\n\r\n## 케이스\r\n\r\n+ 입력\r\n\r\n``` tc\r\n3\r\n0\r\n1\r\n3\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n1 0\r\n0 1\r\n1 2\r\n```\r\n\r\n# 풀이\r\n\r\n알고리즘 풀면서 느끼는 거지만, 문제가 뭘 말하는 지 이해가 안 되는 경우가 많은 것 같다. 내가 멍청해서 그런건가.\r\n\r\n이 문제를 풀기 위해선, 피보나치 수열에 대한 식을 이해하고 있어야 한다.  \r\n피보나치 수열이 $f()$일 때, $n$번째 피보나치 수열의 식은 $f(n) = f(n - 1) + f(n - 2)$로 정의할 수 있다.\r\n\r\n$n = 0, 1$일 때의 초기값이 정해져있다. (식의 특성 상 초기값이 없으면 계산할 수가 없다.)  \r\n$f(0) = 0$  \r\n$f(1) = 1$  \r\n초기값은 위와 같으며, 실질적으로 $n >= 2$ 부터 의미있는 연산이 수행된다.\r\n\r\n다시 문제로 돌아가서, 임의의 수 N이 주어질 경우 $f(N)$을 수행하면서 $f(0)$, $f(1)$이 몇 번 호출되는지를 구하면 된다.  \r\n예를 들어, $N = 4$라고 가정하고 식을 전개하면 아래와 같다.  \r\n$f(4) = f(3) + f(2)$  \r\n위 식에서 $f(3)$은 $f(2) + f(1)$로 치환할 수 있으며, 같은 이유로 $f(2)$ 역시 $f(1) + f(0)$으로 치환 가능하다.  \r\n$f(4) = f(2) + f(1) + f(1) + f(0)$  \r\n$= f(1) + f(0) + f(1) + f(1) + f(0)$\r\n\r\n결과적으로 $f(4) = 2(f0) + 3f(1)$로 정리할 수 있다.  \r\n따라서 이 문제의 알고리즘은 $N = 4$일 경우 `2 3`이 출력되어야 한다.\r\n\r\n우선 식을 정리하여 한 눈에 보면 문제 해결에 도움이 될 것 같다.  \r\n피보나치 수열을 쭉 정리하면 아래와 같다.\r\n\r\n|  $n$  | $f(0)$의 갯수 | $f(1)$의 갯수 | $f(n)$ |\r\n| :---: | :-----------: | :-----------: | :----: |\r\n|   0   |       1       |       0       |   0    |\r\n|   1   |       0       |       1       |   1    |\r\n|   2   |       1       |       1       |   1    |\r\n|   3   |       1       |       2       |   2    |\r\n|   4   |       2       |       3       |   3    |\r\n|   5   |       3       |       5       |   5    |\r\n|   6   |       5       |       8       |   8    |\r\n|   7   |       8       |      13       |   13   |\r\n|   8   |      13       |      21       |   21   |\r\n|   9   |      21       |      34       |   34   |\r\n\r\n표로 정리하니 어느정도 규칙성이 눈에 보이기 시작한다.\r\n\r\n* N의 $f(1)$ 출력 갯수는 $f(N)$과 동일하다.  \r\n* N의 $f(0)$ 출력 갯수는 $f(N - 1)$과 동일하다.\r\n\r\n즉, $N = 4$일 경우 알고리즘은 $f(3)$ $f(4)$가 출력되면 된다.\r\n\r\n여기서 단순하게 생각하면 아래와 같이 코드를 짤 수 있다.\r\n\r\n## 완성....?\r\n\r\n``` java\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * 백준 전체 1003 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @since 2021.04.21 Wed 23:29:03\r\n */\r\npublic class Main\r\n{\r\n\tstatic Integer[][] arr = new Integer[41][2];\r\n\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\r\n\t\t// N = 0일 때, 0이 호출되는 횟수\r\n\t\tarr[0][0] = 1;\r\n\r\n\t\t// N = 0일 때, 1이 호출되는 횟수\r\n\t\tarr[0][1] = 0;\r\n\r\n\t\t// N = 1일 때, 0이 호출되는 횟수\r\n\t\tarr[1][0] = 0;\r\n\r\n\t\t// N = 1일 때, 1이 호출되는 횟수\r\n\t\tarr[1][1] = 1;\r\n\r\n\t\tint length = scanner.nextInt();\r\n\r\n\t\tfor (int i = 0; i < length; i++)\r\n\t\t{\r\n\t\t\tint n = scanner.nextInt();\r\n\r\n\t\t\tint f0 = fibonacci(n - 1);\r\n\t\t\tint f1 = fibonacci(n);\r\n\r\n\t\t\tSystem.out.println(f0 + \" \" + f1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 피보나치 값 반환 함수\r\n\t *\r\n\t * @param n: [int] 인덱스\r\n\t *\r\n\t * @return [int] 피보나치 값\r\n\t */\r\n\tprivate static int fibonacci(int n)\r\n\t{\r\n\t\t// 인덱스가 0일 경우\r\n\t\tif (n == 0)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// 인덱스가 1일 경우\r\n\t\telse if (n == 1)\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\t// 인덱스가 2 이상일 경우 (연산 가능)\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn fibonacci(n - 1) + fibonacci(n - 2);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n위 코드는 크게 두 가지 문제가 있는데, 우선 $n = 0, 1$일 때의 처리가 정상적으로 이루어지지 않고 있다.  \r\n$f(1) = f(0) + f(-1)$  \r\nN이 문제되기 이전에 이 코드는 런타임 시간 초과로 실패한다. 왜일까?\r\n\r\n위 코드는 **불필요한 연산을 너무 많이 수행한다.** 피보나치 수열의 특성 상 $f(N)$을 계산할 경우, $f(N - 1)$, $f(N - 2)$ ... 등과 같이 N 이하의 피보나치 값까지 전부 계산하게 된다.  \r\n다시 말하면, $f(6)$을 연산할 경우 계산 과정에서 자연스레 $f(4)$, $f(2)$ 등의 피보나치 값을 구할 수 있다.\r\n\r\n위 이론을 알고리즘에 적용하면 아래와 같이 응용할 수 있다.  \r\nN을 총 3번 입력한다고 가정하면 $N_1$, $N_2$, $N_3$으로 구분할 수 있다.\r\n\r\n$N_2 = 8$ -> $f(8)$ 부터 $f(0)$까지의 값을 구할 수 있음.  \r\n$N_3 = 4$ -> $f(4)$ 부터 $f(0)$까지의 값을 구할 수 있음.\r\n\r\n피보나치 연산값을 저장하면 $N_n > N_n+1$일 경우 굳이 **추가적인 연산을 진행하지 않고 이미 저장된 값을 출력**만 함으로써, 런타임 리소스를 줄일 수 있다.\r\n\r\n클래스의 멤버변수로 **Integer 배열을 선언**하여 피보나치 수열값을 저장하고, 알고리즘 연산에 이를 활용하면 될 것 같다.\r\n\r\n> int는 Primitive(자료형) 데이터고, Integer는 Wrapper 클래스다. Wrapper 클래스는 null 입력이 가능하다는 특징이 있으므로, Integer 역시 숫자 이외에 null값을 입력할 수 있다.  \r\nInteger 배열의 초기값은 null로 지정되므로, 배열의 값이 null인 인덱스는 아직 피보나치 수열 계산이 이루어지지 않은 인덱스라고 판단할 수 있다.\r\n\r\n다행히 문제에서 주어진 $N$의 조건은 $0 <= N <= 40$이므로, 배열의 인덱스는 최대 41을 넘지 않음을 알 수 있다.  \r\n(배열은 0부터 시작하므로 40개가 아닌 0을 포함한 41개임에 유의하자)\r\n\r\n이후 피보나치 연산에서 각 과정의 값을 배열에 저장하는 로직을 추가한다.  \r\n배열의 값이 null일 경우, 아직 연산이 진행되지 않았으므로 피보나치 연산을 수행하고 배열에 저장한다.  \r\n반대로, 배열이 특정 숫자값을 가질 경우, 이미 연산이 진행된 인덱스이므로 별도의 연산을 거치지 않고 해당 값을 바로 출력한다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\npackage all.a1003;\r\n\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * 백준 전체 1003 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @since 2021.04.21 Wed 23:29:03\r\n */\r\npublic class Main\r\n{\r\n\tstatic Integer[] arr = new Integer[41];\r\n\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\r\n\t\t// 피보나치 수열 초기값 (N = 0)\r\n\t\tarr[0] = 0;\r\n\r\n\t\t// 피보나치 수열 초기값 (N = 1)\r\n\t\tarr[1] = 1;\r\n\r\n\t\tint length = scanner.nextInt();\r\n\r\n\t\tfor (int i = 0; i < length; i++)\r\n\t\t{\r\n\t\t\tint n = scanner.nextInt();\r\n\r\n\t\t\tfibonacci(n);\r\n\r\n\t\t\t// n이 0일 경우\r\n\t\t\tif (n == 0)\r\n\t\t\t{\r\n\t\t\t\tSystem.out.println(\"1 0\");\r\n\t\t\t}\r\n\r\n\t\t\t// n이 1일 경우\r\n\t\t\telse if (n == 1)\r\n\t\t\t{\r\n\t\t\t\tSystem.out.println(\"0 1\");\r\n\t\t\t}\r\n\r\n\t\t\t// 초기값이 아닐 경우\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tSystem.out.println(new StringBuffer().append(arr[n - 1]).append(\" \").append(arr[n]).toString());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tscanner.close();\r\n\t}\r\n\r\n\t/**\r\n\t * 피보나치 값 반환 함수\r\n\t *\r\n\t * @param n: [int] 인덱스\r\n\t *\r\n\t * @return [int] 피보나치 값\r\n\t */\r\n\tprivate static int fibonacci(int n)\r\n\t{\r\n\t\t// 해당 인덱스의 피보나치가 아직 연산되지 않았을 경우\r\n\t\tif (arr[n] == null)\r\n\t\t{\r\n\t\t\tarr[n] = fibonacci(n - 1) + fibonacci(n - 2);\r\n\t\t}\r\n\r\n\t\treturn arr[n];\r\n\t}\r\n}\r\n```\r\n\r\n## 분류\r\n\r\n* 다이나믹 프로그래밍","url":["2021-05-21-a1003","2021","05","21","a1003"]},{"header":{"title":"[백준 / JAVA] 백준 알고리즘 1002번 터렛","excerpt":"조규현과 백승환은 터렛에 근무하는 직원이다. 하지만 워낙 존재감이 없어서 인구수는 차지하지 않는다. 다음은 조규현과 백승현의 사진이다.","coverImage":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","date":"2021-05-21T21:56:10","type":"posts","category":"알고리즘","tag":["백준","알고리즘","JAVA(자바)","기하학","SILVER","SILVER IV"],"group":"백준 알고리즘","comment":true,"publish":true},"name":"2021-05-21-a1002.md","content":"\r\n# 터렛\r\n\r\n![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange)\r\n\r\n🔗 [전체 1002번 문제](https://www.acmicpc.net/problem/1002)\r\n\r\n## 조건\r\n\r\n| 시간제한 | 메모리 제한 |\r\n| :------: | :---------: |\r\n|   2초    |    128MB    |\r\n\r\n## 문제\r\n\r\n조규현과 백승환은 터렛에 근무하는 직원이다. 하지만 워낙 존재감이 없어서 인구수는 차지하지 않는다. 다음은 조규현과 백승현의 사진이다.\r\n\r\n<p align=\"center\">\r\n\t<img src=\"https://www.acmicpc.net/upload/201003/dfcmhrjj_142c3w76qg8_b.jpg\" width=\"128px\" />\r\n</p>\r\n\r\n이석원은 조규현과 백승환에게 상대편 마린(류재영)의 위치를 계산하라는 명령을 내렸다. 조규현과 백승환은 각각 자신의 터렛 위치에서 현재 적까지의 거리를 계산했다.  \r\n조규현의 좌표 $(x_1, y_1)$와 백승환의 좌표 $(x_2, y_2)$가 주어지고, 조규현이 계산한 류재명과의 거리 $r_1$과 백승환이 계산한 류재명과의 거리 $r_2$가 주어졌을 때, 류재명이 있을 수 있는 좌표의 수를 출력하는 프로그램을 작성하시오.\r\n\r\n## 입력\r\n\r\n첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 다음과 같이 이루어져 있다.  \r\n한 줄에 $x_1$, $y_1$, $r_1$, $x_2$, $y_2$, $r_2$가 주어진다. $x_1$, $y_1$, $x_2$, $y_2$는 -10,000보다 크거나 같고, 10,000보다 작거나 같은 점수이고, $r_1$, $r_2$는 10,000보다 작거나 같은 자연수이다.\r\n\r\n## 출력\r\n\r\n각 테스트 케이스마다 류재명이 있을 수 있는 위치의 수를 출력한다. 만약 류재명이 있을 수 있는 위치의 개수가 무한대일 경우에는 -1을 출력한다.\r\n\r\n## 케이스\r\n\r\n+ 입력\r\n\r\n``` tc\r\n3\r\n0 0 13 40 0 37\r\n0 0 30 0 7 4\r\n1 1 1 1 1 5\r\n```\r\n\r\n+ 출력\r\n\r\n``` tc\r\n2\r\n1\r\n0\r\n```\r\n\r\n# 풀이\r\n\r\n예제의 요소를 사람 이름으로 두었으나, 문제 이해에 방해가 되니 간단하게 서술하면 아래와 같다.  \r\n임의의 위치에 있는 점 $A$, $B$, $C$가 존재하며, $A$와 $C$의 거리, $B$와 $C$의 거리가 주어진다.  \r\n이 때, $C$가 실제로 위치할 수 있는 점의 갯수를 구하는 것. 즉, 간단하게 **두 원의 접점을 구하는 문제**라고 정의할 수 있다.  \r\n원이 완벽하게 겹칠 경우, **그 수가 무수히 많으므로 -1로 표현**하라는 조건이 포함된다.\r\n\r\n이를 그림으로 표현하면 아래와 같다.\r\n\r\n![image](https://user-images.githubusercontent.com/50317129/120757881-14146780-c54c-11eb-94ee-ab79d997000e.png)\r\n\r\n변수는 아래와 같이 정리할 수 있다.\r\n\r\n|  $n$  |   $x_n$   |   $y_n$   |   $r_n$    |\r\n| :---: | :-------: | :-------: | :--------: |\r\n|   1   | A의 x좌표 | A의 y좌표 | A의 반지름 |\r\n|   2   | B의 x좌표 | B의 y좌표 | B의 반지름 |\r\n\r\n케이스를 세분화하면 총 6가지로 나눌 수 있다.\r\n\r\n1. 두 원이 정확히 겹칠 경우 (-1)\r\n2. 두 원이 서로 겹치면서 인접하지 않는 경우 (0)\r\n3. 두 원이 서로 겹치지 않으면서 인접하지 않는 경우 (0)\r\n4. 두 원이 서로 겹치면서 인접하는 경우 (1)\r\n5. 두 원이 서로 겹치지 않으면서 인접하는 경우 (1)\r\n6. 두 원이 서로 겹치면서 인접하지 않는 경우 (2)\r\n\r\n본 풀이에선 $x_1$, $y_1$과 $x_2$, $y_2$의 거리($distance$) 및 $r_1$, $r_2$를 합한 길이($sum$)와 뺀 길이($sub$)의 절대값을 이용하여 진행한다.\r\n\r\n$$\r\ndistance = \\sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2}\r\n$$\r\n\r\n$$\r\nsum = r_1 + r_2\r\n$$\r\n\r\n$$\r\nsub = \\vert r_1 - r_2 \\vert\r\n$$\r\n\r\n* <b class=\"primary\">case 1 - 두 원이 정확히 겹칠 경우</b>\r\n\r\n\t두 원의 위치 및 반지름이 서로 동일한 상황.  \r\n\t$distance$가 0이며, $r_1$과 $r_2$의 길이가 동일할 경우 성립한다.\r\n\r\n* <b class=\"primary\">case 2 - 두 원이 서로 겹치면서 인접하지 않는 경우</b>\r\n\r\n\t두 원의 원점과의 거리가 반지름의 차이보다 짧은 상황.  \r\n\t$distance < sub$일 경우 성립한다.\r\n\r\n* <b class=\"primary\">case 3 - 두 원이 서로 겹치지 않으면서 인접하지 않는 경우</b>\r\n\r\n\t두 원의 원점과의 거리가 반지름의 합보다 긴 상황.  \r\n\t$distance > sum$일 경우 성립한다.\r\n\r\n* <b class=\"primary\">case 4 - 두 원이 서로 겹치면서 인접하는 경우</b>\r\n\r\n\t두 원의 원점과의 거리가 반지름의 차이와 일치하는 상황.  \r\n\t$distance == sub$일 경우 성립한다.\r\n\r\n* <b class=\"primary\">case 5 - 두 원이 서로 겹치지 않으면서 인접하는 경우</b>\r\n\r\n\t두 원의 원점과의 거리가 반지름의 합과 일치하는 상황.  \r\n\t$distance == sum$일 경우 성립한다.\r\n\r\n* <b class=\"primary\">case 6 - 두 원이 서로 겹치면서 인접하지 않는 경우</b>\r\n\r\n\t두 원이 서로 적당히 겹치는 상황.  \r\n\t$distance < sum$ $\\&\\&$ $distance > sub$일 경우 성립한다.\r\n\r\n굳이 식으로 표현하지 않아도, 위의 5개 케이스에 부합하지 않는 모든 상황에 적용하면 된다.  \r\n위 케이스들을 `if`문을 사용하여 적절히 표현하면 된다. `switch`문의 경우 하나의 변수를 기준으로 분기를 판단하므로 해당 알고리즘에 적용하기엔 다소 부적절하다.\r\n\r\n## 전체 소스\r\n\r\n``` java\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * 백준 전체 1002 문제 알고리즘 클래스\r\n *\r\n * @author RWB\r\n * @since 2021.04.21 Wed 21:56:10\r\n */\r\npublic class Main\r\n{\r\n\t/**\r\n\t * 메인 함수\r\n\t *\r\n\t * @param args: [String[]] 매개변수\r\n\t */\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\r\n\t\tint length = scanner.nextInt();\r\n\r\n\t\tfor (int i = 0; i < length; i++)\r\n\t\t{\r\n\t\t\tint x1 = scanner.nextInt();\r\n\t\t\tint y1 = scanner.nextInt();\r\n\t\t\tint r1 = scanner.nextInt();\r\n\r\n\t\t\tint x2 = scanner.nextInt();\r\n\t\t\tint y2 = scanner.nextInt();\r\n\t\t\tint r2 = scanner.nextInt();\r\n\r\n\t\t\tSystem.out.println(calcPoints(x1, y1, r1, x2, y2, r2));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 접점 갯수 반환 함수\r\n\t *\r\n\t * case 1 - 두 원이 정확히 겹칠 경우 (-1)\r\n\t * case 2 - 두 원이 서로 겹치면서 인접하지 않는 경우 (0)\r\n\t * case 3 - 두 원이 서로 겹치지 않으면서 인접하지 않는 경우 (0)\r\n\t * case 4 - 두 원이 서로 겹치면서 인접하는 경우 (1)\r\n\t * case 5 - 두 원이 서로 겹치지 않으면서 인접하는 경우 (1)\r\n\t * case 6 - 두 원이 서로 겹치면서 인접하지 않는 경우 (2)\r\n\t *\r\n\t * @param x1: [int] A의 x좌표\r\n\t * @param y1: [int] A의 y좌표\r\n\t * @param r1: [int] A와 C 사이의 거리\r\n\t * @param x2: [int] B의 x좌표\r\n\t * @param y2: [int] B의 y좌표\r\n\t * @param r2: [int] B와 C 사이의 거리\r\n\t *\r\n\t * @return [int] 접점 갯수\r\n\t */\r\n\tprivate static int calcPoints(int x1, int y1, int r1, int x2, int y2, int r2)\r\n\t{\r\n\t\t// 두 점 사이의 거리 계산식\r\n\t\tdouble distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\r\n\r\n\t\tint sum = r1 + r2;\r\n\t\tint sub = Math.abs(r1 - r2);\r\n\r\n\t\t// case 1 - 두 원이 정확히 겹칠 경우\r\n\t\tif (distance == 0 && r1 == r2)\r\n\t\t{\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t// case 2 - 두 원이 서로 겹치면서 인접하지 않는 경우\r\n\t\telse if (distance < sub)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// case 3 - 두 원이 서로 겹치지 않으면서 인접하지 않는 경우\r\n\t\telse if (distance > sum)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// case 4 - 두 원이 서로 겹치면서 인접하는 경우\r\n\t\telse if (distance == sub)\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\t// case 5 - 두 원이 서로 겹치지 않으면서 인접하는 경우\r\n\t\telse if (distance == sum)\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\t// case 6 - 두 원이 서로 겹치면서 인접하지 않는 경우\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n## 분류\r\n\r\n* 수학\r\n* 기하학","url":["2021-05-21-a1002","2021","05","21","a1002"]}],"categories":{"WEB":{"count":5,"flag":true},"CS":{"count":10,"flag":true},"알고리즘":{"count":30,"flag":false},"React":{"count":1,"flag":false},"JAVA":{"count":3,"flag":false},"Jekyll":{"count":4,"flag":false},"WAS":{"count":2,"flag":false},"잡담":{"count":1,"flag":false}},"images":["celeb1.gif","celeb10.gif","celeb11.gif","celeb12.gif","celeb13.gif","celeb14.gif","celeb15.gif","celeb16.gif","celeb2.gif","celeb3.gif","celeb4.gif","celeb5.gif","celeb6.gif","celeb7.gif","celeb8.gif","celeb9.gif","city1.gif","city10.gif","city11.gif","city12.gif","city13.gif","city14.gif","city15.gif","city2.gif","city3.gif","city4.gif","city4.jpg","city5.gif","city6.gif","city7.gif","city8.gif","city9.gif","code1.gif","code2.gif","code3.gif","funk1.gif","funk2.gif","funk3.gif","funk4.gif","funk5.gif","funk6.gif","game1.gif","signal.gif"],"tag":"SILVER","page":1},"__N_SSG":true}