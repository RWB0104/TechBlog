{"pageProps":{"page":{"type":"posts","prev":{"title":"도메인이란?","excerpt":"도메인을 이해하기 위해선, IP에 대해 짚고 넘어가야 한다. 인터넷에 연결된 모든 디바이스(컴퓨터, 스마트폰, 공유기 등)는 고유한 12자리 숫자로 구성된 IP주소를 가진다. IP를 유동성으로 나누면 크게 유동 IP, 고정 IP로 분류할 수 있다. 유동 IP: 임의의 시점마다 IP주소가 갱신되는 IP. 갱신 주기는 일정하지 않음. 대부분의 인터넷 회선에 적용됨. 고정 IP: 회선에 고정된 IP를 부여하며, 해당 회선의 IP는 갱신되지 않음. 부가서비스 형태로 제공되며, 쇼핑몰이나 회사 등 지속적으로 시스템을 운영해야 할 경우 적합함. 우리가 원하는 장소에 방문하기 위해 주소를 찾듯이, 특정 서버에서 운영하는 웹 사이트를 방문하기 위해선 해당 서버의 주소인 IP가 필요하다.","coverImage":"https://user-images.githubusercontent.com/50317129/120056028-b2985880-c074-11eb-8cc3-39f5f10a2c7f.png","date":"2021-05-22T12:52:51","type":"posts","category":"WEB","tag":["WEB(웹)","Domain(도메인)"],"comment":true,"publish":true,"slug":"about-domain","content":"\r\n# Domain(도메인)이란?\r\n\r\n도메인을 이해하기 위해선, IP에 대해 짚고 넘어가야 한다.  \r\n인터넷에 연결된 모든 디바이스(컴퓨터, 스마트폰, 공유기 등)는 <span class=\"blue-500\">고유한 12자리 숫자로 구성된 IP주소</span>를 가진다.  \r\nIP를 유동성으로 나누면 크게 유동 IP, 고정 IP로 분류할 수 있다.\r\n\r\n* <span class=\"primary\">유동 IP</span>: 임의의 시점마다 IP주소가 갱신되는 IP. 갱신 주기는 일정하지 않음. 대부분의 인터넷 회선에 적용됨.\r\n* <span class=\"primary\">고정 IP</span>: 회선에 고정된 IP를 부여하며, 해당 회선의 IP는 갱신되지 않음. 부가서비스 형태로 제공되며, 쇼핑몰이나 회사 등 지속적으로 시스템을 운영해야 할 경우 적합함.\r\n\r\n우리가 원하는 장소에 방문하기 위해 주소를 찾듯이, <span class=\"green-500\">특정 서버에서 운영하는 웹 사이트를 방문하기 위해선 해당 서버의 주소인 IP가 필요</span>하다.  \r\n불행히도, IP는 불규칙적인 숫자로 이루어져있어, 사람이 쉽게 기억하기 다소 어렵다. 이러한 불편함을 해소하기 위한 것이 Domain(도메인)이다.\r\n\r\n도메인은 <span class=\"pink-400\">SLD(서브도메인)</span>, <span class=\"pink-400\">도메인</span>, <span class=\"pink-400\">TLD(최상위 도메인)</span>으로 구분되며, 해당 도메인의 정보는 1차적으로 각 로컬 DNS 서버가 관리하며, 최종적으로는 TLD를 관리하는 Root DNS에서 관리한다.\r\n\r\n> 도메인에 대한 자세한 내용은 이전에 작성된 [URI? URL? URN? 리소스 식별자 구분하기](/posts/uri-url-urn)를 참조한다.\r\n\r\n# 그래서 도메인을 왜 쓰는데?\r\n\r\n우리가 흔히 <span class=\"green-A700\">네이버</span>라고 부르는 사이트의 실제 IP는 [125.209.222.141](http://125.209.222.141)이다. 하지만 우리들 중 그 누구도 저런 IP로 <span class=\"green-A700\">네이버</span>에 접속하지 않는다. 대신 우리는 [https://www.naver.com](https://www.naver.com)이라는 도메인으로 접속한다. 이유는 간단하다. 주소 자체에 <span class=\"green-A700\">naver</span>라는 키워드가 포함되어 있으므로 기억하기 쉽기 때문이다.\r\n\r\n<span class=\"pink-400\">도메인</span>은 숫자가 아닌, 문자 형태로 이루어진 주소다. 문자이므로, 주소에 의미를 부여하기 용이하다. 사용자가 주소를 기억하기 쉬워 주소에 대한 접근성을 높여준다.  \r\n생성한 <span class=\"pink-400\">도메인</span>에 원하는 IP를 연결하면 <span class=\"pink-400\">도메인</span> 주소를 통해서도 해당 IP에 접근할 수 있다.\r\n<span class=\"pink-400\">도메인</span> 제공 업체에 따라, 영숫자 뿐만 아니라 한글과 같은 유니코드 문자도 지원하므로, 딱딱한 IP 대신 개성있는 주소를 사용할 수 있는 것이다.\r\n\r\n# 도메인의 원리\r\n\r\n여기서 의문점이 한 가지 생긴다. IP [125.209.222.141](http://125.209.222.141)와 <span class=\"pink-400\">도메인</span> [https://www.naver.com](https://www.naver.com)가 <span class=\"green-A700\">네이버</span>를 가리키는 주소인건 알겠는데, 인터넷은 과연 두 주소의 연결고리를 어떻게 아는 걸까?\r\n\r\n이는 <span class=\"pink-400\">도메인</span>의 동작 원리를 보면 알 수 있다. `rwb0104.github.io` <span class=\"pink-400\">도메인</span>에 접근하는 과정을 예시로 보자.\r\n\r\n-- 사진 --\r\n\r\n1. HTTP 통신을 통해 `rwb0104.github.io`에 접근을 시도한다.\r\n2. 네트워크에 지정된 로컬 DNS에게 `rwb0104.github.io`의 정보를 요청한다.\r\n   * 만약 로컬 DNS가 해당 도메인의 정보를 보유하고 있을 경우, 즉시 정보를 제공한다.\r\n3. `rwb0104.github.io`에 대한 정보가 없을 경우, 근접한 Root DNS에 해당 도메인의 정보를 요청한다.\r\n4. Root DNS가 `.io` TLD를 관리하는 DNS 서버의 정보를 로컬 DNS에 제공한다.\r\n5. 로컬 DNS가 `rwb0104.github.io`를 관리하는 TLD의 DNS 서버에 해당 정보를 요청한다.\r\n6. TLD DNS 서버가 `rwb0104.github.io`에 대한 정보(IP 등)을 제공한다.\r\n7. 로컬 DNS가 `rwb0104.github.io`의 IP를 알고 있으므로, 이를 통해 해당 사이트에 접근할 수 있다.\r\n\r\n기본적으로 <span class=\"pink-400\">도메인</span>은 반드시 하나의 IP와 연결된다. 이런 특징 덕분에 <span class=\"pink-400\">도메인</span>은 항상 특정한 하나의 IP만을 반환한다."},"next":{"title":"Jekyll에서 Next.js로","excerpt":"Jekyll에서 Next.js로의 블로그 이동기","coverImage":"https://user-images.githubusercontent.com/50317129/119211732-cf6de280-baee-11eb-8539-f2f5344fecb1.png","date":"2021-05-21T15:09:33","type":"posts","category":"잡담","tag":["React(리액트)","Next.js","개발 블로그","Jekyll","Next.js"],"comment":true,"publish":true,"slug":"jekyll-to-nextjs","content":"\r\n# Bye, Jekyll!\r\n\r\n<div>\r\n\t<img src=\"https://user-images.githubusercontent.com/50317129/119211743-e44a7600-baee-11eb-85d0-f21c1f68debc.png\" />\r\n</div>\r\n\r\n기존에 <a href=\"http://jekyllrb-ko.github.io/\" target=\"_blank\" class=\"pink-500\">Jekyll</a>로 운영하던 블로그를 버리고 React 기반의 <span class=\"blue-500\">Next.js</span>를 통해 블로그를 새로 개발했다.\r\n\r\nGithub Pages를 처음 접했을 때, 호스팅을 반드시 <span class=\"pink-500\">Jekyll</span> 기반으로 해야한다고 착각하고있었다. 사실 조금만 생각해보면 상관 없던건데.\r\n\r\n최근에 React를 접했는데, 생각보다 꽤나 매력적인 프레임워크라 소소하게나마 뭔가 만들어보고 싶었다.  \r\n블로그가 적절한 프로젝트(?)가 될 것 같았다. 명색이 개발자인데 블로그 하나 정도는 직접 개발해야 할 것 같기도 하고....\r\n\r\n# 굳이 멀쩡한 블로그 놔두고?\r\n\r\n한동안 안 하긴 했지만, 지금까진 <span class=\"pink-500\">Jekyll</span> 블로그를 운영하고 있었다. [Moon Theme](http://taylantatli.github.io/Moon/)를 적용해서 사용했었는데, 크고작은 불편함이 있었다.\r\n\r\n<br />\r\n\r\n1. <b class=\"green-500\">Jekyll이라는 생소한 환경</b>\r\n\r\n\tGithub의 개발언어는 <span class=\"red-500\">Ruby</span>다. 그래서일까, Github Pages의 기본 배포는 <span class=\"red-500\">Ruby</span> 기반 프레임워크인 <span class=\"pink-500\">Jekyll</span>을 따라간다.  \r\n\t문제는 한국엔 <span class=\"pink-500\">Jekyll</span>은 물론, <span class=\"red-500\">Ruby</span>라는 언어 자체의 수요가 많지 않다. 단순 블로그 하나 운영하기 위해 생판 모르는 언어를 접해야 한다는 점은 무시할 수 없는 디메리트.\r\n\r\n\t물론 <span class=\"red-500\">Ruby</span>를 직접적으로 개발하진 않지만 <span class=\"pink-500\">Jekyll</span> 생태계 또한 그리 친숙한 형태는 아니였다.\r\n\r\n2. <b class=\"green-500\">타인이 개발한 소스의 이해</b>\r\n\r\n\t1번과 같은 문제로, 밑바닥부터 <span class=\"pink-500\">Jekyll</span>을 개발할 수 없었다.  \r\n\t특정 기능에 대한 소요가 발생할 경우, 현재 테마에 어울리도록 \"**잘 디자인**\"하는 것이 중요하다. 하지만 사용자의 입장에서 테마 개발자의 디자인 철학을 이해하는 것은 단순 디자인과는 또 다른 문제. 구조 파악은 덤  \r\n\t더군다나 내 경우 모자란 실력에 이상한 강박증까지 있어서, 내 스타일로 작성되지 않은 코드의 리딩을 못 한다. 또한, 프로젝트의 블랙박스를 싫어한다. 실력은 없는 주제에 프로젝트 내에 내가 모르는 코드 덩어리가 있는 걸 굉장히 싫어한다. 디자인 감각이 좋지도 못 해서 결과물도 기존 테마와 이질적인 무언가가 나온다.\r\n\r\n3. <b class=\"green-500\">편리한 사용자 확장성, 불편한 개발자 확장성</b>\r\n\r\n\t블로그나, 웹 페이지, PPT 같은 환경에서 <span class=\"grenn-500\">테마</span>를 사용하는 이유는 뭘까? 귀찮지만 중요한 디자인에 대한 투자를 과감히 패스하면서도 준수한 디자인 퍼포먼스를 내기 위함이다. 물론 취지는 좋다. 어디까지나 **단순히 해당 테마가 의도한 방향에 맞을 때만.**\r\n\r\n\t다들 비슷한 경험이 있었을 것이다. 테마 혹은 템플릿을 사용하면서 필요에 따라 커스터마이징이 필요할 경우가 그렇다.  \r\n\t대부분의 테마는 결과물이 테마가 추구하는 디자인 철학과 상통할 때 그 빛을 발한다. 다시 말해, 그 의도가 손상될 경우 결과물의 퀄리티는 급락한다.  \r\n\t이 뿐만 아니라, <span class=\"red-500\">필요에 따라 기존의 요소(소스코드, 플러그인 등)을 제거할 경우 그 의존성을 파악하기 힘들어 리스크</span>가 크다.\r\n\r\n\t일례로, 위에서 언급한 <span class=\"lightBlue-500\">Moon Theme</span>의 경우, JQuery에 의존성을 갖고 있다.  \r\n\t근래 웹 개발의 JQuery에 대한 비관적인 평을 생각한다면, 이는 큰 디메리트로 다가온다. 제거 작업으로 인한 공수 또한 무시할 수 없을 것이고.  \r\n\t물론 당시의 개발 트렌드를 무시할 수 없으며, **개발**은 그 중에서도 트렌드의 주기가 매우 빠른 편이다. 이로 미루어 볼 때, 결과론적인 얘기다. 그럼에도 불구하고, **사용자가 의도하지 않은 결함**이라는 사실은 불변하다.\r\n\r\n4. <b class=\"green-500\">개발 욕구</b>\r\n\r\n\t정적 블로그의 경우 백엔드 영역이 거의 전무한데다, 복잡한 비즈니스 로직도 필요 없기 때문에 개발 난이도가 상대적으로 낮다고 판단했다. 즉, 원한다면 내가 직접 개발한 블로그를 사용하는게 그리 어렵지 않다.  \r\n\t위에서 언급했듯이, 직접 개발한 블로그를 사용하는 것이 좀 더 개발자스럽다. 난이도 또한 공부 중인 React를 적용하기도 적합하고.\r\n\r\n# Hello, Next.js!\r\n\r\nReact로 블로그를 만들 땐 주로 <a href=\"https://nextjs.org/\" target=\"_blank\" class=\"blue-500\">Next.js</a> 혹은 <a href=\"https://www.gatsbyjs.com/\" target=\"_blank\" class=\"deepPurple-400\">Gatsby.js</a>를 사용한다. 이번에 개발한 블로그는 <span class=\"blue-500\">Next.js</span>를 활용했다.\r\n\r\n<span class=\"blue-500\">Next.js</span>는 <span class=\"red-500\">Ruby</span>의 <span class=\"pink-500\">Jekyll</span> 프레임워크와 그 결이 비슷하다. <span class=\"pink-500\">Jekyll</span>는 **프레임워크 자체에 구조 스키마를 정함으로써 React의 Component와 유사하게 동작**한다. 그 당시의 난 React라는 걸 접하지도 않은 상황에서, React의 Component 방식으로 블로그를 구성했던 것이다. 말 그대로 낫 놓고 기역자도 모른 셈.\r\n\r\n<span class=\"blue-500\">Next.js</span> 역시 라이브러리 자체에 정적 웹을 구성하고 빌드할 수 있는 환경이 구축되어 있어, 쉽게 사용이 가능하다. 여러 사용자들이 개발한 다수의 플러그인은 덤.  \r\n덕분에 정적 블로그를 밑바닥에서부터 개발할 수 있었다. 나름대로 디자인 한다고 하긴 했는데, 역시 디자인은 어렵다.  \r\n<span class=\"blue-500\">Next.js</span>와 <span class=\"deepPurple-500\">Gatsby.js</span>에 대한 내용은 나중에 따로 다룰 예정이다.\r\n\r\n아직 해야할 것들이 남아있다. sitemap 생성기도 붙여야 하고, 연관 게시물 기능도 필요하다. 아직 다듬어지지 않은 자잘한 요소들도 있고. 역시 규모에 상관없이 무언가를 퍼블리싱하는건 정말 힘든 것 같다.  \r\n적어도 이번 블로그는 내 노력으로 내가 개발한 거니, 꾸준히 운영할 수 있었음 한다."}},"group":[],"post":{"title":"Tomcat(톰캣) 콘솔창 한글 인코딩 깨짐 현상 해결하기","excerpt":"톰캣을 구동하다보면 심심치않게 마주하는 오류(?)는 아니고 현상. Windows Console의 기본 인코딩과 Tomcat이 출력하는 인코딩이 서로 달라서 생긴다.","coverImage":"https://user-images.githubusercontent.com/50317129/119212068-1b218b80-baf1-11eb-9a42-85945bceb7d9.png","date":"2021-05-22T12:52:51","type":"posts","category":"WAS","tag":["WAS","Tomcat(톰캣)","Console(콘솔)"],"comment":true,"publish":true,"slug":"tomcat-encoding-euckr","content":"<h1 id=\"와장창\"><a href=\"#%EC%99%80%EC%9E%A5%EC%B0%BD\" class=\"head-link\"><span>🔗</span></a>와장창!</h1>\n<p><img src=\"https://user-images.githubusercontent.com/50317129/119212087-342a3c80-baf1-11eb-89bc-06829a5f7c16.png\" alt=\"Encoding Broken\"></p>\n<p>톰캣을 구동하다보면 심심치않게 마주하는 오류(?)는 아니고 현상.<br>\nWindows Console의 기본 인코딩과 Tomcat이 출력하는 인코딩이 서로 달라서 생긴다.</p>\n<h1 id=\"도대체-왜\"><a href=\"#%EB%8F%84%EB%8C%80%EC%B2%B4-%EC%99%9C\" class=\"head-link\"><span>🔗</span></a>도대체 왜?</h1>\n<p>실력 좋은 개발자가 아니더라도, 컴퓨터와 친분이 있다면 언어가 깨짐은 곧 인코딩의 불일치라는 걸 개괄적으로 이해하고 있다. 이러한 현상이 일어나는 이유는 아래와 같은데,</p>\n<ul>\n<li><span class=\"primary\">Windows Console</span>: Windows OS 설정 언어의 기본 인코딩 (한국어는 <strong>EUC-KR</strong>)</li>\n<li><span class=\"primary\">Tomcat Console</span>: 설정파일의 인코딩 (<strong>기본 UTF-8</strong>)</li>\n</ul>\n<p>이 처럼, 기본 인코딩이 서로 다르다.</p>\n<h1 id=\"해결책\"><a href=\"#%ED%95%B4%EA%B2%B0%EC%B1%85\" class=\"head-link\"><span>🔗</span></a>해결책</h1>\n<p>이를 해결하는 방법은 크게 두 가지가 존재한다. 개인적으로 <span class=\"red-300\">두 번째 방법을 추천</span>한다.</p>\n<h3 id=\"windows-console-인코딩-변경하기\"><a href=\"#windows-console-%EC%9D%B8%EC%BD%94%EB%94%A9-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" class=\"head-link\"><span>🔗</span></a>Windows Console 인코딩 변경하기</h3>\n<p>첫 번째로, Windows Console의 인코딩을 변경한다. Windows 10 기준으로 OS의 기본 콘솔은 <span class=\"green-500\">cmd</span>와 <span class=\"green-500\">PowerShell</span> 두 가지다. <strong>사용할 콘솔의 기본 인코딩을 EUC-KR에서 UTF-8로 변경</strong>해주면 된다.</p>\n<p>애석하게도, 두 콘솔 모두 인코딩을 변경하는 옵션을 제공하지 않는다. 그렇다고 방법이 없는 건 아니고, 레지스트리 수정을 통해 문제를 해결할 수 있다.</p>\n<br />\n<ol>\n<li>작업표시줄에서 <code>regedit</code>을 입력하여 <span class=\"blue-500\">레지스트리 편집기</span>를 띄운다.</li>\n<li><code>HKEY_CURRENT_USER\\Console</code> 경로에 접근한다. 사용자 계정에 설치된 콘솔들이 출력된다. (cmd, PowerShell, Git 등)</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/50317129/119212160-83706d00-baf1-11eb-92c8-b41458950f20.png\" alt=\"Registry\"></p>\n<ol start=\"3\">\n<li>인코딩을 변경하려는 콘솔의 폴더를 클릭한다.\n<ul>\n<li><strong>%SystemRoot%_system32_cmd.exe</strong>: cmd</li>\n<li><strong>%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe</strong>: 32비트 PowerShell</li>\n<li><strong>%SystemRoot%_SysWOW64_WindowsPowerShell_v1.0_powershell.exe</strong>: 64비트 PowerShell</li>\n</ul>\n</li>\n<li><code>CodePage</code> 키를 더블클릭하여 편집을 수행한다.\r\n<code>CodePage</code>가 없을 경우, 오른쪽 마우스 버튼을 클릭하여 새 DWORD(32비트) 키를 동일한 이름으로 생성한다.</li>\n<li>값 데이터를 10진수 <code>65001</code>로 변경한다.</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/50317129/119212198-ab5fd080-baf1-11eb-981b-82599148c8f8.png\" alt=\"Registry\"></p>\n<ol start=\"6\">\n<li>앞으로 실행되는 Windows Console은 해당 인코딩이 적용된다.</li>\n</ol>\n<p>이렇게 하면 Windows Console과 Tomcat의 기본 인코딩이 UTF-8로 서로 일치하므로, 한글이 정상적으로 출력된다.<br>\n하지만 이 방법은 Windows Console의 인코딩을 바꾸므로, 차후 해당 <span class=\"red-500\">콘솔을 통해 다른 작업이나 프로그램이 실행될 경우 엉뚱한 프로그램의 한글이 깨질 우려</span>가 있다.<br>\n(대부분은 OS 언어의 기본 인코딩을 따라가도록 설계함)</p>\n<p>Windows Console은 범용적으로 사용되는 프로그램이므로, 다른 작업에 영향을 줄 수 있다. 내가 이 방법을 굳이 추천하지 않는 이유이기도 하다.</p>\n<h3 id=\"tomcat-console-인코딩-변경하기\"><a href=\"#tomcat-console-%EC%9D%B8%EC%BD%94%EB%94%A9-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" class=\"head-link\"><span>🔗</span></a>Tomcat Console 인코딩 변경하기</h3>\n<p>두 번째로, Tomcat Console의 인코딩을 변경한다. 첫 번째 방법보다 이 방법이 나은 이유는, Tomcat이라는 제한적인 용도의 콘솔에만 영향을 미치기 때문. 어차피 Tomcat Console의 인코딩이 불일치해서 생기는 문제이므로, 이쪽을 바꾸는게 상식적으로도 맞다.</p>\n<p>대부분 마찬가지로 위 방법처럼 레지스트리를 수정하라고 안내할텐데, Tomcat은 굳이 그렇게 바꿔줄 필요 없다.</p>\n<ol>\n<li><code>%TOMCAT_HOME%\\conf\\logging.properties</code>을 연다.</li>\n<li><strong>java.util.logging.ConsoleHandler.encoding</strong>의 값을 <strong>EUC-KR</strong>로 변경한다.\r\n별다른 설정이 없었다면, UTF-8이 기본으로 설정되어 있다.</li>\n<li>앞으로 실행되는 Tomcat은 해당 인코딩이 적용된다.</li>\n</ol>\n<p>Tomcat을 실행하면 한글이 정상적으로 출력된다.</p>\n"}},"__N_SSG":true}