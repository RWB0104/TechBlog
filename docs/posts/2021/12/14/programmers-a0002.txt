2:I[31253,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
3:I[15441,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],"default"]
4:I[75713,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],"default"]
5:I[36032,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],"default"]
6:I[4816,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
7:I[67425,["746","static/chunks/395b46ae-d1f3c4e0e7243a60.js","128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","622","static/chunks/622-c69f910e2c9609c0.js","377","static/chunks/377-5459304f76782ae9.js","48","static/chunks/48-89b774ca72478c0b.js","78","static/chunks/app/%5B...markdown%5D/page-e2093a6e5fc3e106.js"],"default"]
8:I[28676,["746","static/chunks/395b46ae-d1f3c4e0e7243a60.js","128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","622","static/chunks/622-c69f910e2c9609c0.js","377","static/chunks/377-5459304f76782ae9.js","48","static/chunks/48-89b774ca72478c0b.js","78","static/chunks/app/%5B...markdown%5D/page-e2093a6e5fc3e106.js"],"default"]
9:I[12168,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
a:I[25737,["746","static/chunks/395b46ae-d1f3c4e0e7243a60.js","128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","622","static/chunks/622-c69f910e2c9609c0.js","377","static/chunks/377-5459304f76782ae9.js","48","static/chunks/48-89b774ca72478c0b.js","78","static/chunks/app/%5B...markdown%5D/page-e2093a6e5fc3e106.js"],"default"]
b:I[50979,["746","static/chunks/395b46ae-d1f3c4e0e7243a60.js","128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","622","static/chunks/622-c69f910e2c9609c0.js","377","static/chunks/377-5459304f76782ae9.js","48","static/chunks/48-89b774ca72478c0b.js","78","static/chunks/app/%5B...markdown%5D/page-e2093a6e5fc3e106.js"],"default"]
c:I[66560,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
d:I[29936,["746","static/chunks/395b46ae-d1f3c4e0e7243a60.js","128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","622","static/chunks/622-c69f910e2c9609c0.js","377","static/chunks/377-5459304f76782ae9.js","48","static/chunks/48-89b774ca72478c0b.js","78","static/chunks/app/%5B...markdown%5D/page-e2093a6e5fc3e106.js"],"default"]
f:I[64678,["746","static/chunks/395b46ae-d1f3c4e0e7243a60.js","128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","622","static/chunks/622-c69f910e2c9609c0.js","377","static/chunks/377-5459304f76782ae9.js","48","static/chunks/48-89b774ca72478c0b.js","78","static/chunks/app/%5B...markdown%5D/page-e2093a6e5fc3e106.js"],"default"]
10:I[89791,["746","static/chunks/395b46ae-d1f3c4e0e7243a60.js","128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","622","static/chunks/622-c69f910e2c9609c0.js","377","static/chunks/377-5459304f76782ae9.js","48","static/chunks/48-89b774ca72478c0b.js","78","static/chunks/app/%5B...markdown%5D/page-e2093a6e5fc3e106.js"],"default"]
11:I[5760,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
12:I[98918,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],"default"]
13:I[21055,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],"default"]
14:I[44271,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],"default"]
15:I[95534,["746","static/chunks/395b46ae-d1f3c4e0e7243a60.js","128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","622","static/chunks/622-c69f910e2c9609c0.js","377","static/chunks/377-5459304f76782ae9.js","48","static/chunks/48-89b774ca72478c0b.js","78","static/chunks/app/%5B...markdown%5D/page-e2093a6e5fc3e106.js"],"default"]
16:I[11494,["746","static/chunks/395b46ae-d1f3c4e0e7243a60.js","128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","622","static/chunks/622-c69f910e2c9609c0.js","377","static/chunks/377-5459304f76782ae9.js","48","static/chunks/48-89b774ca72478c0b.js","78","static/chunks/app/%5B...markdown%5D/page-e2093a6e5fc3e106.js"],"default"]
17:I[35559,["746","static/chunks/395b46ae-d1f3c4e0e7243a60.js","128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","622","static/chunks/622-c69f910e2c9609c0.js","377","static/chunks/377-5459304f76782ae9.js","48","static/chunks/48-89b774ca72478c0b.js","78","static/chunks/app/%5B...markdown%5D/page-e2093a6e5fc3e106.js"],"default"]
18:I[43439,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],"default"]
19:I[20140,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
1a:I[42019,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
1b:I[36139,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
1c:I[94634,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
1d:I[3812,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
1e:I[20015,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
1f:I[91417,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
20:I[17186,["128","static/chunks/128-f15a9902e71a0cfb.js","909","static/chunks/909-97e7151ede91fad6.js","623","static/chunks/623-76104f245c39a5c2.js","48","static/chunks/48-89b774ca72478c0b.js","979","static/chunks/app/page-871c05277f892fb0.js"],""]
21:I[80560,[],""]
23:I[3602,[],""]
24:"$Sreact.suspense"
25:I[89696,["128","static/chunks/128-f15a9902e71a0cfb.js","622","static/chunks/622-c69f910e2c9609c0.js","965","static/chunks/965-368bab8011421292.js","185","static/chunks/app/layout-41c20b5842d6270b.js"],"default"]
26:I[53327,["128","static/chunks/128-f15a9902e71a0cfb.js","622","static/chunks/622-c69f910e2c9609c0.js","965","static/chunks/965-368bab8011421292.js","185","static/chunks/app/layout-41c20b5842d6270b.js"],"default"]
27:I[31798,["128","static/chunks/128-f15a9902e71a0cfb.js","622","static/chunks/622-c69f910e2c9609c0.js","965","static/chunks/965-368bab8011421292.js","185","static/chunks/app/layout-41c20b5842d6270b.js"],"default"]
28:I[90085,["128","static/chunks/128-f15a9902e71a0cfb.js","622","static/chunks/622-c69f910e2c9609c0.js","965","static/chunks/965-368bab8011421292.js","185","static/chunks/app/layout-41c20b5842d6270b.js"],"default"]
29:I[29459,["128","static/chunks/128-f15a9902e71a0cfb.js","622","static/chunks/622-c69f910e2c9609c0.js","965","static/chunks/965-368bab8011421292.js","185","static/chunks/app/layout-41c20b5842d6270b.js"],"default"]
e:T371e,
# 신규 아이디 추천

|  랭크   |                                                      사용 언어                                                      |
| :-----: | :-----------------------------------------------------------------------------------------------------------------: |
| Level 1 | ![JAVA](https://shields.io/badge/java-JDK%2011-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |

🔗 [신규 아이디 추천](https://programmers.co.kr/learn/courses/30/lessons/72410)





## 문제 설명

카카오에 입사한 신입 개발자 네오는 "카카오계정개발팀"에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. "네오"에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.
다음은 카카오 아이디의 규칙입니다.

* 아이디의 길이는 3자 이상 15자 이하여야 합니다.
* 아이디는 알파벳 소문자, 숫자, 빼기(`-`), 밑줄(`_`), 마침표(`.`) 문자만 사용할 수 있습니다.
* 단, 마침표(`.`)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.

"네오"는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.

신규 유저가 입력한 아이디가 `new_id` 라고 한다면,

* 1단계 `new_id`의 모든 대문자를 대응되는 소문자로 치환합니다.
* 2단계 `new_id`에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
* 3단계 `new_id`에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
* 4단계 `new_id`에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
* 5단계 `new_id`가 빈 문자열이라면, `new_id`에 "a"를 대입합니다.
* 6단계 `new_id`의 길이가 16자 이상이면, `new_id`의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.  
  만약 제거 후 마침표(.)가 `new_id`의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
* 7단계 `new_id`의 길이가 2자 이하라면, `new_id`의 마지막 문자를 `new_id`의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.

예를 들어, `new_id` 값이 `...!@BaT#*..y.abcdefghijklm` 라면, 위 7단계를 거치고 나면 `new_id`는 아래와 같이 변경됩니다.

* 1단계 대문자 'B'와 'T'가 소문자 'b'와 't'로 바뀌었습니다.
  * `...!@BaT#*..y.abcdefghijklm` → `...!@bat#*..y.abcdefghijklm`

* 2단계 '!', '@', '#', '*' 문자가 제거되었습니다.
  * `...!@bat#*..y.abcdefghijklm` → `...bat..y.abcdefghijklm`

* 3단계 '...'와 '..' 가 '.'로 바뀌었습니다.
  * `...bat..y.abcdefghijklm` → `.bat.y.abcdefghijklm`

* 4단계 아이디의 처음에 위치한 '.'가 제거되었습니다.
  * `.bat.y.abcdefghijklm` → `bat.y.abcdefghijklm`

* 5단계 아이디가 빈 문자열이 아니므로 변화가 없습니다.
  * `bat.y.abcdefghijklm` → `bat.y.abcdefghijklm`

* 6단계 아이디의 길이가 16자 이상이므로, 처음 15자를 제외한 나머지 문자들이 제거되었습니다.
  * `bat.y.abcdefghijklm` → `bat.y.abcdefghi`

* 7단계 아이디의 길이가 2자 이하가 아니므로 변화가 없습니다.
  * `bat.y.abcdefghi` → `bat.y.abcdefghi`

따라서 신규 유저가 입력한 `new_id`가 `...!@BaT#*..y.abcdefghijklm`일 때, 네오의 프로그램이 추천하는 새로운 아이디는 `bat.y.abcdefghi` 입니다.





## 문제

신규 유저가 입력한 아이디를 나타내는 `new_id`가 매개변수로 주어질 때, "네오"가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 `solution` 함수를 완성해 주세요.





## 제한사항

`new_id`는 길이 1 이상 1,000 이하인 문자열입니다.

`new_id`는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.

`new_id`에 나타날 수 있는 특수문자는 `-_.~!@#$%^&*()=+[{]}:?,<>/` 로 한정됩니다.





## 입출력 예

|  no   |            new_id             |      result       |
| :---: | :---------------------------: | :---------------: |
|  예1  | `...!@BaT#*..y.abcdefghijklm` | `bat.y.abcdefghi` |
|  예2  |           `z-+.^.`            |       `z--`       |
|  예3  |             `=.=`             |       `aaa`       |
|  예4  |          `123_.def`           |    `123_.def`     |
|  예5  |      `abcdefghijklmn.p`       | `abcdefghijklmn`  |



### 입출력 예 설명

**입출력 예 #1**

문제의 예시와 같습니다.

**입출력 예 #2**

7단계를 거치는 동안 `new_id`가 변화하는 과정은 아래와 같습니다.

1단계 변화 없습니다.

2단계 `z-+.^.` → `z-..`

3단계 `z-..` → `z-.`

4단계 `z-.` → `z-`

5단계 변화 없습니다.

6단계 변화 없습니다.

7단계 `z-` → `z--`


**입출력 예 #3**

7단계를 거치는 동안 `new_id`가 변화하는 과정은 아래와 같습니다.

1단계 변화 없습니다.

2단계 `=.=` → `.`

3단계 변화 없습니다.

4단계 `.` → `new_id`가 빈 문자열이 되었습니다.

5단계 ` ` → `a`

6단계 변화 없습니다.

7단계 `a` → `aaa`


**입출력 예 #4**

1단계에서 7단계까지 거치는 동안 `new_id`("123_.def")는 변하지 않습니다. 즉, `new_id`가 처음부터 카카오의 아이디 규칙에 맞습니다.

**입출력 예 #5**

1단계 변화 없습니다.

2단계 변화 없습니다.

3단계 변화 없습니다.

4단계 변화 없습니다.

5단계 변화 없습니다.

6단계 `abcdefghijklmn.p` → `abcdefghijklmn.` → `abcdefghijklmn`

7단계 변화 없습니다.










# 풀이

문제에 각 단계별로 수행해야하는 로직이 제시되어 있으므로, 이를 메서드로 구분하여 설계하는 것이 적절해보인다.





## 1단계 - 소문자 치환

입력된 문자열을 소문자로 치환한다.

``` java
private String step1(String new_id)
{
	return new_id.toLowerCase();
}
```





## 2단계 - 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 문자 제거

특정 문자만을 남기고 제외한다. 문자열을 `char[]`로 만들어 `for`문을 통해 비교하여 제거할 수도 있겠지만, 정규식을 활용하면 그보다 더 쉽고 간편하게 구현할 수 있다.

``` java
private String step2(String new_id)
{
	return new_id.replaceAll("[^a-z0-9-_.]", "");
}
```

* `[^]` - `[]` 내부에서 `^`는 부정(NOT)의 의미로 사용됨
* `[a-z]` - 소문자 알파벳
* `[0-9]` - 숫자

`replaceAll`은 정규식을 사용할 수 있다. 위 정규식을 통해 영소문자, 숫자, 일부 특수문자에 해당하지 않는 숫자를 전부 지워버릴 수 있다.





## 3단계 - 두 개 이상 연속된 마침표(.)를 마침표 하나로 치환

`...`이나 `....`을 전부 `.` 하나로 변경한다. 이 로직도 마찬가지로 정규식을 통해 쉽게 구현하자.

``` java
private String step3(String new_id)
{
	return new_id.replaceAll("\\.{2,}", ".");
}
```

* `.{2,}` - 두 개 이상인 마침표

`replaceAll`을 활용하여 마침표가 두 개 연속으로 이어진 문자열을 마침표 하나로 변경한다.





## 4단계 - 마침표가 처음이나 끝에 위치할 경우 제거

문자열 앞이나 뒤에 마침표가 있을 경우 제거한다.

``` java
private String step4(String new_id)
{
	return new_id.replaceAll("^[.]|[.]$", "");
}
```

* `^` - 문자열의 시작. `[]` 밖에서는 부정(NOT)이 아니다.
* `$` - 문자열의 끝
* `|` - OR 연산

즉, 문자열 앞의 마침표나 문자열 끝의 마침표를 찾는 정규식이다. `replaceAll`을 활용하여 빈 문자로 치환하자.





## 5단계 - 빈 문자열일 경우 a 대입

문자열이 비었을 경우 `a`를 대입한다. 아닐 경우 그대로 둔다.

``` java
private String step5(String new_id)
{
	return new_id.equals("") ? "a" : new_id;
}
```





## 6단계 - 15자를 넘을 경우, 15자로 제한 후 4단계 적용

글자수 제한과 동일한 개념이다. 단, 글자수를 자르면서 중간에 위치했던 마침표가 끝에 오게될 수도 있으므로, 4단계를 재젹용하라는 조건이 포함되어있다.

예를 들어, 아이디 `aaaaaaaaaaaaaa.a`는 16글자로, 15자로 제한되면서 마침표가 끝에 오게 될 것이다.

``` java
private String step6(String new_id)
{
	return new_id.length() > 15 ? step4(new_id.substring(0, 15)) : new_id;
}
```

`new_id`가 15자가 넘는다면, `substring` 메서드로 앞에서부터 15자까지 자른다. 이후 위에서 구현했던 `step4` 메서드를 호출하면 된다.

이렇게 단계별로 메서드를 나누면 재사용에 유리하다.





## 7단계 - 2자 이하일 경우, 3자가 될 때까지 마지막 글자 이어붙이기

예를 들어, `ab`일 경우 글자가 3자가 될 때까지 마지막 글자 `b`를 이어붙인다. 결과는 `abb`가 될 것이다.

``` java
private String step7(String new_id)
{
	int more = 3 - new_id.length();
	
	// 필요한 글자가 하나 이상 있을 경우
	if (more > 0)
	{
		char last = new_id.charAt(new_id.length() - 1);
		
		StringBuilder builder = new StringBuilder();
		builder.append(new_id);
		builder.append(String.valueOf(last).repeat(more));
		
		return builder.toString();
	}
	
	// 아닐 경우
	else
	{
		return new_id;
	}
}
```

`more`로 3자가 되기 위해 필요한 자리수를 계산한다. 이후 `charAt`로 마지막 글자를 구한다.

`repeat` 메서드로 해당 글자를 `more`만큼 반복한 뒤, `new_id`에 붙인다.

문자열 연결 연산엔 개인적인 선호로 `StringBuilder`를 사용한다. `+`를 사용해도 결과를 도출하는데 지장은 없으니, 편한걸로 사용하면 된다.

> **문자열 연결 연산(+)과 StringBuilder**  
> JAVA에서 `String` 더하기 연산은 편하지만 상대적으로 메모리 소모가 심하다. `String`이 불변객체이므로, 연산 과정에서 새로운 객체를 생성하고, 해제하게된다.  
> `StringBuilder`를 활용하면 우리가 생각했던대로 문자열을 연결하여 연산하므로 상대적으로 연산에 요구되는 자원이 적어진다.  
> JAVA의 최적화 수준과 컴퓨터의 성능이 좋지 않았던 과거의 문제를 해결하기 위한 것으로, 물론 현재는 JAVA도 많은 최적화가 이루어졌고, 컴퓨터 성능은 수 천배로 좋아졌으니, 너무 연연하지 않아도 될 것이다.





## 코드

``` java
/**
 * 신규 아이디 추천 클래스
 *
 * @author RWB
 * @since 2021.12.07 Tue 00:47:16
 */
class Solution
{
	/**
	 * 해답 반환 메서드
	 *
	 * @param new_id: [String] 새로운 아이디
	 *
	 * @return [String] 해답
	 */
	public String solution(String new_id)
	{
		String answer = step1(new_id);
		answer = step2(answer);
		answer = step3(answer);
		answer = step4(answer);
		answer = step5(answer);
		answer = step6(answer);
		answer = step7(answer);
		
		return answer;
	}
	
	/**
	 * 1단계 결과 반환 메서드
	 * 대문자를 모두 소문자로 치환
	 *
	 * @param new_id: [String] 새로운 아이디
	 *
	 * @return [String] 1단계 결과
	 */
	private String step1(String new_id)
	{
		return new_id.toLowerCase();
	}
	
	/**
	 * 2단계 결과 반환 메서드
	 * 영문 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 문자 제거
	 *
	 * @param new_id: [String] 새로운 아이디
	 *
	 * @return [String] 2단계 결과
	 */
	private String step2(String new_id)
	{
		return new_id.replaceAll("[^a-z0-9-_.]", "");
	}
	
	/**
	 * 3단계 결과 반환 메서드
	 * 두번 이상 연속된 마침표 하나로 치환
	 *
	 * @param new_id: [String] 새로운 아이디
	 *
	 * @return [String] 3단계 결과
	 */
	private String step3(String new_id)
	{
		return new_id.replaceAll("\\.{2,}", ".");
	}
	
	/**
	 * 4단계 결과 반환 메서드
	 * 맨 앞이나 뒤에 마침표가 있을 경우 제거
	 *
	 * @param new_id: [String] 새로운 아이디
	 *
	 * @return [String] 4단계 결과
	 */
	private String step4(String new_id)
	{
		return new_id.replaceAll("^[.]|[.]$", "");
	}
	
	/**
	 * 5단계 결과 반환 메서드
	 * 빈 문자열일 경우 a 대입
	 *
	 * @param new_id: [String] 새로운 아이디
	 *
	 * @return [String] 5단계 결과
	 */
	private String step5(String new_id)
	{
		return new_id.equals("") ? "a" : new_id;
	}
	
	/**
	 * 6단계 결과 반환 메서드
	 * 16자 이상일 경우, 15자로 제한. 끝에 마침표가 오게 될 경우 제거
	 *
	 * @param new_id: [String] 새로운 아이디
	 *
	 * @return [String] 6단계 결과
	 */
	private String step6(String new_id)
	{
		return new_id.length() > 15 ? step4(new_id.substring(0, 15)) : new_id;
	}
	
	/**
	 * 7단계 결과 반환 메서드
	 * 2자 이하일 경우, 길이가 3이 될 때까지 마지막 글자 이어붙이기
	 *
	 * @param new_id: [String] 새로운 아이디
	 *
	 * @return [String] 7단계 결과
	 */
	private String step7(String new_id)
	{
		int more = 3 - new_id.length();
		
		// 필요한 글자가 하나 이상 있을 경우
		if (more > 0)
		{
			char last = new_id.charAt(new_id.length() - 1);
			
			StringBuilder builder = new StringBuilder();
			builder.append(new_id);
			builder.append(String.valueOf(last).repeat(more));
			
			return builder.toString();
		}
		
		// 아닐 경우
		else
		{
			return new_id;
		}
	}
}
```

전체 코드는 위와 같다.

정규식에 대한 기초적인 이해가 있다면 쉽게 풀 수 있지만, 그렇지 않다면 조금 귀찮은 과정을 거쳐야할 것이다.22:["markdown","posts/2021/12/14/programmers-a0002","c"]
0:["ZdPyf3uVF9Stga3XXstxS",[[["",{"children":[["markdown","posts/2021/12/14/programmers-a0002","c"],{"children":["__PAGE__?{\"markdown\":[\"posts\",\"2021\",\"12\",\"14\",\"programmers-a0002\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["markdown","posts/2021/12/14/programmers-a0002","c"],{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"component":"main","data-component":"PageTemplate","children":[["$","$L3",null,{"title":"𝝅번째 알파카의 개발 낙서장","version":"5.8.1"}],[["$","$L4",null,{"src":"https://user-images.githubusercontent.com/50317129/145976356-6b5d1430-31c0-4c34-829e-6be8f747ab19.png","children":["$","$L2",null,{"className":"MarkdownScreenerTemplate_root__dpmgV","data-component":"BaseScreenerTemplate","height":"100%","position":"relative","width":"100%","children":[["$","$L5",null,{"alignItems":"center","height":"100%","justifyContent":"center","padding":2,"position":"relative","width":"100%","children":[["$","$L5",null,{"direction":"row","children":[["$","$L2",null,{"bgcolor":"dodgerblue","boxShadow":"0px 0px 5px black","height":"100%","width":5}],["$","$L5",null,{"color":"white","paddingLeft":2,"paddingRight":2,"children":[["$","$L6",null,{"className":"MarkdownScreenerTemplate_text__5_mNa","fontWeight":"bold","variant":"h5","children":"[프로그래머스 / JAVA] Level 1 신규 아이디 추천 (72410)"}],["$","$L6",null,{"className":"MarkdownScreenerTemplate_text__5_mNa","children":"⏰ 2021-12-14 (화) 09:11:28"}]]}]]}],["$","$L7",null,{"bottom":"10%","direction":"row","gap":4,"position":"absolute","shareData":{"text":"카카오에 입사한 신입 개발자 네오는 \"카카오계정개발팀\"에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. \"네오\"에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다. 다음은 카카오 아이디의 규칙입니다.","title":"[프로그래머스 / JAVA] Level 1 신규 아이디 추천 (72410)","url":"https://blog.itcode.dev/posts/2021/12/14/programmers-a0002"}}]]}],["$","$L2",null,{"bottom":0,"left":0,"position":"absolute","width":"100%","children":["$","svg",null,{"className":"Wave_waves___Plcn","data-component":"Wave","height":80,"preserveAspectRatio":"none","shapeRendering":"auto","viewBox":"0 24 150 28","width":"100%","xmlns":"http://www.w3.org/2000/svg","children":[["$","defs",null,{"children":["$","path",null,{"d":"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z","id":"gentle-wave"}]}],["$","g",null,{"className":"Wave_parallax__AGFbj","children":[["$","use",null,{"fill":"$undefined","opacity":"0.7","x":"48","xlinkHref":"#gentle-wave","y":"0"}],["$","use",null,{"fill":"$undefined","opacity":"0.5","x":"48","xlinkHref":"#gentle-wave","y":"3"}],["$","use",null,{"fill":"$undefined","opacity":"0.3","x":"48","xlinkHref":"#gentle-wave","y":"5"}],["$","use",null,{"fill":"$undefined","x":"48","xlinkHref":"#gentle-wave","y":"7"}]]}]]}]}]]}]}],[["$","$L8",null,{"color":"dodgerblue"}],["$","$L9",null,{"children":["$","$L5",null,{"gap":4,"paddingTop":10,"children":[["$","$La",null,{"current":"/posts/2021/12/14/programmers-a0002","groups":[{"title":"[프로그래머스 / JAVA] Level 2 메뉴 리뉴얼 (72411)","url":"/posts/2021/12/29/programmers-a0078"},{"title":"[프로그래머스 / JAVA] Level 2 행렬 테두리 회전하기 (77485)","url":"/posts/2021/12/29/programmers-a0077"},{"title":"[프로그래머스 / JAVA] Level 2 짝지어 제거하기 (12973)","url":"/posts/2021/12/29/programmers-a0076"},{"title":"[프로그래머스 / MySQL] Level 2 루시와 엘라 찾기 (59046)","url":"/posts/2021/12/28/programmers-a0075"},{"title":"[프로그래머스 / MySQL] Level 2 고양이와 개는 몇 마리 있을까 (59040)","url":"/posts/2021/12/28/programmers-a0074"},{"title":"[프로그래머스 / JAVA] Level 2 타겟 넘버 (43165)","url":"/posts/2021/12/28/programmers-a0073"},{"title":"[프로그래머스 / JAVA] Level 2 더 맵게 (42626)","url":"/posts/2021/12/28/programmers-a0072"},{"title":"[프로그래머스 / JAVA] Level 2 기능개발 (42586)","url":"/posts/2021/12/27/programmers-a0071"},{"title":"[프로그래머스 / JAVA] Level 2 124 나라의 숫자 (12899)","url":"/posts/2021/12/27/programmers-a0070"},{"title":"[프로그래머스 / JAVA] Level 2 멀쩡한 사각형 (62048)","url":"/posts/2021/12/27/programmers-a0069"},{"title":"[프로그래머스 / JAVA] Level 2 단체사진 찍기 (1835)","url":"/posts/2021/12/26/programmers-a0068"},{"title":"[프로그래머스 / JAVA] Level 2 카카오프렌즈 컬러링북 (1829)","url":"/posts/2021/12/26/programmers-a0067"},{"title":"[프로그래머스 / JAVA] Level 2 오픈채팅방 (42888)","url":"/posts/2021/12/26/programmers-a0066"},{"title":"[프로그래머스 / JAVA] Level 2 문자열 압축 (60057)","url":"/posts/2021/12/26/programmers-a0065"},{"title":"[프로그래머스 / JAVA] Level 1 직사각형 별찍기 (12954)","url":"/posts/2021/12/19/programmers-a0064"},{"title":"[프로그래머스 / JAVA] Level 1 x만큼 간격이 있는 n개의 숫자 (12954)","url":"/posts/2021/12/18/programmers-a0063"},{"title":"[프로그래머스 / JAVA] Level 1 행렬의 덧셈 (12950)","url":"/posts/2021/12/18/programmers-a0062"},{"title":"[프로그래머스 / JAVA] Level 1 핸드폰 번호 가리기 (12948)","url":"/posts/2021/12/18/programmers-a0061"},{"title":"[프로그래머스 / JAVA] Level 1 하샤드 수 (12947)","url":"/posts/2021/12/18/programmers-a0060"},{"title":"[프로그래머스 / JAVA] Level 1 평균 구하기 (12944)","url":"/posts/2021/12/18/programmers-a0059"},{"title":"[프로그래머스 / JAVA] Level 1 콜라츠 추측 (12943)","url":"/posts/2021/12/18/programmers-a0058"},{"title":"[프로그래머스 / JAVA] Level 1 최대공약수와 최소공배수 (12940)","url":"/posts/2021/12/18/programmers-a0057"},{"title":"[프로그래머스 / JAVA] Level 1 짝수와 홀수 (12937)","url":"/posts/2021/12/18/programmers-a0056"},{"title":"[프로그래머스 / JAVA] Level 1 제일 작은 수 제거하기 (12935)","url":"/posts/2021/12/18/programmers-a0055"},{"title":"[프로그래머스 / JAVA] Level 1 정수 제곱근 판별 (12934)","url":"/posts/2021/12/18/programmers-a0054"},{"title":"[프로그래머스 / JAVA] Level 1 정수 내림차순으로 배치하기 (12933)","url":"/posts/2021/12/18/programmers-a0053"},{"title":"[프로그래머스 / JAVA] Level 1 자연수 뒤집어 배열로 만들기 (12932)","url":"/posts/2021/12/18/programmers-a0052"},{"title":"[프로그래머스 / JAVA] Level 1 자릿수 더하기 (12931)","url":"/posts/2021/12/18/programmers-a0051"},{"title":"[프로그래머스 / JAVA] Level 1 이상한 문자 만들기 (12930)","url":"/posts/2021/12/18/programmers-a0050"},{"title":"[프로그래머스 / JAVA] Level 1 약수의 합 (12928)","url":"/posts/2021/12/18/programmers-a0049"},{"title":"[프로그래머스 / JAVA] Level 1 시저 암호 (12926)","url":"/posts/2021/12/18/programmers-a0048"},{"title":"[프로그래머스 / JAVA] Level 1 문자열을 정수로 바꾸기 (12925)","url":"/posts/2021/12/18/programmers-a0047"},{"title":"[프로그래머스 / JAVA] Level 1 수박수박수박수박수박수? (12922)","url":"/posts/2021/12/18/programmers-a0046"},{"title":"[프로그래머스 / JAVA] Level 1 소수 찾기 (12921)","url":"/posts/2021/12/17/programmers-a0045"},{"title":"[프로그래머스 / JAVA] Level 1 서울에서 김서방 찾기 (12919)","url":"/posts/2021/12/17/programmers-a0044"},{"title":"[프로그래머스 / JAVA] Level 1 문자열 다루기 기본 (12918)","url":"/posts/2021/12/16/programmers-a0043"},{"title":"[프로그래머스 / JAVA] Level 1 문자열 내림차순으로 배치하기 (12917)","url":"/posts/2021/12/16/programmers-a0042"},{"title":"[프로그래머스 / JAVA] Level 1 문자열 내 p와 y의 개수 (12916)","url":"/posts/2021/12/16/programmers-a0041"},{"title":"[프로그래머스 / JAVA] Level 1 문자열 내 마음대로 정렬하기 (12915)","url":"/posts/2021/12/16/programmers-a0040"},{"title":"[프로그래머스 / JAVA] Level 1 두 정수 사이의 합 (12912)","url":"/posts/2021/12/16/programmers-a0039"},{"title":"[프로그래머스 / JAVA] Level 1 나누어 떨어지는 숫자 배열 (12910)","url":"/posts/2021/12/16/programmers-a0038"},{"title":"[프로그래머스 / JAVA] Level 1 같은 숫자는 싫어 (12906)","url":"/posts/2021/12/16/programmers-a0037"},{"title":"[프로그래머스 / MySQL] Level 1 상위 n개 레코드 (59405)","url":"/posts/2021/12/16/programmers-a0036"},{"title":"[프로그래머스 / JAVA] Level 1 다트 게임 (17682)","url":"/posts/2021/12/16/programmers-a0035"},{"title":"[프로그래머스 / MySQL] Level 1 여러 기준으로 정렬하기 (59404)","url":"/posts/2021/12/16/programmers-a0034"},{"title":"[프로그래머스 / JAVA] Level 1 가운데 글자 가져오기 (12903)","url":"/posts/2021/12/16/programmers-a0033"},{"title":"[프로그래머스 / JAVA] Level 1 비밀지도 (17681)","url":"/posts/2021/12/16/programmers-a0032"},{"title":"[프로그래머스 / JAVA] Level 1 부족한 금액 계산하기 (82612)","url":"/posts/2021/12/16/programmers-a0031"},{"title":"[프로그래머스 / MySQL] Level 1 동물의 아이디와 이름 (59403)","url":"/posts/2021/12/15/programmers-a0030"},{"title":"[프로그래머스 / JAVA] Level 1 나머지가 1이 되는 수 찾기 (87389)","url":"/posts/2021/12/15/programmers-a0029"},{"title":"[프로그래머스 / JAVA] Level 1 최소직사각형 (86491)","url":"/posts/2021/12/15/programmers-a0028"},{"title":"[프로그래머스 / MySQL] Level 1 어린 동물 찾기 (59037)","url":"/posts/2021/12/15/programmers-a0027"},{"title":"[프로그래머스 / JAVA] Level 1 2016년 (12901)","url":"/posts/2021/12/15/programmers-a0026"},{"title":"[프로그래머스 / MySQL] Level 1 아픈 동물 찾기 (59036)","url":"/posts/2021/12/15/programmers-a0025"},{"title":"[프로그래머스 / JAVA] Level 1 두 개 뽑아서 더하기 (68644)","url":"/posts/2021/12/15/programmers-a0024"},{"title":"[프로그래머스 / MySQL] Level 1 이름이 있는 동물의 아이디 (59407)","url":"/posts/2021/12/15/programmers-a0023"},{"title":"[프로그래머스 / JAVA] Level 1 두 개 뽑아서 더하기 (12982)","url":"/posts/2021/12/15/programmers-a0022"},{"title":"[프로그래머스 / JAVA] Level 1 예산 (12982)","url":"/posts/2021/12/15/programmers-a0021"},{"title":"[프로그래머스 / JAVA] Level 1 3진법 뒤집기 (68935)","url":"/posts/2021/12/15/programmers-a0020"},{"title":"[프로그래머스 / JAVA] Level 1 약수의 개수와 덧셈 (77884)","url":"/posts/2021/12/15/programmers-a0019"},{"title":"[프로그래머스 / JAVA] Level 1 실패율 (42889)","url":"/posts/2021/12/15/programmers-a0018"},{"title":"[프로그래머스 / JAVA] Level 1 폰켓몬 (1845)","url":"/posts/2021/12/15/programmers-a0017"},{"title":"[프로그래머스 / MySQL] Level 1 이름이 없는 동물의 아이디 (59039)","url":"/posts/2021/12/15/programmers-a0016"},{"title":"[프로그래머스 / MySQL] Level 1 최댓값 구하기 (59415)","url":"/posts/2021/12/15/programmers-a0015"},{"title":"[프로그래머스 / MySQL] Level 1 모든 레코드 조회하기 (59034)","url":"/posts/2021/12/15/programmers-a0014"},{"title":"[프로그래머스 / JAVA] Level 1 체육복 (42862)","url":"/posts/2021/12/14/programmers-a0013"},{"title":"[프로그래머스 / JAVA] Level 1 모의고사 (42840)","url":"/posts/2021/12/14/programmers-a0012"},{"title":"[프로그래머스 / JAVA] Level 1 K번째수 (42748)","url":"/posts/2021/12/14/programmers-a0011"},{"title":"[프로그래머스 / JAVA] Level 1 완주하지 못한 선수 (42576)","url":"/posts/2021/12/14/programmers-a0010"},{"title":"[프로그래머스 / JAVA] Level 1 소수 만들기 (12977)","url":"/posts/2021/12/14/programmers-a0009"},{"title":"[프로그래머스 / JAVA] Level 1 내적 (70128)","url":"/posts/2021/12/14/programmers-a0008"},{"title":"[프로그래머스 / JAVA] Level 1 음양 더하기 (76501)","url":"/posts/2021/12/14/programmers-a0007"},{"title":"[프로그래머스 / JAVA] Level 1 없는 숫자 더하기 (86051)","url":"/posts/2021/12/14/programmers-a0006"},{"title":"[프로그래머스 / JAVA] Level 1 크레인 인형뽑기 게임 (64061)","url":"/posts/2021/12/14/programmers-a0005"},{"title":"[프로그래머스 / JAVA] Level 1 키패드 누르기 (67256)","url":"/posts/2021/12/14/programmers-a0004"},{"title":"[프로그래머스 / JAVA] Level 1 숫자 문자열과 영단어 (81301)","url":"/posts/2021/12/14/programmers-a0003"},{"title":"[프로그래머스 / JAVA] Level 1 신규 아이디 추천 (72410)","url":"/posts/2021/12/14/programmers-a0002"},{"title":"[프로그래머스 / JAVA] Level 1 로또의 최고 순위와 최저 순위 (77484)","url":"/posts/2021/12/14/programmers-a0001"}],"thumbnail":"https://user-images.githubusercontent.com/50317129/145976356-6b5d1430-31c0-4c34-829e-6be8f747ab19.png","title":"프로그래머스"}],["$","$Lb",null,{"list":[{"idx":"1.","level":1,"text":"신규 아이디 추천"},{"idx":"1.1.","level":2,"text":"문제 설명"},{"idx":"1.2.","level":2,"text":"문제"},{"idx":"1.3.","level":2,"text":"제한사항"},{"idx":"1.4.","level":2,"text":"입출력 예"},{"idx":"1.4.1.","level":3,"text":"입출력 예 설명"},{"idx":"2.","level":1,"text":"풀이"},{"idx":"2.1.","level":2,"text":"1단계 - 소문자 치환"},{"idx":"2.2.","level":2,"text":"2단계 - 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 문자 제거"},{"idx":"2.3.","level":2,"text":"3단계 - 두 개 이상 연속된 마침표(.)를 마침표 하나로 치환"},{"idx":"2.4.","level":2,"text":"4단계 - 마침표가 처음이나 끝에 위치할 경우 제거"},{"idx":"2.5.","level":2,"text":"5단계 - 빈 문자열일 경우 a 대입"},{"idx":"2.6.","level":2,"text":"6단계 - 15자를 넘을 경우, 15자로 제한 후 4단계 적용"},{"idx":"2.7.","level":2,"text":"7단계 - 2자 이하일 경우, 3자가 될 때까지 마지막 글자 이어붙이기"},{"idx":"2.8.","level":2,"text":"코드"}]}],["$","$Lc",null,{"variant":"fullWidth"}],["$","$Ld",null,{"children":"$e"}],["$","$Lc",null,{"variant":"fullWidth"}],["$","$Lf",null,{}],["$","$L10",null,{"tags":["프로그래머스","알고리즘","JAVA(자바)","Level 1"],"type":"posts"}],["$","$L5",null,{"alignItems":"center","data-component":"LabNameTag","width":"100%","children":["$","$L2",null,{"boxShadow":"0px 0px 10px #00000050","maxWidth":250,"width":"100%","children":["$","$L11",null,{"href":"https://itcode.dev","target":"_blank","children":["$","$L12",null,{"scale":1.1,"children":[["$","$L2",null,{"borderRadius":2,"className":"NameTag_tag__DZCHu","data-component":"NameTag","padding":1,"sx":{"background":"linear-gradient(45deg, #833AB4, #FD2B20, #fCAA43)"},"children":["$","$L5",null,{"borderRadius":2,"color":"white","gap":3,"padding":2,"children":[["$","$L2",null,{"className":"Tile_tile__czq9P","data-component":"Tile","overflow":"hidden","position":"relative","children":["$","$L2",null,{"height":"100%","left":0,"position":"absolute","top":0,"width":"100%","children":["$","$L13",null,{"src":"https://itcode.dev/logo.png"}]}]}],["$","$L2",null,{"borderTop":"1px solid white","width":"100%"}],["$","$L5",null,{"gap":1,"children":[["$","$L6",null,{"color":"inherit","fontWeight":"bold","children":"𝝅번째 알파카의 개발 연구소"}],["$","$L2",null,{"color":"inherit","width":"100%","children":["$","$L6",null,{"variant":"caption","children":"이 카드를 클릭하고 𝝅번째 알파카의 개발 연구소의 다양한 프로젝트를 확인해보세요!"}]}]]}]]}]}],["$","$L14",null,{}]]}]}]}]}],["$","$L15",null,{"next":{"thumbnail":"https://user-images.githubusercontent.com/50317129/145976356-6b5d1430-31c0-4c34-829e-6be8f747ab19.png","title":"[프로그래머스 / JAVA] Level 1 숫자 문자열과 영단어 (81301)","url":"/posts/2021/12/14/programmers-a0003"},"prev":{"thumbnail":"https://user-images.githubusercontent.com/50317129/145976356-6b5d1430-31c0-4c34-829e-6be8f747ab19.png","title":"[프로그래머스 / JAVA] Level 1 로또의 최고 순위와 최저 순위 (77484)","url":"/posts/2021/12/14/programmers-a0001"},"type":"posts"}],["$","$L5",null,{"alignItems":"center","justifyContent":"center","width":"100%","children":["$","$L12",null,{"children":["$","$L5",null,{"alignItems":"center","bgcolor":"lemonchiffon","borderRadius":1,"boxShadow":"0px 0px 10px #00000030","component":"div","data-component":"ThanksCard","direction":"row","gap":2,"padding":2,"children":[["$","$L16",null,{"iconName":"love-message-burst","width":100}],["$","$L5",null,{"children":[["$","$L6",null,{"color":"black","variant":"h6","gutterBottom":true,"children":"읽어주셔서 고마워요!"}],["$","$L6",null,{"color":"black","children":["도움이 되셨다면, ",["$","$L6",null,{"color":"hotpink","component":"span","fontWeight":"bold","children":"공감"}],"이나 ",["$","$L6",null,{"color":"dodgerblue","component":"span","fontWeight":"bold","children":"댓글"}],"을 달아주시는 건 어떤가요?"]}],["$","$L6",null,{"color":"black","children":"블로그 운영에 큰 힘이 됩니다."}]]}]]}]}]}],["$","$L7",null,{"direction":"row","gap":4,"iconColor":"inherit","justifyContent":"center","shareData":{"text":"카카오에 입사한 신입 개발자 네오는 \"카카오계정개발팀\"에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. \"네오\"에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다. 다음은 카카오 아이디의 규칙입니다.","title":"[프로그래머스 / JAVA] Level 1 신규 아이디 추천 (72410)","url":"/posts/2021/12/14/programmers-a0002"}}],["$","$L17",null,{}],["$","$L5",null,{"alignItems":"center","children":["$","img",null,{"alt":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev%2Fposts%2F2021%2F12%2F14%2Fprogrammers-a0002","data-component":"Hits","src":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev%2Fposts%2F2021%2F12%2F14%2Fprogrammers-a0002"}]}]]}]}]]],["$","$L2",null,{"component":"footer","data-component":"Footer","marginTop":10,"children":[["$","$L2",null,{"position":"relative","children":[["$","$L18",null,{}],["$","$L2",null,{"bottom":-20,"className":"Footer_ship__VuMth","left":"10%","position":"absolute","children":["$","img",null,{"alt":"icon","height":100,"src":"https://cdn-icons-png.freepik.com/512/6643/6643562.png","width":100}]}],["$","$L2",null,{"bottom":0,"position":"absolute","width":"100%","children":["$","svg",null,{"className":"Wave_waves___Plcn","data-component":"Wave","height":40,"preserveAspectRatio":"none","shapeRendering":"auto","viewBox":"0 24 150 28","width":"100%","xmlns":"http://www.w3.org/2000/svg","children":[["$","defs",null,{"children":["$","path",null,{"d":"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z","id":"gentle-wave"}]}],["$","g",null,{"className":"Wave_parallax__AGFbj","children":[["$","use",null,{"fill":"#6fb1fc","opacity":"0.7","x":"48","xlinkHref":"#gentle-wave","y":"0"}],["$","use",null,{"fill":"#6fb1fc","opacity":"0.5","x":"48","xlinkHref":"#gentle-wave","y":"3"}],["$","use",null,{"fill":"#6fb1fc","opacity":"0.3","x":"48","xlinkHref":"#gentle-wave","y":"5"}],["$","use",null,{"fill":"#6fb1fc","x":"48","xlinkHref":"#gentle-wave","y":"7"}]]}]]}]}]]}],["$","$L2",null,{"children":["$","$L5",null,{"alignItems":"center","className":"FooterTemplate_footer__97G2c","color":"white","data-component":"FooterTemplate","gap":4,"padding":4,"paddingBottom":8,"paddingTop":8,"children":[["$","$L5",null,{"alignItems":"center","color":"white","children":[["$","$L6",null,{"className":"FooterTemplate_title__Samo8","fontWeight":"bold","variant":"h6","children":"𝝅번째 알파카의 개발 낙서장"}],["$","$L6",null,{"variant":"caption","children":"5.8.1"}]]}],["$","$L2",null,{"display":"grid","gap":2,"gridTemplateColumns":"1fr 1fr 1fr","children":[["$","$L11",null,{"data-component":"FooterLinkButton","href":"https://itcode.dev","target":"_blank","children":["$","$L19",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","img",null,{"alt":"itcode.dev","height":"100%","src":"https://itcode.dev/logo-transparent.png","width":"100%"}]}]}]}],["$","$L11",null,{"data-component":"FooterLinkButton","href":"https://github.com/RWB0104","target":"_blank","children":["$","$L19",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1a",null,{}]}]}]}],["$","$L11",null,{"data-component":"FooterLinkButton","href":"mailto:psj2716@gmail.com","target":"_blank","children":["$","$L19",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1b",null,{}]}]}]}],["$","$L11",null,{"data-component":"FooterLinkButton","href":"https://www.linkedin.com/in/itcode","target":"_blank","children":["$","$L19",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1c",null,{}]}]}]}],["$","$L11",null,{"data-component":"FooterLinkButton","href":"/sitemap.xml","target":"_blank","children":["$","$L19",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1d",null,{}]}]}]}],["$","$L11",null,{"data-component":"FooterLinkButton","href":"/rss.xml","target":"_blank","children":["$","$L19",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1e",null,{}]}]}]}]]}],["$","$L5",null,{"alignItems":"center","color":"white","children":[["$","$L5",null,{"alignItems":"center","direction":"row","gap":0.5,"children":[["$","$L1f",null,{"fontSize":"inherit","htmlColor":"darkblue"}],["$","$L6",null,{"variant":"caption","children":"Developed by RWB since 2021.05"}]]}],["$","$L5",null,{"alignItems":"center","direction":"row","gap":0.5,"children":[["$","$L20",null,{"fontSize":"inherit","htmlColor":"crimson"}],["$","$L6",null,{"variant":"caption","children":"5th upgraded at 2024.05"}]]}]]}],["$","img",null,{"alt":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev","data-component":"Hits","src":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev"}]]}]}]]}]]}]],null],null]},["$","$L21",null,{"parallelRouterKey":"children","segmentPath":["children","$22","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L23",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2f1fc16fd429ff22.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/a336ca791a5e0838.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},[["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":[["$","script",null,{"crossOrigin":"anonymous","src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-5522045122225064","async":true}],["$","meta",null,{"content":"ca-pub-5522045122225064","name":"google-adsense-account"}]]}],["$","body",null,{"children":["$","$24",null,{"children":["$","$L25",null,{"gaKey":"G-7QYWYNZ90R","children":["$","$L26",null,{"children":["$","$L27",null,{"children":[["$","$L21",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L23",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","$L28",null,{}],["$","$L29",null,{}]]}]}]}]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ca108af39b388357.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/bc8633ce02ba4b2d.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/8b1f4b7ed2fe404c.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/d880172cf76a61a7.css","precedence":"next","crossOrigin":"$undefined"}]],"$L2a"]]]]
2a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"[프로그래머스 / JAVA] Level 1 신규 아이디 추천 (72410) - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","3",{"name":"description","content":"카카오에 입사한 신입 개발자 네오는 \"카카오계정개발팀\"에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. \"네오\"에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다. 다음은 카카오 아이디의 규칙입니다."}],["$","meta","4",{"name":"application-name","content":"𝝅번째 알파카의 개발 낙서장"}],["$","link","5",{"rel":"author","href":"https://github.com/RWB0104"}],["$","meta","6",{"name":"author","content":"Kapoo"}],["$","link","7",{"rel":"author","href":"https://www.linkedin.com/in/itcode"}],["$","meta","8",{"name":"author","content":"RWB"}],["$","link","9",{"rel":"manifest","href":"/manifest.webmanifest","crossOrigin":"use-credentials"}],["$","meta","10",{"name":"generator","content":"Next.js"}],["$","meta","11",{"name":"keywords","content":"프로그래머스,알고리즘,JAVA(자바),Level 1"}],["$","meta","12",{"name":"creator","content":"RWB"}],["$","meta","13",{"name":"publisher","content":"GitHub Pages"}],["$","meta","14",{"property":"og:title","content":"[프로그래머스 / JAVA] Level 1 신규 아이디 추천 (72410) - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","15",{"property":"og:description","content":"카카오에 입사한 신입 개발자 네오는 \"카카오계정개발팀\"에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. \"네오\"에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다. 다음은 카카오 아이디의 규칙입니다."}],["$","meta","16",{"property":"og:url","content":"https://blog.itcode.dev/posts/2021/12/14/programmers-a0002"}],["$","meta","17",{"property":"og:site_name","content":"𝝅번째 알파카의 개발 낙서장"}],["$","meta","18",{"property":"og:locale","content":"ko-KR"}],["$","meta","19",{"property":"og:image","content":"https://user-images.githubusercontent.com/50317129/145976356-6b5d1430-31c0-4c34-829e-6be8f747ab19.png"}],["$","meta","20",{"property":"og:type","content":"website"}],["$","meta","21",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","22",{"name":"twitter:title","content":"[프로그래머스 / JAVA] Level 1 신규 아이디 추천 (72410) - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","23",{"name":"twitter:description","content":"카카오에 입사한 신입 개발자 네오는 \"카카오계정개발팀\"에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. \"네오\"에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다. 다음은 카카오 아이디의 규칙입니다."}],["$","meta","24",{"name":"twitter:image","content":"https://user-images.githubusercontent.com/50317129/145976356-6b5d1430-31c0-4c34-829e-6be8f747ab19.png"}],["$","link","25",{"rel":"icon","href":"/favicon.ico"}],["$","link","26",{"rel":"shortcut icon","href":"/favicon.ico"}],["$","link","27",{"rel":"apple-touch-icon","href":"/favicon.ico"}],["$","meta","28",{"name":"next-size-adjust"}]]
1:null
