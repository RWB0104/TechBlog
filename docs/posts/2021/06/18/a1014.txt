2:I[96815,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
3:I[77224,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
4:I[96525,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
5:I[32911,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
6:I[94103,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
7:I[914,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
8:I[85737,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
9:I[66304,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
a:I[13239,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
b:I[84246,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
c:I[29027,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
d:I[97747,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
f:I[91012,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
10:I[13205,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
11:I[14148,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
12:I[10536,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
13:I[94120,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
14:I[12760,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
15:I[92928,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
16:I[30667,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
17:I[95212,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
18:I[58789,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
19:I[51444,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
1a:I[45488,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
1b:I[78074,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
1c:I[66024,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
1d:I[1573,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
1e:I[63615,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
1f:I[61260,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-dcfe4fa23598dca4.js"],""]
20:I[23845,[],""]
22:I[23979,[],""]
23:"$Sreact.suspense"
24:I[78070,["286","static/chunks/286-5f2793dfa337861d.js","827","static/chunks/827-995b437ce3fae0fe.js","185","static/chunks/app/layout-336b1985db49d957.js"],""]
25:I[72990,["286","static/chunks/286-5f2793dfa337861d.js","827","static/chunks/827-995b437ce3fae0fe.js","185","static/chunks/app/layout-336b1985db49d957.js"],""]
26:I[41043,["286","static/chunks/286-5f2793dfa337861d.js","827","static/chunks/827-995b437ce3fae0fe.js","185","static/chunks/app/layout-336b1985db49d957.js"],""]
27:I[64073,["286","static/chunks/286-5f2793dfa337861d.js","827","static/chunks/827-995b437ce3fae0fe.js","185","static/chunks/app/layout-336b1985db49d957.js"],""]
28:I[90838,["286","static/chunks/286-5f2793dfa337861d.js","827","static/chunks/827-995b437ce3fae0fe.js","185","static/chunks/app/layout-336b1985db49d957.js"],""]
e:T5b1d,
# 컨닝

|                            랭크                            |                                                      사용 언어                                                      |
| :--------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------: |
| ![null](https://d2gd6pc034wcta.cloudfront.net/tier/17.svg) | ![JAVA](https://shields.io/badge/java-JDK%2014-lightgray?logo=java&style=plastic&logoColor=white&labelColor=orange) |

🔗 [전체 1014번 문제](https://www.acmicpc.net/problem/1014)

## 조건

| 시간제한 | 메모리 제한 |
| :------: | :---------: |
|   2초    |    512MB    |

## 문제

최백준은 서강대학교에서 “컨닝의 기술”이라는 과목을 가르치고 있다. 이 과목은 상당히 까다롭기로 정평이 나있기 때문에, 몇몇 학생들은 시험을 보는 도중에 다른 사람의 답지를 베끼려 한다.

시험은 $N$행 $\times$ $M$열 크기의 직사각형 교실에서 이루어진다. 교실은 $1 \times 1$ 크기의 단위 정사각형으로 이루어져 있는데, 각 단위 정사각형은 자리 하나를 의미한다.

최백준은 컨닝을 방지하기 위해서 다음과 같은 전략을 세웠다. 모든 학생은 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위, 이렇게 총 네 자리에 앉아있는 친구의 답지를 항상 베낀다고 가정한다. 따라서, 자리 배치는 모든 학생이 컨닝을 할 수 없도록 배치되어야 한다.

![null](https://user-images.githubusercontent.com/50317129/122051353-78bea480-ce1f-11eb-92c3-5fa4e3dc96b9.png)

위의 그림을 보자. $A$, $C$, $D$ 혹은 $E$에 다른 학생을 앉히는 것은 좋은 생각이 아니다. 그 이유는 이미 앉아있는 학생이 그들의 답안지를 베낄 우려가 있기 때문이다. 하지만, $B$에 다른 학생을 앉힌다면, 두 학생은 서로의 답지를 베낄 수 없어 컨닝의 우려가 없다.

위와 같이 컨닝이 불가능하도록 자리를 배치 하려는 최백준의 행동에 분노한 일부 학생들이 교실의 책상을 부숴버렸기 때문에, 일부 자리에는 학생이 앉을 수 없다.

최백준은 교실의 모양이 주어졌을 때, 이 곳에서 아무도 컨닝을 할 수 없도록 학생을 배치하였을 경우에 교실에 배치할 수 있는 최대 학생 수가 몇 명인지 궁금해졌다. 최백준을 위해 이를 구하는 프로그램을 작성하라.

## 입력

입력의 첫 줄에는 테스트케이스의 개수 $C$가 주어진다. 각각의 테스트 케이스는 아래와 같이 두 부분으로 이루어진다.

첫 번째 부분에서는 교실의 세로길이 N과 가로길이 M이 한 줄에 주어진다. $(1 ≤ M ≤ 10, 1 ≤ N ≤ 10)$

두 번째 부분에서는 정확하게 N줄이 주어진다. 그리고 각 줄은 M개의 문자로 이루어져있다. 모든 문자는 ‘.’(앉을 수 있는 자리) 또는 ‘x’(앉을 수 없는 자리, 소문자)로 구성된다.

## 출력

각각의 테스트 케이스에 대해 그 교실에서 시험을 볼 수 있는 최대 학생의 수를 출력한다.

## 케이스

### 예제 1

+ 입력

``` tc
4
2 3
...
...
2 3
x.x
xxx
2 3
x.x
x.x
10 10
....x.....
..........
..........
..x.......
..........
x...x.x...
.........x
...x......
........x.
.x...x....
```

+ 출력

``` tc
4
1
2
46
```

# 풀이

또 한번의 <span class="teal-A400">플래티넘</span> 문제. 하....

문제 이름 그대로 컨닝을 못 참게 만드는 문제다. 문제를 푸는 방식에는 두 가지가 있다. <span class="blue-400">네트워크 플로우</span>와 <span class="blue-400">비트마스킹</span>. 본 포스팅에서는 <span class="blue-400">네트워크 플로우</span> 방식을 차용한다. 이게 정석이라고 하기도 하고, JAVA 풀이는 죄다 <span class="blue-400">비트마스킹</span> 방식이라서.

나 같이 전공지식이 전무한 코더에게는 너무나도 가혹한 문제다. 지금까지 살면서 하나 깨달은 게 있다면, 아무리 처음 보는 개념이라도 계속 쳐다보면 언젠가 이해된다. 하루가 됐든 한 달이 됐든. 그 난리를 펴가며 이해한 내용은 아래와 같다.

## 문제 분석하기

문제 해결에 영향을 미치는 조건은 아래와 같다.

1. 임의의 자리를 기준으로 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위 자리를 컨닝할 수 있다.
2. 파손되어 앉을 수 없는 자리가 존재한다.

임의의 자리가 있다고 가정하고 이를 도식화해보자.

![null](https://user-images.githubusercontent.com/50317129/122956338-de7cd480-d3bb-11eb-93ce-5c1ea19185af.png)

위 사진과 같이 <span class="indigo-A400">특정 자리</span>를 기준으로 자신의 주변엔 최대 8개의 <span class="indigo-200">자리</span>가 존재할 수 있다. 1번 규칙에 따라 컨닝이 가능한 자리를 도식하면 아래와 같다.

![null](https://user-images.githubusercontent.com/50317129/122956398-eccaf080-d3bb-11eb-9d2b-91e4aaa7ea40.png)

<span class="red-400">컨닝 가능한 자리</span>는 위와 같이 6개로 표시된다. 엥? 분명히 1번 규칙에서는 <span class="indigo-A400">특정 자리</span>를 기준으로 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위만 가능하다고 했다. 해당 규칙에 따르면 4개 자리여야 할텐데, 왼쪽 대각선 아래, 오른쪽 대각선 아래는 왜 해당되는걸까?

<span class="indigo-A400">특정 자리</span>에서 왼쪽 대각선 아래, 오른쪽 대각선 아래를 컨닝할 순 없지만, 반대로 왼쪽 대각선 아래, 오른쪽 대각선 아래에선 <span class="indigo-A400">특정 자리</span>를 컨닝할 수 있기 때문. <span class="lightBlue-A400">컨닝을 할 수 있는 자리와 당할 수 있는 자리</span> 모두를 고려해야한다.

반대로 컨닝이 불가능한 자리를 도식하면 아래와 같다.

![null](https://user-images.githubusercontent.com/50317129/122956442-f7858580-d3bb-11eb-8154-2bfe476ae278.png)

<span class="green-A400">컨닝이 불가능한 자리</span>는 위와 같이 2개로 표시된다. 자신의 앞 뒤는 컨닝할 수 없다. 우리가 설계한 알고리즘이 이와 같은 결과를 계산할 수 있어야 한다. 그렇다면 이를 어떤 방법으로 해결할 수 있을까?

이 문제를 해결하는 방법은 크게 두 가지가 있다.

1. 최소 버텍스 커버, 이분 매칭
2. DP, 비트마스킹

이 중 1번 최소 버텍스 커버와 이분 매칭을 사용하여 풀고자 한다.

## Miminum Vertex Cover(최소 버텍스 커버)

<span class="amber-A400">Miminum Vertex Cover(최소 버텍스 커버)</span>는 모든 노드가 연결된 점(Vertex)의 최소 집합을 의미한다. 예를 들어, 아래와 같은 그림이 있다고 가정하자.

![null](https://user-images.githubusercontent.com/50317129/122956504-05d3a180-d3bc-11eb-8006-7f22037020b9.png)

위 사진에서의 $A$ ~ $I$에 해당하는 9개 점이 Vertex, 각 점마다 연결된 선이 노드가 된다. 버텍스가 모든 노드를 커버할 수 있다면 <span class="amber-A400">버텍스 커버</span>라 볼 수 있다. 그 중 <span class="green-A400">모든 노드를 커버하는 가작 적은 버텍스의 집합</span>이 <span class="amber-A400">Miminum Vertex Cover(최소 버텍스 커버)</span>라 할 수 있다.

![null](https://user-images.githubusercontent.com/50317129/122956549-108e3680-d3bc-11eb-802e-53765cacf3ed.png)

버텍스 $E$의 경우, 대다수의 노드를 포함하고 있지만 $\overline{AB}$, $\overline{BC}$, $\overline{FI}$ 노드를 포함하지 않으므로 버텍스 $E$만으로는 <span class="amber-A400">최소 버텍스 커버</span> 조합이 될 수 없다.

![null](https://user-images.githubusercontent.com/50317129/122956594-1b48cb80-d3bc-11eb-8b48-cf263fd7bcfe.png)

위와 같이 $B$, $F$ 버텍스를 포함할 경우 존재하는 모든 노드를 포함하는 가장 적은 버텍스의 조합이므로 <span class="amber-A400">최소 버텍스 커버</span>가 된다.

유의깊게 봐야할 점은, <span class="amber-A400">최소 버텍스 커버</span>를 통해 <span class="blue-400">최대 독립 집합</span>을 구할 수 있다. <span class="amber-A400">최소 버텍스 커버</span>에 해당하는 버텍스와 모든 노드를 제거해보자. 아래와 같이 도식할 수 있다.

![null](https://user-images.githubusercontent.com/50317129/122956663-2996e780-d3bc-11eb-97f7-d24bd59126fd.png)

이처럼, 전체 그룹에서 <span class="amber-A400">최소 버텍스 커버</span>를 제거하면 <span class="orange-A400">나머지 버텍스들은 그 어떤 버텍스끼리도 연결되지 않는 독립 버텍스</span>다. <span class="amber-A400">최소 버텍스 커버</span>가 모든 노드를 연결한 버텍스의 최소 집함임을 생각한다면, 이를 뺀 나머지는 어떤 버텍스와도 연결되지 않는 버텍스 집합의 최대 조합이라고 할 수 있다. 즉, 최대 독립 집합 $=$ 전체 그룹 $-$ 최소 버텍스 커버로 표현할 수 있다.

그래, 그건 그렇다 치고, 위 개념이 이 문제와 무슨 연관성이 있길래 이렇게 장황하게 서술할까? 이번엔 조금 다르게 이 문제와 연관지어 예시를 들어본다.

![null](https://user-images.githubusercontent.com/50317129/122956705-33204f80-d3bc-11eb-8e58-c1c96509d4fe.png)

그 어떤 자리도 파손되지 않은 온전한 9개 자리가 있다고 가정하자. 각 자리별로 컨닝이 가능한 자리를 노드로 연결하면 위와 같이 도식할 수 있다.

![null](https://user-images.githubusercontent.com/50317129/122956771-42070200-d3bc-11eb-908c-fc5c5db4f583.png)

위 사진에서 <span class="amber-A400">최소 버텍스 커버</span>는 $B$, $E$, $H$가 된다. 이 자리 3개로 위 사진의 모든 노드를 포함할 수 있기 때문이다. 이 자리들을 제거하여 <span class="blue-400">최대 독립 집합</span>을 표현하면 어떻게 될까?

![null](https://user-images.githubusercontent.com/50317129/122956808-4cc19700-d3bc-11eb-82ff-dc32d98960c4.png)

나머지 자리인 $A$, $C$, $D$, $F$, $G$, $H$만 남게 되며, 각 자리는 그 어떤 노드와도 연결되어있지 않다. 이 사진에서의 노드는 컨닝 가능한 자리이므로, **노드가 없다는 것은 컨닝할 수 있는 자리가 없다**는 뜻이 된다. 즉, <span class="amber-A400">최소 버텍스 커버</span> 로직을 설계하는 것이 이번 알고리즘의 키 포인트다.

## 이분 매칭

자, <span class="amber-A400">최소 버텍스 커버</span>가 알고리즘의 키인 건 알았으니, 이를 구현하기만 하면 된다. 안타깝게도 <span class="amber-A400">최소 버텍스 커버</span>를 코딩으로 계산하는 것은 매우 복잡한 일이다.

**König's Theorem**(쾨닉의 정리)에 의하면 <span class="red-400">모든 이분 그래프의 최대 매칭은 최소 버텍스 커버와 같다</span>고 증명한다. 즉, 위 그래프를 이분 그래프로 변경하여 최대 매칭을 구하면 <span class="amber-A400">최소 버텍스 커버</span>를 구할 수 있다는 뜻이다.

결론적으로, <span class="amber-A400">최소 버텍스 커버</span>를 구하기 위해 <span class="teal-A400">이분 매칭</span> 알고리즘을 구현해야 한다.

<span class="teal-A400">이분 매칭</span>의 연산에 사용하는 **이분 그래프**는 아래와 같은 특징을 가진다.

* 모든 정점을 두 그룹으로 나눌 수 있다.
* 모든 노드는 한 그룹에서 다른 그룹으로 연결된다.
* 같은 그룹끼리는 연결되지 않는다.

고등수학을 배웠다면 우리는 이미 이분 그래프를 접한적이 있다.

![null](https://user-images.githubusercontent.com/50317129/122956906-6367ee00-d3bc-11eb-8612-b27579146961.png)

위 사진은 임의의 함수 $f(x)$에 대한 식을 도식화한 것이다. 위 함수 도식은 이분 그래프의 적절한 예시가 될 수 있다. 모든 그룹이 $x$ 혹은 $y$그룹으로 나뉘며, 모든 노드가 $x$에서 $y$로 연결된다.

**이분 그래프의 매칭**은 각 그룹의 버텍스를 매칭하는 노드의 집합이다. 단, 각 노드의 끝 점은 다른 노드와 중복되지 않는다. **이분 그래프의 최대 매칭**은 이분 그래프의 매칭의 노드 수가 최대인 조합이다.

![null](https://user-images.githubusercontent.com/50317129/122956970-71b60a00-d3bc-11eb-9019-0ffaef2ac35b.png)

위와 같이 연결된 이분 그래프가 있다고 가정하자. $1$번 버텍스를 기준으로 $A$와 $B$에 노드가 연결되어있다. $\overline{A1}$을 선택할 경우, $\overline{B1}$은 매칭에서 제외된다. 노드의 끝 선이 $1$번 버텍스로 동일하기 때문이다. 각 노드의 끝 점은 다른 노드와 중복되지 않는다는 말의 의미는 이와 같다.

![null](https://user-images.githubusercontent.com/50317129/122957021-7e3a6280-d3bc-11eb-8b24-07a0662def70.png)

1. $A$와 $1$번 버텍스를 잇는 노드 $\overline{A1}$을 선택한다.
2. $B$와 $1$번 버텍스를 잇는 노드 $\overline{B1}$은 노드 $\overline{A1}$이 $1$번 버텍스를 포함하므로 선택할 수 없다.
3. 노드 $\overline{A1}$의 시작 버텍스인 $A$에부터 다른 노드가 있는지 탐색한다.
4. $A$ 버텍스와 연결된 다른 노드가 없으므로 노드 $\overline{A1}$의 선택을 유지한다.
5. $C$와 $1$번 버텍스를 잇는 노드 $\overline{C1}$을 선택한다.
6. 마지막 버텍스이므로 탐색을 종료하고 갯수를 계산한다.

이와 같은 과정으로 이분 그래프의 최대 매칭의 수는 `2`가 된다. 물론 최대 매칭의 조합은 여러개가 될 수 있겠지만, 이 알고리즘에선 "조합"이 아니라 "수"가 중요하므로 경우의 수를 구할 필요는 없다.

> **이분 그래프의 최대 매칭 조합**  
> 위 그래프의 최대 매칭 조합은 $[ \overline{A1}, \overline{C2} ]$, $[ \overline{A1}, \overline{C3} ]$, $[ \overline{B1}, \overline{C2} ]$, $[ \overline{B1}, \overline{C3} ]$으로 최대 매칭의 수는 2이며 4가지 경우의 수가 존재한다.

<span class="teal-A400">이분 매칭</span>을 문제에 적용하면 아래와 같다.

![null](https://user-images.githubusercontent.com/50317129/122957080-898d8e00-d3bc-11eb-84f6-7b504b2d93b3.png)

이번엔 조금 복합적인 예시다. 버텍스 $A$와 $E$가 파손되어 앉을 수 없는 상황이다. 이러한 조건에서 컨닝 가능한 자리를 노드로 표현하면 위 사진과 같이 표현할 수 있다. 규칙의 특성 상, 한 쪽 열은 양 옆의 열에 영향을 준다. 즉, 홀수열과 짝수열로 그룹을 나눌 수 있다. 열의 홀짝을 기준으로 나눠 이분 그래프를 표시하면 아래와 같다.

![null](https://user-images.githubusercontent.com/50317129/122957152-9ca05e00-d3bc-11eb-8a63-1c7ae6e5edfb.png)

위 이분 그래프의 최대 매칭은 2가 된다. 즉, 최소 버텍스 커버의 조합은 $B$, $H$고 파손되서 착석이 불가능한 자리는 $A$, $E$가 된다. 따라서 $C$, $D$, $F$, $G$, $I$가 컨닝 불가능한 자리가 된다. 단순히 자리의 "수"만 계산하면 되므로 `컨닝 불가능한 자리 = 전체 자리 - 최소 버텍스 커버 수 - 파손된 자리`가 된다. 따라서 위 그래프의 알고리즘 수행 결과는 5가 된다.

<span class="teal-A400">이분 매칭</span>은 <span class="blue-400">BFS(Breadth First Search, 너비 우선 탐색)</span> 혹은 <span class="blue-400">DFS(Depth First Search, 깊이 우선 탐색)</span>으로 구현할 수 있다.

## 전체 소스

``` java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;

/**
 * 백준 전체 1014 문제 알고리즘 클래스
 *
 * @author RWB
 * @see <a href="https://blog.itcode.dev/posts/2021/06/18/a1014">1014 풀이</a>
 * @since 2021.06.18 Fri 16:42:44
 */
public class Main
{
	// 교실 세로 길이 (y)
	private static int N;
	
	// 교실 가로 길이 (x)
	private static int M;
	
	// 자리 번호
	private static int[][] room;
	
	// 컨닝 가능한 자리
	private static boolean[][] nodes;
	
	// 방문 횟수
	private static int visitCount;
	
	// 버텍스별 방문 횟수
	private static int[] visit;
	
	// 버텍스 매칭 여부
	private static int[] matched;
	
	/**
	 * 메인 함수
	 *
	 * @param args: [String[]] 매개변수
	 *
	 * @throws IOException 데이터 입출력 예외
	 */
	public static void main(String[] args) throws IOException
	{
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
		
		// 현재 자리에서 컨닝이 가능한 자리의 위치 상대좌표
		int[][] scopes = { { -1, 1 }, { -1, 0 }, { -1, -1 }, { 1, 1 }, { 1, 0 }, { 1, -1 } };
		
		// 케이스 수
		int C = Integer.parseInt(reader.readLine());
		
		while (C-- > 0)
		{
			String[] temp = reader.readLine().split(" ");
			
			N = Integer.parseInt(temp[0]);
			M = Integer.parseInt(temp[1]);
			
			// 자리의 파손 여부
			boolean[][] canSit = new boolean[N][M];
			
			// 자리의 번호
			int numbering = 1;
			
			// 파손된 자리의 총 갯수
			int broken = 0;
			
			room = new int[N][M];
			nodes = new boolean[N * M][N * M];
			
			visitCount = 1;
			
			for (int n = 0; n < N; n++)
			{
				temp = reader.readLine().split("");
				
				for (int m = 0; m < M; m++)
				{
					// 자리 번호 기록
					room[n][m] = numbering++;
					
					// 앉을 수 있는 경우
					if (temp[m].equals("."))
					{
						canSit[n][m] = true;
					}
					
					// 파손된 경우
					else
					{
						canSit[n][m] = false;
						
						// 파손 갯수 1 추가
						broken++;
					}
				}
			}
			
			for (int n = 0; n < N; n++)
			{
				// 홀수 열만 대상으로 동작함
				for (int m = 0; m < M; m += 2)
				{
					// 앉을 수 있는 좌석일 경우
					if (canSit[n][m])
					{
						for (int[] scope : scopes)
						{
							// 컨닝 가능성 있는 자리의 상대좌표
							int no = n + scope[1];
							int mo = m + scope[0];
							
							// 상대좌표가 교실을 벗어나지 않으면서, 앉을 수 있을 경우
							if (no > -1 && mo > -1 && no < N && mo < M && canSit[no][mo])
							{
								// 노드 연결 표시
								nodes[room[n][m] - 1][room[no][mo] - 1] = true;
							}
						}
					}
				}
			}
			
			int result = bipartite();
			
			writer.write(Integer.toString(N * M - broken - result));
			writer.newLine();
			writer.flush();
		}
		
		writer.close();
		reader.close();
	}
	
	/**
	 * 이분 매칭 갯수 반환 함수
	 *
	 * @return [int] 이분 매칭 갯수
	 */
	private static int bipartite()
	{
		// 매칭 갯수
		int size = 0;
		
		visit = new int[N * M];
		
		matched = new int[N * M];
		
		Arrays.fill(matched, -1);
		
		for (int n = 0; n < N; n++)
		{
			for (int m = 0; m < M; m += 2)
			{
				visitCount++;
				
				size += dfs(room[n][m] - 1);
			}
		}
		
		return size;
	}
	
	/**
	 * DFS 알고리즘 결과 반환 함수
	 *
	 * @param num: [int] 시작점
	 *
	 * @return [int] 매칭 갯수
	 */
	private static int dfs(int num)
	{
		// 같은 버텍스가 아닐 경우
		if (visit[num] != visitCount)
		{
			visit[num] = visitCount;
			
			for (int i = 0; i < N * M; i++)
			{
				// num과 i 버텍스 사이에 노드가 존재할 경우
				if (nodes[num][i])
				{
					// 아직 매칭되지 않았거나, 이미 i와 매칭된 버텍스가 다른 버텍스와 매칭할 수 있을 경우
					if (matched[i] == -1 || dfs(matched[i]) == 1)
					{
						matched[i] = num;
						
						return 1;
					}
				}
			}
		}
		
		return 0;
	}
}
```

유의깊게 봐야할 코드는 아래와 같다.

``` java
private static int bipartite()
{
	// 매칭 갯수
	int size = 0;
	
	visit = new int[N * M];
	
	matched = new int[N * M];
	
	Arrays.fill(matched, -1);
	
	for (int n = 0; n < N; n++)
	{
		for (int m = 0; m < M; m += 2)
		{
			visitCount++;
			
			size += dfs(room[n][m] - 1);
		}
	}
	
	return size;
}
```

위 코드가 이분매칭을 <span class="blue-400">DFS 알고리즘</span>을 통해 구현한 것이다.  `for`문의 변수 선언 중 `m += 2`인 이유는 홀수열만 체크하기 위함이다.

``` java
private static int dfs(int num)
{
	// 같은 버텍스가 아닐 경우
	if (visit[num] != visitCount)
	{
		visit[num] = visitCount;
		
		for (int i = 0; i < N * M; i++)
		{
			// num과 i 버텍스 사이에 노드가 존재할 경우
			if (nodes[num][i])
			{
				// 아직 매칭되지 않았거나, 이미 i와 매칭된 버텍스가 다른 버텍스와 매칭할 수 있을 경우
				if (matched[i] == -1 || dfs(matched[i]) == 1)
				{
					matched[i] = num;
					
					return 1;
				}
			}
		}
	}
	
	return 0;
}
```

이분매칭을 구현하는 <span class="blue-400">DFS 알고리즘</span>의 코드는 위와 같다. `matched` 배열은 -1로 초기화되며, 매칭되는 버텍스의 번호를 할당받는다.

$A$ 버텍스가 $B$ 버텍스와 연결된 노드 $\overline{AB}$를 가질 경우, 이를 `matched[A] = B`와 같이 표시한다. 만약, $A$ 버텍스가 $B$ 버텍스를 연결하는 와중에 이미 $B$가 $C$와 연결되어있을 경우, $C$ 버텍스에 $B$가 아닌 다른 버텍스와 연결된 노드가 있는지 확인한다. 만약 가능할 경우, $\overline{BC}$를 제거하고 $C$와 연결할 수 있는 다른 버텍스를 연결한다. 이후 $\overline{AB}$를 연결한다.

이 과정을 반복하여 연결을 수립할 수 있을 경우 1, 없을 경우 0을 반환한다. 이는 `boolean` 타입으로도 대체할 수 있으나, `dfs()`연산 결과를 더하기 때문에 편의상 `int`로 반환한다.

## 비공식 케이스

+ 입력

``` tc
1
10 10
.X.X...X..
.X..X.....
X.X.......
.X.X......
X...X.....
.X.X...X..
.X..X.....
X.X.......
.X.X......
X...X.....
```

+ 출력

``` tc
42
```

+ 입력

``` tc
1
5 10
.X.X...X..
.X..X.....
X.X.......
.X.X......
X...X.....
```

+ 출력

``` tc
21
```

+ 입력

``` tc
1
5 8
.X...X..
..X.....
X.......
.X......
..X.....
```

+ 출력

``` tc
18
```

+ 입력

``` tc
1
5 7
X...X..
.X.....
.......
X......
.X.....
```

+ 출력

``` tc
17
```

## 분류

* 다이나믹 프로그래밍
* 비트마스킹
* 최대 유량
* 비트필드를 이용한 다이나믹 프로그래밍

# 여담

[습격자 초라기](/posts/2021/06/06/a1006)가 매우 복잡한 케이스들을 이해하는데 할애했다면, 이 문제는 케이스가 복잡하다기 보단, 네트워크 플로우를 이해하고 적용하는데 대부분의 시간을 할애했다. 문제 보니까 가면 갈수록 플래티넘이 계속해서 나오는 구간도 있던데, 순서대로 푸는 규칙에 대해 진지하게 생각해봐야하나 싶다.

## 참고

* [개발괴발](https://m.blog.naver.com/kelle111/221537563173)
* [Crocus](https://www.crocus.co.kr/814)21:["markdown","posts/2021/06/18/a1014","c"]
0:["BGxyBO1vQkHKKB05TlSs7",[[["",{"children":[["markdown","posts/2021/06/18/a1014","c"],{"children":["__PAGE__?{\"markdown\":[\"posts\",\"2021\",\"06\",\"18\",\"a1014\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["markdown","posts/2021/06/18/a1014","c"],{"children":["__PAGE__",{},["$L1",["$","$L2",null,{"component":"main","data-component":"PageTemplate","children":[["$","$L3",null,{"title":"𝝅번째 알파카의 개발 낙서장","version":"5.0.0-beta5"}],[["$","$L4",null,{"src":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","children":["$","$L2",null,{"className":"MarkdownScreenerTemplate_root__dpmgV","data-component":"BaseScreenerTemplate","height":"100%","position":"relative","width":"100%","children":[["$","$L5",null,{"alignItems":"center","height":"100%","justifyContent":"center","padding":2,"position":"relative","width":"100%","children":[["$","$L5",null,{"direction":"row","children":[["$","$L2",null,{"bgcolor":"dodgerblue","boxShadow":"0px 0px 5px black","height":"100%","width":5}],["$","$L5",null,{"color":"white","paddingLeft":2,"paddingRight":2,"children":[["$","$L6",null,{"className":"MarkdownScreenerTemplate_text__5_mNa","fontWeight":"bold","variant":"h5","children":"[백준 / JAVA] 백준 알고리즘 1014번 컨닝"}],["$","$L6",null,{"className":"MarkdownScreenerTemplate_text__5_mNa","children":"⏰ 2021-06-18 (금) 07:42:44"}]]}]]}],["$","$L7",null,{"bottom":"10%","direction":"row","gap":4,"position":"absolute","shareData":{"text":"최백준은 서강대학교에서 “컨닝의 기술”이라는 과목을 가르치고 있다. 이 과목은 상당히 까다롭기로 정평이 나있기 때문에, 몇몇 학생들은 시험을 보는 도중에 다른 사람의 답지를 베끼려 한다. 시험은 N행 X M열 크기의 직사각형 교실에서 이루어진다. 교실은 1 X 1 크기의 단위 정사각형으로 이루어져 있는데, 각 단위 정사각형은 자리 하나를 의미한다. 최백준은 컨닝을 방지하기 위해서 다음과 같은 전략을 세웠다. 모든 학생은 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위, 이렇게 총 네 자리에 앉아있는 친구의 답지를 항상 베낀다고 가정한다. 따라서, 자리 배치는 모든 학생이 컨닝을 할 수 없도록 배치되어야 한다.","title":"[백준 / JAVA] 백준 알고리즘 1014번 컨닝","url":"https://blog.itcode.dev/posts/2021/06/18/a1014"}}]]}],["$","$L2",null,{"bottom":0,"left":0,"position":"absolute","width":"100%","children":["$","svg",null,{"className":"Wave_waves___Plcn","data-component":"Wave","height":80,"preserveAspectRatio":"none","shapeRendering":"auto","viewBox":"0 24 150 28","width":"100%","xmlns":"http://www.w3.org/2000/svg","children":[["$","defs",null,{"children":["$","path",null,{"d":"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z","id":"gentle-wave"}]}],["$","g",null,{"className":"Wave_parallax__AGFbj","children":[["$","use",null,{"fill":"$undefined","opacity":"0.7","x":"48","xlinkHref":"#gentle-wave","y":"0"}],["$","use",null,{"fill":"$undefined","opacity":"0.5","x":"48","xlinkHref":"#gentle-wave","y":"3"}],["$","use",null,{"fill":"$undefined","opacity":"0.3","x":"48","xlinkHref":"#gentle-wave","y":"5"}],["$","use",null,{"fill":"$undefined","x":"48","xlinkHref":"#gentle-wave","y":"7"}]]}]]}]}]]}]}],[["$","$L8",null,{"color":"dodgerblue"}],["$","$L9",null,{"children":["$","$L5",null,{"gap":4,"paddingTop":10,"children":[["$","$La",null,{"current":"/posts/2021/06/18/a1014","groups":[{"title":"[백준 / JAVA] 백준 알고리즘 1021번 회전하는 큐","url":"/posts/2021/08/26/a1021"},{"title":"[백준 / JAVA] 백준 알고리즘 1020번 디지털 카운터","url":"/posts/2021/08/24/a1020"},{"title":"[백준 / JAVA] 백준 알고리즘 1019번 책 페이지","url":"/posts/2021/06/28/a1019"},{"title":"[백준 / JAVA] 백준 알고리즘 1018번 체스판 다시 칠하기","url":"/posts/2021/06/26/a1018"},{"title":"[백준 / JAVA] 백준 알고리즘 1017번 소수 쌍","url":"/posts/2021/06/26/a1017"},{"title":"[백준 / JAVA] 백준 알고리즘 1016번 제곱 ㄴㄴ수","url":"/posts/2021/06/23/a1016"},{"title":"[백준 / JAVA] 백준 알고리즘 1015번 수열 정렬","url":"/posts/2021/06/22/a1015"},{"title":"[백준 / JAVA] 백준 알고리즘 1014번 컨닝","url":"/posts/2021/06/18/a1014"},{"title":"[백준 / JAVA] 백준 알고리즘 1013번 Contact","url":"/posts/2021/06/13/a1013"},{"title":"[백준 / JAVA] 백준 알고리즘 1012번 유기농 배추","url":"/posts/2021/06/13/a1012"},{"title":"[백준 / JAVA] 백준 알고리즘 1011번 Fly me to the Alpha Centauri","url":"/posts/2021/06/11/a1011"},{"title":"[백준 / JAVA] 백준 알고리즘 1010번 다리 놓기","url":"/posts/2021/06/09/a1010"},{"title":"[백준 / JAVA] 백준 알고리즘 1009번 분산처리","url":"/posts/2021/06/09/a1009"},{"title":"[백준 / JAVA] 백준 알고리즘 1008번 A / B","url":"/posts/2021/06/09/a1008"},{"title":"[백준 / JAVA] 백준 알고리즘 1007번 벡터","url":"/posts/2021/06/09/a1007"},{"title":"[백준 / JAVA] 백준 알고리즘 1006번 습격자 초라기","url":"/posts/2021/06/06/a1006"},{"title":"[백준 / JAVA] 백준 알고리즘 1005번 ACM Craft","url":"/posts/2021/06/01/a1005"},{"title":"[백준 / JAVA] 백준 알고리즘 1004번 어린 왕자","url":"/posts/2021/05/22/a1004"},{"title":"백준 알고리즘 시작하기","url":"/posts/2021/05/21/start-beakjoon"},{"title":"[백준 / JAVA] 백준 알고리즘 1003번 피보나치 함수","url":"/posts/2021/05/21/a1003"},{"title":"[백준 / JAVA] 백준 알고리즘 1002번 터렛","url":"/posts/2021/05/21/a1002"},{"title":"[백준 / JAVA] 백준 알고리즘 1001번 A - B","url":"/posts/2021/05/21/a1001"},{"title":"[백준 / JAVA] 백준 알고리즘 1000번 A + B","url":"/posts/2021/05/21/a1000"}],"thumbnail":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","title":"백준 알고리즘"}],["$","$Lb",null,{"list":[{"idx":"1.","level":1,"text":"컨닝"},{"idx":"1.1.","level":2,"text":"조건"},{"idx":"1.2.","level":2,"text":"문제"},{"idx":"1.3.","level":2,"text":"입력"},{"idx":"1.4.","level":2,"text":"출력"},{"idx":"1.5.","level":2,"text":"케이스"},{"idx":"1.5.1.","level":3,"text":"예제 1"},{"idx":"2.","level":1,"text":"풀이"},{"idx":"2.1.","level":2,"text":"문제 분석하기"},{"idx":"2.2.","level":2,"text":"Miminum Vertex Cover(최소 버텍스 커버)"},{"idx":"2.3.","level":2,"text":"이분 매칭"},{"idx":"2.4.","level":2,"text":"전체 소스"},{"idx":"2.5.","level":2,"text":"비공식 케이스"},{"idx":"2.6.","level":2,"text":"분류"},{"idx":"3.","level":1,"text":"여담"},{"idx":"3.1.","level":2,"text":"참고"}]}],["$","$Lc",null,{"variant":"fullWidth"}],["$","$Ld",null,{"children":"$e"}],["$","$Lc",null,{"variant":"fullWidth"}],["$","$Lf",null,{"tags":["백준","알고리즘","JAVA(자바)","PLATINUM","PLATINUM IV","네트워크 플로우","최소 버텍스 커버","이분 매칭"],"type":"posts"}],["$","$L5",null,{"alignItems":"center","data-component":"LabNameTag","width":"100%","children":["$","$L2",null,{"boxShadow":"0px 0px 10px #00000050","maxWidth":250,"width":"100%","children":["$","$L10",null,{"href":"https://itcode.dev","target":"_blank","children":["$","$L11",null,{"scale":1.1,"children":[["$","$L2",null,{"borderRadius":2,"className":"NameTag_tag__DZCHu","data-component":"NameTag","padding":1,"sx":{"background":"linear-gradient(45deg, #833AB4, #FD2B20, #fCAA43)"},"children":["$","$L5",null,{"borderRadius":2,"color":"white","gap":3,"padding":2,"children":[["$","$L2",null,{"className":"Tile_tile__czq9P","data-component":"Tile","overflow":"hidden","position":"relative","children":["$","$L2",null,{"height":"100%","left":0,"position":"absolute","top":0,"width":"100%","children":["$","$L12",null,{"src":"https://itcode.dev/logo.png"}]}]}],["$","$L2",null,{"borderTop":"1px solid white","width":"100%"}],["$","$L5",null,{"gap":1,"children":[["$","$L6",null,{"color":"inherit","fontWeight":"bold","children":"𝝅번째 알파카의 개발 연구소"}],["$","$L2",null,{"color":"inherit","width":"100%","children":["$","$L6",null,{"variant":"caption","children":"이 카드를 클릭하고 𝝅번째 알파카의 개발 연구소의 다양한 프로젝트를 확인해보세요!"}]}]]}]]}]}],["$","$L13",null,{}]]}]}]}]}],["$","$L14",null,{"next":{"thumbnail":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png","title":"[백준 / JAVA] 백준 알고리즘 1015번 수열 정렬","url":"/posts/2021/06/22/a1015"},"prev":{"thumbnail":"https://www.textrazor.com/img/letters3.png","title":"[JAVA] split vs StringTokenizer","url":"/posts/2021/06/14/split-and-stringtokenizer"},"type":"posts"}],["$","$L5",null,{"alignItems":"center","justifyContent":"center","width":"100%","children":["$","$L11",null,{"children":["$","$L5",null,{"alignItems":"center","bgcolor":"lemonchiffon","borderRadius":1,"boxShadow":"0px 0px 10px #00000030","component":"div","data-component":"ThanksCard","direction":"row","gap":2,"padding":2,"children":[["$","$L15",null,{"iconName":"love-message-burst","width":100}],["$","$L5",null,{"children":[["$","$L6",null,{"color":"black","variant":"h6","gutterBottom":true,"children":"읽어주셔서 고마워요!"}],["$","$L6",null,{"color":"black","children":["도움이 되셨다면, ",["$","$L6",null,{"color":"hotpink","component":"span","fontWeight":"bold","children":"공감"}],"이나 ",["$","$L6",null,{"color":"dodgerblue","component":"span","fontWeight":"bold","children":"댓글"}],"을 달아주시는 건 어떤가요?"]}],["$","$L6",null,{"color":"black","children":"블로그 운영에 큰 힘이 됩니다."}]]}]]}]}]}],["$","$L7",null,{"direction":"row","gap":4,"iconColor":"inherit","justifyContent":"center","shareData":{"text":"최백준은 서강대학교에서 “컨닝의 기술”이라는 과목을 가르치고 있다. 이 과목은 상당히 까다롭기로 정평이 나있기 때문에, 몇몇 학생들은 시험을 보는 도중에 다른 사람의 답지를 베끼려 한다. 시험은 N행 X M열 크기의 직사각형 교실에서 이루어진다. 교실은 1 X 1 크기의 단위 정사각형으로 이루어져 있는데, 각 단위 정사각형은 자리 하나를 의미한다. 최백준은 컨닝을 방지하기 위해서 다음과 같은 전략을 세웠다. 모든 학생은 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위, 이렇게 총 네 자리에 앉아있는 친구의 답지를 항상 베낀다고 가정한다. 따라서, 자리 배치는 모든 학생이 컨닝을 할 수 없도록 배치되어야 한다.","title":"[백준 / JAVA] 백준 알고리즘 1014번 컨닝","url":"/posts/2021/06/18/a1014"}}],["$","$L16",null,{}],["$","$L5",null,{"alignItems":"center","children":["$","img",null,{"alt":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev%2Fposts%2F2021%2F06%2F18%2Fa1014","data-component":"Hits","src":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev%2Fposts%2F2021%2F06%2F18%2Fa1014"}]}]]}]}]]],["$","$L2",null,{"component":"footer","data-component":"Footer","marginTop":10,"children":[["$","$L2",null,{"position":"relative","children":[["$","$L17",null,{}],["$","$L2",null,{"bottom":-20,"className":"Footer_ship__VuMth","left":"10%","position":"absolute","children":["$","img",null,{"alt":"icon","height":100,"src":"https://cdn-icons-png.freepik.com/512/6643/6643562.png","width":100}]}],["$","$L2",null,{"bottom":0,"position":"absolute","width":"100%","children":["$","svg",null,{"className":"Wave_waves___Plcn","data-component":"Wave","height":40,"preserveAspectRatio":"none","shapeRendering":"auto","viewBox":"0 24 150 28","width":"100%","xmlns":"http://www.w3.org/2000/svg","children":[["$","defs",null,{"children":["$","path",null,{"d":"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z","id":"gentle-wave"}]}],["$","g",null,{"className":"Wave_parallax__AGFbj","children":[["$","use",null,{"fill":"#6fb1fc","opacity":"0.7","x":"48","xlinkHref":"#gentle-wave","y":"0"}],["$","use",null,{"fill":"#6fb1fc","opacity":"0.5","x":"48","xlinkHref":"#gentle-wave","y":"3"}],["$","use",null,{"fill":"#6fb1fc","opacity":"0.3","x":"48","xlinkHref":"#gentle-wave","y":"5"}],["$","use",null,{"fill":"#6fb1fc","x":"48","xlinkHref":"#gentle-wave","y":"7"}]]}]]}]}]]}],["$","$L2",null,{"children":["$","$L5",null,{"alignItems":"center","className":"FooterTemplate_footer__97G2c","color":"white","data-component":"FooterTemplate","gap":4,"padding":4,"paddingBottom":8,"paddingTop":8,"children":[["$","$L5",null,{"alignItems":"center","color":"white","children":[["$","$L6",null,{"className":"FooterTemplate_title__Samo8","fontWeight":"bold","variant":"h6","children":"𝝅번째 알파카의 개발 낙서장"}],["$","$L6",null,{"variant":"caption","children":"5.0.0-beta5"}]]}],["$","$L2",null,{"display":"grid","gap":2,"gridTemplateColumns":"1fr 1fr 1fr","children":[["$","$L10",null,{"data-component":"FooterLinkButton","href":"https://itcode.dev","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","img",null,{"alt":"itcode.dev","height":"100%","src":"https://itcode.dev/logo-transparent.png","width":"100%"}]}]}]}],["$","$L10",null,{"data-component":"FooterLinkButton","href":"https://github.com/RWB0104","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L19",null,{}]}]}]}],["$","$L10",null,{"data-component":"FooterLinkButton","href":"mailto:psj2716@mensakorea.org","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1a",null,{}]}]}]}],["$","$L10",null,{"data-component":"FooterLinkButton","href":"https://www.linkedin.com/in/itcode","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1b",null,{}]}]}]}],["$","$L10",null,{"data-component":"FooterLinkButton","href":"/sitemap.xml","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1c",null,{}]}]}]}],["$","$L10",null,{"data-component":"FooterLinkButton","href":"/rss.xml","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1d",null,{}]}]}]}]]}],["$","$L5",null,{"alignItems":"center","color":"white","children":[["$","$L5",null,{"alignItems":"center","direction":"row","gap":0.5,"children":[["$","$L1e",null,{"fontSize":"inherit","htmlColor":"darkblue"}],["$","$L6",null,{"variant":"caption","children":"Developed by RWB since 2021.05"}]]}],["$","$L5",null,{"alignItems":"center","direction":"row","gap":0.5,"children":[["$","$L1f",null,{"fontSize":"inherit","htmlColor":"crimson"}],["$","$L6",null,{"variant":"caption","children":"5th upgraded at 2024.05"}]]}]]}],["$","img",null,{"alt":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev","data-component":"Hits","src":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev"}]]}]}]]}]]}],null]]},["$","$L20",null,{"parallelRouterKey":"children","segmentPath":["children","$21","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L22",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4759e4620cd54de5.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","$23",null,{"children":["$","$L24",null,{"gaKey":"G-7QYWYNZ90R","children":["$","$L25",null,{"children":["$","$L26",null,{"children":[["$","$L20",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L22",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","$L27",null,{}],["$","$L28",null,{}]]}]}]}]}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a3507890a8a83f16.css","precedence":"next","crossOrigin":""}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/6961771bdd90d9c6.css","precedence":"next","crossOrigin":""}]],"$L29"]]]]
29:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"[백준 / JAVA] 백준 알고리즘 1014번 컨닝 - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","3",{"name":"description","content":"최백준은 서강대학교에서 “컨닝의 기술”이라는 과목을 가르치고 있다. 이 과목은 상당히 까다롭기로 정평이 나있기 때문에, 몇몇 학생들은 시험을 보는 도중에 다른 사람의 답지를 베끼려 한다. 시험은 N행 X M열 크기의 직사각형 교실에서 이루어진다. 교실은 1 X 1 크기의 단위 정사각형으로 이루어져 있는데, 각 단위 정사각형은 자리 하나를 의미한다. 최백준은 컨닝을 방지하기 위해서 다음과 같은 전략을 세웠다. 모든 학생은 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위, 이렇게 총 네 자리에 앉아있는 친구의 답지를 항상 베낀다고 가정한다. 따라서, 자리 배치는 모든 학생이 컨닝을 할 수 없도록 배치되어야 한다."}],["$","meta","4",{"name":"application-name","content":"𝝅번째 알파카의 개발 낙서장"}],["$","link","5",{"rel":"author","href":"https://github.com/RWB0104"}],["$","meta","6",{"name":"author","content":"Kapoo"}],["$","link","7",{"rel":"author","href":"https://www.linkedin.com/in/itcode"}],["$","meta","8",{"name":"author","content":"RWB"}],["$","link","9",{"rel":"manifest","href":"/manifest.webmanifest"}],["$","meta","10",{"name":"generator","content":"Next.js"}],["$","meta","11",{"name":"keywords","content":"백준,알고리즘,JAVA(자바),PLATINUM,PLATINUM IV,네트워크 플로우,최소 버텍스 커버,이분 매칭"}],["$","meta","12",{"name":"creator","content":"RWB"}],["$","meta","13",{"name":"publisher","content":"GitHub Pages"}],["$","meta","14",{"property":"og:title","content":"[백준 / JAVA] 백준 알고리즘 1014번 컨닝 - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","15",{"property":"og:description","content":"최백준은 서강대학교에서 “컨닝의 기술”이라는 과목을 가르치고 있다. 이 과목은 상당히 까다롭기로 정평이 나있기 때문에, 몇몇 학생들은 시험을 보는 도중에 다른 사람의 답지를 베끼려 한다. 시험은 N행 X M열 크기의 직사각형 교실에서 이루어진다. 교실은 1 X 1 크기의 단위 정사각형으로 이루어져 있는데, 각 단위 정사각형은 자리 하나를 의미한다. 최백준은 컨닝을 방지하기 위해서 다음과 같은 전략을 세웠다. 모든 학생은 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위, 이렇게 총 네 자리에 앉아있는 친구의 답지를 항상 베낀다고 가정한다. 따라서, 자리 배치는 모든 학생이 컨닝을 할 수 없도록 배치되어야 한다."}],["$","meta","16",{"property":"og:url","content":"https://blog.itcode.dev/posts/2021/06/18/a1014"}],["$","meta","17",{"property":"og:site_name","content":"𝝅번째 알파카의 개발 낙서장"}],["$","meta","18",{"property":"og:locale","content":"ko-KR"}],["$","meta","19",{"property":"og:image","content":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png"}],["$","meta","20",{"property":"og:type","content":"website"}],["$","meta","21",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","22",{"name":"twitter:title","content":"[백준 / JAVA] 백준 알고리즘 1014번 컨닝 - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","23",{"name":"twitter:description","content":"최백준은 서강대학교에서 “컨닝의 기술”이라는 과목을 가르치고 있다. 이 과목은 상당히 까다롭기로 정평이 나있기 때문에, 몇몇 학생들은 시험을 보는 도중에 다른 사람의 답지를 베끼려 한다. 시험은 N행 X M열 크기의 직사각형 교실에서 이루어진다. 교실은 1 X 1 크기의 단위 정사각형으로 이루어져 있는데, 각 단위 정사각형은 자리 하나를 의미한다. 최백준은 컨닝을 방지하기 위해서 다음과 같은 전략을 세웠다. 모든 학생은 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위, 이렇게 총 네 자리에 앉아있는 친구의 답지를 항상 베낀다고 가정한다. 따라서, 자리 배치는 모든 학생이 컨닝을 할 수 없도록 배치되어야 한다."}],["$","meta","24",{"name":"twitter:image","content":"https://user-images.githubusercontent.com/50317129/120028591-d5ece480-c02f-11eb-88f0-e14fc647dd81.png"}],["$","link","25",{"rel":"icon","href":"/favicon.ico"}],["$","link","26",{"rel":"shortcut icon","href":"/favicon.ico"}],["$","link","27",{"rel":"apple-touch-icon","href":"/favicon.ico"}],["$","meta","28",{"name":"next-size-adjust"}]]
1:null
