2:I[96815,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
3:I[77224,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
4:I[96525,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
5:I[32911,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
6:I[94103,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
7:I[914,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
8:I[85737,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
9:I[66304,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
a:I[13239,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
b:I[84246,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
c:I[29027,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
d:I[97747,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
f:I[91012,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
10:I[13205,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
11:I[14148,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
12:I[10536,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
13:I[94120,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
14:I[12760,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
15:I[92928,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
16:I[30667,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
17:I[95212,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
18:I[58789,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
19:I[51444,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
1a:I[45488,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
1b:I[78074,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
1c:I[66024,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
1d:I[1573,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
1e:I[63615,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
1f:I[61260,["746","static/chunks/395b46ae-c0449b176eeaf484.js","286","static/chunks/286-5f2793dfa337861d.js","856","static/chunks/856-a3b2ca6e6899ec63.js","860","static/chunks/860-1c1930983f10b75c.js","655","static/chunks/655-d1245ae7c9a835d6.js","136","static/chunks/136-4b483a0b4ab922ed.js","78","static/chunks/app/%5B...markdown%5D/page-f1ff262a0c2bd900.js"],""]
20:I[23845,[],""]
22:I[23979,[],""]
23:"$Sreact.suspense"
24:I[78070,["286","static/chunks/286-5f2793dfa337861d.js","827","static/chunks/827-995b437ce3fae0fe.js","185","static/chunks/app/layout-ebf2cec5b513c194.js"],""]
25:I[72990,["286","static/chunks/286-5f2793dfa337861d.js","827","static/chunks/827-995b437ce3fae0fe.js","185","static/chunks/app/layout-ebf2cec5b513c194.js"],""]
26:I[41043,["286","static/chunks/286-5f2793dfa337861d.js","827","static/chunks/827-995b437ce3fae0fe.js","185","static/chunks/app/layout-ebf2cec5b513c194.js"],""]
27:I[64073,["286","static/chunks/286-5f2793dfa337861d.js","827","static/chunks/827-995b437ce3fae0fe.js","185","static/chunks/app/layout-ebf2cec5b513c194.js"],""]
28:I[90838,["286","static/chunks/286-5f2793dfa337861d.js","827","static/chunks/827-995b437ce3fae0fe.js","185","static/chunks/app/layout-ebf2cec5b513c194.js"],""]
e:T5dfb,
# 개요

Jersey 라이브러리를 통해 요청을 받아 응답을 반환하는 컨트롤러를 구성해보자.

Jersey에 대해 자세히 알아보고 싶다면 [이전 글](/2021/10/25/oauth2-java-server-9)을 참고하자.










# 컨트롤러 기본 설정하기

컨트롤러 구현에 앞서 몇 가지 설정을 수행한다.

* Jersey 요청용 URL 지정
* CORS 설정

항목은 위와 같다.





## Jersey 요청용 URL 지정

이전 글에서도 다룬 내용이다. Jersey를 적용했다고 모든 요청을 Jersey가 받는 건 아니고, 직접 <span class="blue-400">Jersey가 요청을 위임받도록 지정</span>해야한다.

임의의 패키지에 클래스를 하나 생성한다. 이름은 상관없다. 이 프로젝트에선 `main.java.global.module` 패키지에 `App.java`로 생성했다.

``` java
package global.module;

import jakarta.ws.rs.ApplicationPath;
import jakarta.ws.rs.core.Application;

/**
 * 애플리케이션 클래스
 *
 * @author RWB
 * @since 2021.09.29 Wed 22:40:20
 */
@ApplicationPath("/api")
public class App extends Application
{
    // api 접두사 요청을 jersey가 담당
}
```

위와 같이 클래스에 추상 클래스 `Application`을 상속하고 `@ApplicationPath`를 통해 원하는 URL의 접두어를 지정한다.

`/api`로 지정했으므로, `{BASE_URL}/api`로 시작하는 모든 요청은 Jersey가 담당할 것이다. 이 패턴에 해당하지 않는 모든 요청은 정상적으로 Servlet이 담당한다.

현재 시연용 프로젝트의 API 서버는 `https://api.itcode.dev/oauth2`이므로, `https://api.itcode.dev/oauth2/api`로 시작하는 모든 요청은 Jersey가 받는다.

URL 설정은 위 코드 하나면 끝난다.





## CORS 설정

시연용 프로젝트의 각 주소는 아래와 같다.

* Frontend - `https://project.itcode.dev/oauth2`
* Backend - `https://api.itcode.dev/oauth2`

보다시피, 요청자/응답자 간의 도메인이 달라서, 그냥 보냈다간 십중팔구 CORS의 늪에 빠지게 된다.

이를 해결하기 위해 <span class="blue-400">서버에 CORS 설정을 지정하여 원하는 도메인에 요청을 보낼 수 있도록 설정</span>한다.

<br />

마찬가지로 임의의 패키지에 클래스를 하나 생성한다. 이름은 상관없다. 이 프로젝트에선 `main.java.global.module` 패키지에 `CorsFilter.java`로 생성했다.


``` java
package global.module;

import jakarta.ws.rs.container.ContainerRequestContext;
import jakarta.ws.rs.container.ContainerResponseContext;
import jakarta.ws.rs.container.ContainerResponseFilter;
import jakarta.ws.rs.ext.Provider;

/**
 * CORS 필터 클래스
 *
 * @author RWB
 * @since 2021.10.02 Sat 15:42:04
 */
@Provider
public class CorsFilter implements ContainerResponseFilter
{
	/**
	 * 필터 메서드
	 *
	 * @param requestContext: [ContainerRequestContext] ContainerRequestContext 객체
	 * @param responseContext: [ContainerResponseContext] ContainerResponseContext 객체
	 */
	@Override
	public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext)
	{
		String origin = requestContext.getHeaderString("origin");
		
		// origin이 유효하고, itcode.dev 계열의 URL일 경우
		if (origin != null && origin.contains("itcode.dev"))
		{
			responseContext.getHeaders().add("Access-Control-Allow-Origin", origin);
			responseContext.getHeaders().add("Access-Control-Allow-Credentials", "true");
			responseContext.getHeaders().add("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE,OPTIONS");
			responseContext.getHeaders().add("Access-Control-Allow-Headers", "Content-Type");
		}
	}
}
```

인터페이스 `ContainerResponseFilter`을 상속하고 `filter` 메소드를 오버라이딩한다. 이 설정은 Jersey가 수행하는 모든 작업에 전역으로 동작한다.

`Origin` 헤더를 검증하여 `Origin`이 `itcode.dev` 도메인을 가질 경우 CORS 설정을 통해 응답을 허용한다.

* `Access-Control-Allow-Origin` - 요청에 사용할 수 있는 도메인
* `Access-Control-Allow-Credentials` - 자격증명이 포함된 요청 허용 여부
* `Access-Control-Allow-Methods` - 요청에 사용할 수 있는 HTTP 메소드
* `Access-Control-Allow-Headers` - 요청에 사용할 수 있는 헤더

로그인, 로그아웃 작업 등에 쿠키를 생성하는 `Set-Cookie` 헤더가 포함되어있는데, 이렇게 서로 다른 도메인에서 쿠키를 사용해야할 경우, 서버에서 `Access-Control-Allow-Credentials`를 `true`로 지정해야하고, 마찬가지로 웹은 요청 시 `credentials`을 `true`로 지정하여 요청해야한다.

> <b class="teal-500">자격 증명 요청은 도메인을 명시해야해!</b>  
> `Access-Control-Allow-Origin` 헤더는 와일트카드 `*`을 지원한다. 헤더를 `*`로 지정할 경우, 모든 도메인에 상관없이 응답을 허용한다. 하지만 `Access-Control-Allow-Credentials`을 `true`로 지정했을 경우, 보안 정책으로 인해 반드시 도메인을 명시해야만 한다.










# controller 구현하기

구현해야할 controller는 총 7개다.

* **LoginAPI** (/api/login)
  * 인증 URL API
  * 정보 제공 동의 갱신 URL API
  * 로그인 API
  * 자동 로그인 API
* **LogoutAPI** (/api/logout)
  * 로그아웃 API
* **RevokeAPI** (/api/revoke)
  * 연동 해제 API
* **UserInfoAPI** (/api/userinfo)
  * 사용자 정보 API

API 역시 공통 로직을 관리하기위해 추상 클래스를 구현하여 모든 컨트롤러가 상속받도록 구성한다.





## 추상 클래스 API 구현하기

모든 컨트롤러가 상속받을 추상 클래스 `API`를 구현한다.

``` java
package global.module;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.UriInfo;

/**
 * API 추상 클래스
 *
 * @author RWB
 * @since 2021.09.29 Wed 22:34:27
 */
abstract public class API
{
	@Context
	protected HttpServletRequest request;
	
	@Context
	protected HttpServletResponse response;
	
	@Context
	protected UriInfo uriInfo;
}
```

프로젝트 특성 상 API가 사용해야할 공통로직은 따로 없으며, Servlet 객체에 효율적으로 접근하기 위해 `@Context` 애노테이션으로 Servlet 객체들을 선언한다.

이를 상속받는 모든 컨트롤러는 Servle 객체에 마음껏 접근할 수 있을 것이다.





## LoginAPI 구현하기

LoginAPI가 담당하는 API는 아래와 같다.

* **LoginAPI** (/api/login)
  * 인증 URL API
  * 정보 제공 동의 갱신 URL API
  * 로그인 API
  * 자동 로그인 API

총 4개의 메서드가 선언되어야한다.

``` java
@Path("/login")
public class LoginAPI extends API
{
	// /api/login
}
```

컨트롤러 객체는 위와 같이 구현된다.



### 플랫폼 인증 URL API

플랫폼 로그인을 수행하기 위한 <span class="blue-400">플랫폼별 인증 URL을 반환</span>하는 API.

플랫폼별로 인증 객체가 다르므로, 플랫폼을 구별할 필요가 있다.

`@PathParam`을 통해 플랫폼을 구분한다.

``` java
@GET
@Path("/{platform}")
public Response authorizationUrlResponse(@PathParam("platform") String platform)
{
	return new AccountGetProcess(request, response).getAuthorizationUrlResponse(platform);
}
```

`GET /api/login/{platform}` 요청은 `authorizationUrlResponse`가 담당할 것이다.

`@PathParam`인 platform이 인수로 할당된다.



#### 요청

``` txt
GET https://api.itcode.dev/oauth2/api/login/{platform}
```

|   구분   | 파라미터 형태 | 데이터 형식 |    내용     |
| :------: | :-----------: | :---------: | :---------: |
| platform |     Path      |  `String`   | 플랫폼 이름 |

플랫폼 이름은 플랫폼의 소문자 표기와 동일하다.

| 플랫폼 |   값   | URL                     |
| :----: | :----: | :---------------------- |
| NAVER  | naver  | GET `/api/login/naver`  |
| Google | google | GET `/api/login/google` |
| KAKAO  | kakao  | GET `/api/login/kakao`  |
| GitHub | github | GET `/api/login/github` |



#### 응답

``` json
{
    "flag": true,
    "title": "success",
    "message": "naver authrorization url response success",
    "body": "https://nid.naver.com/oauth2.0/authorize?response_type=code&client_id=czCaqAOB1aAjNRk6N_Oq&redirect_uri=https%3A%2F%2Fproject.itcode.dev%2Foauth2%2Fcallback%3Fplatform%3Dnaver&state=24ca41d9-f432-4e0d-9b48-e5fd4ba49e6e"
}
```

| 파라미터 | 데이터 형식 |      내용       |
| :------: | :---------: | :-------------: |
|   flag   |  `boolean`  | 응답 정상 여부  |
|  title   |  `String`   |    응답 제목    |
| message  |  `String`   |   응답 메세지   |
|   body   |  `String`   | 플랫폼 인증 URL |

위 요청은 `https://api.itcode.dev/oauth2/api/login/naver` 응답의 예시다.



### 정보 제공 동의 갱신 URL API

<span class="blue-400">정보 제공 동의 갱신을 위한 URL을 반환</span>하는 API.

``` java
@PUT
@Path("/put")
public Response putAuthorizationUrlResponse(@CookieParam("access") String accessCookie)
{
	return new AccountPutProcess(request, response).putUpdateAuthorizationUrl(accessCookie);
}
```

`PUT /api/login/{platform}` 요청은 `putAuthorizationUrlResponse`가 담당할 것이다.

access란 이름을 가진 쿠키가 인수로 할당된다.



#### 요청

``` txt
PUT https://api.itcode.dev/oauth2/api/login/put
Cookie: access={:access};
```

| parameter |  type  |   data   | required | description |
| :-------: | :----: | :------: | :------: | :---------: |
| {:access} | Cookie | `String` |    Y     |  인증 쿠키  |



#### 응답

``` json
{
	"flag": true,
	"title": "success",
	"message": "naver reauthrorization url response success",
	"body": "https://nid.naver.com/oauth2.0/authorize?auth_type=reprompt&state=08199e0e-ef61-444a-8d4f-f3c048b771f0&response_type=code&client_id=czCaqAOB1aAjNRk6N_Oq&redirect_uri=https%3A%2F%2Fproject.itcode.dev%2Foauth2%2Fcallback%3Fplatform%3Dnaver"
}
```

위 응답은 `https://api.itcode.dev/oauth2/api/login/put`의 예시다.

access 쿠키의 인증정보 내부에 플랫폼이 이미 포함되어 있으므로, 별도로 플랫폼을 구분할 필요가 없다.

| parameter |   data    |         description         |
| :-------: | :-------: | :-------------------------: |
|   flag    | `boolean` |          동작 결과          |
|   title   | `String`  |            제목             |
|  message  | `String`  |            내용             |
|   body    | `String`  | 정보 제공 동의 갱신 URL URL |



### 로그인 API

<span class="blue-400">로그인을 수행</span>하는 API.

플랫폼을 구분한다.

``` java
@POST
@Path("/{platform}")
public Response loginResponse(@PathParam("platform") String platform, LoginResponseBean loginResponseBean)
{
	return new AccountPostProcess(request, response).postLoginResponse(platform, loginResponseBean.getCode(), loginResponseBean.getState());
}
```

`POST /api/login/{platform}` 요청은 `loginResponse`가 담당할 것이다.



#### 요청

``` txt
POST https://api.itcode.dev/oauth2/api/login/{:platform}

{
    "code": {:code},
    "state": {:state}
}
```

|  parameter  | type  |   data   | required |     description      |
| :---------: | :---: | :------: | :------: | :------------------: |
| {:platform} | path  | `String` |    Y     | 플랫폼 (소문자 표기) |
|   {:code}   | body  | `String` |    Y     |      접근 코드       |
|  {:state}   | body  | `String` |    Y     |     고유 상태값      |

플랫폼 이름은 플랫폼의 소문자 표기와 동일하다.

| 플랫폼 |   값   | URL                      |
| :----: | :----: | :----------------------- |
| NAVER  | naver  | POST `/api/login/naver`  |
| Google | google | POST `/api/login/google` |
| KAKAO  | kakao  | POST `/api/login/kakao`  |
| GitHub | github | POST `/api/login/github` |



#### 응답

``` txt
Set-Cookie: access={access}
Set-Cookie: refresh={refresh}

{
    "flag": true,
    "title": "success",
    "message": "authorized success",
    "body": null
}
```

| 파라미터 | 데이터 형식 |      내용      |
| :------: | :---------: | :------------: |
|   flag   |  `boolean`  | 응답 정상 여부 |
|  title   |  `String`   |   응답 제목    |
| message  |  `String`   |  응답 메세지   |
|   body   |   `null`    |      null      |

`Set-Cookie` 헤더를 통해 자동으로 인증 정보가 담긴 토큰을 추가한다.



### 자동 로그인 API

기존에 남아있던 인증정보를 활용하여 <span class="blue-400">상호작용 없이 로그인을 자동으로 수행</span>하는 API.

``` java
@POST
@Path("/auto")
public Response autoLoginResponse(@CookieParam("access") String accessCookie, @CookieParam("refresh") String refreshCookie)
{
	return new AccountPostProcess(request, response).postAutoLoginResponse(accessCookie, refreshCookie);
}
```

access 쿠키와 refresh 쿠키를 검증하여 이상이 없을 경우 쿠키 정보 확인 혹은 Access Token 재발급을 통해 로그인을 자동으로 수행한다.

이미 쿠키 내부에 플랫폼 정보가 포함되어 있으므로, 플랫폼 구분은 필요 없다.

`POST /api/login/auto` 요청은 `autoLoginResponse`가 담당할 것이다.

#### 요청

``` txt
POST https://api.itcode.dev/oauth2/api/login/auto
Cookie: access={:access}; refresh={:refresh};
```

| parameter  |  type  |   data   | required |  description  |
| :--------: | :----: | :------: | :------: | :-----------: |
| {:access}  | Cookie | `String` |    N     |   인증 쿠키   |
| {:refresh} | Cookie | `String` |    Y     | 리프레쉬 쿠키 |

#### 응답

``` json
{
	"flag": true,
	"title": "success",
	"message": "auto authorized success",
	"body": null
}
```

``` txt
# Header
Set-Cookie: access={access JWT}
Set-Cookie: refresh={refresh JWT}
```

refresh 쿠키만을 보유하고 있어서 Access Token을 갱신한 경우에만 `Set-Cookie`가 포함된다.

| parameter |   data    | description |
| :-------: | :-------: | :---------: |
|   flag    | `boolean` |  동작 결과  |
|   title   | `String`  |    제목     |
|  message  | `String`  |    내용     |
|   body    |  `null`   |   `null`    |

`Set-Cookie` 헤더를 통해 자동으로 인증 정보가 담긴 토큰을 추가한다.

만약 아직 access 쿠키가 살아있다면, 별도의 쿠키를 생성하지 않아도 되므로 `Set-Cookie` 헤더는 전송되지 않는다.



### 전체 코드

``` java
package oauth.account.controller;

import global.module.API;
import jakarta.ws.rs.CookieParam;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.core.Response;
import oauth.account.bean.LoginResponseBean;
import oauth.account.process.AccountGetProcess;
import oauth.account.process.AccountPostProcess;
import oauth.account.process.AccountPutProcess;

/**
 * 로그인 API 클래스
 *
 * @author RWB
 * @since 2021.09.30 Thu 20:44:43
 */
@Path("/login")
public class LoginAPI extends API
{
	/**
	 * 인증 URL 응답 메서드
	 *
	 * @param platform: [String] 플랫폼
	 *
	 * @return [Response] 응답 객체
	 */
	@GET
	@Path("/{platform}")
	public Response authorizationUrlResponse(@PathParam("platform") String platform)
	{
		return new AccountGetProcess(request, response).getAuthorizationUrlResponse(platform);
	}
	
	/**
	 * 정보 제공 동의 갱신 URL 응답 메서드
	 *
	 * @param accessCookie: [String] 접근 토큰 쿠키
	 *
	 * @return [Response] 응답 객체
	 */
	@PUT
	@Path("/put")
	public Response putAuthorizationUrlResponse(@CookieParam("access") String accessCookie)
	{
		return new AccountPutProcess(request, response).putUpdateAuthorizationUrl(accessCookie);
	}
	
	/**
	 * 로그인 응답 메서드
	 *
	 * @param platform: [String] 플랫폼
	 * @param loginResponseBean: [LoginResponseBean] LoginResponseBean 객체
	 *
	 * @return [Response] 응답 객체
	 */
	@POST
	@Path("/{platform}")
	public Response loginResponse(@PathParam("platform") String platform, LoginResponseBean loginResponseBean)
	{
		return new AccountPostProcess(request, response).postLoginResponse(platform, loginResponseBean.getCode(), loginResponseBean.getState());
	}
	
	/**
	 * 자동 로그인 응답 메서드
	 *
	 * @param accessCookie: [String] 접근 토큰 쿠키
	 * @param refreshCookie: [String] 리프레쉬 토큰 쿠키
	 *
	 * @return [Response] 응답 객체
	 */
	@POST
	@Path("/auto")
	public Response autoLoginResponse(@CookieParam("access") String accessCookie, @CookieParam("refresh") String refreshCookie)
	{
		return new AccountPostProcess(request, response).postAutoLoginResponse(accessCookie, refreshCookie);
	}
}
```





## LogoutAPI 구현하기

LogoutAPI가 담당하는 API는 아래와 같다.

* **LogoutAPI** (/api/logout)
  * 로그아웃 API

총 하나의 메서드가 선언되어야 한다.

``` java
@Path("/logout")
public class LogoutAPI extends API
{
	// /api/logout
}
```

컨트롤러 객체는 위와 같이 구현된다.



### 로그아웃 API

<span class="blue-400">로그아웃을 수행</span>하는 API.

쿠키에 저장된 인증 정보를 삭제한다.

``` java
@POST
@Path("")
public Response logoutResponse()
{
	return new AccountPostProcess(request, response).postLogoutResponse();
}
```

`POST /api/login/auto` 요청은 `autoLoginResponse`가 담당할 것이다.

별도의 인수가 없는데, access, refresh 쿠키 둘 다 삭제할 예정이므로, 해당 쿠키의 존재 유무는 신경쓰지 않는다.



#### 요청

``` txt
POST https://api.itcode.dev/oauth2/api/logout
```


#### 응답

``` json
{
	"flag": true,
	"title": "success",
	"message": "logout success",
	"body": null
}
```

``` txt
# Header
Set-Cookie: access={access JWT}
Set-Cookie: refresh={refresh JWT}
```

| parameter |   data    | description |
| :-------: | :-------: | :---------: |
|   flag    | `boolean` |  동작 결과  |
|   title   | `String`  |    제목     |
|  message  | `String`  |    내용     |
|   body    |  `null`   |   `null`    |

`Max-Age` 0인 쿠키로 만들어 `Set-Cookie`로 덮어씌워 삭제한다.



### 전체 코드

``` java
package oauth.account.controller;

import global.module.API;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;
import oauth.account.process.AccountPostProcess;

/**
 * 로그아웃 API 클래스
 *
 * @author RWB
 * @since 2021.10.04 Mon 21:19:00
 */
@Path("/logout")
public class LogoutAPI extends API
{
	/**
	 * 로그아웃 응답 메서드
	 *
	 * @return [Response] 응답 객체
	 */
	@POST
	@Path("")
	public Response logoutResponse()
	{
		return new AccountPostProcess(request, response).postLogoutResponse();
	}
}
```





## RevokeAPI 구현하기

RevokeAPI가 담당하는 API는 아래와 같다.

* **RevokeAPI** (/api/revoke)
  * 연동 해제 API

총 하나의 메서드가 선언되어야 한다.

``` java
@Path("/revoke")
public class RevokeAPI extends API
{
	// /api/revoke
}
```

컨트롤러 객체는 위와 같이 구분된다.



### 연동 해제 API

<span class="blue-400">플랫폼과의 연동을 완전히 해제</span>하는 API.

``` java
@DELETE
@Path("")
public Response deleteInfoResponse(@CookieParam("access") String accessCookie)
{
	return new AccountDeleteProcess(request, response).deleteInfoResponse(accessCookie);
}
```

`DELETE /api/revoke` 요청은 `deleteInfoResponse`가 담당할 것이다.



#### 요청

``` txt
DELETE https://api.itcode.dev/oauth2/api/revoke
Cookie: access={:access};
```

| parameter |  type  |   data   | required | description |
| :-------: | :----: | :------: | :------: | :---------: |
| {:access} | Cookie | `String` |    Y     |  인증 쿠키  |



#### 응답

``` json
{
	"flag": true,
	"title": "success",
	"message": "logout success",
	"body": null
}
```

``` txt
# Header
Set-Cookie: access={access JWT}
Set-Cookie: refresh={refresh JWT}
```

| parameter |   data    | description |
| :-------: | :-------: | :---------: |
|   flag    | `boolean` |  동작 결과  |
|   title   | `String`  |    제목     |
|  message  | `String`  |    내용     |
|   body    |  `null`   |   `null`    |



### 전체 코드

``` java
package oauth.account.controller;

import global.module.API;
import jakarta.ws.rs.CookieParam;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;
import oauth.account.process.AccountDeleteProcess;

/**
 * 연동 해제 API 클래스
 *
 * @author RWB
 * @since 2021.10.18 Mon 01:19:30
 */
@Path("/revoke")
public class RevokeAPI extends API
{
	/**
	 * 연동 해제 URL 응답 메서드
	 *
	 * @param accessCookie: [String] 접근 토큰 쿠키
	 *
	 * @return [Response] 응답 객체
	 */
	@DELETE
	@Path("")
	public Response deleteInfoResponse(@CookieParam("access") String accessCookie)
	{
		return new AccountDeleteProcess(request, response).deleteInfoResponse(accessCookie);
	}
}
```





## UserInfoAPI 구현하기

UserInfoAPI가 담당하는 API는 아래와 같다.

* **UserInfoAPI** (/api/userinfo)
  * 사용자 정보 API

총 하나의 메서드가 선언되어야 한다.

``` java
@Path("/userinfo")
public class UserInfoAPI extends API
{
	// /api/userinfo
}
```

컨트롤러 객체는 위와 같이 구현된다.



### 사용자 정보 API

Access Token을 토대로 <span class="blue-400">사용자 정보를 반환</span>하는 API.

``` java
@GET
@Path("")
public Response userInfoResponse(@CookieParam("access") String accessCookie)
{
	return new AccountGetProcess(request, response).getUserInfoResponse(accessCookie);
}
```

`GET /api/userinfo` 요청은 `userInfoResponse`가 담당할 것이다.

플랫폼에서 응답한 내용을 그대로 반환하지는 않고, 플랫폼별 응답 스키마에 따라 적절히 가공하여 정형화된 응답을 제공한다.



#### 요청

``` txt
GET https://api.itcode.dev/oauth2/api/userinfo
Cookie: access={:access};
```

| parameter |  type  |   data   | required | description |
| :-------: | :----: | :------: | :------: | :---------: |
| {:access} | Cookie | `String` |    Y     |  인증 쿠키  |



#### 응답

``` json
{
	"flag": true,
	"title": "success",
	"message": "user info response success",
	"body": {
		"email": "example@gmail.com",
		"name": "name",
		"profile": "https://phinf.pstatic.net/contact/PROFILE.png",
		"platform": "naver"
	}
}
```

위 응답은 네이버 사용자 정보 응답의 예시다.

| parameter |   data    |   description    |
| :-------: | :-------: | :--------------: |
|   flag    | `boolean` |    동작 결과     |
|   title   | `String`  |       제목       |
|  message  | `String`  |       내용       |
|   body    | `Object`  | 사용자 정보 JSON |
|   email   | `String`  |      이메일      |
|   name    | `String`  |       이름       |
|  profile  | `String`  | 프로필 사진 URL  |
| platform  | `String`  |      플랫폼      |



### 전체 코드

``` java
package oauth.account.controller;

import global.module.API;
import jakarta.ws.rs.CookieParam;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;
import oauth.account.process.AccountGetProcess;

/**
 * 사용자 정보 API 클래스
 *
 * @author RWB
 * @since 2021.10.02 Sat 00:29:46
 */
@Path("/userinfo")
public class UserInfoAPI extends API
{
	/**
	 * 사용자 정보 응답 메서드
	 *
	 * @param accessCookie: [String] 접근 토큰 쿠키
	 *
	 * @return [Response] 응답 객체
	 */
	@GET
	@Path("")
	public Response userInfoResponse(@CookieParam("access") String accessCookie)
	{
		return new AccountGetProcess(request, response).getUserInfoResponse(accessCookie);
	}
}
```










# 정리

이 장을 끝으로 인증 서버의 주요 요소인 controller - process - module의 모든 구현을 완료했다.

인증 서버의 구현이 완료되었으므로, 다음 장에선 프로젝트 마무리를 위한 심사 과정에 대해 다룬다.
21:["markdown","posts/2021/10/25/oauth2-java-server-10","c"]
0:["6w6mROA95tqdZzgV9nNFq",[[["",{"children":[["markdown","posts/2021/10/25/oauth2-java-server-10","c"],{"children":["__PAGE__?{\"markdown\":[\"posts\",\"2021\",\"10\",\"25\",\"oauth2-java-server-10\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["markdown","posts/2021/10/25/oauth2-java-server-10","c"],{"children":["__PAGE__",{},["$L1",["$","$L2",null,{"component":"main","data-component":"PageTemplate","children":[["$","$L3",null,{"title":"𝝅번째 알파카의 개발 낙서장","version":"5.0.0-beta10"}],[["$","$L4",null,{"src":"https://user-images.githubusercontent.com/50317129/137171016-99af1db1-a346-4def-9329-6072b927bdc0.png","children":["$","$L2",null,{"className":"MarkdownScreenerTemplate_root__dpmgV","data-component":"BaseScreenerTemplate","height":"100%","position":"relative","width":"100%","children":[["$","$L5",null,{"alignItems":"center","height":"100%","justifyContent":"center","padding":2,"position":"relative","width":"100%","children":[["$","$L5",null,{"direction":"row","children":[["$","$L2",null,{"bgcolor":"dodgerblue","boxShadow":"0px 0px 5px black","height":"100%","width":5}],["$","$L5",null,{"color":"white","paddingLeft":2,"paddingRight":2,"children":[["$","$L6",null,{"className":"MarkdownScreenerTemplate_text__5_mNa","fontWeight":"bold","variant":"h5","children":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 10. 컨트롤러 구현하기"}],["$","$L6",null,{"className":"MarkdownScreenerTemplate_text__5_mNa","children":"⏰ 2021-10-24 (일) 17:24:17"}]]}]]}],["$","$L7",null,{"bottom":"10%","direction":"row","gap":4,"position":"absolute","shareData":{"text":"Jersey 라이브러리를 통해 요청을 받아 응답을 반환하는 컨트롤러를 구성해보자. Jersey에 대해 자세히 알아보고 싶다면 이전 글을 참고하자.","title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 10. 컨트롤러 구현하기","url":"https://blog.itcode.dev/posts/2021/10/25/oauth2-java-server-10"}}]]}],["$","$L2",null,{"bottom":0,"left":0,"position":"absolute","width":"100%","children":["$","svg",null,{"className":"Wave_waves___Plcn","data-component":"Wave","height":80,"preserveAspectRatio":"none","shapeRendering":"auto","viewBox":"0 24 150 28","width":"100%","xmlns":"http://www.w3.org/2000/svg","children":[["$","defs",null,{"children":["$","path",null,{"d":"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z","id":"gentle-wave"}]}],["$","g",null,{"className":"Wave_parallax__AGFbj","children":[["$","use",null,{"fill":"$undefined","opacity":"0.7","x":"48","xlinkHref":"#gentle-wave","y":"0"}],["$","use",null,{"fill":"$undefined","opacity":"0.5","x":"48","xlinkHref":"#gentle-wave","y":"3"}],["$","use",null,{"fill":"$undefined","opacity":"0.3","x":"48","xlinkHref":"#gentle-wave","y":"5"}],["$","use",null,{"fill":"$undefined","x":"48","xlinkHref":"#gentle-wave","y":"7"}]]}]]}]}]]}]}],[["$","$L8",null,{"color":"dodgerblue"}],["$","$L9",null,{"children":["$","$L5",null,{"gap":4,"paddingTop":10,"children":[["$","$La",null,{"current":"/posts/2021/10/25/oauth2-java-server-10","groups":[{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 9. Jersey로 RESTful API 서비스 제공하기","url":"/posts/2021/10/25/oauth2-java-server-9"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 12. 마치며","url":"/posts/2021/10/25/oauth2-java-server-12"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 11. OAuth 서비스 심사 신청하기","url":"/posts/2021/10/25/oauth2-java-server-11"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 10. 컨트롤러 구현하기","url":"/posts/2021/10/25/oauth2-java-server-10"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 8. 프로세스 구현하기","url":"/posts/2021/10/24/oauth2-java-server-8"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 7. GitHub OAuth 서비스 신청 및 모듈 구현하기","url":"/posts/2021/10/23/oauth2-java-server-7"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 6. KAKAO OAuth 서비스 신청 및 모듈 구현하기","url":"/posts/2021/10/23/oauth2-java-server-6"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 5. Google OAuth 서비스 신청 및 모듈 구현하기","url":"/posts/2021/10/23/oauth2-java-server-5"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 4. NAVER OAuth 서비스 신청 및 모듈 구현하기","url":"/posts/2021/10/22/oauth2-java-server-4"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 3. scribeJAVA로 OAuth2.0 인증 모듈 구현하기","url":"/posts/2021/10/20/oauth2-java-server-3"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 2. 인증서버 설계하기","url":"/posts/2021/10/14/oauth2-java-server-2"},{"title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 1. OAuth2.0이란?","url":"/posts/2021/10/14/oauth2-java-server-1"}],"thumbnail":"https://user-images.githubusercontent.com/50317129/137171016-99af1db1-a346-4def-9329-6072b927bdc0.png","title":"OAuth2.0 인증서버 구축기"}],["$","$Lb",null,{"list":[{"idx":"1.","level":1,"text":"개요"},{"idx":"2.","level":1,"text":"컨트롤러 기본 설정하기"},{"idx":"2.1.","level":2,"text":"Jersey 요청용 URL 지정"},{"idx":"2.2.","level":2,"text":"CORS 설정"},{"idx":"3.","level":1,"text":"controller 구현하기"},{"idx":"3.1.","level":2,"text":"추상 클래스 API 구현하기"},{"idx":"3.2.","level":2,"text":"LoginAPI 구현하기"},{"idx":"3.2.1.","level":3,"text":"플랫폼 인증 URL API"},{"idx":"3.2.1.1.","level":4,"text":"요청"},{"idx":"3.2.1.2.","level":4,"text":"응답"},{"idx":"3.2.2.","level":3,"text":"정보 제공 동의 갱신 URL API"},{"idx":"3.2.2.1.","level":4,"text":"요청"},{"idx":"3.2.2.2.","level":4,"text":"응답"},{"idx":"3.2.3.","level":3,"text":"로그인 API"},{"idx":"3.2.3.1.","level":4,"text":"요청"},{"idx":"3.2.3.2.","level":4,"text":"응답"},{"idx":"3.2.4.","level":3,"text":"자동 로그인 API"},{"idx":"3.2.4.1.","level":4,"text":"요청"},{"idx":"3.2.4.2.","level":4,"text":"응답"},{"idx":"3.2.5.","level":3,"text":"전체 코드"},{"idx":"3.3.","level":2,"text":"LogoutAPI 구현하기"},{"idx":"3.3.1.","level":3,"text":"로그아웃 API"},{"idx":"3.3.1.1.","level":4,"text":"요청"},{"idx":"3.3.1.2.","level":4,"text":"응답"},{"idx":"3.3.2.","level":3,"text":"전체 코드"},{"idx":"3.4.","level":2,"text":"RevokeAPI 구현하기"},{"idx":"3.4.1.","level":3,"text":"연동 해제 API"},{"idx":"3.4.1.1.","level":4,"text":"요청"},{"idx":"3.4.1.2.","level":4,"text":"응답"},{"idx":"3.4.2.","level":3,"text":"전체 코드"},{"idx":"3.5.","level":2,"text":"UserInfoAPI 구현하기"},{"idx":"3.5.1.","level":3,"text":"사용자 정보 API"},{"idx":"3.5.1.1.","level":4,"text":"요청"},{"idx":"3.5.1.2.","level":4,"text":"응답"},{"idx":"3.5.2.","level":3,"text":"전체 코드"},{"idx":"4.","level":1,"text":"정리"}]}],["$","$Lc",null,{"variant":"fullWidth"}],["$","$Ld",null,{"children":"$e"}],["$","$Lc",null,{"variant":"fullWidth"}],["$","$Lf",null,{"tags":["JAVA","OAuth2.0","Jersey"],"type":"posts"}],["$","$L5",null,{"alignItems":"center","data-component":"LabNameTag","width":"100%","children":["$","$L2",null,{"boxShadow":"0px 0px 10px #00000050","maxWidth":250,"width":"100%","children":["$","$L10",null,{"href":"https://itcode.dev","target":"_blank","children":["$","$L11",null,{"scale":1.1,"children":[["$","$L2",null,{"borderRadius":2,"className":"NameTag_tag__DZCHu","data-component":"NameTag","padding":1,"sx":{"background":"linear-gradient(45deg, #833AB4, #FD2B20, #fCAA43)"},"children":["$","$L5",null,{"borderRadius":2,"color":"white","gap":3,"padding":2,"children":[["$","$L2",null,{"className":"Tile_tile__czq9P","data-component":"Tile","overflow":"hidden","position":"relative","children":["$","$L2",null,{"height":"100%","left":0,"position":"absolute","top":0,"width":"100%","children":["$","$L12",null,{"src":"https://itcode.dev/logo.png"}]}]}],["$","$L2",null,{"borderTop":"1px solid white","width":"100%"}],["$","$L5",null,{"gap":1,"children":[["$","$L6",null,{"color":"inherit","fontWeight":"bold","children":"𝝅번째 알파카의 개발 연구소"}],["$","$L2",null,{"color":"inherit","width":"100%","children":["$","$L6",null,{"variant":"caption","children":"이 카드를 클릭하고 𝝅번째 알파카의 개발 연구소의 다양한 프로젝트를 확인해보세요!"}]}]]}]]}]}],["$","$L13",null,{}]]}]}]}]}],["$","$L14",null,{"next":{"thumbnail":"https://user-images.githubusercontent.com/50317129/137171016-99af1db1-a346-4def-9329-6072b927bdc0.png","title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 11. OAuth 서비스 심사 신청하기","url":"/posts/2021/10/25/oauth2-java-server-11"},"prev":{"thumbnail":"https://user-images.githubusercontent.com/50317129/137171016-99af1db1-a346-4def-9329-6072b927bdc0.png","title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 8. 프로세스 구현하기","url":"/posts/2021/10/24/oauth2-java-server-8"},"type":"posts"}],["$","$L5",null,{"alignItems":"center","justifyContent":"center","width":"100%","children":["$","$L11",null,{"children":["$","$L5",null,{"alignItems":"center","bgcolor":"lemonchiffon","borderRadius":1,"boxShadow":"0px 0px 10px #00000030","component":"div","data-component":"ThanksCard","direction":"row","gap":2,"padding":2,"children":[["$","$L15",null,{"iconName":"love-message-burst","width":100}],["$","$L5",null,{"children":[["$","$L6",null,{"color":"black","variant":"h6","gutterBottom":true,"children":"읽어주셔서 고마워요!"}],["$","$L6",null,{"color":"black","children":["도움이 되셨다면, ",["$","$L6",null,{"color":"hotpink","component":"span","fontWeight":"bold","children":"공감"}],"이나 ",["$","$L6",null,{"color":"dodgerblue","component":"span","fontWeight":"bold","children":"댓글"}],"을 달아주시는 건 어떤가요?"]}],["$","$L6",null,{"color":"black","children":"블로그 운영에 큰 힘이 됩니다."}]]}]]}]}]}],["$","$L7",null,{"direction":"row","gap":4,"iconColor":"inherit","justifyContent":"center","shareData":{"text":"Jersey 라이브러리를 통해 요청을 받아 응답을 반환하는 컨트롤러를 구성해보자. Jersey에 대해 자세히 알아보고 싶다면 이전 글을 참고하자.","title":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 10. 컨트롤러 구현하기","url":"/posts/2021/10/25/oauth2-java-server-10"}}],["$","$L16",null,{}],["$","$L5",null,{"alignItems":"center","children":["$","img",null,{"alt":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev%2Fposts%2F2021%2F10%2F25%2Foauth2-java-server-10","data-component":"Hits","src":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev%2Fposts%2F2021%2F10%2F25%2Foauth2-java-server-10"}]}]]}]}]]],["$","$L2",null,{"component":"footer","data-component":"Footer","marginTop":10,"children":[["$","$L2",null,{"position":"relative","children":[["$","$L17",null,{}],["$","$L2",null,{"bottom":-20,"className":"Footer_ship__VuMth","left":"10%","position":"absolute","children":["$","img",null,{"alt":"icon","height":100,"src":"https://cdn-icons-png.freepik.com/512/6643/6643562.png","width":100}]}],["$","$L2",null,{"bottom":0,"position":"absolute","width":"100%","children":["$","svg",null,{"className":"Wave_waves___Plcn","data-component":"Wave","height":40,"preserveAspectRatio":"none","shapeRendering":"auto","viewBox":"0 24 150 28","width":"100%","xmlns":"http://www.w3.org/2000/svg","children":[["$","defs",null,{"children":["$","path",null,{"d":"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z","id":"gentle-wave"}]}],["$","g",null,{"className":"Wave_parallax__AGFbj","children":[["$","use",null,{"fill":"#6fb1fc","opacity":"0.7","x":"48","xlinkHref":"#gentle-wave","y":"0"}],["$","use",null,{"fill":"#6fb1fc","opacity":"0.5","x":"48","xlinkHref":"#gentle-wave","y":"3"}],["$","use",null,{"fill":"#6fb1fc","opacity":"0.3","x":"48","xlinkHref":"#gentle-wave","y":"5"}],["$","use",null,{"fill":"#6fb1fc","x":"48","xlinkHref":"#gentle-wave","y":"7"}]]}]]}]}]]}],["$","$L2",null,{"children":["$","$L5",null,{"alignItems":"center","className":"FooterTemplate_footer__97G2c","color":"white","data-component":"FooterTemplate","gap":4,"padding":4,"paddingBottom":8,"paddingTop":8,"children":[["$","$L5",null,{"alignItems":"center","color":"white","children":[["$","$L6",null,{"className":"FooterTemplate_title__Samo8","fontWeight":"bold","variant":"h6","children":"𝝅번째 알파카의 개발 낙서장"}],["$","$L6",null,{"variant":"caption","children":"5.0.0-beta10"}]]}],["$","$L2",null,{"display":"grid","gap":2,"gridTemplateColumns":"1fr 1fr 1fr","children":[["$","$L10",null,{"data-component":"FooterLinkButton","href":"https://itcode.dev","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","img",null,{"alt":"itcode.dev","height":"100%","src":"https://itcode.dev/logo-transparent.png","width":"100%"}]}]}]}],["$","$L10",null,{"data-component":"FooterLinkButton","href":"https://github.com/RWB0104","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L19",null,{}]}]}]}],["$","$L10",null,{"data-component":"FooterLinkButton","href":"mailto:psj2716@mensakorea.org","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1a",null,{}]}]}]}],["$","$L10",null,{"data-component":"FooterLinkButton","href":"https://www.linkedin.com/in/itcode","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1b",null,{}]}]}]}],["$","$L10",null,{"data-component":"FooterLinkButton","href":"/sitemap.xml","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1c",null,{}]}]}]}],["$","$L10",null,{"data-component":"FooterLinkButton","href":"/rss.xml","target":"_blank","children":["$","$L18",null,{"className":"SymbolicButton_button__Yg0O3","data-component":"SymbolicButton","children":["$","$L5",null,{"alignItems":"center","bgcolor":"$undefined","border":"1px solid","borderColor":"white","borderRadius":"50%","boxShadow":"0px 0px 5px #00000050","height":40,"justifyContent":"center","padding":0.5,"width":40,"children":["$","$L1d",null,{}]}]}]}]]}],["$","$L5",null,{"alignItems":"center","color":"white","children":[["$","$L5",null,{"alignItems":"center","direction":"row","gap":0.5,"children":[["$","$L1e",null,{"fontSize":"inherit","htmlColor":"darkblue"}],["$","$L6",null,{"variant":"caption","children":"Developed by RWB since 2021.05"}]]}],["$","$L5",null,{"alignItems":"center","direction":"row","gap":0.5,"children":[["$","$L1f",null,{"fontSize":"inherit","htmlColor":"crimson"}],["$","$L6",null,{"variant":"caption","children":"5th upgraded at 2024.05"}]]}]]}],["$","img",null,{"alt":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev","data-component":"Hits","src":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23484848&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23242424&url=https%3A%2F%2Fblog.itcode.dev"}]]}]}]]}]]}],null]]},["$","$L20",null,{"parallelRouterKey":"children","segmentPath":["children","$21","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L22",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ff5a198c4b1dc826.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":["$","meta",null,{"content":"ca-pub-5522045122225064","name":"google-adsense-account"}]}],["$","body",null,{"children":["$","$23",null,{"children":["$","$L24",null,{"gaKey":"G-7QYWYNZ90R","children":["$","$L25",null,{"children":["$","$L26",null,{"children":[["$","$L20",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L22",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","$L27",null,{}],["$","$L28",null,{}]]}]}]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a3507890a8a83f16.css","precedence":"next","crossOrigin":""}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/6961771bdd90d9c6.css","precedence":"next","crossOrigin":""}]],"$L29"]]]]
29:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 10. 컨트롤러 구현하기 - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","3",{"name":"description","content":"Jersey 라이브러리를 통해 요청을 받아 응답을 반환하는 컨트롤러를 구성해보자. Jersey에 대해 자세히 알아보고 싶다면 이전 글을 참고하자."}],["$","meta","4",{"name":"application-name","content":"𝝅번째 알파카의 개발 낙서장"}],["$","link","5",{"rel":"author","href":"https://github.com/RWB0104"}],["$","meta","6",{"name":"author","content":"Kapoo"}],["$","link","7",{"rel":"author","href":"https://www.linkedin.com/in/itcode"}],["$","meta","8",{"name":"author","content":"RWB"}],["$","link","9",{"rel":"manifest","href":"/manifest.webmanifest"}],["$","meta","10",{"name":"generator","content":"Next.js"}],["$","meta","11",{"name":"keywords","content":"JAVA,OAuth2.0,Jersey"}],["$","meta","12",{"name":"creator","content":"RWB"}],["$","meta","13",{"name":"publisher","content":"GitHub Pages"}],["$","meta","14",{"property":"og:title","content":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 10. 컨트롤러 구현하기 - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","15",{"property":"og:description","content":"Jersey 라이브러리를 통해 요청을 받아 응답을 반환하는 컨트롤러를 구성해보자. Jersey에 대해 자세히 알아보고 싶다면 이전 글을 참고하자."}],["$","meta","16",{"property":"og:url","content":"https://blog.itcode.dev/posts/2021/10/25/oauth2-java-server-10"}],["$","meta","17",{"property":"og:site_name","content":"𝝅번째 알파카의 개발 낙서장"}],["$","meta","18",{"property":"og:locale","content":"ko-KR"}],["$","meta","19",{"property":"og:image","content":"https://user-images.githubusercontent.com/50317129/137171016-99af1db1-a346-4def-9329-6072b927bdc0.png"}],["$","meta","20",{"property":"og:type","content":"website"}],["$","meta","21",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","22",{"name":"twitter:title","content":"[OAuth2.0] ScribeJAVA로 OAuth2.0 인증서버 구축하기 - 10. 컨트롤러 구현하기 - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","23",{"name":"twitter:description","content":"Jersey 라이브러리를 통해 요청을 받아 응답을 반환하는 컨트롤러를 구성해보자. Jersey에 대해 자세히 알아보고 싶다면 이전 글을 참고하자."}],["$","meta","24",{"name":"twitter:image","content":"https://user-images.githubusercontent.com/50317129/137171016-99af1db1-a346-4def-9329-6072b927bdc0.png"}],["$","link","25",{"rel":"icon","href":"/favicon.ico"}],["$","link","26",{"rel":"shortcut icon","href":"/favicon.ico"}],["$","link","27",{"rel":"apple-touch-icon","href":"/favicon.ico"}],["$","meta","28",{"name":"next-size-adjust"}]]
1:null
