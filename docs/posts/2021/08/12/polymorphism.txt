1:HL["/_next/static/media/17d789ad52fa3db3-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
2:HL["/_next/static/media/53595b3b2a2bc7fe-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
3:HL["/_next/static/media/6e5e69ce8a001790-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
4:HL["/_next/static/css/7e72925424d61cb2.css","style",{"crossOrigin":""}]
5:HL["/_next/static/css/f661f8399e37b45e.css","style",{"crossOrigin":""}]
6:HL["/_next/static/css/5bd1cfb45e9495b4.css","style",{"crossOrigin":""}]
0:["ohLfXJiVJiSguL2CG6Bpu",[[["",{"children":[["markdown","posts/2021/08/12/polymorphism","c"],{"children":["__PAGE__?{\"markdown\":[\"posts\",\"2021\",\"08\",\"12\",\"polymorphism\"]}",{}]}]},"$undefined","$undefined",true],"$L7",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7e72925424d61cb2.css","precedence":"next","crossOrigin":""}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/f661f8399e37b45e.css","precedence":"next","crossOrigin":""}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/5bd1cfb45e9495b4.css","precedence":"next","crossOrigin":""}]],"$L8"]]]]
9:HL["/_next/static/css/86391cacb09421ad.css","style",{"crossOrigin":""}]
a:I[46544,["912","static/chunks/912-79acab5e8493ca50.js","14","static/chunks/14-2df9062aa7ee4596.js","690","static/chunks/690-8578563e9852d8ce.js","4","static/chunks/4-ce0deb4c1b4e499e.js","185","static/chunks/app/layout-21fc97f2746b88f3.js"],""]
b:I[39587,["912","static/chunks/912-79acab5e8493ca50.js","14","static/chunks/14-2df9062aa7ee4596.js","690","static/chunks/690-8578563e9852d8ce.js","4","static/chunks/4-ce0deb4c1b4e499e.js","185","static/chunks/app/layout-21fc97f2746b88f3.js"],""]
c:I[37151,["912","static/chunks/912-79acab5e8493ca50.js","14","static/chunks/14-2df9062aa7ee4596.js","690","static/chunks/690-8578563e9852d8ce.js","4","static/chunks/4-ce0deb4c1b4e499e.js","185","static/chunks/app/layout-21fc97f2746b88f3.js"],""]
d:I[38310,[],""]
e:I[7717,[],""]
f:I[69229,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
10:I[48602,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
11:I[97750,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
12:I[26360,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","288","static/chunks/288-dd82034089bf753f.js","602","static/chunks/602-c635d1995b986cae.js","160","static/chunks/app/not-found-9607d7058a6a4733.js"],""]
13:I[17318,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","288","static/chunks/288-dd82034089bf753f.js","602","static/chunks/602-c635d1995b986cae.js","160","static/chunks/app/not-found-9607d7058a6a4733.js"],""]
15:I[42815,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
16:I[68310,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
17:I[47921,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
18:I[66521,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
19:I[88634,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
1a:I[95879,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
1b:I[90992,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
1c:I[4393,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
1d:I[48186,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
1e:I[78592,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
1f:I[73961,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
2a:I[26102,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
2b:I[70839,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
2c:I[1739,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
2d:I[95990,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
2e:I[36712,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
35:I[9667,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
36:I[98278,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
37:I[31594,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
38:I[79705,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
39:I[13709,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","180","static/chunks/180-ac76b8706cc15499.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","121","static/chunks/121-798805bb6a2c84a6.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-a0cad4b8844d0c50.js","78","static/chunks/app/%5B...markdown%5D/page-f0506152c7e37d2e.js"],""]
21:{}
25:{"line":9,"column":31,"offset":365}
26:{"line":9,"column":62,"offset":396}
24:{"start":"$25","end":"$26"}
23:{"type":"text","value":"public void run(String param)","position":"$24"}
22:["$23"]
28:{"line":9,"column":31,"offset":365}
29:{"line":9,"column":62,"offset":396}
27:{"start":"$28","end":"$29"}
20:{"type":"element","tagName":"code","properties":"$21","children":"$22","position":"$27"}
30:{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628786268000,"excerpt":"올바른 객체지향 설계를 위해 수립한 원칙이 있으며, 이 다섯 가지 원칙을 통틀어 객체지향 5원칙(SOLID)이라 명명한다. 필수로 적용하지는 않지만, 적어도 이 규칙을 준수하면 준수할 수록 올바르게 설계된 객체지향이라 할 수 있다. 이 다섯가지 원칙은 아래와 같다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 단일 책임 원칙 SRP(Single Responsibility Principle)","type":"posts"}
31:["2021","08","13","single-responsibility-principle"]
2f:{"frontmatter":"$30","names":"$31","url":"/posts/2021/08/13/single-responsibility-principle"}
33:{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628681553000,"excerpt":"나른한 주말, 느긋하게 영화를 보고 있는 A씨. 영화에선 천대받으며 살던 주인공 소녀가 어느날 누군가로부터 거액의 유산을 받았다. 알고보니 그는 어렸을 적 실종된 재벌집 가문의 손녀딸이였던 것! 이후 그녀는 받은 유산을 통해 고마웠던 주변인에게 은혜를 갚고, 무시하던 이들에게 통쾌한 복수를 돌려준다는 내용이였다. 나름 통쾌했던 A씨지만, 어차피 현실에선 일어날 수 없는 일이라는 걸 이내 떠올린 A씨. 우리는 이걸 상속이라 부른다. 이처럼 상속이라는 개념은 영화나 드라마와 같은 창작물에서나 볼 수 있었다. 사전에서나 찾아볼 수 있었던 허구의 개념인 셈이다.","group":"객체지향","title":"[OOP] 객체지향의 특징 - 상속(Inheritance)","type":"posts"}
34:["2021","08","11","inheritance"]
32:{"frontmatter":"$33","names":"$34","url":"/posts/2021/08/11/inheritance"}
7:[null,["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":["$","script",null,{"crossOrigin":"anonymous","src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-5522045122225064","async":true}]}],["$","body",null,{"children":["$","$La",null,{"children":["$","$Lb",null,{"children":["$","$Lc",null,{"children":["$","$Ld",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Le",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$Lf",null,{"alignItems":"center","data-component":"NotFoundTemplate","height":"100vh","justifyContent":"center","padding":2,"spacing":2,"width":"100%","children":[["$","$L10",null,{"iconName":"notFound","maxWidth":400,"width":"100%"}],["$","$L11",null,{"href":"/","children":["$","$L12",null,{"color":"inherit","size":"large","startIcon":["$","$L13",null,{}],"variant":"outlined","children":"이 방엔 아무것도 없어보인다."}]}]]}],"notFoundStyles":[],"childProp":{"current":["$","$Ld",null,{"parallelRouterKey":"children","segmentPath":["children",["markdown","posts/2021/08/12/polymorphism","c"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Le",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L14",["$","$L15",null,{"data-component":"PageTemplate","children":[["$","$L16",null,{}],["$","$L15",null,{"component":"main","children":[["$","$L17",null,{"type":"posts"}],["$","$Lf",null,{"alignItems":"center","data-component":"ViewTemplate","spacing":10,"children":[["$","$L18",null,{"cover":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","children":["$","$Lf",null,{"alignItems":"center","data-component":"ScreenerBox","height":"100%","justifyContent":"center","padding":4,"position":"relative","width":"100%","children":[["$","$Lf",null,{"direction":"row","spacing":3,"children":[["$","$L15",null,{"bgcolor":"dodgerblue","boxShadow":"5px 5px 5px black","width":5}],["$","$Lf",null,{"children":[["$","$L19",null,{"className":"ScreenerBox_text__EQeKY","color":"white","fontWeight":"bold","variant":"h4","children":"[OOP] 객체지향의 특징 - 다형성(Polymorphism)"}],["$","$L19",null,{"className":"ScreenerBox_text__EQeKY","color":"dodgerblue","variant":"h6","children":"게시글"}],["$","$L19",null,{"className":"ScreenerBox_text__EQeKY","color":"white","variant":"h6","children":"⏰ 2021-08-11 15:32:42"}]]}]]}],["$","$Lf",null,{"alignItems":"center","bottom":50,"position":"absolute","spacing":2,"children":[["$","$Lf",null,{"border":"5px solid white","borderRadius":100,"height":50,"padding":1,"position":"relative","width":31,"children":["$","$L15",null,{"bgcolor":"white","borderRadius":100,"className":"ScreenerBox_icon__Qvdqx","height":10,"position":"absolute","width":5}]}],["$","$L19",null,{"color":"white","children":"D O W N"}]]}]]}]}],["$","$L1a",null,{"data-component":"ViewGroupTemplate","children":["$","$L1b",null,{"frontmatter":{"title":"[OOP] 객체지향의 특징 - 다형성(Polymorphism)","excerpt":"객체지향 언어는 동일한 이름을 가진 메소드를 허용하지 않는다. 예를 들어, \"먹는다\"는 동작이 구현된 메소드가 있다고 가정하자. 먹는다는 동일한 동작이 구태여 두 개나 구현될 필요는 없다. 이러한 관점에서 본다면 메소드의 고유 아이덴티티라고도 불릴 수 있는 메소드명의 유니크화는 어쩌면 당연하다. 하지만 조금 생각해보면 좀 이상하다. JAVA는 타입에 죽고 타입에 산다. JavaScript와 달리 파라미터에 아무 타입이나 넣을 수 없기 때문에, 정해진 타입 이외의 무언가를 넣으면 컴파일 단계에서 가차없이 컷한다.","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628695962000,"type":"posts","category":"CS","tag":["CS","객체지향","다형성"],"group":"객체지향","comment":true,"publish":true},"group":[{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1629137195000,"excerpt":"의존성 역전 원칙이란 객체는 저수준 모듈보다 고수준 모듈에 의존해야한다는 원칙이다. 말이 좀 어렵다. 고수준 모듈은 뭐고, 저수준 모듈은 또 뭐란 말인가? 고/저수준 모델의 정의는 위와 같다. 위 정의를 의존성 역전 원칙에 대입하면, 객체는 객체보다 인터페이스에 의존해야한다로 치환할 수 있다. 즉, 가급적 객체의 상속은 인터페이스를 통해 이루어져야 한다는 의미로 해석할 수 있다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 의존성 역전 원칙 DIP (Dependency Inversion Principle)","type":"posts"},"names":["2021","08","17","dependency-inversion-principle"],"url":"/posts/2021/08/17/dependency-inversion-principle"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1629109497000,"excerpt":"인터페이스 분리 원칙이란 객체는 자신이 호출하지 않는 메소드에 의존하지 않아야한다는 원칙이다. 구현할 객체에게 무의미한 메소드의 구현을 방지하기 위해 반드시 필요한 메소드만을 상속/구현하도록 권고한다. 만약 상속할 객체의 규모가 너무 크다면, 해당 객체의 메소드를 작은 인터페이스로 나누는 것이 좋다. 위 그림은 규모가 너무 큰 객체를 상속했을 때 발생하는 문제와, 이를 인터페이스로 분리하여 해결하는 방법을 도식한 것이다. 왼쪽과 오른쪽 객체가 가운데 객체를 각각 상속할 경우, 왼쪽 객체는 필요한 메소드가 모두 구현되기 때문에 아무런 문제가 없다. 그러나 오른쪽 객체의 경우, Method1을 제외한 나머지 메소드는 필요가 없다. 하지만 이를 상속했기 때문에, 좋든 싫든 해당 메소드를 가지고 있거나, 최악의 경우 필요 없는 메소드를 구현까지 해야만한다. 하지만 상속 대상인 객체의 메소드를 각 동작별로 구분해 인터페이스를 만들어보자. 각 객체가 필요한 인터페이스만을 상속하여 구현하면 되므로 각자가 필요한 메소드만을 가지게 된다. 이 것이 인터페이스 분리 원칙이 지향하는 바다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 인터페이스 분리 원칙 ISP (Interface Segregation Principle)","type":"posts"},"names":["2021","08","16","interface-segregation-principle"],"url":"/posts/2021/08/16/interface-segregation-principle"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1629002531000,"excerpt":"리스코프 치환 원칙은 부모 객체와 이를 상속한 자식 객체가 있을 때 부모 객체를 호출하는 동작에서 자식 객체가 부모 객체를 완전히 대체할 수 있다는 원칙이다. 객체지향 언어에선 객체의 상속이 일어난다. 이 과정에서 부모/자식 관계가 정의된다. 자식 객체는 부모 객체의 특성을 가지며, 이를 토대로 확장할 수 있다. 하지만 이 과정에서 무리하거나 객체의 의의와 어긋나는 확장으로 인해 잘못된 방향으로 상속되는 경우가 생긴다. 리스코프 치환 원칙은 올바른 상속을 위해 자식 객체의 확장이 부모 객체의 방향을 온전히 따르도록 권고하는 원칙이다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 리스코프 치환 원칙 LSP (Liskov Subsitution Principle)","type":"posts"},"names":["2021","08","15","liskov-subsitution-principle"],"url":"/posts/2021/08/15/liskov-subsitution-principle"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628881480000,"excerpt":"개방 폐쇄 원칙이란 객체를 다룸에 있어서 객체의 확장은 개방적으로, 객체의 수정은 폐쇄적으로 대하는 원칙이다. 한 마디로, 보여줄 건 보여주고, 숨길 건 숨긴다는 의미. 좀 더 쉽게 말하자면, 기능이 변하거나 확장 가능하지만, 해당 기능의 코드는 수정하면 안 된다는 뜻이다. 그런데 이 원칙, 말이 좀 이상하다. 기능이 변하는 거 OK. 확장되는 거 OK. 근데 코드를 수정하면 안 된다?? 다소 이해가 되지 않는 요구사항이다. 만약, 객체 하나를 수정한다고 가정하자. 이 때 단순히 해당 객체만 수정하는 것 뿐만 아니라 해당 객체에 의존하는 다른 객체들의 코드까지 줄줄이 고쳐야한다면 좋은 설계로 보기 힘들다. 대표적으로 라이브러리를 생각해보자. 라이브러리를 사용하는 객체의 코드가 변경된다고 해서 라이브러리 코드까지 변경하지 않는다. 이처럼 개방-폐쇄 원칙은 각 객체의 모듈화와 정보 은닉의 올바른 구현을 추구하며, 이를 통해 객체 간의 의존성을 최소화하여 코드 변경에 따른 영향력을 낮추기 위한 원칙이다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 개방-폐쇄 원칙 OCP (Open-Closed Principle)","type":"posts"},"names":["2021","08","14","open-closed-principle"],"url":"/posts/2021/08/14/open-closed-principle"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628786268000,"excerpt":"올바른 객체지향 설계를 위해 수립한 원칙이 있으며, 이 다섯 가지 원칙을 통틀어 객체지향 5원칙(SOLID)이라 명명한다. 필수로 적용하지는 않지만, 적어도 이 규칙을 준수하면 준수할 수록 올바르게 설계된 객체지향이라 할 수 있다. 이 다섯가지 원칙은 아래와 같다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 단일 책임 원칙 SRP(Single Responsibility Principle)","type":"posts"},"names":["2021","08","13","single-responsibility-principle"],"url":"/posts/2021/08/13/single-responsibility-principle"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628695962000,"excerpt":"객체지향 언어는 동일한 이름을 가진 메소드를 허용하지 않는다. 예를 들어, \"먹는다\"는 동작이 구현된 메소드가 있다고 가정하자. 먹는다는 동일한 동작이 구태여 두 개나 구현될 필요는 없다. 이러한 관점에서 본다면 메소드의 고유 아이덴티티라고도 불릴 수 있는 메소드명의 유니크화는 어쩌면 당연하다. 하지만 조금 생각해보면 좀 이상하다. JAVA는 타입에 죽고 타입에 산다. JavaScript와 달리 파라미터에 아무 타입이나 넣을 수 없기 때문에, 정해진 타입 이외의 무언가를 넣으면 컴파일 단계에서 가차없이 컷한다.","group":"객체지향","title":"[OOP] 객체지향의 특징 - 다형성(Polymorphism)","type":"posts"},"names":["2021","08","12","polymorphism"],"url":"/posts/2021/08/12/polymorphism"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628681553000,"excerpt":"나른한 주말, 느긋하게 영화를 보고 있는 A씨. 영화에선 천대받으며 살던 주인공 소녀가 어느날 누군가로부터 거액의 유산을 받았다. 알고보니 그는 어렸을 적 실종된 재벌집 가문의 손녀딸이였던 것! 이후 그녀는 받은 유산을 통해 고마웠던 주변인에게 은혜를 갚고, 무시하던 이들에게 통쾌한 복수를 돌려준다는 내용이였다. 나름 통쾌했던 A씨지만, 어차피 현실에선 일어날 수 없는 일이라는 걸 이내 떠올린 A씨. 우리는 이걸 상속이라 부른다. 이처럼 상속이라는 개념은 영화나 드라마와 같은 창작물에서나 볼 수 있었다. 사전에서나 찾아볼 수 있었던 허구의 개념인 셈이다.","group":"객체지향","title":"[OOP] 객체지향의 특징 - 상속(Inheritance)","type":"posts"},"names":["2021","08","11","inheritance"],"url":"/posts/2021/08/11/inheritance"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628388305000,"excerpt":"객체. 즉, 클래스의 내부 변수와 메소드를 하나로 패키징하는 특징이다. 객체에 선언된 변수나 메소드가 구분없이 중구난방으로 접근할 수 있다면 정상적인 객체로 보기 어렵다. 캡슐화와 비슷한 개념으로 정보 은닉이라는 개념이 있다. 정보 은닉은 객체의 내부 구현을 숨김으로써 객체가 반드시 정해진 메소드를 통해 상호작용하도록 유도한다. 이 두 개념은 객체의 응집도와 독립성을 높임으로써 객체의 모듈화를 지향한다. 객체의 모듈화가 잘 이루어져있을 경우 모듈 단위의 재사용이 매우 용이하다. 여러 로직에서 중복되는 코드를 모듈로 대체하면 모듈 내부의 소스만 수정하는 것으로 수정사항을 반영할 수 있다. 이는 곧 간편한 유지보수와 직결된다.","group":"객체지향","title":"[OOP] 객체지향의 특징 - 캡슐화(Encapsulation)와 정보 은닉","type":"posts"},"names":["2021","08","08","encapulation"],"url":"/posts/2021/08/08/encapulation"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628305605000,"excerpt":"IT 업계에 종사하게 된다면 십중팔구 JAVA, C++, C# 중 하나는 다루게 된다. 국내 IT의 최다 공급이자 수요인 JAVA를 위시한 위 세 가지 언어의 공통점은 전부 객체지향언어라는 점이다. 물론 지금에 이르러서는 함수형이라는 개념도 나왔지만, C의 단순한 절차지향 이래로 나온 객체지향은 프로그래밍의 새로운 관점을 제시했고, 크고 작은 언어들이 알게 모르게 영향을 받았다. 이렇게 영향력이 큰 개념임에도 불구하고 막상 이와 관련된 질문을 받으면 명확하게 답을 내지 못 하기도 한다.","group":"객체지향","title":"[OOP] 객체지향 프로그래밍(Object Oriented Programming)이란?","type":"posts"},"names":["2021","08","07","what-is-oop"],"url":"/posts/2021/08/07/what-is-oop"}],"link":"/posts/2021/08/12/polymorphism"}]}],["$","$L1a",null,{"data-component":"ViewTocTemplate","children":["$","$L1c",null,{"toc":[{"level":1,"text":"다형성 (Polymorphism)"},{"level":2,"text":"다형성의 예제"},{"level":3,"text":"객체의 다형성"},{"level":4,"text":"다형성이 적용된 인스턴스"},{"level":3,"text":"메소드의 다형성"},{"level":4,"text":"반환값이 다른 메소드의 다형성?"},{"level":1,"text":"마무리"}]}]}],["$","$L1a",null,{"data-component":"ViewContentTemplate","children":[["$","div",null,{"className":"MarkdownViewer_markdown__kFBT_","children":[["$","h1",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h1__mcnqG","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"다형성 (Polymorphism)","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":21,"offset":21}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":21,"offset":21}}},"children":["$","$L11",null,{"href":"#다형성-(polymorphism)","id":"다형성-(polymorphism)","children":["$","$Lf",null,{"children":[["다형성 (Polymorphism)"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","2",{"children":["객체지향 언어는 동일한 이름을 가진 메소드를 허용하지 않는다. 예를 들어, \"먹는다\"는 동작이 구현된 메소드가 있다고 가정하자. 먹는다는 동일한 동작이 구태여 두 개나 구현될 필요는 없다. 이러한 관점에서 본다면 메소드의 고유 아이덴티티라고도 불릴 수 있는 메소드명의 유니크화는 어쩌면 당연하다."]}],"\n",["$","p","4",{"children":["하지만 조금 생각해보면 좀 이상하다. JAVA는 타입에 죽고 타입에 산다. JavaScript와 달리 파라미터에 아무 타입이나 넣을 수 없기 때문에, 정해진 타입 이외의 무언가를 넣으면 컴파일 단계에서 가차없이 컷한다."]}],"\n",["$","$L1e","6",{"node":{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"One for One!","position":{"start":{"line":8,"column":5,"offset":318},"end":{"line":8,"column":17,"offset":330}}}],"position":{"start":{"line":8,"column":3,"offset":316},"end":{"line":8,"column":19,"offset":332}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":8,"column":19,"offset":332},"end":{"line":9,"column":1,"offset":335}}},{"type":"text","value":"\n하나의 파라미터는 반드시 하나의 타입만을 가진다. ","position":{"start":"$undefined","end":{"line":9,"column":31,"offset":365}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"public void run(String param)","position":{"start":{"line":9,"column":31,"offset":365},"end":{"line":9,"column":62,"offset":396}}}],"position":{"start":{"line":9,"column":31,"offset":365},"end":{"line":9,"column":62,"offset":396}}},{"type":"text","value":"은 반드시 문자열 타입만을 파라미터로 받는다.","position":{"start":{"line":9,"column":62,"offset":396},"end":{"line":9,"column":87,"offset":421}}}],"position":{"start":{"line":8,"column":3,"offset":316},"end":{"line":9,"column":87,"offset":421}}},{"type":"text","value":"\n"}],"position":{"start":{"line":8,"column":1,"offset":314},"end":{"line":9,"column":87,"offset":421}}},"children":["\n",["$","p","1",{"children":[["$","strong","0",{"children":["One for One!"]}],["$","br","1",{}],"\n하나의 파라미터는 반드시 하나의 타입만을 가진다. ",["$","$L1f",null,{"inline":true,"node":"$20","children":["public void run(String param)"]}],"은 반드시 문자열 타입만을 파라미터로 받는다."]}],"\n"]}],"\n",["$","p","8",{"children":["그말인즉슨, 동일한 메소드는 존재할 수 없으니, 해당 메소드에 입력할 수 있는 각각의 파라미터 타입도 하나로 고정된다. 하지만 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"System.out.println()","position":{"start":{"line":11,"column":72,"offset":494},"end":{"line":11,"column":94,"offset":516}}}],"position":{"start":{"line":11,"column":72,"offset":494},"end":{"line":11,"column":94,"offset":516}}},"children":["System.out.println()"]}]," 메소드를 보자. CLI 콘솔에 데이터를 출력하는 메소드로, JAVA를 다룬다면 안 써본 사람은 없는 메소드다."]}],"\n",["$","pre","10",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tSystem.out.println(\"문자열 데이터\");\n\t\tSystem.out.println(123456);\n\t\tSystem.out.println(true);\n\t}\n}\n"}],"position":{"start":{"line":13,"column":1,"offset":580},"end":{"line":23,"column":4,"offset":751}}},"children":["public class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tSystem.out.println(\"문자열 데이터\");\n\t\tSystem.out.println(123456);\n\t\tSystem.out.println(true);\n\t}\n}\n"]}]]}],"\n",["$","pre","12",{"children":[["$","$L2a",null,{"languageName":"out","className":"language-out","node":{"type":"element","tagName":"code","properties":{"className":["language-out"]},"children":[{"type":"text","value":"문자열 데이터\n123456\ntrue\n"}],"position":{"start":{"line":25,"column":1,"offset":753},"end":{"line":29,"column":4,"offset":784}}},"children":["문자열 데이터\n123456\ntrue\n"]}]]}],"\n",["$","br","14",{}],"\n",["$","p","16",{"className":"grey-600","align":"center","children":[["$","i","0",{"children":["아니 아깐 동일한 메소드는 존재할 수 없다매요;;"]}]]}],"\n",["$","br","18",{}],"\n",["$","p","20",{"children":["분명히 아까 ",["$","span","1",{"className":"pink-400","children":["동일한 이름을 가진 메소드는 동일한 객체에서 존재할 수 없다"]}],"고 했었다. 그럼에도 불구하고 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"System.out.println()","position":{"start":{"line":35,"column":88,"offset":962},"end":{"line":35,"column":110,"offset":984}}}],"position":{"start":{"line":35,"column":88,"offset":962},"end":{"line":35,"column":110,"offset":984}}},"children":["System.out.println()"]}],"의 경우, 메소드명은 동일한데 여러 타입을 보란듯이 받아서 처리하고 있다. 어떻게 된걸까? 유명한 메소드는 예외사항이라도 적용되는걸까?"]}],"\n",["$","p","22",{"children":[["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"System.out.println()","position":{"start":{"line":37,"column":1,"offset":1061},"end":{"line":37,"column":23,"offset":1083}}}],"position":{"start":{"line":37,"column":1,"offset":1061},"end":{"line":37,"column":23,"offset":1083}}},"children":["System.out.println()"]}],"이 여러 타입을 처리할 수 있는 이유는 해당 메소드에 ",["$","span","2",{"className":"teal-400","children":["다형성"]}],"이 적용되어있기 때문이다. 다형성이란, 하나의 객체 혹은 메소드가 여러 타입을 참조할 수 있음을 의미한다. 다형성은 크게 ",["$","span","4",{"className":"amber-400","children":["객체의 다형성"]}],"과, ",["$","span","6",{"className":"amber-400","children":["메소드의 다형성"]}],"으로 구분된다."]}],"\n",["$","h2",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h2__9tbOB","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"다형성의 예제","position":{"start":{"line":39,"column":4,"offset":1307},"end":{"line":39,"column":11,"offset":1314}}}],"position":{"start":{"line":39,"column":1,"offset":1304},"end":{"line":39,"column":11,"offset":1314}}},"children":["$","$L11",null,{"href":"#다형성의-예제","id":"다형성의-예제","children":["$","$Lf",null,{"children":[["다형성의 예제"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","26",{"children":["코드를 통해 다형성을 알아보자."]}],"\n",["$","h3",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h3__5jvsC","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"객체의 다형성","position":{"start":{"line":43,"column":5,"offset":1339},"end":{"line":43,"column":12,"offset":1346}}}],"position":{"start":{"line":43,"column":1,"offset":1335},"end":{"line":43,"column":12,"offset":1346}}},"children":["$","$L11",null,{"href":"#객체의-다형성","id":"객체의-다형성","children":["$","$Lf",null,{"children":[["객체의 다형성"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","30",{"children":["먼저, 객체에 적용되는 다형성이다. 객체의 경우 상속된 객체의 인스턴스 생성 시, 다형성을 적용할 수 있다."]}],"\n",["$","p","32",{"children":["객체의 다형성은 ",["$","span","1",{"className":"red-400","children":["객체가 상속된 부모 객체의 인스턴스로 할당"]}],"될 수 있음을 의미한다."]}],"\n",["$","pre","34",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"class TV\n{\n\t// 메소드\n}\n\nclass SmartTV extends TV\n{\n\t// 메소드\n}\n"}],"position":{"start":{"line":49,"column":1,"offset":1486},"end":{"line":59,"column":4,"offset":1557}}},"children":["class TV\n{\n\t// 메소드\n}\n\nclass SmartTV extends TV\n{\n\t// 메소드\n}\n"]}]]}],"\n",["$","p","36",{"children":["위와 같은 두 객체가 있다고 가정하자. ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SmartTV","position":{"start":{"line":61,"column":23,"offset":1581},"end":{"line":61,"column":32,"offset":1590}}}],"position":{"start":{"line":61,"column":23,"offset":1581},"end":{"line":61,"column":32,"offset":1590}}},"children":["SmartTV"]}],"는 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TV","position":{"start":{"line":61,"column":34,"offset":1592},"end":{"line":61,"column":38,"offset":1596}}}],"position":{"start":{"line":61,"column":34,"offset":1592},"end":{"line":61,"column":38,"offset":1596}}},"children":["TV"]}],"를 상속받아 구현된 객체다. 이 경우 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SmartTV","position":{"start":{"line":61,"column":59,"offset":1617},"end":{"line":61,"column":68,"offset":1626}}}],"position":{"start":{"line":61,"column":59,"offset":1617},"end":{"line":61,"column":68,"offset":1626}}},"children":["SmartTV"]}],"는 다형성을 적용할 수 있다."]}],"\n",["$","pre","38",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\t// 객체와 인스턴스 타입 일치\n\t\tTV tv = new TV();\n\n\t\t// 객체와 인스턴스 타입 일치\n\t\tSmartTV smart = new SmartTV();\n\n\t\t// SmartTV는 TV의 자식 객체이므로 다형성이 적용되어 허용\n\t\tTV tv2 = new SmartTV();\n\n\t\t// 불가능\n\t\tSmartTV smart2 = new TV();\n\t}\n}\n"}],"position":{"start":{"line":63,"column":1,"offset":1644},"end":{"line":81,"column":4,"offset":1924}}},"children":["public class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\t// 객체와 인스턴스 타입 일치\n\t\tTV tv = new TV();\n\n\t\t// 객체와 인스턴스 타입 일치\n\t\tSmartTV smart = new SmartTV();\n\n\t\t// SmartTV는 TV의 자식 객체이므로 다형성이 적용되어 허용\n\t\tTV tv2 = new SmartTV();\n\n\t\t// 불가능\n\t\tSmartTV smart2 = new TV();\n\t}\n}\n"]}]]}],"\n",["$","p","40",{"children":["다른건 명확하므로 필요없고, 12번째 줄을 자세히 보자. ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TV","position":{"start":{"line":83,"column":33,"offset":1958},"end":{"line":83,"column":37,"offset":1962}}}],"position":{"start":{"line":83,"column":33,"offset":1958},"end":{"line":83,"column":37,"offset":1962}}},"children":["TV"]}],"와 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SmartTV","position":{"start":{"line":83,"column":39,"offset":1964},"end":{"line":83,"column":48,"offset":1973}}}],"position":{"start":{"line":83,"column":39,"offset":1964},"end":{"line":83,"column":48,"offset":1973}}},"children":["SmartTV"]}],"는 엄연히 다른 객체임에도 불구하고 인스턴스가 정상적으로 생성된다."]}],"\n",["$","p","42",{"children":["이는 객체의 다형성이 적용된 결과로, ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SmartTV","position":{"start":{"line":85,"column":22,"offset":2033},"end":{"line":85,"column":31,"offset":2042}}}],"position":{"start":{"line":85,"column":22,"offset":2033},"end":{"line":85,"column":31,"offset":2042}}},"children":["SmartTV"]}],"는 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TV","position":{"start":{"line":85,"column":33,"offset":2044},"end":{"line":85,"column":37,"offset":2048}}}],"position":{"start":{"line":85,"column":33,"offset":2044},"end":{"line":85,"column":37,"offset":2048}}},"children":["TV"]}],"를 상속받아 만들어진 객체다. 즉 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SmartTV","position":{"start":{"line":85,"column":56,"offset":2067},"end":{"line":85,"column":65,"offset":2076}}}],"position":{"start":{"line":85,"column":56,"offset":2067},"end":{"line":85,"column":65,"offset":2076}}},"children":["SmartTV"]}],"는 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TV","position":{"start":{"line":85,"column":67,"offset":2078},"end":{"line":85,"column":71,"offset":2082}}}],"position":{"start":{"line":85,"column":67,"offset":2078},"end":{"line":85,"column":71,"offset":2082}}},"children":["TV"]}],"를 온전히 포함하고 있으므로 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TV","position":{"start":{"line":85,"column":87,"offset":2098},"end":{"line":85,"column":91,"offset":2102}}}],"position":{"start":{"line":85,"column":87,"offset":2098},"end":{"line":85,"column":91,"offset":2102}}},"children":["TV"]}],"의 인스턴스로 생성이 가능하다. 이러한 객체의 다형성은 객체를 상속했을 때 뿐만 아니라, 인터페이스를 상속할때도 가능하다."]}],"\n",["$","h4",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h4__aPOd7","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"다형성이 적용된 인스턴스","position":{"start":{"line":87,"column":6,"offset":2177},"end":{"line":87,"column":19,"offset":2190}}}],"position":{"start":{"line":87,"column":1,"offset":2172},"end":{"line":87,"column":19,"offset":2190}}},"children":["$","$L11",null,{"href":"#다형성이-적용된-인스턴스","id":"다형성이-적용된-인스턴스","children":["$","$Lf",null,{"children":[["다형성이 적용된 인스턴스"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","46",{"children":["객체의 다형성을 다룰 때 주의할 점이 한 가지 있다. 우리는 위에서 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SmartTV","position":{"start":{"line":89,"column":39,"offset":2230},"end":{"line":89,"column":48,"offset":2239}}}],"position":{"start":{"line":89,"column":39,"offset":2230},"end":{"line":89,"column":48,"offset":2239}}},"children":["SmartTV"]}]," 객체를 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TV","position":{"start":{"line":89,"column":53,"offset":2244},"end":{"line":89,"column":57,"offset":2248}}}],"position":{"start":{"line":89,"column":53,"offset":2244},"end":{"line":89,"column":57,"offset":2248}}},"children":["TV"]}],"로 생성했다. 뭐 다형성 어쩌고로 인해 인스턴스가 정상적으로 생성됨은 알겠는데, 이 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TV","position":{"start":{"line":89,"column":104,"offset":2295},"end":{"line":89,"column":108,"offset":2299}}}],"position":{"start":{"line":89,"column":104,"offset":2295},"end":{"line":89,"column":108,"offset":2299}}},"children":["TV"]}],"인듯 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SmartTV","position":{"start":{"line":89,"column":111,"offset":2302},"end":{"line":89,"column":120,"offset":2311}}}],"position":{"start":{"line":89,"column":111,"offset":2302},"end":{"line":89,"column":120,"offset":2311}}},"children":["SmartTV"]}],"인듯한 인스턴스는 어떻게 동작할까?"]}],"\n",["$","p","48",{"children":["이렇게 생성된 인스턴스 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"tv2","position":{"start":{"line":91,"column":14,"offset":2345},"end":{"line":91,"column":19,"offset":2350}}}],"position":{"start":{"line":91,"column":14,"offset":2345},"end":{"line":91,"column":19,"offset":2350}}},"children":["tv2"]}],"는 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SmartTV","position":{"start":{"line":91,"column":21,"offset":2352},"end":{"line":91,"column":30,"offset":2361}}}],"position":{"start":{"line":91,"column":21,"offset":2352},"end":{"line":91,"column":30,"offset":2361}}},"children":["SmartTV"]}],"에 선언된 메소드들 중 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TV","position":{"start":{"line":91,"column":43,"offset":2374},"end":{"line":91,"column":47,"offset":2378}}}],"position":{"start":{"line":91,"column":43,"offset":2374},"end":{"line":91,"column":47,"offset":2378}}},"children":["TV"]}],"에 선언된 메소드와 일치하는 메소드만 사용 가능하다."]}],"\n",["$","pre","50",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"interface Movable\n{\n\tvoid move(boolean direction);\n}\n\nclass Unit implements Movable\n{\n\t@Override\n\tpublic void move(boolean direction)\n\t{\n\t\t// 동작\n\t}\n\n\tpublic void work(String act)\n\t{\n\t\t// 동작\n\t}\n}\n"}],"position":{"start":{"line":93,"column":1,"offset":2409},"end":{"line":112,"column":4,"offset":2616}}},"children":["interface Movable\n{\n\tvoid move(boolean direction);\n}\n\nclass Unit implements Movable\n{\n\t@Override\n\tpublic void move(boolean direction)\n\t{\n\t\t// 동작\n\t}\n\n\tpublic void work(String act)\n\t{\n\t\t// 동작\n\t}\n}\n"]}]]}],"\n",["$","p","52",{"children":["이번엔 인터페이스를 예시로 들어보자. 움직임에 대한 동작이 기술되어있는 인터페이스 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movable","position":{"start":{"line":114,"column":47,"offset":2664},"end":{"line":114,"column":56,"offset":2673}}}],"position":{"start":{"line":114,"column":47,"offset":2664},"end":{"line":114,"column":56,"offset":2673}}},"children":["Movable"]}],"과 이를 상속받은 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Unit","position":{"start":{"line":114,"column":66,"offset":2683},"end":{"line":114,"column":72,"offset":2689}}}],"position":{"start":{"line":114,"column":66,"offset":2683},"end":{"line":114,"column":72,"offset":2689}}},"children":["Unit"]}]," 객체가 있다."]}],"\n",["$","pre","54",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tMovable movable = new Unit();\n\n\t\t// Movable에 존재하는 메소드이므로 호출 가능\n\t\tmovable.move(true);\n\n\t\t// Movable엔 없는 Unit만의 고유 메소드이므로 호출 불가능\n\t\tmovable.work(\"run\");\n\t}\n}\n"}],"position":{"start":{"line":116,"column":1,"offset":2699},"end":{"line":130,"column":4,"offset":2931}}},"children":["public class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tMovable movable = new Unit();\n\n\t\t// Movable에 존재하는 메소드이므로 호출 가능\n\t\tmovable.move(true);\n\n\t\t// Movable엔 없는 Unit만의 고유 메소드이므로 호출 불가능\n\t\tmovable.work(\"run\");\n\t}\n}\n"]}]]}],"\n",["$","p","56",{"children":["객체의 다형성으로 인해 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Unit","position":{"start":{"line":132,"column":14,"offset":2946},"end":{"line":132,"column":20,"offset":2952}}}],"position":{"start":{"line":132,"column":14,"offset":2946},"end":{"line":132,"column":20,"offset":2952}}},"children":["Unit"]}]," 객체를 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movable","position":{"start":{"line":132,"column":25,"offset":2957},"end":{"line":132,"column":34,"offset":2966}}}],"position":{"start":{"line":132,"column":25,"offset":2957},"end":{"line":132,"column":34,"offset":2966}}},"children":["Movable"]}],"로 생성할 수 있음은 잘 알 것이다. ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"movable","position":{"start":{"line":132,"column":55,"offset":2987},"end":{"line":132,"column":64,"offset":2996}}}],"position":{"start":{"line":132,"column":55,"offset":2987},"end":{"line":132,"column":64,"offset":2996}}},"children":["movable"]}],"이라는 인스턴스를 만들고 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"move()","position":{"start":{"line":132,"column":78,"offset":3010},"end":{"line":132,"column":86,"offset":3018}}}],"position":{"start":{"line":132,"column":78,"offset":3010},"end":{"line":132,"column":86,"offset":3018}}},"children":["move()"]}],", ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"work()","position":{"start":{"line":132,"column":88,"offset":3020},"end":{"line":132,"column":96,"offset":3028}}}],"position":{"start":{"line":132,"column":88,"offset":3020},"end":{"line":132,"column":96,"offset":3028}}},"children":["work()"]}]," 메소드를 각각 호출해보자."]}],"\n",["$","p","58",{"children":[["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"move()","position":{"start":{"line":134,"column":1,"offset":3045},"end":{"line":134,"column":9,"offset":3053}}}],"position":{"start":{"line":134,"column":1,"offset":3045},"end":{"line":134,"column":9,"offset":3053}}},"children":["move()"]}],"의 경우 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movable","position":{"start":{"line":134,"column":14,"offset":3058},"end":{"line":134,"column":23,"offset":3067}}}],"position":{"start":{"line":134,"column":14,"offset":3058},"end":{"line":134,"column":23,"offset":3067}}},"children":["Movable"]}]," 인터페이스에서 상속받아 구현한 메소드고, ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"work()","position":{"start":{"line":134,"column":47,"offset":3091},"end":{"line":134,"column":55,"offset":3099}}}],"position":{"start":{"line":134,"column":47,"offset":3091},"end":{"line":134,"column":55,"offset":3099}}},"children":["work()"]}],"는 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Unit","position":{"start":{"line":134,"column":57,"offset":3101},"end":{"line":134,"column":63,"offset":3107}}}],"position":{"start":{"line":134,"column":57,"offset":3101},"end":{"line":134,"column":63,"offset":3107}}},"children":["Unit"]}],"에서 직접 생성한 메소드다. 이 경우 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Unit","position":{"start":{"line":134,"column":84,"offset":3128},"end":{"line":134,"column":90,"offset":3134}}}],"position":{"start":{"line":134,"column":84,"offset":3128},"end":{"line":134,"column":90,"offset":3134}}},"children":["Unit"]}],"의 메소드를 호출할 수 있지만, ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movable","position":{"start":{"line":134,"column":108,"offset":3152},"end":{"line":134,"column":117,"offset":3161}}}],"position":{"start":{"line":134,"column":108,"offset":3152},"end":{"line":134,"column":117,"offset":3161}}},"children":["Movable"]}],"에 선언된 메소드만 호출 가능하다. 즉, ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Unit","position":{"start":{"line":134,"column":140,"offset":3184},"end":{"line":134,"column":146,"offset":3190}}}],"position":{"start":{"line":134,"column":140,"offset":3184},"end":{"line":134,"column":146,"offset":3190}}},"children":["Unit"]}],"과 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movable","position":{"start":{"line":134,"column":148,"offset":3192},"end":{"line":134,"column":157,"offset":3201}}}],"position":{"start":{"line":134,"column":148,"offset":3192},"end":{"line":134,"column":157,"offset":3201}}},"children":["Movable"]}]," 객체 간에 겹치는 메소드만 사용이 호출이 가능하다. 이 때 메소드의 동작은 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Unit","position":{"start":{"line":134,"column":200,"offset":3244},"end":{"line":134,"column":206,"offset":3250}}}],"position":{"start":{"line":134,"column":200,"offset":3244},"end":{"line":134,"column":206,"offset":3250}}},"children":["Unit"]}],"의 메소드로 동작한다."]}],"\n",["$","p","60",{"children":["객체의 다형성을 사용하면 동일한 객체를 상속받은 여러 객체들을 다루기 매우 편리하다."]}],"\n",["$","pre","62",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"class UnitA implements Movable\n{\n\t@Override\n\tpublic void move(boolean direction)\n\t{\n\t\twork(\"run\");\n\t}\n\n\tprivate void work(String act)\n\t{\n\t\tSystem.out.println(\"work: \" + act);\n\t}\n}\n\nclass UnitB implements Movable\n{\n\t@Override\n\tpublic void move(boolean direction)\n\t{\n\t\tdoing(3);\n\t}\n\n\tprivate void doing(int num)\n\t{\n\t\tSystem.out.println(\"doing: \" + num);\n\t}\n}\n\nclass UnitC implements Movable\n{\n\t@Override\n\tpublic void move(boolean direction)\n\t{\n\t\tactive(true);\n\t}\n\n\tprivate void active(boolean flag)\n\t{\n\t\tSystem.out.println(\"active: \" + flag);\n\t}\n}\n"}],"position":{"start":{"line":138,"column":1,"offset":3313},"end":{"line":180,"column":4,"offset":3871}}},"children":["class UnitA implements Movable\n{\n\t@Override\n\tpublic void move(boolean direction)\n\t{\n\t\twork(\"run\");\n\t}\n\n\tprivate void work(String act)\n\t{\n\t\tSystem.out.println(\"work: \" + act);\n\t}\n}\n\nclass UnitB implements Movable\n{\n\t@Override\n\tpublic void move(boolean direction)\n\t{\n\t\tdoing(3);\n\t}\n\n\tprivate void doing(int num)\n\t{\n\t\tSystem.out.println(\"doing: \" + num);\n\t}\n}\n\nclass UnitC implements Movable\n{\n\t@Override\n\tpublic void move(boolean direction)\n\t{\n\t\tactive(true);\n\t}\n\n\tprivate void active(boolean flag)\n\t{\n\t\tSystem.out.println(\"active: \" + flag);\n\t}\n}\n"]}]]}],"\n",["$","p","64",{"children":["위 처럼 동일한 인터페이스 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movable","position":{"start":{"line":182,"column":16,"offset":3888},"end":{"line":182,"column":25,"offset":3897}}}],"position":{"start":{"line":182,"column":16,"offset":3888},"end":{"line":182,"column":25,"offset":3897}}},"children":["Movable"]}],"을 상속받은 여러 객체가 있다고 가정하자. 이 객체들은 각각 개별적인 객체지만, ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movable","position":{"start":{"line":182,"column":70,"offset":3942},"end":{"line":182,"column":79,"offset":3951}}}],"position":{"start":{"line":182,"column":70,"offset":3942},"end":{"line":182,"column":79,"offset":3951}}},"children":["Movable"]}],"을 상속받았으므로, 세 객체 모두 다형성을 통해 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movable","position":{"start":{"line":182,"column":106,"offset":3978},"end":{"line":182,"column":115,"offset":3987}}}],"position":{"start":{"line":182,"column":106,"offset":3978},"end":{"line":182,"column":115,"offset":3987}}},"children":["Movable"]}]," 인스턴스로 할당할 수 있다."]}],"\n",["$","pre","66",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tMovable movable = switch (new Random().nextInt(3))\n\t\t{\n\t\t\tcase 0 -> new UnitA();\n\t\t\tcase 1 -> new UnitB();\n\t\t\tcase 2 -> new UnitC();\n\t\t\tdefault -> null;\n\t\t};\n\t\t\n\t\tmovable.move(true);\n\t}\n}\n"}],"position":{"start":{"line":184,"column":1,"offset":4005},"end":{"line":200,"column":4,"offset":4270}}},"children":["public class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tMovable movable = switch (new Random().nextInt(3))\n\t\t{\n\t\t\tcase 0 -> new UnitA();\n\t\t\tcase 1 -> new UnitB();\n\t\t\tcase 2 -> new UnitC();\n\t\t\tdefault -> null;\n\t\t};\n\t\t\n\t\tmovable.move(true);\n\t}\n}\n"]}]]}],"\n",["$","pre","68",{"children":[["$","$L2a",null,{"languageName":"output","className":"language-output","node":{"type":"element","tagName":"code","properties":{"className":["language-output"]},"children":[{"type":"text","value":"# 실행 시마다 달라짐\nwork: run\n"}],"position":{"start":{"line":202,"column":1,"offset":4272},"end":{"line":205,"column":4,"offset":4309}}},"children":["# 실행 시마다 달라짐\nwork: run\n"]}]]}],"\n",["$","p","70",{"children":["실행 시마다 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UnitA","position":{"start":{"line":207,"column":8,"offset":4318},"end":{"line":207,"column":15,"offset":4325}}}],"position":{"start":{"line":207,"column":8,"offset":4318},"end":{"line":207,"column":15,"offset":4325}}},"children":["UnitA"]}],", ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UnitB","position":{"start":{"line":207,"column":17,"offset":4327},"end":{"line":207,"column":24,"offset":4334}}}],"position":{"start":{"line":207,"column":17,"offset":4327},"end":{"line":207,"column":24,"offset":4334}}},"children":["UnitB"]}],", ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UnitC","position":{"start":{"line":207,"column":26,"offset":4336},"end":{"line":207,"column":33,"offset":4343}}}],"position":{"start":{"line":207,"column":26,"offset":4336},"end":{"line":207,"column":33,"offset":4343}}},"children":["UnitC"]}]," 중 무작위로 선택된 객체의 인스턴스를 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movable","position":{"start":{"line":207,"column":55,"offset":4365},"end":{"line":207,"column":64,"offset":4374}}}],"position":{"start":{"line":207,"column":55,"offset":4365},"end":{"line":207,"column":64,"offset":4374}}},"children":["Movable"]}],"에 할당한다. 서로 같은 객체임에도 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movable","position":{"start":{"line":207,"column":84,"offset":4394},"end":{"line":207,"column":93,"offset":4403}}}],"position":{"start":{"line":207,"column":84,"offset":4394},"end":{"line":207,"column":93,"offset":4403}}},"children":["Movable"]}],"이라는 부모 객체로 인스턴스를 할당하여 공통된 메소드를 호출할 수 있다. 호출된 공통 메소드인 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"move()","position":{"start":{"line":207,"column":146,"offset":4456},"end":{"line":207,"column":154,"offset":4464}}}],"position":{"start":{"line":207,"column":146,"offset":4456},"end":{"line":207,"column":154,"offset":4464}}},"children":["move()"]}]," 내부에는 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Unit","position":{"start":{"line":207,"column":160,"offset":4470},"end":{"line":207,"column":166,"offset":4476}}}],"position":{"start":{"line":207,"column":160,"offset":4470},"end":{"line":207,"column":166,"offset":4476}}},"children":["Unit"]}]," 고유의 메소드가 포함되어도 상관없다."]}],"\n",["$","p","72",{"children":["이처럼 메소드의 입력으로 여러 타입의 파라미터가 와야할 경우, 이 파라미터들이 동일한 객체를 상속하고 있다면 다형성을 적용하여 공통된 타입으로 다룰 수 있다."]}],"\n",["$","h3",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h3__5jvsC","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"메소드의 다형성","position":{"start":{"line":211,"column":5,"offset":4593},"end":{"line":211,"column":13,"offset":4601}}}],"position":{"start":{"line":211,"column":1,"offset":4589},"end":{"line":211,"column":13,"offset":4601}}},"children":["$","$L11",null,{"href":"#메소드의-다형성","id":"메소드의-다형성","children":["$","$Lf",null,{"children":[["메소드의 다형성"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","76",{"children":["메소드 역시 다형성을 적용할 수 있다. 객체의 다형성은 객체 자신의 타입과 연관되지만, 메소드의 다형성은 메소드가 사용하는 파라미터의 타입과 연관된다."]}],"\n",["$","p","78",{"children":["메소드의 다형성은 ",["$","span","1",{"className":"red-400","children":["메소드가 서로 동일한 이름을 가지더라도, 입력받는 파라미터가 다르면 각각 개별적인 메소드로 취급"]}],"함을 의미한다."]}],"\n",["$","pre","80",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * 컨버터 클래스\n *\n * @author RWB\n * @since 2021.08.06 Fri 23:46:44\n */\npublic class Converter\n{\n\t/**\n\t * 변환 함수\n\t *\n\t * @param num: [int] 숫자\n\t */\n\tpublic void convert(int num)\n\t{\n\t\tSystem.out.println(new StringBuilder().append(\"int: \").append(num));\n\t}\n\t\n\t/**\n\t * 변환 함수\n\t *\n\t * @param text: [String] 문자열\n\t */\n\tpublic void convert(String text)\n\t{\n\t\tSystem.out.println(new StringBuilder().append(\"String: \").append(text));\n\t}\n\t\n\t/**\n\t * 변환 함수\n\t *\n\t * @param flag: [boolean] T/F\n\t */\n\tpublic void convert(boolean flag)\n\t{\n\t\tSystem.out.println(new StringBuilder().append(\"boolean: \").append(flag));\n\t}\n\t\n\t/**\n\t * 변환 함수\n\t *\n\t * @param c: [char] 문자\n\t */\n\tpublic void convert(char c)\n\t{\n\t\tSystem.out.println(new StringBuilder().append(\"char: \").append(c));\n\t}\n}\n"}],"position":{"start":{"line":217,"column":1,"offset":4791},"end":{"line":266,"column":4,"offset":5557}}},"children":["/**\n * 컨버터 클래스\n *\n * @author RWB\n * @since 2021.08.06 Fri 23:46:44\n */\npublic class Converter\n{\n\t/**\n\t * 변환 함수\n\t *\n\t * @param num: [int] 숫자\n\t */\n\tpublic void convert(int num)\n\t{\n\t\tSystem.out.println(new StringBuilder().append(\"int: \").append(num));\n\t}\n\t\n\t/**\n\t * 변환 함수\n\t *\n\t * @param text: [String] 문자열\n\t */\n\tpublic void convert(String text)\n\t{\n\t\tSystem.out.println(new StringBuilder().append(\"String: \").append(text));\n\t}\n\t\n\t/**\n\t * 변환 함수\n\t *\n\t * @param flag: [boolean] T/F\n\t */\n\tpublic void convert(boolean flag)\n\t{\n\t\tSystem.out.println(new StringBuilder().append(\"boolean: \").append(flag));\n\t}\n\t\n\t/**\n\t * 변환 함수\n\t *\n\t * @param c: [char] 문자\n\t */\n\tpublic void convert(char c)\n\t{\n\t\tSystem.out.println(new StringBuilder().append(\"char: \").append(c));\n\t}\n}\n"]}]]}],"\n",["$","p","82",{"children":["위 소스는 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Converter","position":{"start":{"line":268,"column":7,"offset":5565},"end":{"line":268,"column":18,"offset":5576}}}],"position":{"start":{"line":268,"column":7,"offset":5565},"end":{"line":268,"column":18,"offset":5576}}},"children":["Converter"]}]," 클래스로, 메소드의 이름이 모두 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"convert","position":{"start":{"line":268,"column":37,"offset":5595},"end":{"line":268,"column":46,"offset":5604}}}],"position":{"start":{"line":268,"column":37,"offset":5595},"end":{"line":268,"column":46,"offset":5604}}},"children":["convert"]}],"로 동일함을 알 수 있다. 하지만 각각의 메소드 모두 매개변수가 다르다. 이 경우 다형성에 의해 각각의 메소드가 독립적인 메소드로 인정받게된다."]}],"\n",["$","p","84",{"children":["다형성의 존재로 인해 코드의 일관성을 유지할 수 있다. 대표적으로 우리가 콘솔에 출력할 때 사용하는 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"System.out.println()","position":{"start":{"line":270,"column":57,"offset":5742},"end":{"line":270,"column":79,"offset":5764}}}],"position":{"start":{"line":270,"column":57,"offset":5742},"end":{"line":270,"column":79,"offset":5764}}},"children":["System.out.println()"]}]," 메소드가 이에 해당한다."]}],"\n",["$","pre","86",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public void println(float x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void println(double x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void println(char[] x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(x);\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void println(String x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n"}],"position":{"start":{"line":272,"column":1,"offset":5780},"end":{"line":316,"column":4,"offset":6466}}},"children":["public void println(float x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void println(double x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void println(char[] x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(x);\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void println(String x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n"]}]]}],"\n",["$","p","88",{"children":["위 소스는 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"System.out.println()","position":{"start":{"line":318,"column":7,"offset":6474},"end":{"line":318,"column":29,"offset":6496}}}],"position":{"start":{"line":318,"column":7,"offset":6474},"end":{"line":318,"column":29,"offset":6496}}},"children":["System.out.println()"]}],"의 내부 소스다. 보다시피 이름이 동일하고, 동작까지도 콘솔에 출력하는 것으로 동일하지만 다형성으로 인해 각각의 메소드가 온전한 하나로 인정된다."]}],"\n",["$","p","90",{"children":["만약 다형성이라는 개념이 없다면 어떨까? 동일한 동작을 함에도 매개변수가 달라진다는 이유만으로 비슷한 이름을 가진 메소드를 만들어야하고, 개발자는 각 매개변수에 맞게 메소드를 사용해야한다."]}],"\n",["$","pre","92",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public void printlnFloat(float x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void printlnDouble(double x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void printlnChar(char[] x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(x);\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void printlnString(String x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n"}],"position":{"start":{"line":322,"column":1,"offset":6686},"end":{"line":366,"column":4,"offset":7393}}},"children":["public void printlnFloat(float x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void printlnDouble(double x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void printlnChar(char[] x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(x);\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void printlnString(String x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n"]}]]}],"\n",["$","p","94",{"children":["즉, 위와 같은 설계가 강요된다. 코드를 설계하다보면 동일한 동작에 다양한 종류의 객체가 와야할 수도 있다. JAVA는 ",["$","span","1",{"className":"green-400","children":["하나의 매개변수 = 하나의 타입"]}],"이라는 원칙을 고수하므로, JavaScript와 같이 다양한 종류의 타입이 매개변수로 올 수 없다."]}],"\n",["$","p","96",{"children":["다형성을 활용하면 이러한 문제를 효과적으로 타개할 수 있다. 동일한 이름으로 다양한 매개변수를 받는 메소드를 작성하면, 개발자는 이를 사용 시 별다른 타입 구분 없이 마치 동일한 메소드를 사용한다는 개발 경험을 제공한다."]}],"\n",["$","pre","98",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"// println(String x)\nSystem.out.println(\"text\");\n\n// println(double x)\nSystem.out.println(1.5D);\n"}],"position":{"start":{"line":372,"column":1,"offset":7692},"end":{"line":378,"column":4,"offset":7801}}},"children":["// println(String x)\nSystem.out.println(\"text\");\n\n// println(double x)\nSystem.out.println(1.5D);\n"]}]]}],"\n",["$","p","100",{"children":["위와 같이 개발자가 별도로 타입을 구분하지 않고 사용해도, 컴파일 시 해당 매개변수를 받는 메소드가 자동으로 호출된다."]}],"\n",["$","h4",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h4__aPOd7","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"반환값이 다른 메소드의 다형성?","position":{"start":{"line":382,"column":6,"offset":7876},"end":{"line":382,"column":23,"offset":7893}}}],"position":{"start":{"line":382,"column":1,"offset":7871},"end":{"line":382,"column":23,"offset":7893}}},"children":["$","$L11",null,{"href":"#반환값이-다른-메소드의-다형성?","id":"반환값이-다른-메소드의-다형성?","children":["$","$Lf",null,{"children":[["반환값이 다른 메소드의 다형성?"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","104",{"children":["호기심이 많다면 이런 케이스를 생각해볼 수 있다. 매개변수에 대한 다형성이 있으면, 메소드의 반환값에 대한 다형성도 있지 않을까? 좋은 발상이지만, 아쉽게도 다형성은 반드시 매개변수로만 구분한다. ",["$","span","1",{"className":"red-400","children":["반환값의 경우 다형성이 적용되지 않는다."]}]]}],"\n",["$","pre","106",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public void println(char[] x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(x);\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void println(String x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n"}],"position":{"start":{"line":386,"column":1,"offset":8058},"end":{"line":408,"column":4,"offset":8399}}},"children":["public void println(char[] x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(x);\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic void println(String x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(String.valueOf(x));\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n"]}]]}],"\n",["$","p","108",{"children":["위 경우, 매개변수가 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"char[]","position":{"start":{"line":410,"column":13,"offset":8413},"end":{"line":410,"column":21,"offset":8421}}}],"position":{"start":{"line":410,"column":13,"offset":8413},"end":{"line":410,"column":21,"offset":8421}}},"children":["char[]"]}],", ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"String","position":{"start":{"line":410,"column":23,"offset":8423},"end":{"line":410,"column":31,"offset":8431}}}],"position":{"start":{"line":410,"column":23,"offset":8423},"end":{"line":410,"column":31,"offset":8431}}},"children":["String"]}],"으로 각각 다르므로 다형성이 적용된다."]}],"\n",["$","pre","110",{"children":[["$","$L2a",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public void println(char[] x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(x);\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic boolean println(char[] x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(x);\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n\n\treturn true;\n}\n"}],"position":{"start":{"line":412,"column":1,"offset":8454},"end":{"line":436,"column":4,"offset":8797}}},"children":["public void println(char[] x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(x);\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n}\n\npublic boolean println(char[] x) {\n\tif (getClass() == PrintStream.class) {\n\t\twriteln(x);\n\t} else {\n\t\tsynchronized (this) {\n\t\t\tprint(x);\n\t\t\tnewLine();\n\t\t}\n\t}\n\n\treturn true;\n}\n"]}]]}],"\n",["$","p","112",{"children":["반대로 위 경우는 메소드명과 매개변수는 동일하지만, 반환값이 다르다. 매개변수와 달리 ",["$","span","1",{"className":"red-400","children":["반환값은 다형성이 적용되지 않으므로, 중복된 메소드로 취급"]}],"된다. 따라서 위 소소는 컴파일 오류를 일으킨다."]}],"\n",["$","h1",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h1__mcnqG","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"마무리","position":{"start":{"line":440,"column":3,"offset":8939},"end":{"line":440,"column":6,"offset":8942}}}],"position":{"start":{"line":440,"column":1,"offset":8937},"end":{"line":440,"column":6,"offset":8942}}},"children":["$","$L11",null,{"href":"#마무리","id":"마무리","children":["$","$Lf",null,{"children":[["마무리"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","116",{"children":["객체의 다형성은 생산성에 초점이 맞춰져있다. 동일한 메소드로 여러 타입의 데이터를 처리하거나, 공통 상속된 객체를 처리함으로써 중복된 코드 소요를 제거하고 개발 편의성을 높여준다. 다형성을 적극적으로 활용하여 중복된 코드는 줄이고, 데이터 처리의 범위는 넓혀보자."]}]]}],["$","$L2b",null,{}]]}],["$","$L1a",null,{"data-component":"ViewAdsTemplate","children":["$","$L2c",null,{}]}],["$","$L1a",null,{"data-component":"ViewTagTemplate","children":["$","$Lf",null,{"data-component":"ViewTagBox","spacing":2,"children":[["$","$L19",null,{"fontWeight":"bold","children":"🏷️ Related Tag"}],["$","$L15",null,{"width":"100%","children":[["$","$L15","CS",{"display":"inline-block","paddingBottom":1,"paddingRight":1,"children":["$","$L2d",null,{"label":"# CS","size":"medium","variant":"outlined"}]}],["$","$L15","객체지향",{"display":"inline-block","paddingBottom":1,"paddingRight":1,"children":["$","$L2d",null,{"label":"# 객체지향","size":"medium","variant":"outlined"}]}],["$","$L15","다형성",{"display":"inline-block","paddingBottom":1,"paddingRight":1,"children":["$","$L2d",null,{"label":"# 다형성","size":"medium","variant":"outlined"}]}]]}]]}]}],["$","$L1a",null,{"data-component":"ViewControllTemplate","children":["$","$L2e",null,{"next":"$2f","prev":"$32","type":"posts"}]}],["$","$L1a",null,{"data-component":"ViewCommentTemplate","children":["$","$Lf",null,{"data-component":"ViewCommentBox","spacing":10,"children":[["$","$Lf",null,{"alignItems":"center","justifyContent":"center","spacing":1,"width":"100%","children":[["$","$L10",null,{"iconName":"heartMessage","width":300}],["$","$L19",null,{"variant":"h5","children":"😍 읽어주셔서 감사합니다!"}],["$","$L19",null,{"variant":"h5","children":["도움이 되셨다면, ",["$","$L19",null,{"color":"hotpink","component":"span","fontWeight":"bold","variant":"inherit","children":"💝공감"}],"이나 ",["$","$L19",null,{"color":"hotpink","component":"span","fontWeight":"bold","variant":"inherit","children":"🗨️댓글"}],"을 달아주시는 건 어떤가요?"]}],["$","$L19",null,{"variant":"h5","children":"블로그 운영에 큰 힘이 됩니다!"}]]}],["$","$Lf",null,{"data-component":"ViewHits","direction":"row","justifyContent":"center","children":["$","img",null,{"alt":"https://blog.itcode.dev/posts/2021/08/12/polymorphism","data-component":"Hits","src":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23333333&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23222222&url=https%3A%2F%2Fblog.itcode.dev%2Fposts%2F2021%2F08%2F12%2Fpolymorphism"}]}],["$","$L35",null,{}]]}]}]]}]]}],["$","$Lf",null,{"alignItems":"center","bottom":20,"data-component":"InteractionBox","direction":"row","position":"fixed","right":20,"spacing":1,"zIndex":10,"children":[["$","$L36",null,{}],["$","$L37",null,{}]]}],["$","$L38",null,{}],["$","$L39",null,{}]]}],null],"segment":"__PAGE__?{\"markdown\":[\"posts\",\"2021\",\"08\",\"12\",\"polymorphism\"]}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/86391cacb09421ad.css","precedence":"next","crossOrigin":""}]]}],"segment":["markdown","posts/2021/08/12/polymorphism","c"]},"styles":null}]}]}]}]}]]}],null]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"[OOP] 객체지향의 특징 - 다형성(Polymorphism) - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","3",{"name":"description","content":"객체지향 언어는 동일한 이름을 가진 메소드를 허용하지 않는다. 예를 들어, \"먹는다\"는 동작이 구현된 메소드가 있다고 가정하자. 먹는다는 동일한 동작이 구태여 두 개나 구현될 필요는 없다. 이러한 관점에서 본다면 메소드의 고유 아이덴티티라고도 불릴 수 있는 메소드명의 유니크화는 어쩌면 당연하다. 하지만 조금 생각해보면 좀 이상하다. JAVA는 타입에 죽고 타입에 산다. JavaScript와 달리 파라미터에 아무 타입이나 넣을 수 없기 때문에, 정해진 타입 이외의 무언가를 넣으면 컴파일 단계에서 가차없이 컷한다."}],["$","link","4",{"rel":"author","href":"https://github.com/RWB0104"}],["$","meta","5",{"name":"author","content":"Kapoo"}],["$","link","6",{"rel":"author","href":"https://www.linkedin.com/in/itcode/"}],["$","meta","7",{"name":"author","content":"RWB"}],["$","link","8",{"rel":"manifest","href":"/manifest.webmanifest"}],["$","meta","9",{"name":"keywords","content":"CS,객체지향,다형성"}],["$","meta","10",{"property":"og:title","content":"[OOP] 객체지향의 특징 - 다형성(Polymorphism) - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","11",{"property":"og:description","content":"객체지향 언어는 동일한 이름을 가진 메소드를 허용하지 않는다. 예를 들어, \"먹는다\"는 동작이 구현된 메소드가 있다고 가정하자. 먹는다는 동일한 동작이 구태여 두 개나 구현될 필요는 없다. 이러한 관점에서 본다면 메소드의 고유 아이덴티티라고도 불릴 수 있는 메소드명의 유니크화는 어쩌면 당연하다. 하지만 조금 생각해보면 좀 이상하다. JAVA는 타입에 죽고 타입에 산다. JavaScript와 달리 파라미터에 아무 타입이나 넣을 수 없기 때문에, 정해진 타입 이외의 무언가를 넣으면 컴파일 단계에서 가차없이 컷한다."}],["$","meta","12",{"property":"og:url","content":"https://blog.itcode.dev/posts/2021/08/12/polymorphism"}],["$","meta","13",{"property":"og:site_name","content":"𝝅번째 알파카의 개발 낙서장"}],["$","meta","14",{"property":"og:locale","content":"ko-KR"}],["$","meta","15",{"property":"og:image","content":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png"}],["$","meta","16",{"property":"og:type","content":"website"}],["$","meta","17",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","18",{"name":"twitter:title","content":"[OOP] 객체지향의 특징 - 다형성(Polymorphism) - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","19",{"name":"twitter:description","content":"객체지향 언어는 동일한 이름을 가진 메소드를 허용하지 않는다. 예를 들어, \"먹는다\"는 동작이 구현된 메소드가 있다고 가정하자. 먹는다는 동일한 동작이 구태여 두 개나 구현될 필요는 없다. 이러한 관점에서 본다면 메소드의 고유 아이덴티티라고도 불릴 수 있는 메소드명의 유니크화는 어쩌면 당연하다. 하지만 조금 생각해보면 좀 이상하다. JAVA는 타입에 죽고 타입에 산다. JavaScript와 달리 파라미터에 아무 타입이나 넣을 수 없기 때문에, 정해진 타입 이외의 무언가를 넣으면 컴파일 단계에서 가차없이 컷한다."}],["$","meta","20",{"name":"twitter:image","content":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png"}],["$","link","21",{"rel":"icon","href":"/favicon.ico"}],["$","link","22",{"rel":"shortcut icon","href":"/favicon.ico"}],["$","link","23",{"rel":"apple-touch-icon","href":"/favicon.ico"}],["$","meta","24",{"name":"next-size-adjust"}]]
14:null
