1:HL["/_next/static/media/17d789ad52fa3db3-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
2:HL["/_next/static/media/53595b3b2a2bc7fe-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
3:HL["/_next/static/media/6e5e69ce8a001790-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
4:HL["/_next/static/css/7e72925424d61cb2.css","style",{"crossOrigin":""}]
5:HL["/_next/static/css/f661f8399e37b45e.css","style",{"crossOrigin":""}]
6:HL["/_next/static/css/5bd1cfb45e9495b4.css","style",{"crossOrigin":""}]
0:["xzLzAA0el5mmodqC7ibfQ",[[["",{"children":[["markdown","posts/2021/08/15/liskov-subsitution-principle","c"],{"children":["__PAGE__?{\"markdown\":[\"posts\",\"2021\",\"08\",\"15\",\"liskov-subsitution-principle\"]}",{}]}]},"$undefined","$undefined",true],"$L7",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7e72925424d61cb2.css","precedence":"next","crossOrigin":""}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/f661f8399e37b45e.css","precedence":"next","crossOrigin":""}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/5bd1cfb45e9495b4.css","precedence":"next","crossOrigin":""}]],"$L8"]]]]
9:HL["/_next/static/css/86391cacb09421ad.css","style",{"crossOrigin":""}]
a:I[46544,["912","static/chunks/912-79acab5e8493ca50.js","14","static/chunks/14-2df9062aa7ee4596.js","690","static/chunks/690-8578563e9852d8ce.js","4","static/chunks/4-ce0deb4c1b4e499e.js","185","static/chunks/app/layout-068719489fd494e2.js"],""]
b:I[39587,["912","static/chunks/912-79acab5e8493ca50.js","14","static/chunks/14-2df9062aa7ee4596.js","690","static/chunks/690-8578563e9852d8ce.js","4","static/chunks/4-ce0deb4c1b4e499e.js","185","static/chunks/app/layout-068719489fd494e2.js"],""]
c:I[37151,["912","static/chunks/912-79acab5e8493ca50.js","14","static/chunks/14-2df9062aa7ee4596.js","690","static/chunks/690-8578563e9852d8ce.js","4","static/chunks/4-ce0deb4c1b4e499e.js","185","static/chunks/app/layout-068719489fd494e2.js"],""]
d:I[38310,[],""]
e:I[7717,[],""]
f:I[69229,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
10:I[48602,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
11:I[97750,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
12:I[26360,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","288","static/chunks/288-dd82034089bf753f.js","602","static/chunks/602-c635d1995b986cae.js","160","static/chunks/app/not-found-9607d7058a6a4733.js"],""]
13:I[17318,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","288","static/chunks/288-dd82034089bf753f.js","602","static/chunks/602-c635d1995b986cae.js","160","static/chunks/app/not-found-9607d7058a6a4733.js"],""]
15:I[42815,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
16:I[68310,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
17:I[47921,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
18:I[66521,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
19:I[88634,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
1a:I[40430,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
1b:I[90992,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
1c:I[4393,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
1d:I[48186,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
1e:I[26102,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
1f:I[73961,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
20:I[70839,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
21:I[1739,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
22:I[95990,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
23:I[36712,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
2a:I[9667,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
2b:I[98278,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
2c:I[31594,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
2d:I[79705,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
2e:I[13709,["119","static/chunks/301b156a-beaf09af8cb1e5d2.js","912","static/chunks/912-79acab5e8493ca50.js","658","static/chunks/658-f27a2eee618e5742.js","14","static/chunks/14-2df9062aa7ee4596.js","230","static/chunks/230-7564e0228596674f.js","288","static/chunks/288-dd82034089bf753f.js","818","static/chunks/818-dd4d6d9e06c7b58b.js","690","static/chunks/690-8578563e9852d8ce.js","791","static/chunks/791-9a72cc9c40c035ec.js","619","static/chunks/619-84d3bdf2106743ee.js","602","static/chunks/602-c635d1995b986cae.js","41","static/chunks/41-f35a9fc19af84cc4.js","78","static/chunks/app/%5B...markdown%5D/page-02e443a24d9f67fd.js"],""]
25:{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1629109497000,"excerpt":"인터페이스 분리 원칙이란 객체는 자신이 호출하지 않는 메소드에 의존하지 않아야한다는 원칙이다. 구현할 객체에게 무의미한 메소드의 구현을 방지하기 위해 반드시 필요한 메소드만을 상속/구현하도록 권고한다. 만약 상속할 객체의 규모가 너무 크다면, 해당 객체의 메소드를 작은 인터페이스로 나누는 것이 좋다. 위 그림은 규모가 너무 큰 객체를 상속했을 때 발생하는 문제와, 이를 인터페이스로 분리하여 해결하는 방법을 도식한 것이다. 왼쪽과 오른쪽 객체가 가운데 객체를 각각 상속할 경우, 왼쪽 객체는 필요한 메소드가 모두 구현되기 때문에 아무런 문제가 없다. 그러나 오른쪽 객체의 경우, Method1을 제외한 나머지 메소드는 필요가 없다. 하지만 이를 상속했기 때문에, 좋든 싫든 해당 메소드를 가지고 있거나, 최악의 경우 필요 없는 메소드를 구현까지 해야만한다. 하지만 상속 대상인 객체의 메소드를 각 동작별로 구분해 인터페이스를 만들어보자. 각 객체가 필요한 인터페이스만을 상속하여 구현하면 되므로 각자가 필요한 메소드만을 가지게 된다. 이 것이 인터페이스 분리 원칙이 지향하는 바다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 인터페이스 분리 원칙 ISP (Interface Segregation Principle)","type":"posts"}
26:["2021","08","16","interface-segregation-principle"]
24:{"frontmatter":"$25","names":"$26","url":"/posts/2021/08/16/interface-segregation-principle"}
28:{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628881480000,"excerpt":"개방 폐쇄 원칙이란 객체를 다룸에 있어서 객체의 확장은 개방적으로, 객체의 수정은 폐쇄적으로 대하는 원칙이다. 한 마디로, 보여줄 건 보여주고, 숨길 건 숨긴다는 의미. 좀 더 쉽게 말하자면, 기능이 변하거나 확장 가능하지만, 해당 기능의 코드는 수정하면 안 된다는 뜻이다. 그런데 이 원칙, 말이 좀 이상하다. 기능이 변하는 거 OK. 확장되는 거 OK. 근데 코드를 수정하면 안 된다?? 다소 이해가 되지 않는 요구사항이다. 만약, 객체 하나를 수정한다고 가정하자. 이 때 단순히 해당 객체만 수정하는 것 뿐만 아니라 해당 객체에 의존하는 다른 객체들의 코드까지 줄줄이 고쳐야한다면 좋은 설계로 보기 힘들다. 대표적으로 라이브러리를 생각해보자. 라이브러리를 사용하는 객체의 코드가 변경된다고 해서 라이브러리 코드까지 변경하지 않는다. 이처럼 개방-폐쇄 원칙은 각 객체의 모듈화와 정보 은닉의 올바른 구현을 추구하며, 이를 통해 객체 간의 의존성을 최소화하여 코드 변경에 따른 영향력을 낮추기 위한 원칙이다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 개방-폐쇄 원칙 OCP (Open-Closed Principle)","type":"posts"}
29:["2021","08","14","open-closed-principle"]
27:{"frontmatter":"$28","names":"$29","url":"/posts/2021/08/14/open-closed-principle"}
7:[null,["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":["$","script",null,{"crossOrigin":"anonymous","src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-5522045122225064","async":true}]}],["$","body",null,{"children":["$","$La",null,{"children":["$","$Lb",null,{"children":["$","$Lc",null,{"children":["$","$Ld",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Le",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$Lf",null,{"alignItems":"center","data-component":"NotFoundTemplate","height":"100vh","justifyContent":"center","padding":2,"spacing":2,"width":"100%","children":[["$","$L10",null,{"iconName":"notFound","maxWidth":400,"width":"100%"}],["$","$L11",null,{"href":"/","children":["$","$L12",null,{"color":"inherit","size":"large","startIcon":["$","$L13",null,{}],"variant":"outlined","children":"이 방엔 아무것도 없어보인다."}]}]]}],"notFoundStyles":[],"childProp":{"current":["$","$Ld",null,{"parallelRouterKey":"children","segmentPath":["children",["markdown","posts/2021/08/15/liskov-subsitution-principle","c"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Le",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L14",["$","$L15",null,{"data-component":"PageTemplate","children":[["$","$L16",null,{}],["$","$L15",null,{"component":"main","children":[["$","$L17",null,{"type":"posts"}],["$","$Lf",null,{"alignItems":"center","data-component":"ViewTemplate","spacing":10,"children":[["$","$L18",null,{"cover":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","children":["$","$Lf",null,{"alignItems":"center","data-component":"ScreenerBox","height":"100%","justifyContent":"center","padding":4,"position":"relative","width":"100%","children":[["$","$Lf",null,{"direction":"row","spacing":3,"children":[["$","$L15",null,{"bgcolor":"dodgerblue","boxShadow":"5px 5px 5px black","width":5}],["$","$Lf",null,{"children":[["$","$L19",null,{"className":"ScreenerBox_text__EQeKY","color":"white","fontWeight":"bold","variant":"h4","children":"[OOP] 객체지향 5원칙(SOLID) - 리스코프 치환 원칙 LSP (Liskov Subsitution Principle)"}],["$","$L19",null,{"className":"ScreenerBox_text__EQeKY","color":"dodgerblue","variant":"h6","children":"게시글"}],["$","$L19",null,{"className":"ScreenerBox_text__EQeKY","color":"white","variant":"h6","children":"⏰ 2021-08-15 04:42:11"}]]}]]}],["$","$Lf",null,{"alignItems":"center","bottom":50,"position":"absolute","spacing":2,"children":[["$","$Lf",null,{"border":"5px solid white","borderRadius":100,"height":50,"padding":1,"position":"relative","width":31,"children":["$","$L15",null,{"bgcolor":"white","borderRadius":100,"className":"ScreenerBox_icon__Qvdqx","height":10,"position":"absolute","width":5}]}],["$","$L19",null,{"color":"white","children":"D O W N"}]]}]]}]}],["$","$L1a",null,{"data-component":"ViewGroupTemplate","children":["$","$L1b",null,{"frontmatter":{"title":"[OOP] 객체지향 5원칙(SOLID) - 리스코프 치환 원칙 LSP (Liskov Subsitution Principle)","excerpt":"리스코프 치환 원칙은 부모 객체와 이를 상속한 자식 객체가 있을 때 부모 객체를 호출하는 동작에서 자식 객체가 부모 객체를 완전히 대체할 수 있다는 원칙이다. 객체지향 언어에선 객체의 상속이 일어난다. 이 과정에서 부모/자식 관계가 정의된다. 자식 객체는 부모 객체의 특성을 가지며, 이를 토대로 확장할 수 있다. 하지만 이 과정에서 무리하거나 객체의 의의와 어긋나는 확장으로 인해 잘못된 방향으로 상속되는 경우가 생긴다. 리스코프 치환 원칙은 올바른 상속을 위해 자식 객체의 확장이 부모 객체의 방향을 온전히 따르도록 권고하는 원칙이다.","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1629002531000,"type":"posts","category":"CS","tag":["CS","객체지향","객체지향 5원칙","리스코프 치환 원칙","LSP"],"group":"객체지향","comment":true,"publish":true},"group":[{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1629137195000,"excerpt":"의존성 역전 원칙이란 객체는 저수준 모듈보다 고수준 모듈에 의존해야한다는 원칙이다. 말이 좀 어렵다. 고수준 모듈은 뭐고, 저수준 모듈은 또 뭐란 말인가? 고/저수준 모델의 정의는 위와 같다. 위 정의를 의존성 역전 원칙에 대입하면, 객체는 객체보다 인터페이스에 의존해야한다로 치환할 수 있다. 즉, 가급적 객체의 상속은 인터페이스를 통해 이루어져야 한다는 의미로 해석할 수 있다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 의존성 역전 원칙 DIP (Dependency Inversion Principle)","type":"posts"},"names":["2021","08","17","dependency-inversion-principle"],"url":"/posts/2021/08/17/dependency-inversion-principle"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1629109497000,"excerpt":"인터페이스 분리 원칙이란 객체는 자신이 호출하지 않는 메소드에 의존하지 않아야한다는 원칙이다. 구현할 객체에게 무의미한 메소드의 구현을 방지하기 위해 반드시 필요한 메소드만을 상속/구현하도록 권고한다. 만약 상속할 객체의 규모가 너무 크다면, 해당 객체의 메소드를 작은 인터페이스로 나누는 것이 좋다. 위 그림은 규모가 너무 큰 객체를 상속했을 때 발생하는 문제와, 이를 인터페이스로 분리하여 해결하는 방법을 도식한 것이다. 왼쪽과 오른쪽 객체가 가운데 객체를 각각 상속할 경우, 왼쪽 객체는 필요한 메소드가 모두 구현되기 때문에 아무런 문제가 없다. 그러나 오른쪽 객체의 경우, Method1을 제외한 나머지 메소드는 필요가 없다. 하지만 이를 상속했기 때문에, 좋든 싫든 해당 메소드를 가지고 있거나, 최악의 경우 필요 없는 메소드를 구현까지 해야만한다. 하지만 상속 대상인 객체의 메소드를 각 동작별로 구분해 인터페이스를 만들어보자. 각 객체가 필요한 인터페이스만을 상속하여 구현하면 되므로 각자가 필요한 메소드만을 가지게 된다. 이 것이 인터페이스 분리 원칙이 지향하는 바다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 인터페이스 분리 원칙 ISP (Interface Segregation Principle)","type":"posts"},"names":["2021","08","16","interface-segregation-principle"],"url":"/posts/2021/08/16/interface-segregation-principle"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1629002531000,"excerpt":"리스코프 치환 원칙은 부모 객체와 이를 상속한 자식 객체가 있을 때 부모 객체를 호출하는 동작에서 자식 객체가 부모 객체를 완전히 대체할 수 있다는 원칙이다. 객체지향 언어에선 객체의 상속이 일어난다. 이 과정에서 부모/자식 관계가 정의된다. 자식 객체는 부모 객체의 특성을 가지며, 이를 토대로 확장할 수 있다. 하지만 이 과정에서 무리하거나 객체의 의의와 어긋나는 확장으로 인해 잘못된 방향으로 상속되는 경우가 생긴다. 리스코프 치환 원칙은 올바른 상속을 위해 자식 객체의 확장이 부모 객체의 방향을 온전히 따르도록 권고하는 원칙이다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 리스코프 치환 원칙 LSP (Liskov Subsitution Principle)","type":"posts"},"names":["2021","08","15","liskov-subsitution-principle"],"url":"/posts/2021/08/15/liskov-subsitution-principle"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628881480000,"excerpt":"개방 폐쇄 원칙이란 객체를 다룸에 있어서 객체의 확장은 개방적으로, 객체의 수정은 폐쇄적으로 대하는 원칙이다. 한 마디로, 보여줄 건 보여주고, 숨길 건 숨긴다는 의미. 좀 더 쉽게 말하자면, 기능이 변하거나 확장 가능하지만, 해당 기능의 코드는 수정하면 안 된다는 뜻이다. 그런데 이 원칙, 말이 좀 이상하다. 기능이 변하는 거 OK. 확장되는 거 OK. 근데 코드를 수정하면 안 된다?? 다소 이해가 되지 않는 요구사항이다. 만약, 객체 하나를 수정한다고 가정하자. 이 때 단순히 해당 객체만 수정하는 것 뿐만 아니라 해당 객체에 의존하는 다른 객체들의 코드까지 줄줄이 고쳐야한다면 좋은 설계로 보기 힘들다. 대표적으로 라이브러리를 생각해보자. 라이브러리를 사용하는 객체의 코드가 변경된다고 해서 라이브러리 코드까지 변경하지 않는다. 이처럼 개방-폐쇄 원칙은 각 객체의 모듈화와 정보 은닉의 올바른 구현을 추구하며, 이를 통해 객체 간의 의존성을 최소화하여 코드 변경에 따른 영향력을 낮추기 위한 원칙이다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 개방-폐쇄 원칙 OCP (Open-Closed Principle)","type":"posts"},"names":["2021","08","14","open-closed-principle"],"url":"/posts/2021/08/14/open-closed-principle"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628786268000,"excerpt":"올바른 객체지향 설계를 위해 수립한 원칙이 있으며, 이 다섯 가지 원칙을 통틀어 객체지향 5원칙(SOLID)이라 명명한다. 필수로 적용하지는 않지만, 적어도 이 규칙을 준수하면 준수할 수록 올바르게 설계된 객체지향이라 할 수 있다. 이 다섯가지 원칙은 아래와 같다.","group":"객체지향","title":"[OOP] 객체지향 5원칙(SOLID) - 단일 책임 원칙 SRP(Single Responsibility Principle)","type":"posts"},"names":["2021","08","13","single-responsibility-principle"],"url":"/posts/2021/08/13/single-responsibility-principle"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628695962000,"excerpt":"객체지향 언어는 동일한 이름을 가진 메소드를 허용하지 않는다. 예를 들어, \"먹는다\"는 동작이 구현된 메소드가 있다고 가정하자. 먹는다는 동일한 동작이 구태여 두 개나 구현될 필요는 없다. 이러한 관점에서 본다면 메소드의 고유 아이덴티티라고도 불릴 수 있는 메소드명의 유니크화는 어쩌면 당연하다. 하지만 조금 생각해보면 좀 이상하다. JAVA는 타입에 죽고 타입에 산다. JavaScript와 달리 파라미터에 아무 타입이나 넣을 수 없기 때문에, 정해진 타입 이외의 무언가를 넣으면 컴파일 단계에서 가차없이 컷한다.","group":"객체지향","title":"[OOP] 객체지향의 특징 - 다형성(Polymorphism)","type":"posts"},"names":["2021","08","12","polymorphism"],"url":"/posts/2021/08/12/polymorphism"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628681553000,"excerpt":"나른한 주말, 느긋하게 영화를 보고 있는 A씨. 영화에선 천대받으며 살던 주인공 소녀가 어느날 누군가로부터 거액의 유산을 받았다. 알고보니 그는 어렸을 적 실종된 재벌집 가문의 손녀딸이였던 것! 이후 그녀는 받은 유산을 통해 고마웠던 주변인에게 은혜를 갚고, 무시하던 이들에게 통쾌한 복수를 돌려준다는 내용이였다. 나름 통쾌했던 A씨지만, 어차피 현실에선 일어날 수 없는 일이라는 걸 이내 떠올린 A씨. 우리는 이걸 상속이라 부른다. 이처럼 상속이라는 개념은 영화나 드라마와 같은 창작물에서나 볼 수 있었다. 사전에서나 찾아볼 수 있었던 허구의 개념인 셈이다.","group":"객체지향","title":"[OOP] 객체지향의 특징 - 상속(Inheritance)","type":"posts"},"names":["2021","08","11","inheritance"],"url":"/posts/2021/08/11/inheritance"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628388305000,"excerpt":"객체. 즉, 클래스의 내부 변수와 메소드를 하나로 패키징하는 특징이다. 객체에 선언된 변수나 메소드가 구분없이 중구난방으로 접근할 수 있다면 정상적인 객체로 보기 어렵다. 캡슐화와 비슷한 개념으로 정보 은닉이라는 개념이 있다. 정보 은닉은 객체의 내부 구현을 숨김으로써 객체가 반드시 정해진 메소드를 통해 상호작용하도록 유도한다. 이 두 개념은 객체의 응집도와 독립성을 높임으로써 객체의 모듈화를 지향한다. 객체의 모듈화가 잘 이루어져있을 경우 모듈 단위의 재사용이 매우 용이하다. 여러 로직에서 중복되는 코드를 모듈로 대체하면 모듈 내부의 소스만 수정하는 것으로 수정사항을 반영할 수 있다. 이는 곧 간편한 유지보수와 직결된다.","group":"객체지향","title":"[OOP] 객체지향의 특징 - 캡슐화(Encapsulation)와 정보 은닉","type":"posts"},"names":["2021","08","08","encapulation"],"url":"/posts/2021/08/08/encapulation"},{"frontmatter":{"category":"CS","coverImage":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png","date":1628305605000,"excerpt":"IT 업계에 종사하게 된다면 십중팔구 JAVA, C++, C# 중 하나는 다루게 된다. 국내 IT의 최다 공급이자 수요인 JAVA를 위시한 위 세 가지 언어의 공통점은 전부 객체지향언어라는 점이다. 물론 지금에 이르러서는 함수형이라는 개념도 나왔지만, C의 단순한 절차지향 이래로 나온 객체지향은 프로그래밍의 새로운 관점을 제시했고, 크고 작은 언어들이 알게 모르게 영향을 받았다. 이렇게 영향력이 큰 개념임에도 불구하고 막상 이와 관련된 질문을 받으면 명확하게 답을 내지 못 하기도 한다.","group":"객체지향","title":"[OOP] 객체지향 프로그래밍(Object Oriented Programming)이란?","type":"posts"},"names":["2021","08","07","what-is-oop"],"url":"/posts/2021/08/07/what-is-oop"}],"link":"/posts/2021/08/15/liskov-subsitution-principle"}]}],["$","$L1a",null,{"data-component":"ViewTocTemplate","children":["$","$L1c",null,{"toc":[{"level":1,"text":"리스코프 치환 원칙 LSP (Liskov Subsitution Principle)"},{"level":1,"text":"코드로 보는 리스코프 치환 원칙"},{"level":2,"text":"리스코프 치환 원칙을 위배한 코드"},{"level":2,"text":"리스코프 치환 원칙을 준수한 코드"},{"level":1,"text":"정리"}]}]}],["$","$L1a",null,{"data-component":"ViewContentTemplate","children":[["$","div",null,{"className":"MarkdownViewer_markdown__kFBT_","children":[["$","h1",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h1__mcnqG","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"리스코프 치환 원칙 LSP (Liskov Subsitution Principle)","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":48,"offset":48}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":48,"offset":48}}},"children":["$","$L11",null,{"href":"#리스코프-치환-원칙-lsp-(liskov-subsitution-principle)","id":"리스코프-치환-원칙-lsp-(liskov-subsitution-principle)","children":["$","$Lf",null,{"children":[["리스코프 치환 원칙 LSP (Liskov Subsitution Principle)"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","2",{"children":[["$","span","0",{"className":"orange-400","children":["리스코프 치환 원칙"]}],"은 부모 객체와 이를 상속한 자식 객체가 있을 때 ",["$","span","2",{"className":"red-600","children":["부모 객체를 호출하는 동작에서 자식 객체가 부모 객체를 완전히 대체할 수 있다"]}],"는 원칙이다."]}],"\n",["$","p","4",{"children":["객체지향 언어에선 객체의 상속이 일어난다. 이 과정에서 부모/자식 관계가 정의된다. 자식 객체는 부모 객체의 특성을 가지며, 이를 토대로 확장할 수 있다. 하지만 이 과정에서 무리하거나 객체의 의의와 어긋나는 확장으로 인해 잘못된 방향으로 상속되는 경우가 생긴다."]}],"\n",["$","p","6",{"children":["리스코프 치환 원칙은 올바른 상속을 위해 자식 객체의 확장이 부모 객체의 방향을 온전히 따르도록 권고하는 원칙이다."]}],"\n",["$","h1",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h1__mcnqG","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"코드로 보는 리스코프 치환 원칙","position":{"start":{"line":10,"column":3,"offset":418},"end":{"line":10,"column":20,"offset":435}}}],"position":{"start":{"line":10,"column":1,"offset":416},"end":{"line":10,"column":20,"offset":435}}},"children":["$","$L11",null,{"href":"#코드로-보는-리스코프-치환-원칙","id":"코드로-보는-리스코프-치환-원칙","children":["$","$Lf",null,{"children":[["코드로 보는 리스코프 치환 원칙"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","10",{"children":["리스코프 치환 원칙을 설명할 때 많이 사용하는 예제로 직사각형과 정사각형의 관계가 있다."]}],"\n",["$","h2",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h2__9tbOB","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"리스코프 치환 원칙을 위배한 코드","position":{"start":{"line":14,"column":4,"offset":491},"end":{"line":14,"column":22,"offset":509}}}],"position":{"start":{"line":14,"column":1,"offset":488},"end":{"line":14,"column":22,"offset":509}}},"children":["$","$L11",null,{"href":"#리스코프-치환-원칙을-위배한-코드","id":"리스코프-치환-원칙을-위배한-코드","children":["$","$Lf",null,{"children":[["리스코프 치환 원칙을 위배한 코드"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","pre","14",{"children":[["$","$L1e",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * 직사각형 클래스\n *\n * @author RWB\n * @since 2021.08.14 Sat 11:12:44\n */\npublic class Rectangle\n{\n\tprotected int width;\n\tprotected int height;\n\t\n\t/**\n\t * 너비 반환 함수\n\t *\n\t * @return [int] 너비\n\t */\n\tpublic int getWidth()\n\t{\n\t\treturn width;\n\t}\n\t\n\t/**\n\t * 높이 반환 함수\n\t *\n\t * @return [int] 높이\n\t */\n\tpublic int getHeight()\n\t{\n\t\treturn height;\n\t}\n\t\n\t/**\n\t * 너비 할당 함수\n\t *\n\t * @param width: [int] 너비\n\t */\n\tpublic void setWidth(int width)\n\t{\n\t\tthis.width = width;\n\t}\n\t\n\t/**\n\t * 높이 할당 함수\n\t *\n\t * @param height: [int] 높이\n\t */\n\tpublic void setHeight(int height)\n\t{\n\t\tthis.height = height;\n\t}\n\t\n\t/**\n\t * 넓이 반환 함수\n\t *\n\t * @return [int] 넓이\n\t */\n\tpublic int getArea()\n\t{\n\t\treturn width * height;\n\t}\n}\n"}],"position":{"start":{"line":16,"column":1,"offset":511},"end":{"line":78,"column":4,"offset":1201}}},"children":["/**\n * 직사각형 클래스\n *\n * @author RWB\n * @since 2021.08.14 Sat 11:12:44\n */\npublic class Rectangle\n{\n\tprotected int width;\n\tprotected int height;\n\t\n\t/**\n\t * 너비 반환 함수\n\t *\n\t * @return [int] 너비\n\t */\n\tpublic int getWidth()\n\t{\n\t\treturn width;\n\t}\n\t\n\t/**\n\t * 높이 반환 함수\n\t *\n\t * @return [int] 높이\n\t */\n\tpublic int getHeight()\n\t{\n\t\treturn height;\n\t}\n\t\n\t/**\n\t * 너비 할당 함수\n\t *\n\t * @param width: [int] 너비\n\t */\n\tpublic void setWidth(int width)\n\t{\n\t\tthis.width = width;\n\t}\n\t\n\t/**\n\t * 높이 할당 함수\n\t *\n\t * @param height: [int] 높이\n\t */\n\tpublic void setHeight(int height)\n\t{\n\t\tthis.height = height;\n\t}\n\t\n\t/**\n\t * 넓이 반환 함수\n\t *\n\t * @return [int] 넓이\n\t */\n\tpublic int getArea()\n\t{\n\t\treturn width * height;\n\t}\n}\n"]}]]}],"\n",["$","p","16",{"children":[["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rectangle","position":{"start":{"line":80,"column":1,"offset":1203},"end":{"line":80,"column":12,"offset":1214}}}],"position":{"start":{"line":80,"column":1,"offset":1203},"end":{"line":80,"column":12,"offset":1214}}},"children":["Rectangle"]}],"은 직사각형을 구현한 객체다. 너비와 높이를 지정, 반환할 수 있으며, 지정된 값을 통해 자신의 넓이를 계산할 수 있다."]}],"\n",["$","p","18",{"children":["정사각형 역시 넓게 보면 직사각형의 한 종류이니, ",["$","span","1",{"className":"red-400","children":["직사각형을 상속하여 정사각형 객체를 빠르게 만들 수 있을 것이라 생각했다."]}]]}],"\n",["$","pre","20",{"children":[["$","$L1e",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * 정사각형 클래스\n *\n * @author RWB\n * @since 2021.08.14 Sat 11:19:07\n */\npublic class Square extends Rectangle\n{\n\t/**\n\t * 너비 할당 함수\n\t *\n\t * @param width: [int] 너비\n\t */\n\t@Override\n\tpublic void setWidth(int width)\n\t{\n\t\tsuper.setWidth(width);\n\t\tsuper.setHeight(getWidth());\n\t}\n\t\n\t/**\n\t * 높이 할당 함수\n\t *\n\t * @param height: [int] 높이\n\t */\n\t@Override\n\tpublic void setHeight(int height)\n\t{\n\t\tsuper.setHeight(height);\n\t\tsuper.setWidth(getHeight());\n\t}\n}\n"}],"position":{"start":{"line":84,"column":1,"offset":1383},"end":{"line":117,"column":4,"offset":1836}}},"children":["/**\n * 정사각형 클래스\n *\n * @author RWB\n * @since 2021.08.14 Sat 11:19:07\n */\npublic class Square extends Rectangle\n{\n\t/**\n\t * 너비 할당 함수\n\t *\n\t * @param width: [int] 너비\n\t */\n\t@Override\n\tpublic void setWidth(int width)\n\t{\n\t\tsuper.setWidth(width);\n\t\tsuper.setHeight(getWidth());\n\t}\n\t\n\t/**\n\t * 높이 할당 함수\n\t *\n\t * @param height: [int] 높이\n\t */\n\t@Override\n\tpublic void setHeight(int height)\n\t{\n\t\tsuper.setHeight(height);\n\t\tsuper.setWidth(getHeight());\n\t}\n}\n"]}]]}],"\n",["$","p","22",{"children":["위 처럼 정사각형 객체 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Square","position":{"start":{"line":119,"column":14,"offset":1851},"end":{"line":119,"column":22,"offset":1859}}}],"position":{"start":{"line":119,"column":14,"offset":1851},"end":{"line":119,"column":22,"offset":1859}}},"children":["Square"]}],"를 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rectangle","position":{"start":{"line":119,"column":24,"offset":1861},"end":{"line":119,"column":35,"offset":1872}}}],"position":{"start":{"line":119,"column":24,"offset":1861},"end":{"line":119,"column":35,"offset":1872}}},"children":["Rectangle"]}],"의 상속을 통해 쉽게 구현할 수 있었다."]}],"\n",["$","p","24",{"children":["정사각형의 경우 직사각형과 달리 너비와 높이가 같으니, 너비나 높이를 지정하면 그에 맞게 너비와 높이를 모두 일치시켜주도록 오버라이딩을 수행했다."]}],"\n",["$","p","26",{"children":["구현한 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rectangle","position":{"start":{"line":123,"column":5,"offset":1983},"end":{"line":123,"column":16,"offset":1994}}}],"position":{"start":{"line":123,"column":5,"offset":1983},"end":{"line":123,"column":16,"offset":1994}}},"children":["Rectangle"]}],"의 넓이를 구해보자."]}],"\n",["$","pre","28",{"children":[["$","$L1e",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * 메인 클래스\n *\n * @author RWB\n * @since 2021.06.14 Mon 00:06:32\n */\npublic class Main\n{\n\t/**\n\t * 메인 함수\n\t *\n\t * @param args: [String[]] 매개변수\n\t */\n\tpublic static void main(String[] args)\n\t{\n\t\tRectangle rectangle = new Rectangle();\n\t\trectangle.setWidth(10);\n\t\trectangle.setHeight(5);\n\t\t\n\t\tSystem.out.println(rectangle.getArea());\n\t}\n}\n"}],"position":{"start":{"line":125,"column":1,"offset":2007},"end":{"line":148,"column":4,"offset":2353}}},"children":["/**\n * 메인 클래스\n *\n * @author RWB\n * @since 2021.06.14 Mon 00:06:32\n */\npublic class Main\n{\n\t/**\n\t * 메인 함수\n\t *\n\t * @param args: [String[]] 매개변수\n\t */\n\tpublic static void main(String[] args)\n\t{\n\t\tRectangle rectangle = new Rectangle();\n\t\trectangle.setWidth(10);\n\t\trectangle.setHeight(5);\n\t\t\n\t\tSystem.out.println(rectangle.getArea());\n\t}\n}\n"]}]]}],"\n",["$","pre","30",{"children":[["$","$L1e",null,{"languageName":"output","className":"language-output","node":{"type":"element","tagName":"code","properties":{"className":["language-output"]},"children":[{"type":"text","value":"50\n"}],"position":{"start":{"line":150,"column":1,"offset":2355},"end":{"line":152,"column":4,"offset":2372}}},"children":["50\n"]}]]}],"\n",["$","p","32",{"children":[["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rectangle","position":{"start":{"line":154,"column":1,"offset":2374},"end":{"line":154,"column":12,"offset":2385}}}],"position":{"start":{"line":154,"column":1,"offset":2374},"end":{"line":154,"column":12,"offset":2385}}},"children":["Rectangle"]}],"의 넓이를 구하는 소스는 이와 같다. 너비가 10, 높이가 5로 할당됐으므로 넓이 50이 정상적으로 반환된다."]}],"\n",["$","p","34",{"children":["리스코프 치환 원칙에 의하면, 자식 객체는 부모 객체를 완전히 대체할 수 있다고 했으므로, ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rectangle","position":{"start":{"line":156,"column":52,"offset":2499},"end":{"line":156,"column":63,"offset":2510}}}],"position":{"start":{"line":156,"column":52,"offset":2499},"end":{"line":156,"column":63,"offset":2510}}},"children":["Rectangle"]}],"을 상속받은 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Square","position":{"start":{"line":156,"column":70,"offset":2517},"end":{"line":156,"column":78,"offset":2525}}}],"position":{"start":{"line":156,"column":70,"offset":2517},"end":{"line":156,"column":78,"offset":2525}}},"children":["Square"]}],"로 대체하여 넓이를 구해보자."]}],"\n",["$","p","36",{"children":[["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Square","position":{"start":{"line":158,"column":1,"offset":2543},"end":{"line":158,"column":9,"offset":2551}}}],"position":{"start":{"line":158,"column":1,"offset":2543},"end":{"line":158,"column":9,"offset":2551}}},"children":["Square"]}],"가 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rectangle","position":{"start":{"line":158,"column":11,"offset":2553},"end":{"line":158,"column":22,"offset":2564}}}],"position":{"start":{"line":158,"column":11,"offset":2553},"end":{"line":158,"column":22,"offset":2564}}},"children":["Rectangle"]}],"을 완전히 대체했다면 동일한 결과인 50이 반환되어야 한다."]}],"\n",["$","pre","38",{"children":[["$","$L1e",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * 메인 클래스\n *\n * @author RWB\n * @since 2021.06.14 Mon 00:06:32\n */\npublic class Main\n{\n\t/**\n\t * 메인 함수\n\t *\n\t * @param args: [String[]] 매개변수\n\t */\n\tpublic static void main(String[] args)\n\t{\n\t\tRectangle rectangle = new Square();\n\t\trectangle.setWidth(10);\n\t\trectangle.setHeight(5);\n\t\t\n\t\tSystem.out.println(rectangle.getArea());\n\t}\n}\n"}],"position":{"start":{"line":160,"column":1,"offset":2599},"end":{"line":183,"column":4,"offset":2942}}},"children":["/**\n * 메인 클래스\n *\n * @author RWB\n * @since 2021.06.14 Mon 00:06:32\n */\npublic class Main\n{\n\t/**\n\t * 메인 함수\n\t *\n\t * @param args: [String[]] 매개변수\n\t */\n\tpublic static void main(String[] args)\n\t{\n\t\tRectangle rectangle = new Square();\n\t\trectangle.setWidth(10);\n\t\trectangle.setHeight(5);\n\t\t\n\t\tSystem.out.println(rectangle.getArea());\n\t}\n}\n"]}]]}],"\n",["$","pre","40",{"children":[["$","$L1e",null,{"languageName":"output","className":"language-output","node":{"type":"element","tagName":"code","properties":{"className":["language-output"]},"children":[{"type":"text","value":"25\n"}],"position":{"start":{"line":185,"column":1,"offset":2944},"end":{"line":187,"column":4,"offset":2961}}},"children":["25\n"]}]]}],"\n",["$","p","42",{"children":["어째서인지 넓이는 50이 아닌 25로 반환됐다. 자세히 살펴보니, 마지막에 수행된 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setHeight(5)","position":{"start":{"line":189,"column":47,"offset":3009},"end":{"line":189,"column":61,"offset":3023}}}],"position":{"start":{"line":189,"column":47,"offset":3009},"end":{"line":189,"column":61,"offset":3023}}},"children":["setHeight(5)"]}],"가 객체의 너비/높이를 모두 5로 할당했다. 그러니 넓이도 당연히 25가 출력될 수밖에 없었던 걸로 보인다. 즉, 이 객체는 리스코프 치환 원칙에 위배되는 코드다."]}],"\n",["$","p","44",{"children":["곰곰히 생각해보면, 직사각형과 정사각형은 상속관계가 전혀 될 수 없다. 사각형의 특징을 서로 갖고있긴 하지만, 두 사각형 모두 사각형의 한 종류일 뿐으로, 하나가 다른 하나를 완전히 포함하지 못 하는 구조다."]}],"\n",["$","p","46",{"children":["이렇게 잘못된 객체를 상속하거나, 올바르게 확장하지 못 할 경우 겉으로 보기엔 정상적이지만 올바른 객체는 아니다."]}],"\n",["$","h2",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h2__9tbOB","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"리스코프 치환 원칙을 준수한 코드","position":{"start":{"line":195,"column":4,"offset":3302},"end":{"line":195,"column":22,"offset":3320}}}],"position":{"start":{"line":195,"column":1,"offset":3299},"end":{"line":195,"column":22,"offset":3320}}},"children":["$","$L11",null,{"href":"#리스코프-치환-원칙을-준수한-코드","id":"리스코프-치환-원칙을-준수한-코드","children":["$","$Lf",null,{"children":[["리스코프 치환 원칙을 준수한 코드"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","50",{"children":["그렇다면 이 코드를 어떻게 리스코프 치환 원칙에 부합하게끔 구성할 수 있을까?"]}],"\n",["$","p","52",{"children":["답은 올바른 상속과 구현에 있다. 앞서 설명했다시피, 직사각형과 정사각형은 상속의 관계가 성립되기 어렵다. 따라서 이보다 더 상위 개념인 사각형 객체를 구현하고 정사각형, 직사각형이 이를 상속받으면 될 것이다."]}],"\n",["$","pre","54",{"children":[["$","$L1e",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * 사각형 객체\n *\n * @author RWB\n * @since 2021.08.14 Sat 11:39:02\n */\npublic class Shape\n{\n\tprotected int width;\n\tprotected int height;\n\t\n\t/**\n\t * 너비 반환 함수\n\t *\n\t * @return [int] 너비\n\t */\n\tpublic int getWidth()\n\t{\n\t\treturn width;\n\t}\n\t\n\t/**\n\t * 높이 반환 함수\n\t *\n\t * @return [int] 높이\n\t */\n\tpublic int getHeight()\n\t{\n\t\treturn height;\n\t}\n\t\n\t/**\n\t * 너비 할당 함수\n\t *\n\t * @param width: [int] 너비\n\t */\n\tpublic void setWidth(int width)\n\t{\n\t\tthis.width = width;\n\t}\n\t\n\t/**\n\t * 높이 할당 함수\n\t *\n\t * @param height: [int] 높이\n\t */\n\tpublic void setHeight(int height)\n\t{\n\t\tthis.height = height;\n\t}\n\t\n\t/**\n\t * 넓이 반환 함수\n\t *\n\t * @return [int] 넓이\n\t */\n\tpublic int getArea()\n\t{\n\t\treturn width * height;\n\t}\n}\n"}],"position":{"start":{"line":201,"column":1,"offset":3486},"end":{"line":263,"column":4,"offset":4170}}},"children":["/**\n * 사각형 객체\n *\n * @author RWB\n * @since 2021.08.14 Sat 11:39:02\n */\npublic class Shape\n{\n\tprotected int width;\n\tprotected int height;\n\t\n\t/**\n\t * 너비 반환 함수\n\t *\n\t * @return [int] 너비\n\t */\n\tpublic int getWidth()\n\t{\n\t\treturn width;\n\t}\n\t\n\t/**\n\t * 높이 반환 함수\n\t *\n\t * @return [int] 높이\n\t */\n\tpublic int getHeight()\n\t{\n\t\treturn height;\n\t}\n\t\n\t/**\n\t * 너비 할당 함수\n\t *\n\t * @param width: [int] 너비\n\t */\n\tpublic void setWidth(int width)\n\t{\n\t\tthis.width = width;\n\t}\n\t\n\t/**\n\t * 높이 할당 함수\n\t *\n\t * @param height: [int] 높이\n\t */\n\tpublic void setHeight(int height)\n\t{\n\t\tthis.height = height;\n\t}\n\t\n\t/**\n\t * 넓이 반환 함수\n\t *\n\t * @return [int] 넓이\n\t */\n\tpublic int getArea()\n\t{\n\t\treturn width * height;\n\t}\n}\n"]}]]}],"\n",["$","p","56",{"children":["위와 같이 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Shape","position":{"start":{"line":265,"column":7,"offset":4178},"end":{"line":265,"column":14,"offset":4185}}}],"position":{"start":{"line":265,"column":7,"offset":4178},"end":{"line":265,"column":14,"offset":4185}}},"children":["Shape"]}],"라는 사각형 객체를 구현한다."]}],"\n",["$","pre","58",{"children":[["$","$L1e",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * 직사각형 클래스\n *\n * @author RWB\n * @since 2021.08.14 Sat 11:12:44\n */\nclass Rectangle extends Shape\n{\n\t/**\n\t * Rectangle 생성자 함수\n\t *\n\t * @param width: [int] 너비\n\t * @param height: [int] 높이\n\t */\n\tpublic Rectangle(int width, int height)\n\t{\n\t\tsetWidth(width);\n\t\tsetHeight(height);\n\t}\n}\n\n/**\n * 정사각형 클래스\n *\n * @author RWB\n * @since 2021.08.14 Sat 11:19:07\n */\nclass Square extends Shape\n{\n\t/**\n\t * Square 생성자 함수\n\t *\n\t * @param length: [int] 길이\n\t */\n\tpublic Square(int length)\n\t{\n\t\tsetWidth(length);\n\t\tsetHeight(length);\n\t}\n}\n"}],"position":{"start":{"line":267,"column":1,"offset":4203},"end":{"line":308,"column":4,"offset":4736}}},"children":["/**\n * 직사각형 클래스\n *\n * @author RWB\n * @since 2021.08.14 Sat 11:12:44\n */\nclass Rectangle extends Shape\n{\n\t/**\n\t * Rectangle 생성자 함수\n\t *\n\t * @param width: [int] 너비\n\t * @param height: [int] 높이\n\t */\n\tpublic Rectangle(int width, int height)\n\t{\n\t\tsetWidth(width);\n\t\tsetHeight(height);\n\t}\n}\n\n/**\n * 정사각형 클래스\n *\n * @author RWB\n * @since 2021.08.14 Sat 11:19:07\n */\nclass Square extends Shape\n{\n\t/**\n\t * Square 생성자 함수\n\t *\n\t * @param length: [int] 길이\n\t */\n\tpublic Square(int length)\n\t{\n\t\tsetWidth(length);\n\t\tsetHeight(length);\n\t}\n}\n"]}]]}],"\n",["$","p","60",{"children":[["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Shape","position":{"start":{"line":310,"column":1,"offset":4738},"end":{"line":310,"column":8,"offset":4745}}}],"position":{"start":{"line":310,"column":1,"offset":4738},"end":{"line":310,"column":8,"offset":4745}}},"children":["Shape"]}],"를 상속받는 두 사각형 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rectangle","position":{"start":{"line":310,"column":21,"offset":4758},"end":{"line":310,"column":32,"offset":4769}}}],"position":{"start":{"line":310,"column":21,"offset":4758},"end":{"line":310,"column":32,"offset":4769}}},"children":["Rectangle"]}],"과 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Square","position":{"start":{"line":310,"column":34,"offset":4771},"end":{"line":310,"column":42,"offset":4779}}}],"position":{"start":{"line":310,"column":34,"offset":4771},"end":{"line":310,"column":42,"offset":4779}}},"children":["Square"]}]," 객체는 위와 같다. ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rectangle","position":{"start":{"line":310,"column":54,"offset":4791},"end":{"line":310,"column":65,"offset":4802}}}],"position":{"start":{"line":310,"column":54,"offset":4791},"end":{"line":310,"column":65,"offset":4802}}},"children":["Rectangle"]}],"은 인스턴스 생성 시 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"width","position":{"start":{"line":310,"column":77,"offset":4814},"end":{"line":310,"column":84,"offset":4821}}}],"position":{"start":{"line":310,"column":77,"offset":4814},"end":{"line":310,"column":84,"offset":4821}}},"children":["width"]}],"와 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"height","position":{"start":{"line":310,"column":86,"offset":4823},"end":{"line":310,"column":94,"offset":4831}}}],"position":{"start":{"line":310,"column":86,"offset":4823},"end":{"line":310,"column":94,"offset":4831}}},"children":["height"]}],"를 파라미터로 받으며, ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Square","position":{"start":{"line":310,"column":107,"offset":4844},"end":{"line":310,"column":115,"offset":4852}}}],"position":{"start":{"line":310,"column":107,"offset":4844},"end":{"line":310,"column":115,"offset":4852}}},"children":["Square"]}],"는 각 변의 길이가 모두 동일하므로 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"length","position":{"start":{"line":310,"column":135,"offset":4872},"end":{"line":310,"column":143,"offset":4880}}}],"position":{"start":{"line":310,"column":135,"offset":4872},"end":{"line":310,"column":143,"offset":4880}}},"children":["length"]}]," 하나만을 파라미터로 받는다."]}],"\n",["$","pre","62",{"children":[["$","$L1e",null,{"languageName":"java","className":"language-java","node":{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * 메인 클래스\n *\n * @author RWB\n * @since 2021.06.14 Mon 00:06:32\n */\npublic class Main\n{\n\t/**\n\t * 메인 함수\n\t *\n\t * @param args: [String[]] 매개변수\n\t */\n\tpublic static void main(String[] args)\n\t{\n\t\tShape rectangle = new Rectangle(10, 5);\n\t\tShape square = new Square(5);\n\n\t\tSystem.out.println(rectangle.getArea());\n\t\tSystem.out.println(square.getArea());\n\t}\n}\n"}],"position":{"start":{"line":312,"column":1,"offset":4898},"end":{"line":335,"column":4,"offset":5263}}},"children":["/**\n * 메인 클래스\n *\n * @author RWB\n * @since 2021.06.14 Mon 00:06:32\n */\npublic class Main\n{\n\t/**\n\t * 메인 함수\n\t *\n\t * @param args: [String[]] 매개변수\n\t */\n\tpublic static void main(String[] args)\n\t{\n\t\tShape rectangle = new Rectangle(10, 5);\n\t\tShape square = new Square(5);\n\n\t\tSystem.out.println(rectangle.getArea());\n\t\tSystem.out.println(square.getArea());\n\t}\n}\n"]}]]}],"\n",["$","pre","64",{"children":[["$","$L1e",null,{"languageName":"output","className":"language-output","node":{"type":"element","tagName":"code","properties":{"className":["language-output"]},"children":[{"type":"text","value":"50\n25\n"}],"position":{"start":{"line":337,"column":1,"offset":5265},"end":{"line":340,"column":4,"offset":5285}}},"children":["50\n25\n"]}]]}],"\n",["$","p","66",{"children":["이제 더 이상 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rectangle","position":{"start":{"line":342,"column":9,"offset":5295},"end":{"line":342,"column":20,"offset":5306}}}],"position":{"start":{"line":342,"column":9,"offset":5295},"end":{"line":342,"column":20,"offset":5306}}},"children":["Rectangle"]}],"과 ",["$","$L1f",null,{"inline":true,"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Square","position":{"start":{"line":342,"column":22,"offset":5308},"end":{"line":342,"column":30,"offset":5316}}}],"position":{"start":{"line":342,"column":22,"offset":5308},"end":{"line":342,"column":30,"offset":5316}}},"children":["Square"]}],"가 상속 관계가 아니므로, 리스코프 치환 원칙의 영향에서 벗어났다."]}],"\n",["$","h1",null,{"className":"MarkdownHeading_heading__oazA9 MarkdownHeading_h1__mcnqG","data-component":"MarkdownHeading","node":{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"정리","position":{"start":{"line":344,"column":3,"offset":5357},"end":{"line":344,"column":5,"offset":5359}}}],"position":{"start":{"line":344,"column":1,"offset":5355},"end":{"line":344,"column":5,"offset":5359}}},"children":["$","$L11",null,{"href":"#정리","id":"정리","children":["$","$Lf",null,{"children":[["정리"],["$","$L15",null,{"paddingTop":1,"children":["$","$L1d",null,{}]}]]}]}]}],"\n",["$","p","70",{"children":["리스코프 치환 원칙은 상속되는 객체는 반드시 부모 객체를 완전히 대체해도 아무런 문제가 없도록 권고한다. 위의 직사각형과 정사각형의 케이스처럼 올바르지 못한 상속관계는 제거하고, 부모 객체의 동작을 완벽하게 대체할 수 있는 관계만 상속하도록 코드를 설계해야한다."]}],"\n",["$","p","72",{"children":["리스코프 치환 원칙을 지키기 위해선 가급적 부모 객체의 일반 메소드를 그 의도와 다르게 오버라이딩 하지 않는 것이 중요하다."]}],"\n",["$","p","74",{"children":["부모 객체의 오버라이딩은 주로 동일한 메소드를 자식 객체만의 동작을 추가하기 위해 한다는 걸 감안하면 매우 준수하기 까다로운 원칙."]}]]}],["$","$L20",null,{}]]}],["$","$L1a",null,{"data-component":"ViewAdsTemplate","children":["$","$L21",null,{}]}],["$","$L1a",null,{"data-component":"ViewTagTemplate","children":["$","$Lf",null,{"data-component":"ViewTagBox","spacing":2,"children":[["$","$L19",null,{"fontWeight":"bold","children":"🏷️ Related Tag"}],["$","$L15",null,{"width":"100%","children":[["$","$L15","CS",{"display":"inline-block","paddingBottom":1,"paddingRight":1,"children":["$","$L22",null,{"label":"# CS","size":"medium","variant":"outlined"}]}],["$","$L15","객체지향",{"display":"inline-block","paddingBottom":1,"paddingRight":1,"children":["$","$L22",null,{"label":"# 객체지향","size":"medium","variant":"outlined"}]}],["$","$L15","객체지향 5원칙",{"display":"inline-block","paddingBottom":1,"paddingRight":1,"children":["$","$L22",null,{"label":"# 객체지향 5원칙","size":"medium","variant":"outlined"}]}],["$","$L15","리스코프 치환 원칙",{"display":"inline-block","paddingBottom":1,"paddingRight":1,"children":["$","$L22",null,{"label":"# 리스코프 치환 원칙","size":"medium","variant":"outlined"}]}],["$","$L15","LSP",{"display":"inline-block","paddingBottom":1,"paddingRight":1,"children":["$","$L22",null,{"label":"# LSP","size":"medium","variant":"outlined"}]}]]}]]}]}],["$","$L1a",null,{"data-component":"ViewControllTemplate","children":["$","$L23",null,{"next":"$24","prev":"$27","type":"posts"}]}],["$","$L1a",null,{"data-component":"ViewCommentTemplate","children":["$","$Lf",null,{"data-component":"ViewCommentBox","spacing":10,"children":[["$","$Lf",null,{"alignItems":"center","justifyContent":"center","spacing":1,"width":"100%","children":[["$","$L10",null,{"iconName":"heartMessage","width":300}],["$","$L19",null,{"variant":"h5","children":"😍 읽어주셔서 감사합니다!"}],["$","$L19",null,{"variant":"h5","children":["도움이 되셨다면, ",["$","$L19",null,{"color":"hotpink","component":"span","fontWeight":"bold","variant":"inherit","children":"💝공감"}],"이나 ",["$","$L19",null,{"color":"hotpink","component":"span","fontWeight":"bold","variant":"inherit","children":"🗨️댓글"}],"을 달아주시는 건 어떤가요?"]}],["$","$L19",null,{"variant":"h5","children":"블로그 운영에 큰 힘이 됩니다!"}]]}],["$","$Lf",null,{"data-component":"ViewHits","direction":"row","justifyContent":"center","children":["$","img",null,{"alt":"https://blog.itcode.dev/posts/2021/08/15/liskov-subsitution-principle","data-component":"Hits","src":"https://hits.seeyoufarm.com/api/count/incr/badge.svg?count_bg=%23333333&icon=react.svg&icon_color=dodgerblue&title=view&title_bg=%23222222&url=https%3A%2F%2Fblog.itcode.dev%2Fposts%2F2021%2F08%2F15%2Fliskov-subsitution-principle"}]}],["$","$L2a",null,{}]]}]}]]}]]}],["$","$Lf",null,{"alignItems":"center","bottom":20,"data-component":"InteractionBox","direction":"row","position":"fixed","right":20,"spacing":1,"zIndex":10,"children":[["$","$L2b",null,{}],["$","$L2c",null,{}]]}],["$","$L2d",null,{}],["$","$L2e",null,{}]]}],null],"segment":"__PAGE__?{\"markdown\":[\"posts\",\"2021\",\"08\",\"15\",\"liskov-subsitution-principle\"]}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/86391cacb09421ad.css","precedence":"next","crossOrigin":""}]]}],"segment":["markdown","posts/2021/08/15/liskov-subsitution-principle","c"]},"styles":null}]}]}]}]}]]}],null]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"[OOP] 객체지향 5원칙(SOLID) - 리스코프 치환 원칙 LSP (Liskov Subsitution Principle) - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","3",{"name":"description","content":"리스코프 치환 원칙은 부모 객체와 이를 상속한 자식 객체가 있을 때 부모 객체를 호출하는 동작에서 자식 객체가 부모 객체를 완전히 대체할 수 있다는 원칙이다. 객체지향 언어에선 객체의 상속이 일어난다. 이 과정에서 부모/자식 관계가 정의된다. 자식 객체는 부모 객체의 특성을 가지며, 이를 토대로 확장할 수 있다. 하지만 이 과정에서 무리하거나 객체의 의의와 어긋나는 확장으로 인해 잘못된 방향으로 상속되는 경우가 생긴다. 리스코프 치환 원칙은 올바른 상속을 위해 자식 객체의 확장이 부모 객체의 방향을 온전히 따르도록 권고하는 원칙이다."}],["$","link","4",{"rel":"author","href":"https://github.com/RWB0104"}],["$","meta","5",{"name":"author","content":"Kapoo"}],["$","link","6",{"rel":"author","href":"https://www.linkedin.com/in/itcode/"}],["$","meta","7",{"name":"author","content":"RWB"}],["$","link","8",{"rel":"manifest","href":"/manifest.webmanifest"}],["$","meta","9",{"name":"keywords","content":"CS,객체지향,객체지향 5원칙,리스코프 치환 원칙,LSP"}],["$","meta","10",{"property":"og:title","content":"[OOP] 객체지향 5원칙(SOLID) - 리스코프 치환 원칙 LSP (Liskov Subsitution Principle) - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","11",{"property":"og:description","content":"리스코프 치환 원칙은 부모 객체와 이를 상속한 자식 객체가 있을 때 부모 객체를 호출하는 동작에서 자식 객체가 부모 객체를 완전히 대체할 수 있다는 원칙이다. 객체지향 언어에선 객체의 상속이 일어난다. 이 과정에서 부모/자식 관계가 정의된다. 자식 객체는 부모 객체의 특성을 가지며, 이를 토대로 확장할 수 있다. 하지만 이 과정에서 무리하거나 객체의 의의와 어긋나는 확장으로 인해 잘못된 방향으로 상속되는 경우가 생긴다. 리스코프 치환 원칙은 올바른 상속을 위해 자식 객체의 확장이 부모 객체의 방향을 온전히 따르도록 권고하는 원칙이다."}],["$","meta","12",{"property":"og:url","content":"https://blog.itcode.dev/posts/2021/08/15/liskov-subsitution-principle"}],["$","meta","13",{"property":"og:site_name","content":"𝝅번째 알파카의 개발 낙서장"}],["$","meta","14",{"property":"og:locale","content":"ko-KR"}],["$","meta","15",{"property":"og:image","content":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png"}],["$","meta","16",{"property":"og:type","content":"website"}],["$","meta","17",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","18",{"name":"twitter:title","content":"[OOP] 객체지향 5원칙(SOLID) - 리스코프 치환 원칙 LSP (Liskov Subsitution Principle) - 𝝅번째 알파카의 개발 낙서장"}],["$","meta","19",{"name":"twitter:description","content":"리스코프 치환 원칙은 부모 객체와 이를 상속한 자식 객체가 있을 때 부모 객체를 호출하는 동작에서 자식 객체가 부모 객체를 완전히 대체할 수 있다는 원칙이다. 객체지향 언어에선 객체의 상속이 일어난다. 이 과정에서 부모/자식 관계가 정의된다. 자식 객체는 부모 객체의 특성을 가지며, 이를 토대로 확장할 수 있다. 하지만 이 과정에서 무리하거나 객체의 의의와 어긋나는 확장으로 인해 잘못된 방향으로 상속되는 경우가 생긴다. 리스코프 치환 원칙은 올바른 상속을 위해 자식 객체의 확장이 부모 객체의 방향을 온전히 따르도록 권고하는 원칙이다."}],["$","meta","20",{"name":"twitter:image","content":"https://user-images.githubusercontent.com/50317129/128211434-7c28e08b-c867-4b08-98c0-bcf94f0e54b3.png"}],["$","link","21",{"rel":"icon","href":"/favicon.ico"}],["$","link","22",{"rel":"shortcut icon","href":"/favicon.ico"}],["$","link","23",{"rel":"apple-touch-icon","href":"/favicon.ico"}],["$","meta","24",{"name":"next-size-adjust"}]]
14:null
