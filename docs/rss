<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Kapoo</title>
		<description>314159265359번째 알파카의 개발 낙서장</description>
		<link>https://rwb0104.github.io</link>
		<atom:link href="https://rwb0104.github.io/feed.xml" rel="self" type="application/rss+xml"/>
		<pubDate>2021-05-26T14:36:57.000Z</pubDate>
		<lastBuildDate>2021-07-26T13:51:37.081Z</lastBuildDate>
	</channel>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1000번 A + B</title>
		<description>두 정수 A와 B를 입력받은 다음, A + B를 출력하는 프로그램을 작성하시오.</description>
		<pubDate>2021-05-21T12:38:17.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/A1000</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/A1000</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>사칙연산</category>
		<category>BRONZE</category>
		<category>BRONZE V</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1001번 A - B</title>
		<description>두 정수 A와 B를 입력받은 다음, A - B를 출력하는 프로그램을 작성하시오.</description>
		<pubDate>2021-05-21T12:51:19.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/A1001</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/A1001</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>사칙연산</category>
		<category>BRONZE</category>
		<category>BRONZE V</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1002번 터렛</title>
		<description>조규현과 백승환은 터렛에 근무하는 직원이다. 하지만 워낙 존재감이 없어서 인구수는 차지하지 않는다. 다음은 조규현과 백승현의 사진이다.</description>
		<pubDate>2021-05-21T12:56:10.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/A1002</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/A1002</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>기하학</category>
		<category>SILVER</category>
		<category>SILVER IV</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1003번 피보나치 함수</title>
		<description>다음 소스는 N번째 피보나치 수를 구하는 C++ 함수이다.</description>
		<pubDate>2021-05-21T14:29:03.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/A1003</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/A1003</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>피보나치 수열</category>
		<category>Dynamic Programming(동적 프로그래밍)</category>
		<category>SILVER</category>
		<category>SILVER III</category>
	</item>
	<item>
		<title>Jekyll에서 Next.js로</title>
		<description>Jekyll에서 Next.js로의 블로그 이동기</description>
		<pubDate>2021-05-21T06:09:33.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/jekyll-to-nextjs</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/jekyll-to-nextjs</guid>
		<category>잡담</category>
		<category>React(리액트)</category>
		<category>Next.js</category>
		<category>개발 블로그</category>
		<category>Jekyll</category>
	</item>
	<item>
		<title>백준 알고리즘 시작하기</title>
		<description>코딩 테스트 및 개인 실력 향상을 위해 백준 알고리즘을 차례로 풀어보기로 했다. 그냥 풀기만 하면 분명히 나중에 어떻게 풀었는지 까먹을테니, 이해한 내용을 포스팅하며 풀이를 진행한다. 풀이의 규칙은 아래와 같다.</description>
		<pubDate>2021-05-21T12:22:31.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/start-beakjoon</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/start-beakjoon</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1004번 어린 왕자</title>
		<description>어린 왕자는 소혹성 B-664에서 자신이 사랑하는 한 송이 장미를 위해 살아간다. 어느 날 장미가 위험에 빠지게 된 것을 알게 된 어린 왕자는, 장미를 구하기 위해 은하수를 따라 긴 여행을 하기 시작했다. 하지만 어린 왕자의 우주선은 그렇게 좋지 않아서 행성계 간의 이동을 최대한 피해서 여행해야 한다. 아래의 그림은 어린 왕자가 펼쳐본 은하수 지도의 일부이다.</description>
		<pubDate>2021-05-22T12:42:23.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/22/A1004</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/22/A1004</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>기하학</category>
		<category>SILVER</category>
		<category>SILVER III</category>
	</item>
	<item>
		<title>도메인이란?</title>
		<description>도메인을 이해하기 위해선, IP에 대해 짚고 넘어가야 한다. 인터넷에 연결된 모든 디바이스(컴퓨터, 스마트폰, 공유기 등)는 고유한 12자리 숫자로 구성된 IP주소를 가진다. IP를 유동성으로 나누면 크게 유동 IP, 고정 IP로 분류할 수 있다. 유동 IP: 임의의 시점마다 IP주소가 갱신되는 IP. 갱신 주기는 일정하지 않음. 대부분의 인터넷 회선에 적용됨. 고정 IP: 회선에 고정된 IP를 부여하며, 해당 회선의 IP는 갱신되지 않음. 부가서비스 형태로 제공되며, 쇼핑몰이나 회사 등 지속적으로 시스템을 운영해야 할 경우 적합함. 우리가 원하는 장소에 방문하기 위해 주소를 찾듯이, 특정 서버에서 운영하는 웹 사이트를 방문하기 위해선 해당 서버의 주소인 IP가 필요하다.</description>
		<pubDate>2021-05-22T03:52:51.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/22/about-domain</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/22/about-domain</guid>
		<category>WEB</category>
		<category>WEB(웹)</category>
		<category>Domain(도메인)</category>
	</item>
	<item>
		<title>Tomcat(톰캣) 콘솔창 한글 인코딩 깨짐 현상 해결하기</title>
		<description>톰캣을 구동하다보면 심심치않게 마주하는 오류(?)는 아니고 현상. Windows Console의 기본 인코딩과 Tomcat이 출력하는 인코딩이 서로 달라서 생긴다.</description>
		<pubDate>2021-05-22T03:52:51.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/22/tomcat-encoding-euckr</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/22/tomcat-encoding-euckr</guid>
		<category>WAS</category>
		<category>Tomcat(톰캣)</category>
		<category>Console(콘솔)</category>
	</item>
	<item>
		<title>Tomcat(톰캣) 현재 콘솔창에서 구동하기</title>
		<description>오늘도 어느때와 다름없이 톰캣을 구동하는 A씨. 어제까지만 해도 잘 되던 톰캣이 무슨 오류가 있는지 구동 중에 바로 꺼져버린다. 꺼지기 직전의 순간 무슨 오류가 뜬 거 같은데..... 너무 빨라서 도통 확인할 수가 없다. 할 수 없이 일일이 로그를 찾아보며 오류를 수정하는 A씨. 건드린 것도 없는데, 왜 이러는 걸까?</description>
		<pubDate>2021-05-26T07:32:16.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/26/tomcat-current-window</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/26/tomcat-current-window</guid>
		<category>WAS</category>
		<category>Tomcat(톰캣)</category>
		<category>Console(콘솔)</category>
	</item>
	<item>
		<title>URI? URL? URN? 리소스 식별자 구분하기</title>
		<description>우리가 인터넷 상에서 특정한 데이터에 접근할 때 URL이라는 것을 활용하여 접근한다. 원하는 자료의 URL을 얻으면, 브라우저 같은 HTTP 통신 프로그램에 해당 URL을 호출하여 응답을 얻는 것이다.</description>
		<pubDate>2021-05-28T18:30:17.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/29/uri-url-urn</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/29/uri-url-urn</guid>
		<category>WEB</category>
		<category>WEB(웹)</category>
		<category>URI</category>
		<category>URL</category>
		<category>URN</category>
	</item>
	<item>
		<title>Unsupported major.minor version 에러 해결하기 (+Servlet 404 에러)</title>
		<description>간혹 JAVA 프로그램을 실행하다보면 Unsupported major.minor version 52(숫자는 class 버전에 따라 다름) 오류가 출력되면서 정상적으로 동작하지 않는 오류가 발생한다. Unsupported major.minor version 오류는 직역하면 "지원하지 않는 주/부 버전"이다. JAVA 버전관련 오류라고 보면 된다.</description>
		<pubDate>2021-05-29T17:16:35.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/30/unsupported-version-error</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/30/unsupported-version-error</guid>
		<category>JAVA</category>
		<category>WAS</category>
		<category>Tomcat(톰캣)</category>
		<category>오류 해결책</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1005번 ACM Craft</title>
		<description>서기 2012년! 드디어 2년간 수많은 국민들을 기다리게 한 게임 ACM Craft(Association of Construction Mananger Craft)가 발매되었다. 이 게임은 지금까지 나온 게임들과는 다르게 ACM Craft는 다이나믹한 게임 진행을 위해 건물을 짓는 순서가 정해져있지 않다. 즉, 첫 번째 게임과 두 번째 게임이 건물을 짓는 순서가 다를 수도 있다. 매 게임시작 시 건물을 짓는 순서가 주어진다. 또한 모든 건물은 각각 건설을 시작하여 완성이 될 때까지 Delay가 존재한다.</description>
		<pubDate>2021-05-31T16:27:56.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/01/A1005</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/01/A1005</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>Dynamic Programming(동적 프로그래밍)</category>
		<category>위상 정렬</category>
		<category>GOLD</category>
		<category>GOLD III</category>
	</item>
	<item>
		<title>Compiler(컴파일러) &amp; Interpreter(인터프리터)</title>
		<description>천공카드 이래로 지금까지 컴퓨터 언어는 무수히 많은 발전을 거듭했다. 현재에 이르러서는 개발된 언어끼리의 시너지가 일어나 하루가 멀다하고 새로운 언어, 개념이 생성되고 있다. 하지만 그 아무리 새로운 언어로 구현한 소프트웨어라 하더라도, 결과적으로 프로그램의 실행 주체는 컴퓨터에게 있다. 우리가 아무리 새로운 언어니, 프레임워크니, 기술이니 지지고 볶고 하더라도 결국은 컴퓨터가 알아먹을 수 있어야 실행된다는 얘기다. 글로벌 시대답게 초등학생도 1개 이상의 외국어를 하는 마당에, 안타깝게도 우리 컴퓨터는 개발 이래로 초지일관 기계어만을 고집한다. 한글, 영어는 고사하고 우리가 개발할 때 사용하는 프로그래밍 언어라고 하는 대부분의 언어들. 심지어 C언어 보다도 저수준인 어셈블리어 조차 컴퓨터 입장에서는 외계어와 다를 바 없다.</description>
		<pubDate>2021-06-03T08:25:23.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/03/compiler-interpreter</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/03/compiler-interpreter</guid>
		<category>CS</category>
		<category>Compiler(컴파일러)</category>
		<category>Interpreter(인터프리터)</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1006번 습격자 초라기</title>
		<description>초라기는 한국의 비밀국방기지(원타곤)를 습격하라는 임무를 받은 특급요원이다. 원타곤의 건물은 도넛 형태이며, 초라기는 효율적인 타격 포인트를 정하기 위해 구역을 아래와 같이 두 개의 원 모양으로 나누었다. (그림의 숫자는 각 구역의 번호이다.) 초라기는 각각 W명으로 구성된 특수소대를 다수 출동시켜 모든 구역에 침투시킬 예정이며, 각 구역 별로 적이 몇 명씩 배치되어 있는지는 초라기가 모두 알고 있다. 특수소대를 아래 조건에 따라 침투 시킬 수 있다.</description>
		<pubDate>2021-06-06T13:42:02.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/06/A1006</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/06/A1006</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>Dynamic Programming(동적 프로그래밍)</category>
		<category>PLATINUM</category>
		<category>PLATINUM III</category>
	</item>
	<item>
		<title>[Jekyll] GitHub Pages를 이용해 나만의 블로그 만들기 - 2. GitHub와 친해지기</title>
		<description>Jekyll은 GitHub를 통해 호스팅한다. 즉, Jekyll로 블로그를 만들기 위해선 GitHub를 조금이나마 알고 있어야 한다. 본문에서는 GitHub의 여러 기능은 제쳐두고, Jekyll 호스팅을 목적을 기준으로 설명한다.</description>
		<pubDate>2021-06-06T14:29:32.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/06/jekyll-blog-github</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/06/jekyll-blog-github</guid>
		<category>Jekyll</category>
		<category>GitHub Pages(깃허브 페이지)</category>
		<category>Jekyll(지킬)</category>
		<category>Blog(블로그)</category>
		<category>GitHub(깃허브)</category>
	</item>
	<item>
		<title>[Jekyll] GitHub Pages를 이용해 나만의 블로그 만들기 - 3. Git 설치하기</title>
		<description>GitHub는 각 프로젝트를 하나의 Repository로 관리한다. 생성한 Repository는 Git을 이용하여 관리할 수 있다. GitHub 페이지 자체로도 Repository 내부의 파일 생성, 수정, 삭제가 가능하지만 매우 번거로우므로 대부분 Git을 활용하는 것이 권장된다.</description>
		<pubDate>2021-06-06T14:42:11.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/06/jekyll-blog-prepare-git</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/06/jekyll-blog-prepare-git</guid>
		<category>Jekyll</category>
		<category>GitHub Pages(깃허브 페이지)</category>
		<category>Jekyll(지킬)</category>
		<category>Blog(블로그)</category>
		<category>Git</category>
	</item>
	<item>
		<title>[Jekyll] GitHub Pages를 이용해 나만의 블로그 만들기 - 1. Jekyll이란?</title>
		<description>대형 포탈이나 크고 작은 플랫폼을 통해 자신만의 블로그를 만들 수 있다. 이러한 플랫폼을 통한 블로그는 연동된 계정과 버튼 클릭 몇 번으로 만들 수 있을 정도로 쉽고 간편하다. 하지만 이와 같은 블로그는 페이지의 기본 프레임이 정해져있고, 자유로운 커스터마이징이 제한된 편이다. 자신만의 색이나 가치관을 담은 블로그를 만들기 위해선 소위 "기성품"이 아닌 방법을 찾아야하는데, 이는 곧 자신이 직접 웹 페이지를 제작하고 퍼블리싱, 호스팅까지 전반적인 웹 서비스 자체를 구축해야하는 큰 작업으로 이어진다. 어찌어찌 페이지를 제작한다 하더라도, CSS를 통한 디자인이나 JavaScript같은 부가기능은 프레임 제작 이상으로 어렵다. 여기까지는 어떻게 자력으로 했다고 하더라도, 호스팅은 돈이 든다. DB까지 연동한다면 금액은 더욱 커지게 된다. 내가 원한건 단순한 블로그였는데.</description>
		<pubDate>2021-06-06T14:18:25.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/06/jekyll-blog-start</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/06/jekyll-blog-start</guid>
		<category>Jekyll</category>
		<category>GitHub Pages(깃허브 페이지)</category>
		<category>Jekyll(지킬)</category>
		<category>Blog(블로그)</category>
	</item>
	<item>
		<title>[Jekyll] GitHub Pages를 이용해 나만의 블로그 만들기 - 4. Jekyll 쇼핑하기</title>
		<description>GitHub는 각 프로젝트를 하나의 Repository로 관리한다. 생성한 Repository는 Git을 이용하여 관리할 수 있다. GitHub 페이지 자체로도 Repository 내부의 파일 생성, 수정, 삭제가 가능하지만 매우 번거로우므로 대부분 Git을 활용하는 것이 권장된다.</description>
		<pubDate>2021-06-07T14:42:11.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/07/jekyll-blog-jekyll-shopping</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/07/jekyll-blog-jekyll-shopping</guid>
		<category>Jekyll</category>
		<category>GitHub Pages(깃허브 페이지)</category>
		<category>Jekyll(지킬)</category>
		<category>Blog(블로그)</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1007번 벡터</title>
		<description>평면 상에 N개의 점이 찍혀있고, 그 점을 집합 P라고 하자. 집합 P의 벡터 매칭은 벡터의 집합인데, 모든 벡터는 집합 P의 한 점에서 시작해서, 또 다른 점에서 끝나는 벡터의 집합이다. 또, P에 속하는 모든 점은 한 번씩 쓰여야 한다. V에 있는 벡터의 갯수는 P에 있는 점의 절반이다. 평면 상의 점이 주어졌을 때, 집합 P의 벡터 매칭에 있는 벡터의 합의 길이의 최솟값을 출력하는 프로그램을 작성하시오.</description>
		<pubDate>2021-06-08T15:50:26.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/09/A1007</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/09/A1007</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>Brute Force(무차별 대입 공격)</category>
		<category>Combination(조합)</category>
		<category>GOLD</category>
		<category>GOLD II</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1008번 A / B</title>
		<description>두 정수 A와 B를 입력받은 다음, A / B를 출력하는 프로그램을 작성하시오.</description>
		<pubDate>2021-06-09T01:25:31.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/09/A1008</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/09/A1008</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>사칙연산</category>
		<category>BRONZE</category>
		<category>BRONZE IV</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1009번 분산처리</title>
		<description>재용이는 최신 컴퓨터 10대를 가지고 있다. 어느 날 재용이는 많은 데이터를 처리해야 될 일이 생겨서 각 컴퓨터에 1번부터 10번까지의 번호를 부여하고, 10대의 컴퓨터가 다음과 같은 방법으로 데이터들을 처리하기로 하였다.</description>
		<pubDate>2021-06-09T02:06:38.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/09/A1009</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/09/A1009</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>수학</category>
		<category>BRONZE</category>
		<category>BRONZE IV</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1010번 다리 놓기</title>
		<description>재원이는 한 도시의 시장이 되었다. 이 도시에는 도시를 동쪽과 서쪽으로 나누는 큰 일직선 모양의 강이 흐르고 있다. 하지만 재원이는 다리가 없어서 시민들이 강을 건너는데 큰 불편을 겪고 있음을 알고 다리를 짓기로 결심하였다. 강 주변에서 다리를 짓기에 적합한 곳을 사이트라고 한다. 재원이는 강 주변을 면밀히 조사해 본 결과 강의 서쪽에는 N개의 사이트가 있고 동쪽에는 M개의 사이트가 있다는 것을 알았다. (N ≤ M)</description>
		<pubDate>2021-06-09T05:14:09.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/09/A1010</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/09/A1010</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>Combination(조합)</category>
		<category>SILVER</category>
		<category>SILVER V</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1011번 Fly me to the Alpha Centauri</title>
		<description>우현이는 어린 시절, 지구 외의 다른 행성에서도 인류들이 살아갈 수 있는 미래가 오리라 믿었다. 그리고 그가 지구라는 세상에 발을 내려 놓은 지 23년이 지난 지금, 세계 최연소 ASNA 우주 비행사가 되어 새로운 세계에 발을 내려 놓는 영광의 순간을 기다리고 있다. 그가 탑승하게 될 우주선은 Alpha Centauri라는 새로운 인류의 보금자리를 개척하기 위한 대규모 생활 유지 시스템을 탑재하고 있기 때문에, 그 크기와 질량이 엄청난 이유로 최신기술력을 총 동원하여 개발한 공간이동 장치를 탑재하였다. 하지만 이 공간이동 장치는 이동 거리를 급격하게 늘릴 경우 기계에 심각한 결함이 발생하는 단점이 있어서, 이전 작동시기에 k광년을 이동하였을 때는 k - 1 , k 혹은 k + 1 광년만을 다시 이동할 수 있다.</description>
		<pubDate>2021-06-11T05:14:09.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/11/A1011</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/11/A1011</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>SILVER</category>
		<category>SILVER I</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1012번 유기농 배추</title>
		<description>차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다.(한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있다고 간주한다)</description>
		<pubDate>2021-06-12T16:42:10.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/13/A1012</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/13/A1012</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>DFS(깊이 우선 탐색)</category>
		<category>BFS(너비 우선 탐색)</category>
		<category>SILVER</category>
		<category>SILVER II</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1013번 Contact</title>
		<description>푸에르토리코 아레시보에 위치한 아레시보 전파망원경(Arecibo radio telescope)은 수십 년째 존재하지 않을 지도 모르는 외계 문명으로부터의 전파를 수신하기 위해 밤하늘을 바라보고 있다. 이 망원경이 수집한 전파 속에서 자연적으로 발생하기 힘든 패턴들을 찾아내어, 그것을 증거로 외계 문명의 존재 여부를 가리려는 노력은 줄곧 이어져왔지만 아직까지도 그러한 패턴은 발견되지 않았다. 한국 천문학계의 자존심 김동혁 박사는 국내 기술로 이러한 탐사를 진행하기 위하여 다음의 전파 표기를 표준으로 삼았다.</description>
		<pubDate>2021-06-12T19:53:32.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/13/A1013</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/13/A1013</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>정규 표현식</category>
		<category>GOLD</category>
		<category>GOLD V</category>
	</item>
	<item>
		<title>IntelliJ(인텔리제이) 시작 시 오류(java.net.BindException: Address already in use: bind)</title>
		<description></description>
		<pubDate>2021-06-14T12:59:16.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/14/intellij-error-onstart</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/14/intellij-error-onstart</guid>
		<category>JAVA</category>
		<category>IntelliJ(인텔리제이)</category>
		<category>Hyper-V</category>
		<category>오류 해결책</category>
	</item>
	<item>
		<title>[JAVA] split vs StringTokenizer</title>
		<description>알고리즘을 풀다보면, 필연적으로 입력값 처리를 하게된다. 다양한 케이스에 대응하기 위해, 사용자의 값을 직접 입력받아 이를 처리하게 된다. 이 때, 우리는 십중팔구 이와 같은 상황이 발생한다. 데이터셋을 보내기 위해 데이터의 모음을 구분자(공백 혹은 쉼표)를 통해 하나의 문자열로 합쳐 전달한다.</description>
		<pubDate>2021-06-13T16:56:01.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/14/split-and-stringtokenizer</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/14/split-and-stringtokenizer</guid>
		<category>JAVA</category>
		<category>JAVA(자바)</category>
		<category>String(문자열)</category>
		<category>split</category>
		<category>StringTokenizer</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1014번 컨닝</title>
		<description>최백준은 서강대학교에서 “컨닝의 기술”이라는 과목을 가르치고 있다. 이 과목은 상당히 까다롭기로 정평이 나있기 때문에, 몇몇 학생들은 시험을 보는 도중에 다른 사람의 답지를 베끼려 한다. 시험은 N행 X M열 크기의 직사각형 교실에서 이루어진다. 교실은 1 X 1 크기의 단위 정사각형으로 이루어져 있는데, 각 단위 정사각형은 자리 하나를 의미한다. 최백준은 컨닝을 방지하기 위해서 다음과 같은 전략을 세웠다. 모든 학생은 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위, 이렇게 총 네 자리에 앉아있는 친구의 답지를 항상 베낀다고 가정한다. 따라서, 자리 배치는 모든 학생이 컨닝을 할 수 없도록 배치되어야 한다.</description>
		<pubDate>2021-06-18T07:42:44.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/18/A1014</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/18/A1014</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>PLATINUM</category>
		<category>PLATINUM IV</category>
		<category>네트워크 플로우</category>
		<category>최소 버텍스 커버</category>
		<category>이분 매칭</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1015번 수열 정렬</title>
		<description>P[0], P[1], ..., P[N - 1]은 0부터 N - 1까지(포함)의 수를 한 번씩 포함하고 있는 수열이다. 수열 P를 길이가 N인 배열 A에 적용하면 길이가 N인 배열 B가 된다. 적용하는 방법은 B[P[i]] = A[i]이다. 배열 A가 주어졌을 때, 수열 P를 적용한 결과가 비내림차순이 되는 수열을 찾는 프로그램을 작성하시오. 비내림차순이란, 각각의 원소가 바로 앞에 있는 원소보다 크거나 같을 경우를 말한다. 만약 그러한 수열이 여러개라면 사전순으로 앞서는 것을 출력한다.</description>
		<pubDate>2021-06-21T16:23:31.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/22/A1015</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/22/A1015</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>SILVER</category>
		<category>SILVER IV</category>
		<category>정렬</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1016번 제곱 ㄴㄴ수</title>
		<description>어떤 수 X가 1보다 큰 제곱수로 나누어 떨어지지 않을 때, 제곱ㄴㄴ수라고 한다. 제곱수는 정수의 제곱이다. min과 max가 주어지면, min과 max를 포함한 사이에 제곱ㄴㄴ수가 몇 개 있는지 출력한다.</description>
		<pubDate>2021-06-22T15:22:31.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/23/A1016</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/23/A1016</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>GOLD</category>
		<category>GOLD I</category>
		<category>에라토스 테네스의 체</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1017번 소수 쌍</title>
		<description>지민이는 수의 리스트가 있을 때, 이를 짝지어 각 쌍의 합이 소수가 되게 하려고 한다. 예를 들어, {1, 4, 7, 10, 11, 12}가 있다고 하자. 지민이는 다음과 같이 그룹지을 수 있다. 1 + 4 = $, 7 + 10 = 17$, $11 + 12 = 23 또는 1 + 10 = 11, 4 + 7 = 11, 11 + 12 = 23 수의 리스트가 주어졌을 때, 지민이가 모든 수를 다 짝지었을 때, 첫 번째 수와 어떤 수를 짝지었는지 오름차순으로 출력하는 프로그램을 작성하시오. 위의 예제에서 1 + 12 = 13으로 소수이다. 그러나, 남은 4개의 수를 합이 소수가 되게 짝지을 수 있는 방법이 없다. 따라서 예제의 답은 4, 10이다.</description>
		<pubDate>2021-06-25T18:19:32.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/26/A1017</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/26/A1017</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>PLATINUM</category>
		<category>PLATINUM III</category>
		<category>에라토스 테네스의 체</category>
		<category>이분 매칭</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1018번 체스판 다시 칠하기</title>
		<description>지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M*N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8*8 크기의 체스판으로 만들려고 한다. 체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다. 보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 8 X 8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 8*8 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.</description>
		<pubDate>2021-06-26T07:46:20.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/26/A1018</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/26/A1018</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>SILVER</category>
		<category>SILVER V</category>
		<category>Brute Force(무차별 대입 공격)</category>
	</item>
	<item>
		<title>[백준 / JAVA] 백준 알고리즘 1019번 책 페이지</title>
		<description>지민이는 전체 페이지의 수가 N인 책이 하나 있다. 첫 페이지는 1페이지이고, 마지막 페이지는 N페이지이다. 각 숫자가 전체 페이지 번호에서 모두 몇 번 나오는지 구해보자.</description>
		<pubDate>2021-06-28T03:28:50.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/28/A1019</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/28/A1019</guid>
		<category>알고리즘</category>
		<category>백준</category>
		<category>JAVA(자바)</category>
		<category>GOLD</category>
		<category>GOLD I</category>
	</item>
	<item>
		<title>자료구조가 중요한 까닭</title>
		<description>혼자 공부하는건 다 좋은데 효율이 떨어진다. 컴퓨터 앞에 앉아있는 시간은 거의 대부분이라 할 수 있지만, 순수하게 공부하는 시간이 얼마나 되냐고 물어보면 눈치보기 바쁘다. 마침 블로그도 새로 개발해서 쓰고 있고, 공부도 할 겸 적절한 스터디에 하나 참가했다. 노트북 팔아버린 뒤로 스터디에 가입하고 싶어도 할 수가 없었던 차에, 노트북 없이도 할 수 있다는 말에 바로 들어갔다.</description>
		<pubDate>2021-07-09T16:30:56.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/07/10/about-algorithm-chapter01</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/07/10/about-algorithm-chapter01</guid>
		<category>알고리즘</category>
		<category>자료구조</category>
		<category>누구나 자료 구조와 알고리즘</category>
		<category>배열</category>
	</item>
	<item>
		<title>알고리즘이 중요한 까닭</title>
		<description>IT영역에서의 알고리즘이란, 어떤 문제를 해결하는 방법을 형상화한 코드를 의미한다. 알고리즘을 잘 설계한다면, 단순한 로직으로 접근할 때보다 훨씬 빠르게 문제를 처리할 수 있다. 개발에는 정말 다양한 문제와 그보다 더욱 다양한 해결방법이 존재하기 때문에, 복잡한 문제일수록 정교한 알고리즘의 설계가 요구된다.</description>
		<pubDate>2021-07-09T19:21:37.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/07/10/about-algorithm-chapter02</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/07/10/about-algorithm-chapter02</guid>
		<category>알고리즘</category>
		<category>자료구조</category>
		<category>누구나 자료 구조와 알고리즘</category>
		<category>배열</category>
		<category>정렬</category>
		<category>이진 검색</category>
	</item>
	<item>
		<title>빅 오 표기법</title>
		<description>하나의 문제가 있어도, 이를 해결하는 수 많은 알고리즘이 존재할 수 있다. 어떠한 방법으로든 문제를 해결할 수 있다면 그 자체로 알고리즘이라 불러도 손색이 없지만, 알고리즘이라고 해서 다 같진 않다. 바로 문제를 해결하는 효율성의 차이 때문. 결과적으로 문제를 해결한다고 해도 그냥 무식하게 해결하는 알고리즘이 있는가 하면, 정말 효율적으로 문제를 해결하는 알고리즘도 있다. 그리고 우리는 통상 후자를 알고리즘이라는 명칭에 더 어울린다고 생각할 것이다.</description>
		<pubDate>2021-07-13T19:21:37.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/07/14/about-algorithm-chapter03</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/07/14/about-algorithm-chapter03</guid>
		<category>알고리즘</category>
		<category>자료구조</category>
		<category>누구나 자료 구조와 알고리즘</category>
		<category>빅 오 표기법</category>
	</item>
	<item>
		<title>빅 오로 코드 속도 올리기</title>
		<description>이전 장에서 빅 오 코드 표기법을 배웠으니, 이를 통해 시간 복잡도를 비교함으로써 알고리즘을 서로 비교할 수 있음을 확인했다. 이 장에서는 버블 정렬 알고리즘을 설계하고, 이를 빅 오 표기법을 통해 어떻게 개선할 수 있는지 확인해본다.</description>
		<pubDate>2021-07-16T12:39:54.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/07/16/about-algorithm-chapter04</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/07/16/about-algorithm-chapter04</guid>
		<category>알고리즘</category>
		<category>자료구조</category>
		<category>누구나 자료 구조와 알고리즘</category>
		<category>버블 정렬</category>
	</item>
	<item>
		<title>빅 오를 사용하거나 사용하지 않는 코드 최적화</title>
		<description>지금까지 알고리즘의 퍼포먼스를 비교하면서 빅 오 표기법을 통해 수치화했다. 하지만 빅 오 표기법도 알고리즘의 퍼포먼스를 측정함에 있어서 완벽함을 보여주진 않는다. 이전 장에서 N(O^2)이나 N(N^2 - N) 모두 빅 오 표기법에선 N(O^2)로 간주한다고 설명했다. 이러한 특성으로 인해, 실제로는 명백한 차이를 보이는 알고리즘임에도 불구하고 빅 오 표기법으론 성능이 거의 동일하게 측정되기도 한다.</description>
		<pubDate>2021-07-23T14:42:33.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/07/23/about-algorithm-chapter05</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/07/23/about-algorithm-chapter05</guid>
		<category>알고리즘</category>
		<category>자료구조</category>
		<category>누구나 자료 구조와 알고리즘</category>
		<category>선택 정렬</category>
	</item>
	<item>
		<title>긍정적인 시나리오 최적화</title>
		<description>지금까지는 항상 알고리즘을 비관적인 관점으로 바라봤다. 이 경우의 장점은 명확하다. 어떠한 경우에도 최악을 대비하면 문제가 없다. 하지만 모든 데이터가 항상 최악의 경우는 아닐 뿐더러, 대부분의 케이스는 평범한 영역에 위치할 것이다. 이 장에서는 모든 시나리오를 고려하여 상황에 따른 적절한 알고리즘을 판단한다.</description>
		<pubDate>2021-07-23T19:54:40.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/07/24/about-algorithm-chapter06</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/07/24/about-algorithm-chapter06</guid>
		<category>알고리즘</category>
		<category>자료구조</category>
		<category>누구나 자료 구조와 알고리즘</category>
		<category>삽입 정렬</category>
	</item>
</rss>