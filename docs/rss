<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Kapoo</title>
		<description>314159265359번째 알파카의 개발 낙서장</description>
		<link>https://rwb0104.github.io//</link>
		<atom:link href="https://rwb0104.github.io/feed.xml" rel="self" type="application/rss+xml"/>
		<pubDate>2021-05-26T14:36:57.000Z</pubDate>
		<lastBuildDate>2021-06-01T16:34:40.680Z</lastBuildDate>
	</channel>
	<item>
		<title>[JAVA] 백준 알고리즘 1000번 A + B</title>
		<description>&lt;h1&gt;A + B&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://shields.io/badge/java-JDK%2014-lightgray?logo=java&amp;#x26;style=plastic&amp;#x26;logoColor=white&amp;#x26;labelColor=orange&quot; alt=&quot;JAVA&quot;&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.acmicpc.net/problem/1000&quot;&gt;전체 1000번 문제&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;조건&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;시간제한&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;메모리 제한&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2초&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;128MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;문제&lt;/h2&gt;
&lt;p&gt;두 정수 A와 B를 입력받은 다음, A + B를 출력하는 프로그램을 작성하시오.&lt;/p&gt;
&lt;h2&gt;입력&lt;/h2&gt;
&lt;p&gt;첫째 줄에 A와 B가 주어진다. &lt;code&gt;(0 &amp;#x3C; A, B &amp;#x3C; 10)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;출력&lt;/h2&gt;
&lt;p&gt;첫째 줄에 A + B를 출력한다.&lt;/p&gt;
&lt;h2&gt;케이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;입력&lt;/p&gt;
&lt;p&gt;1 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;출력&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;풀이&lt;/h1&gt;
&lt;p&gt;알고리즘이라고 하기 뭐한 기초적인 연산 알고리즘
Scanner로 두 숫자를 입력받아 덧셈한 결과를 출력한다.&lt;/p&gt;
&lt;h2&gt;전체 소스&lt;/h2&gt;
&lt;div class=&quot;remark-highlight&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
 * 백준 전체 1000 문제 알고리즘 클래스
 *
 * &lt;span class=&quot;token keyword&quot;&gt;@author&lt;/span&gt; RWB
 * &lt;span class=&quot;token keyword&quot;&gt;@since&lt;/span&gt; 2021.04.21 Wed 21:38:17
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 메인 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;args&lt;/span&gt;: [String[]] 매개변수
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; scanner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
		<pubDate>2021-05-21T12:38:17.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/A1000/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/A1000/</guid>
		<category>알고리즘</category>
		<category>알고리즘</category>
		<category>백준</category>
		<category>알고리즘</category>
		<category>JAVA(자바)</category>
	</item>
	<item>
		<title>[JAVA] 백준 알고리즘 1001번 A - B</title>
		<description>&lt;h1&gt;A - B&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://shields.io/badge/java-JDK%2014-lightgray?logo=java&amp;#x26;style=plastic&amp;#x26;logoColor=white&amp;#x26;labelColor=orange&quot; alt=&quot;JAVA&quot;&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.acmicpc.net/problem/1001&quot;&gt;전체 1001번 문제&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;조건&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;시간제한&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;메모리 제한&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2초&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;128MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;문제&lt;/h2&gt;
&lt;p&gt;두 정수 A와 B를 입력받은 다음, A - B를 출력하는 프로그램을 작성하시오.&lt;/p&gt;
&lt;h2&gt;입력&lt;/h2&gt;
&lt;p&gt;첫째 줄에 A와 B가 주어진다. (0 &amp;#x3C; A, B &amp;#x3C; 10)&lt;/p&gt;
&lt;h2&gt;출력&lt;/h2&gt;
&lt;p&gt;첫째 줄에 A - B를 출력한다.&lt;/p&gt;
&lt;h2&gt;케이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;입력&lt;/p&gt;
&lt;p&gt;3 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;출력&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;풀이&lt;/h1&gt;
&lt;p&gt;1000번 문제에서 연산만 달라지는 뺄셈 알고리즘
Scanner로 두 숫자를 입력받아 뺄셈한 결과를 출력한다.&lt;/p&gt;
&lt;h2&gt;전체 소스&lt;/h2&gt;
&lt;div class=&quot;remark-highlight&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
 * 백준 전체 1001 문제 알고리즘 클래스
 *
 * &lt;span class=&quot;token keyword&quot;&gt;@author&lt;/span&gt; RWB
 * &lt;span class=&quot;token keyword&quot;&gt;@since&lt;/span&gt; 2021.04.21 Wed 21:51:19
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 메인 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;args&lt;/span&gt;: [String[]] 매개변수
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; scanner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
		<pubDate>2021-05-21T12:51:19.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/A1001/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/A1001/</guid>
		<category>알고리즘</category>
		<category>알고리즘</category>
		<category>백준</category>
		<category>알고리즘</category>
		<category>JAVA(자바)</category>
	</item>
	<item>
		<title>[JAVA] 백준 알고리즘 1002번 터렛</title>
		<description>&lt;h1&gt;터렛&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://shields.io/badge/java-JDK%2014-lightgray?logo=java&amp;#x26;style=plastic&amp;#x26;logoColor=white&amp;#x26;labelColor=orange&quot; alt=&quot;JAVA&quot;&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.acmicpc.net/problem/1002&quot;&gt;전체 1002번 문제&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;조건&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;시간제한&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;메모리 제한&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2초&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;128MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;문제&lt;/h2&gt;
&lt;p&gt;조규현과 백승환은 터렛에 근무하는 직원이다. 하지만 워낙 존재감이 없어서 인구수는 차지하지 않는다. 다음은 조규현과 백승현의 사진이다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://www.acmicpc.net/upload/201003/dfcmhrjj_142c3w76qg8_b.jpg&quot; width=&quot;128px&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;이석원은 조규현과 백승환에게 상대편 마린(류재영)의 위치를 계산하라는 명령을 내렸다. 조규현과 백승환은 각각 자신의 터렛 위치에서 현재 적까지의 거리를 계산했다.&lt;br&gt;
조규현의 좌표 (x&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;)와 백승환의 좌표 (x&lt;sub&gt;2&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;)가 주어지고, 조규현이 계산한 류재명과의 거리 r&lt;sub&gt;1&lt;/sub&gt;과 백승환이 계산한 류재명과의 거리 r&lt;sub&gt;2&lt;/sub&gt;가 주어졌을 때, 류재명이 있을 수 있는 좌표의 수를 출력하는 프로그램을 작성하시오.&lt;/p&gt;
&lt;h2&gt;입력&lt;/h2&gt;
&lt;p&gt;첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 다음과 같이 이루어져 있다.&lt;br&gt;
한 줄에 x&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;1&lt;/sub&gt;, r&lt;sub&gt;1&lt;/sub&gt;, x&lt;sub&gt;2&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;, r&lt;sub&gt;2&lt;/sub&gt;가 주어진다. x&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;1&lt;/sub&gt;, x&lt;sub&gt;2&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;는 -10,000보다 크거나 같고, 10,000보다 작거나 같은 점수이고, r&lt;sub&gt;1&lt;/sub&gt;, r&lt;sub&gt;2&lt;/sub&gt;는 10,000보다 작거나 같은 자연수이다.&lt;/p&gt;
&lt;h2&gt;출력&lt;/h2&gt;
&lt;p&gt;각 테스트 케이스마다 류재명이 있을 수 있는 위치의 수를 출력한다. 만약 류재명이 있을 수 있는 위치의 개수가 무한대일 경우에는 -1을 출력한다.&lt;/p&gt;
&lt;h2&gt;케이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;입력&lt;/p&gt;
&lt;p&gt;3&lt;br&gt;
0 0 13 40 0 37&lt;br&gt;
0 0 30 0 7 4&lt;br&gt;
1 1 1 1 1 5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;출력&lt;/p&gt;
&lt;p&gt;2&lt;br&gt;
1&lt;br&gt;
0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;풀이&lt;/h1&gt;
&lt;p&gt;예제의 요소를 사람 이름으로 두었으나, 문제 이해에 방해가 되니 간단하게 서술하면 아래와 같다.&lt;br&gt;
임의의 위치에 있는 점 A, B, C가 존재하며, A와 C의 거리, B와 C의 거리가 주어진다.&lt;br&gt;
이 때, C가 실제로 위치할 수 있는 점의 갯수를 구하는 것. 즉, 간단하게 &lt;strong&gt;두 원의 접점을 구하는 문제&lt;/strong&gt;라고 정의할 수 있다.&lt;br&gt;
원이 완벽하게 겹칠 경우, &lt;strong&gt;그 수가 무수히 많으므로 -1로 표현&lt;/strong&gt;하라는 조건이 포함된다.&lt;/p&gt;
&lt;p&gt;이를 그림으로 표현하면 아래와 같다.&lt;br&gt;
[대충 원 그림]&lt;/p&gt;
&lt;p&gt;변수는 아래와 같이 정리할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;n&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;x&lt;sub&gt;n&lt;/sub&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;y&lt;sub&gt;n&lt;/sub&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;r&lt;sub&gt;n&lt;/sub&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;A의 x좌표&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;A의 y좌표&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;A의 반지름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;B의 x좌표&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;B의 y좌표&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;B의 반지름&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;케이스를 세분화하면 총 6가지로 나눌 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;두 원이 정확히 겹칠 경우 (-1)&lt;/li&gt;
&lt;li&gt;두 원이 서로 겹치면서 인접하지 않는 경우 (0)&lt;/li&gt;
&lt;li&gt;두 원이 서로 겹치지 않으면서 인접하지 않는 경우 (0)&lt;/li&gt;
&lt;li&gt;두 원이 서로 겹치면서 인접하는 경우 (1)&lt;/li&gt;
&lt;li&gt;두 원이 서로 겹치지 않으면서 인접하는 경우 (1)&lt;/li&gt;
&lt;li&gt;두 원이 서로 겹치면서 인접하지 않는 경우 (2)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;본 풀이에선 x&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;1&lt;/sub&gt;과 x&lt;sub&gt;2&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;의 거리(&lt;code&gt;distance&lt;/code&gt;) 및 r&lt;sub&gt;1&lt;/sub&gt;, r&lt;sub&gt;2&lt;/sub&gt;를 합한 길이(&lt;code&gt;sum&lt;/code&gt;)와 뺀 길이(&lt;code&gt;sub&lt;/code&gt;)의 절대값을 이용하여 진행한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://latex.codecogs.com/svg.latex?%5Cfn_phv%20%7B%5Ccolor%7BWhite%7D%20distance%20=%20%5Csqrt%7B%28x_%7B1%7D%20-%20x_%7B2%7D%29%5E%7B2%7D%20&amp;plus;%20%28y_%7B1%7D%20-%20y_%7B2%7D%29%5E%7B2%7D%7D%7D&quot; /&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://latex.codecogs.com/svg.latex?%5Cfn_phv%20%7B%5Ccolor%7BWhite%7D%20sum%20%3D%20r_%7B1%7D%20&amp;plus;%20r_%7B2%7D%7D&quot; /&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://latex.codecogs.com/svg.latex?%5Cfn_phv%20%7B%5Ccolor%7BWhite%7D%20sub%20%3D%20%5Cleft%20%7C%20r_%7B1%7D%20-%20r_%7B2%7D%20%5Cright%20%7C%7D&quot; /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;case 1 - 두 원이 정확히 겹칠 경우&lt;/p&gt;
&lt;p&gt;두 원의 위치 및 반지름이 서로 동일한 상황.&lt;br&gt;
&lt;code&gt;distance&lt;/code&gt;가 0이며, r&lt;sub&gt;1&lt;/sub&gt;과 r&lt;sub&gt;2&lt;/sub&gt;의 길이가 동일할 경우 성립한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;case 2 - 두 원이 서로 겹치면서 인접하지 않는 경우&lt;/p&gt;
&lt;p&gt;두 원의 원점과의 거리가 반지름의 차이보다 짧은 상황.&lt;br&gt;
&lt;code&gt;distance &amp;#x3C; sub&lt;/code&gt;일 경우 성립한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;case 3 - 두 원이 서로 겹치지 않으면서 인접하지 않는 경우&lt;/p&gt;
&lt;p&gt;두 원의 원점과의 거리가 반지름의 합보다 긴 상황.&lt;br&gt;
&lt;code&gt;distance &gt; sum&lt;/code&gt;일 경우 성립한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;case 4 - 두 원이 서로 겹치면서 인접하는 경우&lt;/p&gt;
&lt;p&gt;두 원의 원점과의 거리가 반지름의 차이와 일치하는 상황.&lt;br&gt;
&lt;code&gt;distance == sub&lt;/code&gt;일 경우 성립한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;case 5 - 두 원이 서로 겹치지 않으면서 인접하는 경우&lt;/p&gt;
&lt;p&gt;두 원의 원점과의 거리가 반지름의 합과 일치하는 상황.&lt;br&gt;
&lt;code&gt;distance == sum&lt;/code&gt;일 경우 성립한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;case 6 - 두 원이 서로 겹치면서 인접하지 않는 경우&lt;/p&gt;
&lt;p&gt;두 원이 서로 적당히 겹치는 상황.&lt;br&gt;
&lt;code&gt;distance &amp;#x3C; sum &amp;#x26;&amp;#x26; distance &gt; sub&lt;/code&gt;일 경우 성립한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;굳이 식으로 표현하지 않아도, 위의 5개 케이스에 부합하지 않는 모든 상황에 적용하면 된다.&lt;br&gt;
위 케이스들을 &lt;code&gt;if&lt;/code&gt;문을 사용하여 적절히 표현하면 된다. &lt;code&gt;switch&lt;/code&gt;문의 경우 하나의 변수를 기준으로 분기를 판단하므로 해당 알고리즘에 적용하기엔 다소 부적절하다.&lt;/p&gt;
&lt;h2&gt;전체 소스&lt;/h2&gt;
&lt;div class=&quot;remark-highlight&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
 * 백준 전체 1002 문제 알고리즘 클래스
 *
 * &lt;span class=&quot;token keyword&quot;&gt;@author&lt;/span&gt; RWB
 * &lt;span class=&quot;token keyword&quot;&gt;@since&lt;/span&gt; 2021.04.21 Wed 21:56:10
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 메인 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;args&lt;/span&gt;: [String[]] 매개변수
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; scanner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; r1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; r2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;calcPoints&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 접점 갯수 반환 함수
	 *
	 * case 1 - 두 원이 정확히 겹칠 경우 (-1)
	 * case 2 - 두 원이 서로 겹치면서 인접하지 않는 경우 (0)
	 * case 3 - 두 원이 서로 겹치지 않으면서 인접하지 않는 경우 (0)
	 * case 4 - 두 원이 서로 겹치면서 인접하는 경우 (1)
	 * case 5 - 두 원이 서로 겹치지 않으면서 인접하는 경우 (1)
	 * case 6 - 두 원이 서로 겹치면서 인접하지 않는 경우 (2)
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;x1&lt;/span&gt;: [int] A의 x좌표
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;y1&lt;/span&gt;: [int] A의 y좌표
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;r1&lt;/span&gt;: [int] A와 C 사이의 거리
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;x2&lt;/span&gt;: [int] B의 x좌표
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;y2&lt;/span&gt;: [int] B의 y좌표
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;r2&lt;/span&gt;: [int] B와 C 사이의 거리
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; [int] 접점 갯수
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calcPoints&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; r1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; r2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;// 두 점 사이의 거리 계산식&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x2 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; x1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y2 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; y1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; r1 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; r2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; sub &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r1 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; r2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// case 1 - 두 원이 정확히 겹칠 경우&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;distance &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;#x26;&amp;#x26;&lt;/span&gt; r1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; r2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// case 2 - 두 원이 서로 겹치면서 인접하지 않는 경우&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;distance &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; sub&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// case 3 - 두 원이 서로 겹치지 않으면서 인접하지 않는 경우&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;distance &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// case 4 - 두 원이 서로 겹치면서 인접하는 경우&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;distance &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; sub&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// case 5 - 두 원이 서로 겹치지 않으면서 인접하는 경우&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;distance &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// case 6 - 두 원이 서로 겹치면서 인접하지 않는 경우&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
		<pubDate>2021-05-21T12:56:10.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/A1002/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/A1002/</guid>
		<category>알고리즘</category>
		<category>알고리즘</category>
		<category>백준</category>
		<category>알고리즘</category>
		<category>JAVA(자바)</category>
	</item>
	<item>
		<title>[JAVA] 백준 알고리즘 1003번 피보나치 함수</title>
		<description>&lt;h1&gt;피보나치 함수&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://shields.io/badge/java-JDK%2014-lightgray?logo=java&amp;#x26;style=plastic&amp;#x26;logoColor=white&amp;#x26;labelColor=orange&quot; alt=&quot;JAVA&quot;&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.acmicpc.net/problem/1003&quot;&gt;전체 1003번 문제&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;조건&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;시간제한&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;메모리 제한&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;0.25초 (추가 시간 없음)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;128MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;문제&lt;/h2&gt;
&lt;p&gt;다음 소스는 N번째 피보나치 수를 구하는 C++ 함수이다.&lt;/p&gt;
&lt;div class=&quot;remark-highlight&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n‐&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n‐&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fibonacci(3)&lt;/code&gt;을 호출하면 다음과 같은 일이 일어난다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fibonacci(3)&lt;/code&gt;은 &lt;code&gt;fibonacci(2)&lt;/code&gt;와 &lt;code&gt;fibonacci(1)&lt;/code&gt; (첫 번째 호출)을 호출한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fibonacci(2)&lt;/code&gt;는 &lt;code&gt;fibonacci(1)&lt;/code&gt; (두 번째 호출)과 &lt;code&gt;fibonacci(0)&lt;/code&gt;을 호출한다.&lt;/li&gt;
&lt;li&gt;두 번째 호출한 &lt;code&gt;fibonacci(1)&lt;/code&gt;은 1을 출력하고 1을 리턴한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fibonacci(0)&lt;/code&gt;은 0을 출력하고 0을 리턴한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fibonacci(2)&lt;/code&gt;는 &lt;code&gt;fibonacci(1)&lt;/code&gt;과 &lt;code&gt;fibonacci(0)&lt;/code&gt;의 결과를 얻고, 1을 리턴한다.&lt;/li&gt;
&lt;li&gt;첫 번째 호출한 &lt;code&gt;fibonacci(1)&lt;/code&gt;은 1을 출력하고, 1을 리턴한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fibonacci(3)&lt;/code&gt;은 &lt;code&gt;fibonacci(2)&lt;/code&gt;와 &lt;code&gt;fibonacci(1)&lt;/code&gt;의 결과를 얻고, 2를 리턴한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1은 2번 출력되고, 0은 1번 출력된다. N이 주어졌을 때, &lt;code&gt;fibonacci(N)&lt;/code&gt;을 호출했을 때, 0과 1이 각각 몇 번 출력되는지 구하는 프로그램을 적성하시오.&lt;/p&gt;
&lt;h2&gt;입력&lt;/h2&gt;
&lt;p&gt;첫째 줄에 테스트 케이스의 개수 T가 주어진다.&lt;br&gt;
각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. N은 40보다 작거나 같은 자연수 또는 0이다.&lt;/p&gt;
&lt;h2&gt;출력&lt;/h2&gt;
&lt;p&gt;각 테스트 케이스마다 0이 출력되는 횟수와 1이 출력되는 횟수를 공백으로 구분해서 출력한다.&lt;/p&gt;
&lt;h2&gt;케이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;입력&lt;/p&gt;
&lt;p&gt;3&lt;br&gt;
0&lt;br&gt;
1&lt;br&gt;
3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;출력&lt;/p&gt;
&lt;p&gt;1 0&lt;br&gt;
0 1&lt;br&gt;
1 2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;풀이&lt;/h1&gt;
&lt;p&gt;알고리즘 풀면서 느끼는 거지만, 문제가 뭘 말하는 지 이해가 안 되는 경우가 많은 것 같다. 내가 멍청해서 그런건가.&lt;/p&gt;
&lt;p&gt;이 문제를 풀기 위해선, 피보나치 수열에 대한 식을 이해하고 있어야 한다.&lt;br&gt;
피보나치 수열이 &lt;code&gt;f()&lt;/code&gt;일 때, &lt;code&gt;n&lt;/code&gt;번째 피보나치 수열의 식은 &lt;code&gt;f(n) = f(n - 1) + f(n - 2)&lt;/code&gt;로 정의할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n = 0, 1&lt;/code&gt;일 때의 초기값이 정해져있다. (식의 특성 상 초기값이 없으면 계산할 수가 없다.)&lt;br&gt;
&lt;code&gt;f(0) = 0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;f(1) = 1&lt;/code&gt;&lt;br&gt;
초기값은 위와 같으며, 실질적으로 &lt;code&gt;n &gt;= 2&lt;/code&gt; 부터 의미있는 연산이 수행된다.&lt;/p&gt;
&lt;p&gt;다시 문제로 돌아가서, 임의의 수 N이 주어질 경우 &lt;code&gt;f(N)&lt;/code&gt;을 수행하면서 &lt;code&gt;f(0)&lt;/code&gt;, &lt;code&gt;f(1)&lt;/code&gt;이 몇 번 호출되는지를 구하면 된다.&lt;br&gt;
예를 들어, &lt;code&gt;N = 4&lt;/code&gt;라고 가정하고 식을 전개하면 아래와 같다.&lt;br&gt;
&lt;code&gt;f(4) = f(3) + f(2)&lt;/code&gt;&lt;br&gt;
위 식에서 &lt;code&gt;f(3)&lt;/code&gt;은 &lt;code&gt;f(2) + f(1)&lt;/code&gt;로 치환할 수 있으며, 같은 이유로 &lt;code&gt;f(2)&lt;/code&gt; 역시 &lt;code&gt;f(1) + f(0)&lt;/code&gt;으로 치환 가능하다.&lt;br&gt;
&lt;code&gt;f(4) = f(2) + f(1) + f(1) + f(0)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;= f(1) + f(0) + f(1) + f(1) + f(0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;결과적으로 &lt;code&gt;f(4) = 2(f0) + 3f(1)&lt;/code&gt;로 정리할 수 있다.&lt;br&gt;
따라서 이 문제의 알고리즘은 &lt;code&gt;N = 4&lt;/code&gt;일 경우 &lt;code&gt;2 3&lt;/code&gt;이 출력되어야 한다.&lt;/p&gt;
&lt;p&gt;우선 식을 정리하여 한 눈에 보면 문제 해결에 도움이 될 것 같다.&lt;br&gt;
피보나치 수열을 쭉 정리하면 아래와 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;n&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;f(0)의 갯수&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;f(1)의 갯수&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;f(n)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;6&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;13&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;13&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;21&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;9&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;21&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;34&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;34&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;표로 정리하니 어느정도 규칙성이 눈에 보이기 시작한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N의 &lt;code&gt;f(1)&lt;/code&gt; 출력 갯수는 &lt;code&gt;f(N)&lt;/code&gt;과 동일하다.&lt;/li&gt;
&lt;li&gt;N의 &lt;code&gt;f(0)&lt;/code&gt; 출력 갯수는 &lt;code&gt;f(N - 1)&lt;/code&gt;과 동일하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, &lt;code&gt;N = 4&lt;/code&gt;일 경우 알고리즘은 &lt;code&gt;f(3) f(4)&lt;/code&gt;가 출력되면 된다.&lt;/p&gt;
&lt;p&gt;여기서 단순하게 생각하면 아래와 같이 코드를 짤 수 있다.&lt;/p&gt;
&lt;h2&gt;완성....?&lt;/h2&gt;
&lt;div class=&quot;remark-highlight&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
 * 백준 전체 1003 문제 알고리즘 클래스
 *
 * &lt;span class=&quot;token keyword&quot;&gt;@author&lt;/span&gt; RWB
 * &lt;span class=&quot;token keyword&quot;&gt;@since&lt;/span&gt; 2021.04.21 Wed 23:29:03
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 메인 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;args&lt;/span&gt;: [String[]] 매개변수
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; scanner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// N = 0일 때, 0이 호출되는 횟수&lt;/span&gt;
		arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// N = 0일 때, 1이 호출되는 횟수&lt;/span&gt;
		arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// N = 1일 때, 0이 호출되는 횟수&lt;/span&gt;
		arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// N = 1일 때, 1이 호출되는 횟수&lt;/span&gt;
		arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; f0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; f1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f0 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; f1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 피보나치 값 반환 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;: [int] 인덱스
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; [int] 피보나치 값
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;// 인덱스가 0일 경우&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// 인덱스가 1일 경우&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// 인덱스가 2 이상일 경우 (연산 가능)&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드는 크게 두 가지 문제가 있는데, 우선 &lt;code&gt;n = 0, 1&lt;/code&gt;일 때의 처리가 정상적으로 이루어지지 않고 있다.&lt;br&gt;
&lt;code&gt;f(1) = f(0) + f(-1)&lt;/code&gt;&lt;br&gt;
N이 문제되기 이전에 이 코드는 런타임 시간 초과로 실패한다. 왜일까?&lt;/p&gt;
&lt;p&gt;위 코드는 &lt;strong&gt;불필요한 연산을 너무 많이 수행한다.&lt;/strong&gt; 피보나치 수열의 특성 상 &lt;code&gt;f(N)&lt;/code&gt;을 계산할 경우, &lt;code&gt;f(N - 1)&lt;/code&gt;, &lt;code&gt;f(N - 2)&lt;/code&gt; ... 등과 같이 N 이하의 피보나치 값까지 전부 계산하게 된다.&lt;br&gt;
다시 말하면, &lt;code&gt;f(6)&lt;/code&gt;을 연산할 경우 계산 과정에서 자연스레 &lt;code&gt;f(4)&lt;/code&gt;, &lt;code&gt;f(2)&lt;/code&gt; 등의 피보나치 값을 구할 수 있다.&lt;/p&gt;
&lt;p&gt;위 이론을 알고리즘에 적용하면 아래와 같이 응용할 수 있다.&lt;br&gt;
N을 총 3번 입력한다고 가정하면 N&lt;sub&gt;1&lt;/sub&gt;, N&lt;sub&gt;2&lt;/sub&gt;, N&lt;sub&gt;3&lt;/sub&gt;으로 구분할 수 있다.&lt;/p&gt;
&lt;p&gt;N&lt;sub&gt;2&lt;/sub&gt; = 8 -&gt; &lt;code&gt;f(8)&lt;/code&gt; 부터 &lt;code&gt;f(0)&lt;/code&gt;까지의 값을 구할 수 있음.&lt;br&gt;
N&lt;sub&gt;3&lt;/sub&gt; = 4 -&gt; &lt;code&gt;f(4)&lt;/code&gt; 부터 &lt;code&gt;f(0)&lt;/code&gt;까지의 값을 구할 수 있음.&lt;/p&gt;
&lt;p&gt;피보나치 연산값을 저장하면 N&lt;sub&gt;n&lt;/sub&gt; &gt; N&lt;sub&gt;n+1&lt;/sub&gt;일 경우 굳이 &lt;strong&gt;추가적인 연산을 진행하지 않고 이미 저장된 값을 출력&lt;/strong&gt;만 함으로써, 런타임 리소스를 줄일 수 있다.&lt;/p&gt;
&lt;p&gt;클래스의 멤버변수로 &lt;strong&gt;Integer 배열을 선언&lt;/strong&gt;하여 피보나치 수열값을 저장하고, 알고리즘 연산에 이를 활용하면 될 것 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int는 Primitive(자료형) 데이터고, Integer는 Wrapper 클래스다. Wrapper 클래스는 null 입력이 가능하다는 특징이 있으므로, Integer 역시 숫자 이외에 null값을 입력할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Integer 배열의 초기값은 null로 지정되므로, 배열의 값이 null인 인덱스는 아직 피보나치 수열 계산이 이루어지지 않은 인덱스라고 판단할 수 있다.&lt;/p&gt;
&lt;p&gt;다행히 문제에서 주어진 &lt;code&gt;N&lt;/code&gt;의 조건은 &lt;code&gt;0 &amp;#x3C;= N &amp;#x3C;= 40&lt;/code&gt;이므로, 배열의 인덱스는 최대 41을 넘지 않음을 알 수 있다.&lt;br&gt;
(배열은 0부터 시작하므로 40개가 아닌 0을 포함한 41개임에 유의하자)&lt;/p&gt;
&lt;p&gt;이후 피보나치 연산에서 각 과정의 값을 배열에 저장하는 로직을 추가한다.&lt;br&gt;
배열의 값이 null일 경우, 아직 연산이 진행되지 않았으므로 피보나치 연산을 수행하고 배열에 저장한다.&lt;br&gt;
반대로, 배열이 특정 숫자값을 가질 경우, 이미 연산이 진행된 인덱스이므로 별도의 연산을 거치지 않고 해당 값을 바로 출력한다.&lt;/p&gt;
&lt;h2&gt;전체 소스&lt;/h2&gt;
&lt;div class=&quot;remark-highlight&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;all&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a1003&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
 * 백준 전체 1003 문제 알고리즘 클래스
 *
 * &lt;span class=&quot;token keyword&quot;&gt;@author&lt;/span&gt; RWB
 * &lt;span class=&quot;token keyword&quot;&gt;@since&lt;/span&gt; 2021.04.21 Wed 23:29:03
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 메인 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;args&lt;/span&gt;: [String[]] 매개변수
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; scanner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// 피보나치 수열 초기값 (N = 0)&lt;/span&gt;
		arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// 피보나치 수열 초기값 (N = 1)&lt;/span&gt;
		arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;token comment&quot;&gt;// n이 0일 경우&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1 0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;token comment&quot;&gt;// n이 1일 경우&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0 1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;token comment&quot;&gt;// 초기값이 아닐 경우&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 피보나치 값 반환 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;: [int] 인덱스
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; [int] 피보나치 값
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;// 해당 인덱스의 피보나치가 아직 연산되지 않았을 경우&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
		<pubDate>2021-05-21T14:29:03.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/A1003/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/A1003/</guid>
		<category>알고리즘</category>
		<category>알고리즘</category>
		<category>백준</category>
		<category>알고리즘</category>
		<category>JAVA(자바)</category>
	</item>
	<item>
		<title>Jekyll에서 Next.js로</title>
		<description>&lt;h1&gt;Bye, Jekyll!&lt;/h1&gt;
&lt;div&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/119211743-e44a7600-baee-11eb-85d0-f21c1f68debc.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;기존에 &lt;a href=&quot;http://jekyllrb-ko.github.io/&quot; target=&quot;_blank&quot; class=&quot;pink-500&quot;&gt;Jekyll&lt;/a&gt;로 운영하던 블로그를 버리고 React 기반의 &lt;span class=&quot;blue-500&quot;&gt;Next.js&lt;/span&gt;를 통해 블로그를 새로 개발했다.&lt;/p&gt;
&lt;p&gt;Github Pages를 처음 접했을 때, 호스팅을 반드시 &lt;span class=&quot;pink-500&quot;&gt;Jekyll&lt;/span&gt; 기반으로 해야한다고 착각하고있었다. 사실 조금만 생각해보면 상관 없던건데.&lt;/p&gt;
&lt;p&gt;최근에 React를 접했는데, 생각보다 꽤나 매력적인 프레임워크라 소소하게나마 뭔가 만들어보고 싶었다.&lt;br&gt;
블로그가 적절한 프로젝트(?)가 될 것 같았다. 명색이 개발자인데 블로그 하나 정도는 직접 개발해야 할 것 같기도 하고....&lt;/p&gt;
&lt;h1&gt;굳이 멀쩡한 블로그 놔두고?&lt;/h1&gt;
&lt;p&gt;한동안 안 하긴 했지만, 지금까진 &lt;span class=&quot;pink-500&quot;&gt;Jekyll&lt;/span&gt; 블로그를 운영하고 있었다. &lt;a href=&quot;http://taylantatli.github.io/Moon/&quot;&gt;Moon Theme&lt;/a&gt;를 적용해서 사용했었는데, 크고작은 불편함이 있었다.&lt;/p&gt;
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b class=&quot;green-500&quot;&gt;Jekyll이라는 생소한 환경&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Github의 개발언어는 &lt;span class=&quot;red-500&quot;&gt;Ruby&lt;/span&gt;다. 그래서일까, Github Pages의 기본 배포는 &lt;span class=&quot;red-500&quot;&gt;Ruby&lt;/span&gt; 기반 프레임워크인 &lt;span class=&quot;pink-500&quot;&gt;Jekyll&lt;/span&gt;을 따라간다.&lt;br&gt;
문제는 한국엔 &lt;span class=&quot;pink-500&quot;&gt;Jekyll&lt;/span&gt;은 물론, &lt;span class=&quot;red-500&quot;&gt;Ruby&lt;/span&gt;라는 언어 자체의 수요가 많지 않다. 단순 블로그 하나 운영하기 위해 생판 모르는 언어를 접해야 한다는 점은 무시할 수 없는 디메리트.&lt;/p&gt;
&lt;p&gt;물론 &lt;span class=&quot;red-500&quot;&gt;Ruby&lt;/span&gt;를 직접적으로 개발하진 않지만 &lt;span class=&quot;pink-500&quot;&gt;Jekyll&lt;/span&gt; 생태계 또한 그리 친숙한 형태는 아니였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b class=&quot;green-500&quot;&gt;타인이 개발한 소스의 이해&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;1번과 같은 문제로, 밑바닥부터 &lt;span class=&quot;pink-500&quot;&gt;Jekyll&lt;/span&gt;을 개발할 수 없었다.&lt;br&gt;
특정 기능에 대한 소요가 발생할 경우, 현재 테마에 어울리도록 &quot;&lt;strong&gt;잘 디자인&lt;/strong&gt;&quot;하는 것이 중요하다. 하지만 사용자의 입장에서 테마 개발자의 디자인 철학을 이해하는 것은 단순 디자인과는 또 다른 문제. 구조 파악은 덤&lt;br&gt;
더군다나 내 경우 모자란 실력에 이상한 강박증까지 있어서, 내 스타일로 작성되지 않은 코드의 리딩을 못 한다. 또한, 프로젝트의 블랙박스를 싫어한다. 실력은 없는 주제에 프로젝트 내에 내가 모르는 코드 덩어리가 있는 걸 굉장히 싫어한다. 디자인 감각이 좋지도 못 해서 결과물도 기존 테마와 이질적인 무언가가 나온다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b class=&quot;green-500&quot;&gt;편리한 사용자 확장성, 불편한 개발자 확장성&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;블로그나, 웹 페이지, PPT 같은 환경에서 &lt;span class=&quot;grenn-500&quot;&gt;테마&lt;/span&gt;를 사용하는 이유는 뭘까? 귀찮지만 중요한 디자인에 대한 투자를 과감히 패스하면서도 준수한 디자인 퍼포먼스를 내기 위함이다. 물론 취지는 좋다. 어디까지나 &lt;strong&gt;단순히 해당 테마가 의도한 방향에 맞을 때만.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;다들 비슷한 경험이 있었을 것이다. 테마 혹은 템플릿을 사용하면서 필요에 따라 커스터마이징이 필요할 경우가 그렇다.&lt;br&gt;
대부분의 테마는 결과물이 테마가 추구하는 디자인 철학과 상통할 때 그 빛을 발한다. 다시 말해, 그 의도가 손상될 경우 결과물의 퀄리티는 급락한다.&lt;br&gt;
이 뿐만 아니라, &lt;span class=&quot;red-500&quot;&gt;필요에 따라 기존의 요소(소스코드, 플러그인 등)을 제거할 경우 그 의존성을 파악하기 힘들어 리스크&lt;/span&gt;가 크다.&lt;/p&gt;
&lt;p&gt;일례로, 위에서 언급한 &lt;span class=&quot;lightBlue-500&quot;&gt;Moon Theme&lt;/span&gt;의 경우, JQuery에 의존성을 갖고 있다.&lt;br&gt;
근래 웹 개발의 JQuery에 대한 비관적인 평을 생각한다면, 이는 큰 디메리트로 다가온다. 제거 작업으로 인한 공수 또한 무시할 수 없을 것이고.&lt;br&gt;
물론 당시의 개발 트렌드를 무시할 수 없으며, &lt;strong&gt;개발&lt;/strong&gt;은 그 중에서도 트렌드의 주기가 매우 빠른 편이다. 이로 미루어 볼 때, 결과론적인 얘기다. 그럼에도 불구하고, &lt;strong&gt;사용자가 의도하지 않은 결함&lt;/strong&gt;이라는 사실은 불변하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b class=&quot;green-500&quot;&gt;개발 욕구&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;정적 블로그의 경우 백엔드 영역이 거의 전무한데다, 복잡한 비즈니스 로직도 필요 없기 때문에 개발 난이도가 상대적으로 낮다고 판단했다. 즉, 원한다면 내가 직접 개발한 블로그를 사용하는게 그리 어렵지 않다.&lt;br&gt;
위에서 언급했듯이, 직접 개발한 블로그를 사용하는 것이 좀 더 개발자스럽다. 난이도 또한 공부 중인 React를 적용하기도 적합하고.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Hello, Next.js!&lt;/h1&gt;
&lt;p&gt;React로 블로그를 만들 땐 주로 &lt;a href=&quot;https://nextjs.org/&quot; target=&quot;_blank&quot; class=&quot;blue-500&quot;&gt;Next.js&lt;/a&gt; 혹은 &lt;a href=&quot;https://www.gatsbyjs.com/&quot; target=&quot;_blank&quot; class=&quot;deepPurple-400&quot;&gt;Gatsby.js&lt;/a&gt;를 사용한다. 이번에 개발한 블로그는 &lt;span class=&quot;blue-500&quot;&gt;Next.js&lt;/span&gt;를 활용했다.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;blue-500&quot;&gt;Next.js&lt;/span&gt;는 &lt;span class=&quot;red-500&quot;&gt;Ruby&lt;/span&gt;의 &lt;span class=&quot;pink-500&quot;&gt;Jekyll&lt;/span&gt; 프레임워크와 그 결이 비슷하다. &lt;span class=&quot;pink-500&quot;&gt;Jekyll&lt;/span&gt;는 &lt;strong&gt;프레임워크 자체에 구조 스키마를 정함으로써 React의 Component와 유사하게 동작&lt;/strong&gt;한다. 그 당시의 난 React라는 걸 접하지도 않은 상황에서, React의 Component 방식으로 블로그를 구성했던 것이다. 말 그대로 낫 놓고 기역자도 모른 셈.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;blue-500&quot;&gt;Next.js&lt;/span&gt; 역시 라이브러리 자체에 정적 웹을 구성하고 빌드할 수 있는 환경이 구축되어 있어, 쉽게 사용이 가능하다. 여러 사용자들이 개발한 다수의 플러그인은 덤.&lt;br&gt;
덕분에 정적 블로그를 밑바닥에서부터 개발할 수 있었다. 나름대로 디자인 한다고 하긴 했는데, 역시 디자인은 어렵다.&lt;br&gt;
&lt;span class=&quot;blue-500&quot;&gt;Next.js&lt;/span&gt;와 &lt;span class=&quot;deepPurple-500&quot;&gt;Gatsby.js&lt;/span&gt;에 대한 내용은 나중에 따로 다룰 예정이다.&lt;/p&gt;
&lt;p&gt;아직 해야할 것들이 남아있다. sitemap 생성기도 붙여야 하고, 연관 게시물 기능도 필요하다. 아직 다듬어지지 않은 자잘한 요소들도 있고. 역시 규모에 상관없이 무언가를 퍼블리싱하는건 정말 힘든 것 같다.&lt;br&gt;
적어도 이번 블로그는 내 노력으로 내가 개발한 거니, 꾸준히 운영할 수 있었음 한다.&lt;/p&gt;
</description>
		<pubDate>2021-05-21T06:09:33.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/jekyll-to-nextjs/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/jekyll-to-nextjs/</guid>
		<category>잡담</category>
		<category>잡담</category>
		<category>React(리액트)</category>
		<category>Next.js</category>
		<category>개발 블로그</category>
		<category>Jekyll</category>
		<category>Next.js</category>
	</item>
	<item>
		<title>백준 알고리즘 시작하기</title>
		<description>&lt;h1&gt;백준 알고리즘&lt;/h1&gt;
&lt;p&gt;코딩 테스트 및 개인 실력 향상을 위해 백준 알고리즘을 차례로 풀어보기로 했다.&lt;/p&gt;
&lt;p&gt;그냥 풀기만 하면 분명히 나중에 어떻게 풀었는지 까먹을테니, 이해한 내용을 포스팅하며 풀이를 진행한다.&lt;/p&gt;
&lt;p&gt;풀이의 규칙은 아래와 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;가급적 문제번호 순서대로 진행한다.&lt;/li&gt;
&lt;li&gt;기본 언어는 &lt;span class=&quot;orange-A400&quot;&gt;JAVA&lt;/span&gt;로 진행한다.&lt;/li&gt;
&lt;li&gt;원리는 과하다 싶을 정도로 최대한 자세하게 적는다.&lt;/li&gt;
&lt;li&gt;번은 개인주의야&lt;/li&gt;
&lt;li&gt;숏코딩을 지양하고, 이해하기 쉽도록 성능이 허락하는 선에서 풀어 쓴다.&lt;/li&gt;
&lt;li&gt;주석을 적극 활용한다.&lt;/li&gt;
&lt;li&gt;채점결과가 반드시 &lt;b class=&quot;green-A400&quot;&gt;맞았습니다!!&lt;/b&gt;인 코드를 기준으로 한다.&lt;/li&gt;
&lt;li&gt;풀이에 제시되는 코드는 그대로 복사해도 알고리즘 풀이가 가능하도록 코딩한다.&lt;/li&gt;
&lt;li&gt;신명호는 놔둔다.&lt;/li&gt;
&lt;/ol&gt;
</description>
		<pubDate>2021-05-21T12:22:31.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/21/start-beakjoon/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/21/start-beakjoon/</guid>
		<category>알고리즘</category>
		<category>알고리즘</category>
		<category>백준</category>
		<category>알고리즘</category>
		<category>JAVA(자바)</category>
	</item>
	<item>
		<title>[JAVA] 백준 알고리즘 1004번 어린 왕자</title>
		<description>&lt;h1&gt;어린 왕자&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://shields.io/badge/java-JDK%2014-lightgray?logo=java&amp;#x26;style=plastic&amp;#x26;logoColor=white&amp;#x26;labelColor=orange&quot; alt=&quot;JAVA&quot;&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.acmicpc.net/problem/1004&quot;&gt;전체 1004번 문제&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;조건&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;시간제한&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;메모리 제한&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2초&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;128MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;문제&lt;/h2&gt;
&lt;p&gt;어린 왕자는 소혹성 B-664에서 자신이 사랑하는 한 송이 장미를 위해 살아간다. 어느 날 장미가 위험에 빠지게 된 것을 알게 된 어린 왕자는, 장미를 구하기 위해 은하수를 따라 긴 여행을 하기 시작했다. 하지만 어린 왕자의 우주선은 그렇게 좋지 않아서 행성계 간의 이동을 최대한 피해서 여행해야 한다. 아래의 그림은 어린 왕자가 펼쳐본 은하수 지도의 일부이다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/upload/201003/dfcmhrjj_113gw6bcng2_b.gif&quot; width=&quot;512px&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;빨간 실선은 어린 왕자가 출발점에서 도착점까지 도달하는데 있어서 필요한 행성계 진입/이탈 횟수를 최소화하는 경로이며, 원은 행성계의 경계를 의미한다. 이러한 경로는 여러 개 존재할 수 있지만 적어도 3번의 행성계 진입/이탈이 필요하다는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;위와 같은 은하수 지도, 출발점, 도착점이 주어졌을 때 어린 왕자에게 필요한 최소의 행성계 진입/이탈 횟수를 구하는 프로그램을 작성해 보자. (행성계의 경계가 맞닿거나 서로 교차하는 경우는 없다고 가정한다. 또한, 출발점이나 도착점이 행성계 경계에 걸쳐진 경우 역시 입력으로 주어지지 않는다.)&lt;/p&gt;
&lt;h2&gt;입력&lt;/h2&gt;
&lt;p&gt;입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 그 다음 줄부터 각각의 테스트케이스에 대해 첫째 줄에 출발점 (x&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;1&lt;/sub&gt;)과 도착점 `(x&lt;sub&gt;2&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;)이 주어진다. 두 번째 줄에는 행성계의 개수 n이 주어지며, 세 번째 줄부터 n줄에 걸쳐 행성계의 중점과 반지름 (c&lt;sub&gt;x&lt;/sub&gt;, c&lt;sub&gt;y&lt;/sub&gt;, r)이 주어진다. 입력제한은 다음과 같다. (-1000 ≤ x&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;1&lt;/sub&gt;, x&lt;sub&gt;2&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;, c&lt;sub&gt;x&lt;/sub&gt;, c&lt;sub&gt;y&lt;/sub&gt; ≤ 1000, 1 ≤ r ≤ 1000, 1 ≤ n ≤ 50)&lt;/p&gt;
&lt;p&gt;좌표와 반지름은 모두 정수이다.&lt;/p&gt;
&lt;h2&gt;출력&lt;/h2&gt;
&lt;p&gt;각 테스트 케이스에 대해 어린 왕자가 거쳐야 할 최소의 행성계 진입/이탈 횟수를 출력한다.&lt;/p&gt;
&lt;h2&gt;케이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;입력&lt;/p&gt;
&lt;p&gt;2&lt;br&gt;
-5 1 12 1&lt;br&gt;
7&lt;br&gt;
1 1 8&lt;br&gt;
-3 -1 1&lt;br&gt;
2 2 2&lt;br&gt;
5 5 1&lt;br&gt;
-4 5 1&lt;br&gt;
12 1 1&lt;br&gt;
12 1 2&lt;br&gt;
-5 1 5 1&lt;br&gt;
1&lt;br&gt;
0 0 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;출력&lt;/p&gt;
&lt;p&gt;3&lt;br&gt;
0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;풀이&lt;/h1&gt;
&lt;p&gt;1002번째 알고리즘의 내용을 응용하면 쉽게 풀 수 있는 문제인 것 같다. 실제로 별다른 레퍼런스를 찾지도 않고 풀 수 있었으니.&lt;/p&gt;
&lt;p&gt;문제를 풀기 전에 몇 가지 집고 넘아갈 게 있다.&lt;br&gt;
숫자들 때문에 입력의 한 세트를 착각하기 쉽다.&lt;/p&gt;
&lt;p&gt;위 예제를 기준으로 설명하면, 첫 번째 숫자는 세트의 갯수. 본문에서는 &lt;code&gt;2&lt;/code&gt;이므로, 두 세트를 테스트하므로 결과는 두 줄이 출력된다.&lt;br&gt;
이후 테스트에 필요한 데이터가 출력된다.&lt;/p&gt;
&lt;p&gt;-5 1 12 1 &amp;#x3C;= x&lt;sub&gt;1&lt;/sub&gt;, y&lt;sub&gt;1&lt;/sub&gt;, x&lt;sub&gt;2&lt;/sub&gt;, y&lt;sub&gt;2&lt;/sub&gt;&lt;br&gt;
7 &amp;#x3C;= 행성 갯수&lt;br&gt;
1 1 8 &amp;#x3C;= c&lt;sub&gt;x1&lt;/sub&gt;, c&lt;sub&gt;y1&lt;/sub&gt;, r&lt;sub&gt;1&lt;/sub&gt;&lt;br&gt;
-3 -1 1&lt;br&gt;
2 2 2&lt;br&gt;
5 5 1&lt;br&gt;
-4 5 1&lt;br&gt;
12 1 1&lt;br&gt;
12 1 2 &amp;#x3C;= 행성 갯수만큼 출력됨&lt;/p&gt;
&lt;p&gt;또한, 결과는 행성계의 진입/이탈 횟수를 통틀어서 출력하므로 굳이 진입/이탈을 구분하여 저장할 필요는 없다.&lt;/p&gt;
&lt;p&gt;문제에서 &lt;strong&gt;출발점에서 도착점까지 가는데 통과해야하는 행성계(이하 원, circle)의 최소&lt;/strong&gt;를 목적으로 두기 때문에, 반드시 통과해야하는 원만 계산하면 된다.&lt;br&gt;
출발/도착점이 임의의 원 안에 포함될 경우 반드시 진입/이탈이 일어난다. 따라서, 출발/도착점을 온전히 포함하는 원의 갯수를 계산하면 진입/이탈의 횟수를 구할 수 있다.&lt;br&gt;
주의할 점이 있는데, &lt;strong&gt;한 원이 출발/도착점을 모두 포함할 경우 계산에서 제외&lt;/strong&gt;시켜야 한다.&lt;br&gt;
하나의 원이 출발/도착점을 전부 포함할 경우, 원 안에서 이동하기 때문에 진입/이탈이 일어나지 않기 때문.&lt;/p&gt;
&lt;p&gt;-그림-&lt;/p&gt;
&lt;p&gt;원리는 간단하다. 원점과 점의 거리를 계산한다. 계산한 거리가 원의 반지름보다 짧을 경우, 해당 원은 점을 포함하는 셈이다.&lt;br&gt;
이를 식으로 정리하면 아래와 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;변수&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;원점 좌표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;xo&lt;/code&gt;, &lt;code&gt;yo&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;원의 원점 좌표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;원의 반지름&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;변수는 위 표와 같이 정의하고 식을 전개한다.&lt;/p&gt;
&lt;p&gt;-식-&lt;/p&gt;
&lt;p&gt;위 식을 코드로 표현하면 되는 비교적 간단한 알고리즘이다.&lt;/p&gt;
&lt;h2&gt;전체 소스&lt;/h2&gt;
&lt;div class=&quot;remark-highlight&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
 * 백준 전체 1004 문제 알고리즘 클래스
 *
 * &lt;span class=&quot;token keyword&quot;&gt;@author&lt;/span&gt; RWB
 * &lt;span class=&quot;token keyword&quot;&gt;@since&lt;/span&gt; 2021.04.24 Sat 02:15:31
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 메인 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;args&lt;/span&gt;: [String[]] 매개변수
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; scanner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; base &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x_start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y_start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x_end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y_end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; through &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; circle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				
				&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;circle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;circle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;circle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				
				&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; hasStartContain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hasContain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x_start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y_start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; hasEndContain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hasContain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x_end&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y_end&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				
				&lt;span class=&quot;token comment&quot;&gt;// 해당 행성이 출발 혹은 도착점 중 하나만을 포함할 경우&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hasStartContain &lt;span class=&quot;token operator&quot;&gt;&amp;#x26;&amp;#x26;&lt;/span&gt; hasEndContain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;#x26;&amp;#x26;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hasStartContain &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; hasEndContain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
					through&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
			
			&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;through&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		
		scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 출발/도착점 포함 여부 반환 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;xo&lt;/span&gt;: [int] 출발/도착점의 x좌표
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;yo&lt;/span&gt;: [int] 출발/도착점의 y좌표
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;: [int] 행성의 x좌표
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;y&lt;/span&gt;: [int] 행성의 y좌표
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;r&lt;/span&gt;: [int] 행성의 반지름
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; [boolean] 출발/도착점 포함 여부
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hasContain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; xo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; yo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xo &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yo &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
		<pubDate>2021-05-22T12:42:23.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/22/A1004/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/22/A1004/</guid>
		<category>알고리즘</category>
		<category>알고리즘</category>
		<category>백준</category>
		<category>알고리즘</category>
		<category>JAVA(자바)</category>
	</item>
	<item>
		<title>도메인이란?</title>
		<description>&lt;h1&gt;Domain(도메인)이란?&lt;/h1&gt;
&lt;p&gt;도메인을 이해하기 위해선, IP에 대해 짚고 넘어가야 한다.&lt;br&gt;
인터넷에 연결된 모든 디바이스(컴퓨터, 스마트폰, 공유기 등)는 &lt;span class=&quot;blue-500&quot;&gt;고유한 12자리 숫자로 구성된 IP주소&lt;/span&gt;를 가진다.&lt;br&gt;
IP를 유동성으로 나누면 크게 유동 IP, 고정 IP로 분류할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;primary&quot;&gt;유동 IP&lt;/span&gt;: 임의의 시점마다 IP주소가 갱신되는 IP. 갱신 주기는 일정하지 않음. 대부분의 인터넷 회선에 적용됨.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;primary&quot;&gt;고정 IP&lt;/span&gt;: 회선에 고정된 IP를 부여하며, 해당 회선의 IP는 갱신되지 않음. 부가서비스 형태로 제공되며, 쇼핑몰이나 회사 등 지속적으로 시스템을 운영해야 할 경우 적합함.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우리가 원하는 장소에 방문하기 위해 주소를 찾듯이, &lt;span class=&quot;green-500&quot;&gt;특정 서버에서 운영하는 웹 사이트를 방문하기 위해선 해당 서버의 주소인 IP가 필요&lt;/span&gt;하다.&lt;br&gt;
불행히도, IP는 불규칙적인 숫자로 이루어져있어, 사람이 쉽게 기억하기 다소 어렵다. 이러한 불편함을 해소하기 위한 것이 Domain(도메인)이다.&lt;/p&gt;
&lt;p&gt;도메인은 &lt;span class=&quot;pink-400&quot;&gt;SLD(서브도메인)&lt;/span&gt;, &lt;span class=&quot;pink-400&quot;&gt;도메인&lt;/span&gt;, &lt;span class=&quot;pink-400&quot;&gt;TLD(최상위 도메인)&lt;/span&gt;으로 구분되며, 해당 도메인의 정보는 1차적으로 각 로컬 DNS 서버가 관리하며, 최종적으로는 TLD를 관리하는 Root DNS에서 관리한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;도메인에 대한 자세한 내용은 이전에 작성된 &lt;a href=&quot;/posts/uri-url-urn&quot;&gt;URI? URL? URN? 리소스 식별자 구분하기&lt;/a&gt;를 참조한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;그래서 도메인을 왜 쓰는데?&lt;/h1&gt;
&lt;p&gt;우리가 흔히 &lt;span class=&quot;green-A700&quot;&gt;네이버&lt;/span&gt;라고 부르는 사이트의 실제 IP는 &lt;a href=&quot;http://125.209.222.141&quot;&gt;125.209.222.141&lt;/a&gt;이다. 하지만 우리들 중 그 누구도 저런 IP로 &lt;span class=&quot;green-A700&quot;&gt;네이버&lt;/span&gt;에 접속하지 않는다. 대신 우리는 &lt;a href=&quot;https://www.naver.com&quot;&gt;https://www.naver.com&lt;/a&gt;이라는 도메인으로 접속한다. 이유는 간단하다. 주소 자체에 &lt;span class=&quot;green-A700&quot;&gt;naver&lt;/span&gt;라는 키워드가 포함되어 있으므로 기억하기 쉽기 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pink-400&quot;&gt;도메인&lt;/span&gt;은 숫자가 아닌, 문자 형태로 이루어진 주소다. 문자이므로, 주소에 의미를 부여하기 용이하다. 사용자가 주소를 기억하기 쉬워 주소에 대한 접근성을 높여준다.&lt;br&gt;
생성한 &lt;span class=&quot;pink-400&quot;&gt;도메인&lt;/span&gt;에 원하는 IP를 연결하면 &lt;span class=&quot;pink-400&quot;&gt;도메인&lt;/span&gt; 주소를 통해서도 해당 IP에 접근할 수 있다.
&lt;span class=&quot;pink-400&quot;&gt;도메인&lt;/span&gt; 제공 업체에 따라, 영숫자 뿐만 아니라 한글과 같은 유니코드 문자도 지원하므로, 딱딱한 IP 대신 개성있는 주소를 사용할 수 있는 것이다.&lt;/p&gt;
&lt;h1&gt;도메인의 원리&lt;/h1&gt;
&lt;p&gt;여기서 의문점이 한 가지 생긴다. IP &lt;a href=&quot;http://125.209.222.141&quot;&gt;125.209.222.141&lt;/a&gt;와 &lt;span class=&quot;pink-400&quot;&gt;도메인&lt;/span&gt; &lt;a href=&quot;https://www.naver.com&quot;&gt;https://www.naver.com&lt;/a&gt;가 &lt;span class=&quot;green-A700&quot;&gt;네이버&lt;/span&gt;를 가리키는 주소인건 알겠는데, 인터넷은 과연 두 주소의 연결고리를 어떻게 아는 걸까?&lt;/p&gt;
&lt;p&gt;이는 &lt;span class=&quot;pink-400&quot;&gt;도메인&lt;/span&gt;의 동작 원리를 보면 알 수 있다. &lt;code&gt;rwb0104.github.io&lt;/code&gt; &lt;span class=&quot;pink-400&quot;&gt;도메인&lt;/span&gt;에 접근하는 과정을 예시로 보자.&lt;/p&gt;
&lt;p&gt;-- 사진 --&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP 통신을 통해 &lt;code&gt;rwb0104.github.io&lt;/code&gt;에 접근을 시도한다.&lt;/li&gt;
&lt;li&gt;네트워크에 지정된 로컬 DNS에게 &lt;code&gt;rwb0104.github.io&lt;/code&gt;의 정보를 요청한다.
&lt;ul&gt;
&lt;li&gt;만약 로컬 DNS가 해당 도메인의 정보를 보유하고 있을 경우, 즉시 정보를 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rwb0104.github.io&lt;/code&gt;에 대한 정보가 없을 경우, 근접한 Root DNS에 해당 도메인의 정보를 요청한다.&lt;/li&gt;
&lt;li&gt;Root DNS가 &lt;code&gt;.io&lt;/code&gt; TLD를 관리하는 DNS 서버의 정보를 로컬 DNS에 제공한다.&lt;/li&gt;
&lt;li&gt;로컬 DNS가 &lt;code&gt;rwb0104.github.io&lt;/code&gt;를 관리하는 TLD의 DNS 서버에 해당 정보를 요청한다.&lt;/li&gt;
&lt;li&gt;TLD DNS 서버가 &lt;code&gt;rwb0104.github.io&lt;/code&gt;에 대한 정보(IP 등)을 제공한다.&lt;/li&gt;
&lt;li&gt;로컬 DNS가 &lt;code&gt;rwb0104.github.io&lt;/code&gt;의 IP를 알고 있으므로, 이를 통해 해당 사이트에 접근할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;기본적으로 &lt;span class=&quot;pink-400&quot;&gt;도메인&lt;/span&gt;은 반드시 하나의 IP와 연결된다. 이런 특징 덕분에 &lt;span class=&quot;pink-400&quot;&gt;도메인&lt;/span&gt;은 항상 특정한 하나의 IP만을 반환한다.&lt;/p&gt;
</description>
		<pubDate>2021-05-22T03:52:51.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/22/about-domain/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/22/about-domain/</guid>
		<category>WEB</category>
		<category>WEB</category>
		<category>WEB(웹)</category>
		<category>Domain(도메인)</category>
	</item>
	<item>
		<title>Tomcat(톰캣) 콘솔창 한글 인코딩 깨짐 현상 해결하기</title>
		<description>&lt;h1&gt;와장창!&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/119212087-342a3c80-baf1-11eb-89bc-06829a5f7c16.png&quot; alt=&quot;Encoding Broken&quot;&gt;&lt;/p&gt;
&lt;p&gt;톰캣을 구동하다보면 심심치않게 마주하는 오류(?)는 아니고 현상.&lt;br&gt;
Windows Console의 기본 인코딩과 Tomcat이 출력하는 인코딩이 서로 달라서 생긴다.&lt;/p&gt;
&lt;h1&gt;도대체 왜?&lt;/h1&gt;
&lt;p&gt;실력 좋은 개발자가 아니더라도, 컴퓨터와 친분이 있다면 언어가 깨짐은 곧 인코딩의 불일치라는 걸 개괄적으로 이해하고 있다. 이러한 현상이 일어나는 이유는 아래와 같은데,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;primary&quot;&gt;Windows Console&lt;/span&gt;: Windows OS 설정 언어의 기본 인코딩 (한국어는 &lt;strong&gt;EUC-KR&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;primary&quot;&gt;Tomcat Console&lt;/span&gt;: 설정파일의 인코딩 (&lt;strong&gt;기본 UTF-8&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 처럼, 기본 인코딩이 서로 다르다.&lt;/p&gt;
&lt;h1&gt;해결책&lt;/h1&gt;
&lt;p&gt;이를 해결하는 방법은 크게 두 가지가 존재한다. 개인적으로 &lt;span class=&quot;red-300&quot;&gt;두 번째 방법을 추천&lt;/span&gt;한다.&lt;/p&gt;
&lt;h3&gt;Windows Console 인코딩 변경하기&lt;/h3&gt;
&lt;p&gt;첫 번째로, Windows Console의 인코딩을 변경한다. Windows 10 기준으로 OS의 기본 콘솔은 &lt;span class=&quot;green-500&quot;&gt;cmd&lt;/span&gt;와 &lt;span class=&quot;green-500&quot;&gt;PowerShell&lt;/span&gt; 두 가지다. &lt;strong&gt;사용할 콘솔의 기본 인코딩을 EUC-KR에서 UTF-8로 변경&lt;/strong&gt;해주면 된다.&lt;/p&gt;
&lt;p&gt;애석하게도, 두 콘솔 모두 인코딩을 변경하는 옵션을 제공하지 않는다. 그렇다고 방법이 없는 건 아니고, 레지스트리 수정을 통해 문제를 해결할 수 있다.&lt;/p&gt;
&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;작업표시줄에서 &lt;code&gt;regedit&lt;/code&gt;을 입력하여 &lt;span class=&quot;blue-500&quot;&gt;레지스트리 편집기&lt;/span&gt;를 띄운다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Console&lt;/code&gt; 경로에 접근한다. 사용자 계정에 설치된 콘솔들이 출력된다. (cmd, PowerShell, Git 등)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/119212160-83706d00-baf1-11eb-92c8-b41458950f20.png&quot; alt=&quot;Registry&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;인코딩을 변경하려는 콘솔의 폴더를 클릭한다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;%SystemRoot%_system32_cmd.exe&lt;/strong&gt;: cmd&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe&lt;/strong&gt;: 32비트 PowerShell&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%SystemRoot%_SysWOW64_WindowsPowerShell_v1.0_powershell.exe&lt;/strong&gt;: 64비트 PowerShell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CodePage&lt;/code&gt; 키를 더블클릭하여 편집을 수행한다.
&lt;code&gt;CodePage&lt;/code&gt;가 없을 경우, 오른쪽 마우스 버튼을 클릭하여 새 DWORD(32비트) 키를 동일한 이름으로 생성한다.&lt;/li&gt;
&lt;li&gt;값 데이터를 10진수 &lt;code&gt;65001&lt;/code&gt;로 변경한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/119212198-ab5fd080-baf1-11eb-981b-82599148c8f8.png&quot; alt=&quot;Registry&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;앞으로 실행되는 Windows Console은 해당 인코딩이 적용된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이렇게 하면 Windows Console과 Tomcat의 기본 인코딩이 UTF-8로 서로 일치하므로, 한글이 정상적으로 출력된다.&lt;br&gt;
하지만 이 방법은 Windows Console의 인코딩을 바꾸므로, 차후 해당 &lt;span class=&quot;red-500&quot;&gt;콘솔을 통해 다른 작업이나 프로그램이 실행될 경우 엉뚱한 프로그램의 한글이 깨질 우려&lt;/span&gt;가 있다.&lt;br&gt;
(대부분은 OS 언어의 기본 인코딩을 따라가도록 설계함)&lt;/p&gt;
&lt;p&gt;Windows Console은 범용적으로 사용되는 프로그램이므로, 다른 작업에 영향을 줄 수 있다. 내가 이 방법을 굳이 추천하지 않는 이유이기도 하다.&lt;/p&gt;
&lt;h3&gt;Tomcat Console 인코딩 변경하기&lt;/h3&gt;
&lt;p&gt;두 번째로, Tomcat Console의 인코딩을 변경한다. 첫 번째 방법보다 이 방법이 나은 이유는, Tomcat이라는 제한적인 용도의 콘솔에만 영향을 미치기 때문. 어차피 Tomcat Console의 인코딩이 불일치해서 생기는 문제이므로, 이쪽을 바꾸는게 상식적으로도 맞다.&lt;/p&gt;
&lt;p&gt;대부분 마찬가지로 위 방법처럼 레지스트리를 수정하라고 안내할텐데, Tomcat은 굳이 그렇게 바꿔줄 필요 없다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;%TOMCAT_HOME%\conf\logging.properties&lt;/code&gt;을 연다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;java.util.logging.ConsoleHandler.encoding&lt;/strong&gt;의 값을 &lt;strong&gt;EUC-KR&lt;/strong&gt;로 변경한다.
별다른 설정이 없었다면, UTF-8이 기본으로 설정되어 있다.&lt;/li&gt;
&lt;li&gt;앞으로 실행되는 Tomcat은 해당 인코딩이 적용된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tomcat을 실행하면 한글이 정상적으로 출력된다.&lt;/p&gt;
</description>
		<pubDate>2021-05-22T03:52:51.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/22/tomcat-encoding-euckr/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/22/tomcat-encoding-euckr/</guid>
		<category>WAS</category>
		<category>WAS</category>
		<category>WAS</category>
		<category>Tomcat(톰캣)</category>
		<category>Console(콘솔)</category>
	</item>
	<item>
		<title>Tomcat(톰캣) 현재 콘솔창에서 구동하기</title>
		<description>&lt;h1&gt;왜 자꾸 꺼지는거야!&lt;/h1&gt;
&lt;p&gt;오늘도 어느때와 다름없이 톰캣을 구동하는 A씨. 어제까지만 해도 잘 되던 톰캣이 무슨 오류가 있는지 구동 중에 바로 꺼져버린다. 꺼지기 직전의 순간 무슨 오류가 뜬 거 같은데..... 너무 빨라서 도통 확인할 수가 없다. 할 수 없이 일일이 로그를 찾아보며 오류를 수정하는 A씨. 건드린 것도 없는데, 왜 이러는 걸까?&lt;/p&gt;
&lt;h1&gt;왜?&lt;/h1&gt;
&lt;p&gt;톰캣이 콘솔 형태로 실행되는 것은 맞지만, 실행되는 프로세스를 보면 살짝 다르다. &lt;code&gt;startup.bat&lt;/code&gt;을 실행하면 cmd창이 뜬 뒤 꺼지면서 곧바로 Tomcat 창이 표시된다. &lt;span class=&quot;primary&quot;&gt;톰캣을 구동하면 항상 새로운 창이 뜨기 때문에, 톰캣이 오류로 인해 동작이 중지되면 창이 곧바로 닫히게 된다.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;해결책?&lt;/h1&gt;
&lt;p&gt;그렇다고 해결책이 없는 건 아니고, &lt;code&gt;startup.bat&lt;/code&gt;의 간단한 수정을 통해 톰캣이 &lt;span class=&quot;primary&quot;&gt;현재 창에서 동작&lt;/span&gt;하도록 수정할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;startup.bat&lt;/code&gt;을 메모장으로 열면, 맨 아래에 &lt;code&gt;call &quot;%EXECUTABLE%&quot; run %CMD_LINE_ARGS%&lt;/code&gt; 구문이 존재한다. 여기서 가운데 &lt;code&gt;run&lt;/code&gt;을 &lt;code&gt;start&lt;/code&gt;로 변경한다.&lt;/p&gt;
&lt;p&gt;즉 &lt;code&gt;call &quot;%EXECUTABLE%&quot; start %CMD_LINE_ARGS%&lt;/code&gt;로 구문을 변경하고 저장하면 된다.&lt;/p&gt;
&lt;p&gt;이후 &lt;code&gt;startup.bat&lt;/code&gt;을 클릭하여 실행하지 말고, &lt;code&gt;cmd&lt;/code&gt;창 하나를 킨 다음에, 해당 콘솔에서 &lt;code&gt;startup.bat&lt;/code&gt;을 호출하면 새 창이 뜨지 않고 호출한 콘솔에서 톰캣이 구동된다.&lt;br&gt;
톰캣이 종료돼도 콘솔창이 꺼지지 않으므로, 편하게 메시지를 확인할 수 있다.&lt;/p&gt;
</description>
		<pubDate>2021-05-26T07:32:16.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/26/tomcat-current-window/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/26/tomcat-current-window/</guid>
		<category>WAS</category>
		<category>WAS</category>
		<category>WAS</category>
		<category>Tomcat(톰캣)</category>
		<category>Console(콘솔)</category>
	</item>
	<item>
		<title>URI? URL? URN? 리소스 식별자 구분하기</title>
		<description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;h1&gt;URL! URI... URN??&lt;/h1&gt;
&lt;p&gt;우리가 인터넷 상에서 &lt;strong&gt;특정한 데이터&lt;/strong&gt;에 접근할 때 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;이라는 것을 활용하여 접근한다.&lt;br&gt;
원하는 자료의 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;을 얻으면, 브라우저 같은 HTTP 통신 프로그램에 해당 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;을 호출하여 응답을 얻는 것이다.&lt;/p&gt;
&lt;p&gt;개발자나, 굳이 개발자가 아니더라도 관련 정보를 찾다보면 심심치않게 &lt;span class=&quot;primary&quot;&gt;URI&lt;/span&gt;라는 용어를 접하게 된다.&lt;br&gt;
I와 L의 오묘한 유사성 때문에 아예 &lt;span class=&quot;primary&quot;&gt;URI&lt;/span&gt;를 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;로 오독하는가 하면, 오타라고 생각하는 사람도 더러 있을 것이다.&lt;br&gt;
하지만 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;과 &lt;span class=&quot;primary&quot;&gt;URI&lt;/span&gt;는 그 의미가 비슷하면서도 살짝 다르다.&lt;/p&gt;
&lt;p&gt;누구나 알고있는 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;과 아리까리한 &lt;span class=&quot;primary&quot;&gt;URI&lt;/span&gt;, 생소한 &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;. 이들에 대해 알아보자&lt;/p&gt;
&lt;h1&gt;UR* 톱아보기&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URI&lt;/span&gt;, &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;, &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;은 구조상 서로 연관이 있다.&lt;/p&gt;
&lt;h2&gt;URI(Uniform Resource Identifier, 통합 자원 식별자)&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URI&lt;/span&gt;는 우리말로 &lt;strong&gt;통합 자원 식별자&lt;/strong&gt;라고 한다. &lt;span class=&quot;primary&quot;&gt;URI&lt;/span&gt;는 앞서 말한 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;, &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;을 포함하는 상위 개념으로, &lt;span class=&quot;orange-400&quot;&gt;인터넷 상에 존재하는 &lt;strong&gt;자원을 구분&lt;/strong&gt;하는 식별자&lt;/span&gt;라 할 수 있다. 웹 상에서 자원을 식별하는 모든 수단이 곧 &lt;span class=&quot;primary&quot;&gt;URI&lt;/span&gt;이라 할 수 있다.&lt;/p&gt;
&lt;h2&gt;URL(Uniform Resource Locater, 통합 자원 지시자)&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;은 굳이 우리말로 하자면 &lt;strong&gt;통합 자원 지시자&lt;/strong&gt;라고 할 수 있겠지만, 흔히 인터넷 상에서 &lt;strong&gt;주소&lt;/strong&gt;라 함은 99% 이 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;을 의미한다. 1994년 &lt;strong&gt;RFC-1738&lt;/strong&gt;에 정의되어있다.&lt;br&gt;
&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;은 &lt;strong&gt;Locater&lt;/strong&gt;라는 키워드에 걸맞게 &lt;span class=&quot;orange-400&quot;&gt;인터넷 상에 존재하는 자원의 &lt;strong&gt;위치&lt;/strong&gt;를 나타내는 식별자&lt;/span&gt;라 할 수 있다. 여기서 &lt;strong&gt;위치&lt;/strong&gt;라는 키워드에 주목하자. &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;은 자원의 위치정보를 가지므로, 어떠한 이유로든 자원의 위치가 변경되면 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;은 자원을 찾을 수 없으며, 변경된 위치를 추적할 수도 없다. 이 때 맞이하게 되는 HTTP 오류가 누구나 알고있는 404 Not Found다.&lt;br&gt;
당장 내가 이 게시물의 이름을 한 글자만 변경해도, 지금까지의 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;은 아무 쓸모가 없어지며, 사용자들 또한 해당 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;로 이 게시물에 접근할 수 없다. 또한, 이 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;을 통해 원래 있던 게시물의 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;을 논리적으로 유추할 수도 없다.&lt;/p&gt;
&lt;h2&gt;URN(Uniform Resource Name, 통합 자원 이름)&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;은 &lt;strong&gt;통합 자원 이름&lt;/strong&gt;이다. 눈치가 빠른 분들은 아시겠지만, &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;은 &lt;span class=&quot;orange-400&quot;&gt;인터넷 상에 존재하는 자원의 &lt;strong&gt;이름&lt;/strong&gt;을 나타내는 식별자&lt;/span&gt;다. 자원의 이름은 고유한 값을 가지므로, 인터넷 상의 수 많은 자원들 중 특정 자원을 식별할 수 있는 것이다.&lt;br&gt;
&lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;은 대부분 위에 언급한 두 개념에 비해 생소할 것이다. 그도 그럴 것이, &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;은 위 두 개념보다 훨씬 뒤에 나온 개념이기 때문이다. 1997년 &lt;strong&gt;RFC-2141&lt;/strong&gt;에 정의되어있다. &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;보다 3년 뒤에 출범하여 그 역사가 상대적으로 짧다.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;의 치명적인 단점은 &lt;strong&gt;위치&lt;/strong&gt;정보 외에 다른 정보를 저장하지 않는다. 이 상황에서 해당 자원을 찾아야 한다면? 안타깝게도 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;만으로는 찾아낼 수 없다. 구글링해서 운 좋게 찾아낸다면 모를까.&lt;br&gt;
반면 &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;을 사용한다면 어떨까? 위치가 아무리 변경된다 하더라도, 자원의 고유한 이름을 통해 찾기 때문에 자원이 웹 상에서 완전히 삭제된 게 아니라면 손쉽게 찾아낼 수 있을 것이다.&lt;/p&gt;
&lt;h2&gt;정리&lt;/h2&gt;
&lt;p&gt;난 어려운 개념을 이해할 때 현실세계와 연관지어 이해하는 걸 좋아한다. 위 세 개념을 현실에서 특정 사람의 신원을 확인하는 과정과 접목해서 정리하면 아래와 같이 정리할 수 있을 것 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;구분&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;현실&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;값&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;자원&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;나 자신&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;나&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;URI&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;나를 식별할 수 있는 모든 식별자&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;URL&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;내가 사는 주소&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;서울특별시 A구 가동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;URN&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;내 주민등록번호&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;000000-0000000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class=&quot;small red-A400&quot;&gt;※ URN은 모든 자원의 고유값이므로, 사람과 연관지었을 때, 중복 가능성이 있는 이름 보다는 고유값인 주민등록번호가 더 적합하다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;예를 들어, 내 정보가 위와 같다고 가정해보자. 내가 사는 주소 및 내 주민등록번호 모두 내 신원을 확인할 수 있는 방식(&lt;span class=&quot;primary&quot;&gt;URI&lt;/span&gt;)이므로, 나를 찾기에 적합하다.&lt;br&gt;
만약 내 주소(&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;)를 통해 확인할 경우, 내가 이사(자원의 이동)를 가게 되면 해당 주소엔 아무것도 없으며, 날 찾을 수도 없다(404 HTTP 에러). 또한, 내가 예전에 살던 주소만으로 내가 이사간 주소를 유추해낼 수도 없을 것이다.&lt;/p&gt;
&lt;p&gt;반면, 내 주민등록번호(&lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;)을 통해 확인할 경우, 내 주민등록번호와 매칭되는 사람을 찾는 것으로 나를 식별할 수 있다. 이 과정에서 내가 어디에 있는지는 전혀 중요치 않은 것이다. 주민등록번호 자체가 말소(자원 삭제)되지 않는 한, 내가 어디에서 무엇을 하고있든 내 신원을 확인할 수 있다.&lt;/p&gt;
&lt;h1&gt;구조&lt;/h1&gt;
&lt;p&gt;그렇다면 이들은 어떻게 생겼는지 알아보자. &lt;span class=&quot;primary&quot;&gt;URI&lt;/span&gt;는 자원의 식별자를 포괄하여 지칭하는 개념 그 자체이므로, 구조라고 할 건 없다. 하위 개념인 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;, &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;에 대해 알아보자.&lt;/p&gt;
&lt;h2&gt;URL 구조&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;은 아래와 같은 구조로 이루어진다. 매우 익숙할 것이다.&lt;/p&gt;
&lt;p class=&quot;large&quot; align=&quot;center&quot;&gt;&lt;span class=&quot;lightBlue-400&quot;&gt;https&lt;/span&gt;://&lt;span class=&quot;green-400&quot;&gt;rwb0104&lt;/span&gt;.&lt;span class=&quot;yellow-400&quot;&gt;github&lt;/span&gt;.&lt;span class=&quot;pink-400&quot;&gt;com&lt;/span&gt;:&lt;span class=&quot;amber-400&quot;&gt;443&lt;/span&gt;/&lt;span class=&quot;cyan-400&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;teal-400&quot;&gt;?category=WEB&amp;page=1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;구조별로 색상을 입혔으며, 순서대로 기술한다.&lt;/p&gt;
&lt;h3&gt;Protocol(프로토콜)&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;상의 &lt;span class=&quot;lightBlue-400&quot;&gt;https&lt;/span&gt; 부분.&lt;/p&gt;
&lt;p&gt;통신규약을 의미한다. 작성일 기준으로, 이 규약엔 계층별로 많은 &lt;span class=&quot;lightBlue-400&quot;&gt;프로토콜&lt;/span&gt;이 존재하는데, 웹 통신을 수행할 땐 크게 두 가지로 나뉜다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;구분&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;W3 상에서의 HTML 문서 통신규약&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;HTTPS&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;암호화된 HTTP 통신 규약&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;현재는 포털, 쇼핑몰같은 대형 비즈니스 사이트나 블로그, 카페 등 중소규모의 개인 사이트까지 &lt;span class=&quot;red-A400&quot;&gt;HTTPS의 사용이 반 강제적으로 권장&lt;/span&gt;되어 있다. 특히 전자상거래가 접목된 비즈니스 사이트의 경우 필수로 적용해야 한다. 더군다나 &lt;span class=&quot;red-A400&quot;&gt;HTTPS가 적용되지 않는 사이트(localhost 제외)에 접근할 경우 브라우저 측에서 보안 관련 경고 메시지&lt;/span&gt;를 띄우니, 규모에 관계없이 웹 사이트를 운영할 경우 HTTPS는 필수로 적용하는 편이다.&lt;/p&gt;
&lt;h3&gt;SLD(Second Level Domain, 서브도메인, 호스트)&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;상의 &lt;span class=&quot;green-400&quot;&gt;rwb0104&lt;/span&gt; 부분.&lt;/p&gt;
&lt;p&gt;도메인 앞에 붙으며, &lt;span class=&quot;green-400&quot;&gt;서브도메인&lt;/span&gt;을 통해 하나의 &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;으로 다중 서비스를 제공할 수 있다. 하나의 &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;에 여러 &lt;span class=&quot;green-400&quot;&gt;서브도메인&lt;/span&gt;을 생성할 수 있으며, 우리가 흔히 아는 &lt;code&gt;www&lt;/code&gt; 외에도 &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; 용도에 따라 다양한 문자열을 지정할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;URL&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://naver.com&quot;&gt;naver.com&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;기본 네이버 홈페이지. 각 플랫폼(데스크탑, 모바일 등)에 가장 적합한 사이트로 리다이렉트&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.naver.com&quot;&gt;www.naver.com&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;데스크탑용 네이버 홈페이지&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://m.naver.com&quot;&gt;m.naver.com&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;모바일용 네이버 홈페이지&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://map.naver.com&quot;&gt;map.naver.com&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;네이버 지도&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;위는 네이버 서비스의 &lt;span class=&quot;green-400&quot;&gt;서브도메인&lt;/span&gt;으로, &lt;code&gt;naver.com&lt;/code&gt; &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;을 중심으로 각기 다른 서비스를 제공하는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h3&gt;Domain(도메인)&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;상의 &lt;span class=&quot;yellow-400&quot;&gt;github&lt;/span&gt; 부분.&lt;/p&gt;
&lt;p&gt;URL의 중심이 되는 부분으로, 제공하는 웹 서비스의 아이덴티티 역할을 겸한다. 때문에 &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;에는 대부분 해당 웹 서비스의 이름이 들어간다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;서비스&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;네이버&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://naver.com&quot;&gt;naver.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;다음&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.daum.com&quot;&gt;www.daum.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;GitHub&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com&quot;&gt;github.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Instagram&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://instagram.com&quot;&gt;instagram.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;대부분의 서비스가 &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;으로 서비스의 이름을 사용하고 있다.&lt;/p&gt;
&lt;h3&gt;TLD(Top Level Domain, 최상위 도메인)&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;상의 &lt;span class=&quot;pink-400&quot;&gt;com&lt;/span&gt; 부분.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;이란, 앞서 언급한 &lt;span class=&quot;green-400&quot;&gt;서브도메인&lt;/span&gt;, &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;을 관리하는 업체 혹은 기관이라고 볼 수 있다.&lt;br&gt;
앞서 언급한 개념의 경우, 중복되지 않는 선에서 사용자가 임의로 지정할 수 있다. 하지만 &lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;의 경우 현재 운영 중인 업체나 기관 중 하나를 &lt;strong&gt;선택&lt;/strong&gt;해서 등록해야 한다. &lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;을 선택할 경우, 당신의 도메인은 해당 &lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;을 운영하는 곳에서 관리하게 된다.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;은 운영 주체에 따라 두 가지로 나뉜다.&lt;/p&gt;
&lt;h4&gt;ccTLD(country code TLD, 국가 코드 최상위 도메인)&lt;/h4&gt;
&lt;p&gt;국가를 나타내는 &lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;이다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;ccTLD&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;.kr&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;한국(KISA)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;.us&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;미국(LLC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;.jp&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;일본&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;.io&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;영국령 인도양&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class=&quot;pink-400&quot;&gt;ccTLD&lt;/span&gt;는 위 표와 같이 국가 코드 형태이며, 각 국가기관이 직접 관리한다. 즉, &lt;code&gt;.kr&lt;/code&gt;을 가진 모든 도메인은 &lt;strong&gt;한국의 KISA(한국 인터넷 진흥원)에서 관리&lt;/strong&gt;한다.&lt;/p&gt;
&lt;h4&gt;gTLD(generic TLD, 일반 최상위 도메인)&lt;/h4&gt;
&lt;p&gt;사이트 혹은 사이트를 소유한 조직, 기관의 특성에 따라 사용하는 &lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;이다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;gTLD&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;.com&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;영리 단체 및 기관&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;.net&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;네트워크 관리기관&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;.org&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;비영리 기관&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;.gov&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;정부 기관&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class=&quot;pink-400&quot;&gt;gTLD&lt;/span&gt;는 위 표와 같이 다양한 종류가 있으며, 그 중 몇몇은 자주 접했을 것이다. 정부기관이 왜 여기있나 생각할 수도 있는데, &lt;span class=&quot;pink-400&quot;&gt;ccTLD&lt;/span&gt;는 &lt;strong&gt;국가 코드&lt;/strong&gt;만 해당된다. 국가 예하의 정부기관, 군사조직 등은 구분 상 &lt;span class=&quot;pink-400&quot;&gt;gTLD&lt;/span&gt;로 분류된다.&lt;br&gt;
마찬가지로, 각 &lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;은 &lt;strong&gt;해당 &lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;을 소유한 기관 혹은 기업에서 관리&lt;/strong&gt;한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;현재 운영 중인 &lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;은 &lt;a href=&quot;https://www.iana.org/domains/root/db&quot;&gt;IANA&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;여담으로, &lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;에 중복된 &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;을 등록할 수 없다. 예를 들어, 내가 &lt;code&gt;aaa.com&lt;/code&gt; URL을 등록한다고 가정해보자.&lt;br&gt;
우선 제일 먼저 &lt;code&gt;.com&lt;/code&gt;을 관리하는 업체에 &lt;code&gt;aaa&lt;/code&gt;라는 &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;을 등록해야 한다. 하지만, 이미 누군가가 &lt;code&gt;aaa.com&lt;/code&gt;을 등록했다면 해당 소유주가 &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;의 소유권을 포기하기 전까진 &lt;code&gt;aaa.com&lt;/code&gt; &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;을 소유할 수 없다.&lt;br&gt;
물론 &lt;code&gt;.com&lt;/code&gt;이 아닌 &lt;code&gt;.kr&lt;/code&gt;이나 &lt;code&gt;.net&lt;/code&gt;에는 등록할 수 있다. 하지만 &lt;code&gt;socket.io&lt;/code&gt; 처럼 &lt;span class=&quot;yellow-400&quot;&gt;도메인&lt;/span&gt;과 &lt;span class=&quot;pink-400&quot;&gt;최상위 도메인&lt;/span&gt;까지 의미론적으로 구성했다면, 이러한 상황이 달갑지 않을 것이다. 때문에 일전에 이슈됐던 &lt;span class=&quot;primary&quot;&gt;덮죽 상표권 선점&lt;/span&gt;과 비슷한 일이 일어나기도 한다.&lt;/p&gt;
&lt;h2&gt;Port(포트)&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;상의 &lt;span class=&quot;amber-400&quot;&gt;443&lt;/span&gt; 부분. 앞에 반드시 &lt;code&gt;:&lt;/code&gt;이 붙는다.&lt;/p&gt;
&lt;p&gt;인터넷에 연결된 모든 디바이스는 사용하는 네트워크의 IP를 할당받는다. 할당받은 IP 내에서 해당 디바이스가 수행 중인 모든 프로세스의 통신이 이루어진다. &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;는 프로세스의 데이터가 IO되는 통로다. 작업 시, 각 프로세스 별로 고유한 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;를 할당받으며, 하나의 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;는 반드시 하나의 프로세스와 1:1 매칭된다. 반면, 하나의 프로세스는 여러 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;를 할당받을 수 있다.&lt;br&gt;
&lt;strong&gt;특정 프로세스와 통신하기 위해선 반드시 해당 프로세스가 할당받은 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;에 데이터를 전송&lt;/strong&gt;해야 한다. 때문에 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt; 통신은 어떤 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;가 보내는지는 크게 중요하지 않으며, 어떤 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;로 보내는지가 중요하다.&lt;/p&gt;
&lt;p&gt;웹 통신에서의 기본&lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;는 아래와 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;포트&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;80&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;HTTP 기본 포트&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;443&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;HTTPS 기본 포트&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;아마 이러한 숫자를 처음 볼 수도 있는데, 대부분의 웹 사이트 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;에는 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;를 확인할 수 없다. 사이트가 &lt;strong&gt;각 프로토콜의 기본 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;로 서비스될 경우, &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;에서 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;를 생략&lt;/strong&gt;할 수 있다. 즉, &lt;code&gt;https://naver.com&lt;/code&gt;의 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;번호는 &lt;code&gt;443&lt;/code&gt;이지만, &lt;code&gt;443&lt;/code&gt;은 HTTPS의 기본 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;이므로 생략된다. 만약, &lt;code&gt;443&lt;/code&gt;이 아닌 &lt;code&gt;8080&lt;/code&gt;, &lt;code&gt;9200&lt;/code&gt;과 같은 &lt;strong&gt;임의의 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;로 서비스를 제공할 경우, &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;를 반드시 명시해야하므로 생략이 불가능&lt;/strong&gt;하다. 이 경우 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;은 &lt;code&gt;https://naver.com:8080&lt;/code&gt;이 될 것이다.&lt;br&gt;
위와 같은 이유로, 대부분의 웹 사이트는 서비스하는 프로토콜에 맞는 기본 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;를 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;는 &lt;strong&gt;0 ~ 65535&lt;/strong&gt;의 범위를 가지며, 크게 세 가지로 구분할 수 있다.&lt;/p&gt;
&lt;h3&gt;잘 알려진 포트(well-known Port)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;0 ~ 1023&lt;/strong&gt;의 범위에 해당하는 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;. 이 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;들은 컴퓨터에서 기본적으로 사용되는 주요 프로세스에 기본적으로 할당되는 포트로, ICANN(Internet Corporation for Assigned Names and Numbers, 국제 인터넷주소 관리기구)에 의해 통제된다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;포트&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;기능&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;용도&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20, 21&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;FTP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;파일 송수신&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;22&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;SFTP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;파일 암호화 송수신&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;23&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Telnet&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;터미널 통신&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;25&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;SMTP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;메일 전송&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;53&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;DNS&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;DNS 통신&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;67&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;DHCP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;DHCP 통신&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;80&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;HTML 통신&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;443&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;HTTPS&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;HTML 암호화 통신&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;어디까지나 초기에 지정되는 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;이므로, 추후 &lt;strong&gt;사용자의 의도에 따라 비어있는 다른 포트로 변경&lt;/strong&gt;할 수도 있다. 즉, 초기값일뿐, 강제는 아니다.&lt;/p&gt;
&lt;h3&gt;등록된 포트(registered Port)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1024 ~ 49151&lt;/strong&gt;의 범위에 해당하는 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;. 이 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;들은 컴퓨터의 기본 프로세스는 아니지만, 주요 프로그램들이 기본으로 사용하고자 ICANN에 등록한 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;다. &lt;span class=&quot;amber-400&quot;&gt;잘 알려진 포트&lt;/span&gt;와 마찬가지로 프로그램의 설정을 통해 &lt;strong&gt;사용자의 의도에 따라 비어있는 다른 포트로 변경&lt;/strong&gt;할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;포트&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;기능&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;용도&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1433&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;MSSQL&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;MSSQL DB 통신&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;3306&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;MySQL&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;MySQL DB 통신&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;3389&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;RDP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;원격 데스크톱 접근 (Windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;5432&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;PostgreSQL&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;PostgreSQL DB 통신&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;8080&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;HTTP 통신(Tomcat 등)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;HTTP 통신 (80포트 대용)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;27017&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;MongoDB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;MongoDB 통신&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;주로 &lt;span class=&quot;primary&quot;&gt;DB&lt;/span&gt;같은 개발 관련 프로그램들이 많이 등록돼있다.&lt;/p&gt;
&lt;h4&gt;왜? 하필 개발 관련 프로그램들만?&lt;/h4&gt;
&lt;p&gt;개발 관련 프로그램들은 그 특성 상 통신의 방식이 &lt;strong&gt;항상 일정&lt;/strong&gt;해야 한다. 만약 DB의 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;가 기동할 때마다 수시로 변경된다면 어떨까? 이유를 막론하고 DB가 재기동될 경우, 개발자는 DB가 사용 중인 임의의 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;를 추적하여 프로그램의 DB 통신 코드를 변경해야하는 매우 불합리한 상황이 발생하게 된다.&lt;/p&gt;
&lt;p&gt;이에 비해 게임이나 IDE 같은 일반적인 프로그램들은 굳이 통신의 방식이 일정할 필요는 없다. 어찌됐든 &lt;strong&gt;서버에 정보를 요청하는 순간, 서버는 자연스레 내 통신 정보를 알게되기 때문&lt;/strong&gt;이다. 서버는 요청했던 경로로 다시 데이터를 반환해주면 된다. 어떤 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;가 보내는지는 별로 중요하지 않는 이유가 여기에 있다.&lt;/p&gt;
&lt;h3&gt;동적 포트(dynamic Port)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;49152 ~ 65535&lt;/strong&gt;의 범위에 해당하는 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;. 대다수의 프로그램들은 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt; 기본값이 지정되지 않는 경우가 대부분이다. 이러한 프로그램들은 &lt;span class=&quot;amber-400&quot;&gt;동적 포트&lt;/span&gt; 중 사용 가능한 임의의 빈 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;를 자동으로 점유한다. 때문에 ICANN이 관리하지도 않으며, 특정 프로그램이 고유한 &lt;span class=&quot;amber-400&quot;&gt;포트&lt;/span&gt;로 등록되어있지도 않다. 자유석을 생각하면 편하다.&lt;/p&gt;
&lt;h3&gt;Path(경로)&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;상의 &lt;span class=&quot;cyan-400&quot;&gt;posts&lt;/span&gt; 부분. 웹 사이트의 하위 경로를 의미한다. &lt;span class=&quot;cyan-400&quot;&gt;경로&lt;/span&gt;는 &lt;code&gt;/&lt;/code&gt;로 구분하며, 경로 입력을 통해 서버 내의 원하는 자원에 접근할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rwb0104.github.io&quot;&gt;https://rwb0104.github.io&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;posts
&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;A1000
&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A1001
&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;uri-url-urn
&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;project
&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 트리는 이 블로그의 단편적인 디렉토리 예시다. 이 중 해당 게시물에 접근하려면 &lt;span class=&quot;cyan-400&quot;&gt;경로&lt;/span&gt;는 &lt;code&gt;/posts/uri-url-urn/index.html&lt;/code&gt;와 같이 구성할 수 있다. &lt;span class=&quot;primary&quot;&gt;index.html은 생략이 가능&lt;/span&gt;하므로 &lt;code&gt;/posts/uri-url-urn&lt;/code&gt;로 접근해도 무방하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;아시나요?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;index.html&lt;/strong&gt; 경로의 기본 HTML을 의미함. 더이상의 하위 경로를 표시하지 않을 경우, 해당 경로의 index.html를 응답한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;cyan-400&quot;&gt;경로&lt;/span&gt;는 서버의 구조에 따라 결정되므로, 사이트마다 천차만별이다.&lt;/p&gt;
&lt;h3&gt;Query String(쿼리 문자열)&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;상의 &lt;span class=&quot;teal-400&quot;&gt;?category=WEB&amp;#x26;page=1&lt;/span&gt; 부분. 해당 &lt;span class=&quot;cyan-400&quot;&gt;경로&lt;/span&gt;에 임의의 데이터를 같이 전송할 때 사용한다.&lt;br&gt;
&lt;span class=&quot;primary&quot;&gt;key=value&lt;/span&gt; 형태로 이루어지며, 각 &lt;code&gt;key&lt;/code&gt;는 &lt;span class=&quot;purple-400&quot;&gt;Parameter(파라미터)&lt;/span&gt;라 칭한다. 첫 &lt;span class=&quot;purple-400&quot;&gt;파라미터&lt;/span&gt;는 &lt;code&gt;?&lt;/code&gt;로 시작하며, 이후 각 &lt;span class=&quot;purple-400&quot;&gt;파라미터&lt;/span&gt;들은 &lt;code&gt;&amp;#x26;&lt;/code&gt;으로 구분된다. 즉 &lt;code&gt;?key1=value1&amp;#x26;key2=value2&amp;#x26;key3=value3&lt;/code&gt;과 같은 양식으로 전개된다.&lt;/p&gt;
&lt;p&gt;임의의 키워드를 전달하여 페이지의 동작을 제어할 수 있다. &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt; 중 &lt;strong&gt;사용자의 니즈가 가장 활발하게 반영&lt;/strong&gt;되는 부분. &lt;span class=&quot;teal-400&quot;&gt;쿼리 문자열&lt;/span&gt;은 각각의 &lt;code&gt;key&lt;/code&gt;에 대한 역할을 정의해야 하므로, 개발자가 각 &lt;span class=&quot;purple-400&quot;&gt;파라미터&lt;/span&gt;의 &lt;code&gt;key&lt;/code&gt;가 동작하는 로직을 작성했을 때 그 의미가 있다.&lt;/p&gt;
&lt;h2&gt;URN 구조&lt;/h2&gt;
&lt;p&gt;지금까지 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;에 대해선 상당히 장황하게 설명했지만, &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;의 경우 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;보다 역사가 짧다. 또한 &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;이 상당수 활성화된 후 생긴 탓에, 현재까지도 비주류를 면치 못 해 구현된 예시도 그리 많지 않은게 현실이다.&lt;br&gt;
&lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;이 위치만 바뀌어도 찾을 수 없다는 단점은, 오히려 제공중인 데이터를 은닉하는 측면 등 상황에 따라 오히려 이득이기도 하다. 즉, &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;의 단점이 사용에 있어서 크리티컬하지 않는다는 것이다. 이는 곳 &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;의 장점이 현재 구축된 &lt;span class=&quot;primary&quot;&gt;URL&lt;/span&gt;체계를 갈아 엎을 정도로 매력적이지 않다는 주장이 된다.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;은 아래와 같은 구조로 이루어진다. 각 요소는 &lt;code&gt;:&lt;/code&gt;으로 구분한다.&lt;/p&gt;
&lt;p class=&quot;large&quot; align=&quot;center&quot;&gt;&lt;span class=&quot;lightBlue-400&quot;&gt;urn&lt;/span&gt;:&lt;span class=&quot;green-400&quot;&gt;isbn&lt;/span&gt;:&lt;span class=&quot;yellow-400&quot;&gt;1234567890&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Protocol(프로토콜)&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;상의 &lt;span class=&quot;lightBlue-400&quot;&gt;urn&lt;/span&gt; 부분. &lt;code&gt;urn&lt;/code&gt;으로 시작하면 &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;체계로 보면 된다.&lt;/p&gt;
&lt;h3&gt;NID(Namespace Identifier, 네임스페이스 지시자)&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;상의 &lt;span class=&quot;green-400&quot;&gt;isbn&lt;/span&gt; 부분. &lt;strong&gt;자원이 저장된 저장소&lt;/strong&gt;를 표시한다.&lt;br&gt;
&lt;code&gt;isbn&lt;/code&gt;은 서지정보유통지원시스템으로 도서 일련번호에 대한 정보를 저장하는 저장소이다. 즉, &lt;code&gt;isbn&lt;/code&gt;을 &lt;span class=&quot;green-400&quot;&gt;NID&lt;/span&gt;로 지정하면 도서 관련 자원을 식별할 수 있다.&lt;/p&gt;
&lt;h3&gt;NSS(Namespace Specific String, 네임스페이스 특정 문자)&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;상의 &lt;span class=&quot;yellow-400&quot;&gt;1234567890&lt;/span&gt; 부분. &lt;strong&gt;자원을 식별할 수 있는 고유값&lt;/strong&gt;이다.&lt;br&gt;
&lt;span class=&quot;green-400&quot;&gt;NID&lt;/span&gt;가 &lt;code&gt;isbn&lt;/code&gt;으로 지정되어 있으므로, ISBN의 일련번호가 1234567890인 도서를 식별하는 &lt;span class=&quot;primary&quot;&gt;URN&lt;/span&gt;이라 볼 수 있다.&lt;/p&gt;
</description>
		<pubDate>2021-05-28T18:30:17.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/29/uri-url-urn/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/29/uri-url-urn/</guid>
		<category>WEB</category>
		<category>WEB</category>
		<category>WEB(웹)</category>
		<category>URI</category>
		<category>URL</category>
		<category>URN</category>
	</item>
	<item>
		<title>Unsupported major.minor version 에러 해결하기 (+Servlet 404 에러)</title>
		<description>&lt;h1&gt;Unsupported major.minor version&lt;/h1&gt;
&lt;p&gt;간혹 JAVA 프로그램을 실행하다보면 &lt;span class=&quot;error&quot;&gt;Unsupported major.minor version 52&lt;/span&gt;(숫자는 class 버전에 따라 다름) 오류가 출력되면서 정상적으로 동작하지 않는 오류가 발생한다.&lt;br&gt;
&lt;span class=&quot;error&quot;&gt;Unsupported major.minor version&lt;/span&gt; 오류는 직역하면 &quot;지원하지 않는 주/부 버전&quot;이다. JAVA 버전관련 오류라고 보면 된다.&lt;/p&gt;
&lt;h1&gt;원인&lt;/h1&gt;
&lt;p&gt;JAVA는 컴파일 언어로, 개발자가 작성한 코드는 &lt;code&gt;.java&lt;/code&gt; 파일이다. 이를 컴파일하면 JVM(Java Virtual Machine, 자바 가상머신)이 읽을 수 있는 &lt;code&gt;.class&lt;/code&gt; 파일로 번역한다. 코딩은 사람이 이해할 수 있는 언어로 작성하고, 실제 동작은 컴파일을 통해 컴퓨터가 이해할 수 있는 언어를 사용하는 셈이다.&lt;br&gt;
JAVA는 작성일 기준으로 16까지 릴리즈됐다. JAVA의 역사가 짧지 않고, 이 시간동안 크고작은 버전 업데이트가 지속적으로 이루어졌다.&lt;br&gt;
문제는 이 과정에서 생긴 호환성 문제다. 1.5 버전으로 컴파일한 &lt;code&gt;.class&lt;/code&gt; 파일을 1.8 버전의 환경에서 구동한다거나, 그 반대의 경우가 그 예시다. 다행스럽게도, JAVA는 하위 버전에 대한 호환성을 보장한다. 1.8 버전의 환경에서는 1.8 이하로 컴파일된 &lt;code&gt;.class&lt;/code&gt; 파일의 실행을 보장한다. 하지만 반대로 상위 버전에 대한 호환성은 제공하지 않는다. 그도 그럴 것이, 호환성을 지키기 위해선, 각 버전 간의 구성을 알맞게 변환해야 하는데, 아직 개발되지 않은 미래 버전의 구성을 알 순 없는 노릇이니...&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;프로그램 JAVA 버전&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;PC JAVA 버전&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Unsupported 오류 발생여부&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;해결책&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;14&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1.8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;O&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;JAVA 14 버전 이상으로 업그레이드&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1.6&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1.7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;X&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;칼퇴근&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;즉, &lt;span class=&quot;green-A400&quot;&gt;Unsupported major.minor version 오류는 내가 실행하려는 JAVA 코드가 내 PC의 JAVA 환경보다 높은 버전에서 컴파일된 경우 발생&lt;/span&gt;한다.&lt;/p&gt;
&lt;h1&gt;해결&lt;/h1&gt;
&lt;p&gt;결과적으로, JAVA 버전을 동등 혹은 그 이상의 상위버전으로 업그레이드하면 된다. 크게 두 가지 방법이 있다.&lt;/p&gt;
&lt;h2&gt;프로그램 코드의 버전 다운그레이드&lt;/h2&gt;
&lt;p&gt;만약 본인이 온전한 프로그램 코드를 갖고 있을 경우, 시도해볼 수 있는 방법이다.&lt;br&gt;
&lt;span class=&quot;green-A400&quot;&gt;JAVA 버전을 다운그레이드하고 컴파일을 진행&lt;/span&gt;하면, 프로그램의 JAVA 버전이 낮아져 기존의 버전보다 훨씬 낮은 버전의 환경에서 구동이 가능하다.&lt;/p&gt;
&lt;p&gt;단, 조건이 있다. JAVA 버전이 업그레이드됨에 따라 여러 신규 패턴, 문법 등이 추가됐다. 만약 &lt;span class=&quot;red-A400&quot;&gt;1.8 버전부터 새로 생긴 기능을 적극적으로 활용했다면, 1.7 이하의 버전에선 컴파일 오류가 발생&lt;/span&gt;한다.&lt;br&gt;
그도 그럴것이, 1.8 부터 생긴 기능은 1.7에서는 구현되지 않은 기능이기 때문.&lt;/p&gt;
&lt;p&gt;이 경우 프로그램의 코드를 좀더 범용적인 방식으로 리팩토링해야한다.&lt;/p&gt;
&lt;h2&gt;PC의 버전 업그레이드&lt;/h2&gt;
&lt;p&gt;만약 본인이 &lt;code&gt;.class&lt;/code&gt; 파일만 갖고있다거나, 상기한 문제로 다운그레이드가 어려울 경우 혹은 간단한 방법을 찾을 경우 시도해볼 수 있는 방법이다.
&lt;span class=&quot;green-A400&quot;&gt;PC의 JAVA 버전을 업그레이드하고 프로그램을 실행&lt;/span&gt;하면 된다.&lt;/p&gt;
&lt;p&gt;JAVA는 하위 호환성을 지키기 때문에, 별다른 조건이 존재하지 않는다.&lt;/p&gt;
&lt;h1&gt;아니 버전 맞췄다고 아ㅋㅋ&lt;/h1&gt;
&lt;p&gt;톰캣을 사용하다보면, 이 오류가 뜨는 경우가 있다. 그런데 간혹 PC에 설치된 JAVA 버전에 맞게 컴파일을 해줬음에도 오류가 사라지지 않는 현상이 발생하기도 한다.&lt;br&gt;
이 경우 동반되는 증상이, Servlet Context에 접근할 경우, 첫 접속시 500 에러(Unsupported major.minor version 오류로 인해 발생)가 발생하고, 이후부터는 404 에러만 발생한다. 이러한 현상을 겪어보지 않았거나, 경험이 적은 개발자가 이러한 문제에 부딪히면 십중팔구 고생한다. 원인인 Unsupported major.minor version 오류가 보이지 않아 Servlet 동작의 404 오류와 관련된 정보를 검색하거나 질문하기 때문. 당연히 이러한 사정을 모르는 다른 사람들은 404 오류에 관한 답변을 줄 수 밖에 없다. 이런 경우 정말 난감하기 그지없다. 절대 경험담이라서가 아니다.&lt;/p&gt;
&lt;p&gt;혹시 위 처럼 정상적인 Servlet(서블릿)임에도 불구하고 404 오류가 뜰 경우 아래의 환경변수에서 JRE_HOME이 설정돼있는지 확인해보자.&lt;br&gt;
간혹 개발 프로그램 중 임의로 JRE_HOME을 설정해버리는 프로그램이 존재한다. 문제는 여기서 발생하는데, JAVA_HOME과 JRE_HOME 환경변수가 둘 다 설정되어있을 경우, &lt;span class=&quot;red-A400&quot;&gt;톰캣은 JRE_HOME을 우선&lt;/span&gt;한다. 즉 JRE의 버전이 적용된다.&lt;/p&gt;
&lt;p&gt;예를 들어, JAVA_HOME이 1.8 버전, JRE_HOME이 1.6 버전이라 가정하자. 컴파일은 반드시 JDK가 필요하므로 JAVA_HOME의 버전인 1.8로 컴파일이 수행된다. 그러나 톰캣 실행 시, JRE_HOME을 우선하는 특징으로 인해 1.6 버전으로 실행된다. 결과적으로 &lt;strong&gt;1.8 버전으로 컴파일된 코드를 1.6으로 실행하는 셈&lt;/strong&gt;이니, 버전이 맞지 않아 오류가 발생한다.&lt;/p&gt;
</description>
		<pubDate>2021-05-29T17:16:35.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/05/30/unsupported-version-error/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/05/30/unsupported-version-error/</guid>
		<category>JAVA</category>
		<category>JAVA</category>
		<category>JAVA</category>
		<category>WAS</category>
		<category>Tomcat(톰캣)</category>
		<category>오류 해결책</category>
	</item>
	<item>
		<title>[JAVA] 백준 알고리즘 1005번 ACM Craft</title>
		<description>&lt;h1&gt;ACM Craft&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://shields.io/badge/java-JDK%2014-lightgray?logo=java&amp;#x26;style=plastic&amp;#x26;logoColor=white&amp;#x26;labelColor=orange&quot; alt=&quot;JAVA&quot;&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href=&quot;https://www.acmicpc.net/problem/1005&quot;&gt;전체 1005번 문제&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;조건&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;시간제한&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;메모리 제한&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1초&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;512MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;문제&lt;/h2&gt;
&lt;p&gt;서기 2012년! 드디어 2년간 수많은 국민들을 기다리게 한 게임 ACM Craft(Association of Construction Mananger Craft)가 발매되었다.&lt;/p&gt;
&lt;p&gt;이 게임은 지금까지 나온 게임들과는 다르게 ACM Craft는 다이나믹한 게임 진행을 위해 건물을 짓는 순서가 정해져있지 않다. 즉, 첫 번째 게임과 두 번째 게임이 건물을 짓는 순서가 다를 수도 있다. 매 게임시작 시 건물을 짓는 순서가 주어진다. 또한 모든 건물은 각각 건설을 시작하여 완성이 될 때까지 Delay가 존재한다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219763-b1cf1480-c276-11eb-8131-a3471db1cfc4.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;위의 예시를 보자.&lt;/p&gt;
&lt;p&gt;이번 게임에서는 다음과 같이 건설 순서 규칙이 주어졌다. 1번 건물의 건설이 완료된다면 2번과 3번의 건설을 시작할 수 있다. (동시에 진행이 가능하다.) 그리고 4번 건물을 짓기 위해서는 2번과 3번 건물이 모두 건설 완료되어야지만 4번 건물의 건설을 시작할 수 있다.&lt;/p&gt;
&lt;p&gt;따라서 4번 건물의 건설을 완료하기 위해서는 우선 처음 1번 건물을 건설하는데 10초가 소요된다. 그리고 2번 건물와 3번 건물을 동시에 건설하기 시작하면 2번은 1초 뒤에 건설이 완료되지만 아직 3번 건물이 완료되지 않았으므로 4번 건물을 건설할 수 없다. 3번 건물이 완성되고 나면 그때 4번 건물을 지을 수 있으므로 4번 건물이 완성되기까지는 총 120초가 소요된다.&lt;/p&gt;
&lt;p&gt;프로게이머 최백준은 애인과의 데이트 비용을 마련하기 위해 서강대학교배 ACM Craft 대회에 참가했다! 최백준은 화려한 컨트롤 실력을 가지고 있기 때문에 모든 경기에서 특정 건물만 짓는다면 무조건 게임에서 이길 수 있다. 그러나 매 게임마다 특정 건물을 짓기 위한 순서가 달라지므로 최백준은 좌절하고 있었다. 백준이를 위해 특정 건물을 가장 빨리 지을 때까지 걸리는 최소시간을 알아내는 프로그램을 작성해주자.&lt;/p&gt;
&lt;h2&gt;입력&lt;/h2&gt;
&lt;p&gt;첫째 줄에는 테스트케이스의 갯수 &lt;code&gt;T&lt;/code&gt;가 주어진다. 각 테스트 케이스는 다음과 같이 주어진다, 첫째 줄에 건물의 갯수 &lt;code&gt;N&lt;/code&gt;과 건물 간의 건설순서 규칙의 총 갯수 &lt;code&gt;K&lt;/code&gt;가 주어진다.(전물의 번호는 1번 부터 N번 까지 존재한다.)&lt;/p&gt;
&lt;p&gt;둘째 줄에는 각 건물 당 건설에 걸리는 시간 D가 공백을 사이로 주어진다. 셋째 줄부터 &lt;code&gt;K + 2&lt;/code&gt;줄 까지 건설순서 &lt;code&gt;X&lt;/code&gt; &lt;code&gt;Y&lt;/code&gt;가 주어진다.(이는 건물 X를 지은 다음에 건물 Y를 짓는 것이 가능하다는 의미이다.)&lt;/p&gt;
&lt;p&gt;마지막 줄에는 백준이가 승리하기 위해 건설해야 할 건물의 번호 W가 주어진다.&lt;/p&gt;
&lt;h2&gt;출력&lt;/h2&gt;
&lt;p&gt;건물 W를 건설완료 하는데 드는 최소 시간을 출력한다. 편의상 건물을 짓는 명령을 내리는 데는 시간이 소요되지 않는다고 가정한다.&lt;br&gt;
건설순서는 모든 건물이 건설 가능하도록 주어진다.&lt;/p&gt;
&lt;h2&gt;제한&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 ≤ N ≤ 1,000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 ≤ K ≤ 100,000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 ≤ X, Y, W ≤ N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 ≤ D ≤ 100,000)&lt;/code&gt; D는 정수&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;케이스&lt;/h2&gt;
&lt;h3&gt;예제 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;입력&lt;/p&gt;
&lt;p&gt;2&lt;br&gt;
4 4&lt;br&gt;
10 1 100 10&lt;br&gt;
1 2&lt;br&gt;
1 3&lt;br&gt;
2 4&lt;br&gt;
3 4&lt;br&gt;
4&lt;br&gt;
8 8&lt;br&gt;
10 20 1 5 8 7 1 43&lt;br&gt;
1 2&lt;br&gt;
1 3&lt;br&gt;
2 4&lt;br&gt;
2 5&lt;br&gt;
3 6&lt;br&gt;
5 7&lt;br&gt;
6 7&lt;br&gt;
7 8&lt;br&gt;
7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;출력&lt;/p&gt;
&lt;p&gt;120&lt;br&gt;
39&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;예제 2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;입력&lt;/p&gt;
&lt;p&gt;5&lt;br&gt;
3 2&lt;br&gt;
1 2 3&lt;br&gt;
3 2&lt;br&gt;
2 1&lt;br&gt;
1&lt;br&gt;
4 3&lt;br&gt;
5 5 5 5&lt;br&gt;
1 2&lt;br&gt;
1 3&lt;br&gt;
2 3&lt;br&gt;
4&lt;br&gt;
5 10&lt;br&gt;
100000 99999 99997 99994 99990&lt;br&gt;
4 5&lt;br&gt;
3 5&lt;br&gt;
3 4&lt;br&gt;
2 5&lt;br&gt;
2 4&lt;br&gt;
2 3&lt;br&gt;
1 5&lt;br&gt;
1 4&lt;br&gt;
1 3&lt;br&gt;
1 2&lt;br&gt;
4&lt;br&gt;
4 3&lt;br&gt;
1 1 1 1&lt;br&gt;
1 2&lt;br&gt;
3 2&lt;br&gt;
1 4&lt;br&gt;
4&lt;br&gt;
7 8&lt;br&gt;
0 0 0 0 0 0 0&lt;br&gt;
1 2&lt;br&gt;
1 3&lt;br&gt;
2 4&lt;br&gt;
3 4&lt;br&gt;
4 5&lt;br&gt;
4 6&lt;br&gt;
5 7&lt;br&gt;
6 7&lt;br&gt;
7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;출력&lt;/p&gt;
&lt;p&gt;6&lt;br&gt;
5&lt;br&gt;
399990&lt;br&gt;
2&lt;br&gt;
0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;풀이&lt;/h1&gt;
&lt;p&gt;문제는 이해가 되는데, 이를 코딩으로 풀어내기가 어려웠던 알고리즘. &lt;span class=&quot;primary&quot;&gt;위상정렬&lt;/span&gt; 알고리즘에 대한 이해가 있어야한다.&lt;br&gt;
문제의 경우, 스타크래프트의 건물 테크트리랑 비슷한 개념으로 접근하면 된다. 군수공장을 짓기 위해선 병영을 지어야하는 것처럼, 요구 트리가 있는 건물의 경우 해당 건물을 반드시 완료해야 하며, 하나의 건물이 여러 요구 트리를 가질 경우도 존재한다. 물론 이 경우 요구하는 건물들을 &lt;strong&gt;모두&lt;/strong&gt; 건설한 뒤에 건설 가능하다. 요구하는 건물들 중 하나만 건설하면 충족되는게 아니다.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;primary&quot;&gt;위상정렬&lt;/span&gt;은 &lt;span class=&quot;green-A400&quot;&gt;순서가 정해진 작업을 수행할 때, 이 순서를 결정하는 알고리즘&lt;/span&gt;이다. &lt;span class=&quot;primary&quot;&gt;위상정렬&lt;/span&gt;은 반드시 DAG(Directed Acyclic Graph, 유향 비순환 그래프) 형태여야 한다. 즉, 순서를 도식화했을 때 반드시 &lt;span class=&quot;red-A400&quot;&gt;시작/도착점이 존재&lt;/span&gt;해야 한다. 시작/도착점이 구분되지 않는 순환 형태일 경우 위상정렬을 적용할 수 없다.&lt;/p&gt;
&lt;p&gt;위상정렬은 순서를 정하는 알고리즘이고, 순서도의 형태에 따라 여러가지의 답이 나올 수 있다. 이 문제는 최적의 답을 도출하기 위해 각 &lt;strong&gt;건물을 건설하는데 필요한 요구 건물&lt;/strong&gt;과 &lt;strong&gt;건설 시간&lt;/strong&gt;을 적용했다.&lt;/p&gt;
&lt;p&gt;다음 건물을 건설하기 위해선 요구 건물을 모두 건설해야하므로 요구 건물의 건설시간이 가장 많은 건물이 다음 순서가 된다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219453-3b321700-c276-11eb-9029-ec105c694854.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;예시 1번의 두 번째 케이스를 예시로 하여 위상정렬을 도식화하면 위 사진과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;노드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;진입선&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;위 표는 도식를 수치화하여 정리한 것이다.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;span class=&quot;large orange-A400&quot;&gt;1. 순서의 시작점(진입선이 없는 점)을 찾는다. 시작점이 여러개일 경우 시작점 중 무작위로 하나를 선택해도 무방하다. (위 예시는 시작점이 하나)&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219469-4127f800-c276-11eb-91c8-db36e543c217.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;span class=&quot;large orange-A400&quot;&gt;2. 시작점 1을 큐에 넣고, 시작점에 연결된 진출선을 전부 제거한다.&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219471-438a5200-c276-11eb-9cd3-ca5f31dfb19b.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;노드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;진입선&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;큐&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;이 과정에서 2와 3이 새로운 시작점이 된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;1을 건설하는데 걸리는 시간은 1초.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;span class=&quot;large orange-A400&quot;&gt;3. 2에 대해 2번 과정을 적용한다.&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219484-45ecac00-c276-11eb-8114-a6c4c8b17036.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;노드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;진입선&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;큐&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;4와 5의 진입선이 0이 된다. 즉, 4와 5를 건설할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;2를 건설하는데는 &lt;code&gt;10(1) + 20(2)&lt;/code&gt;로 총 30초가 소요된다.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;span class=&quot;large orange-A400&quot;&gt;4. 3에 대해 2번 과정을 적용한다.&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219493-48e79c80-c276-11eb-8f48-cf132cab8f5c.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;노드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;진입선&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;큐&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;6의 진입선이 0이 된다. 6을 건설할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;3의 건설시간은 &lt;code&gt;10(1) + 1(3)&lt;/code&gt;으로 총 11초.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;span class=&quot;large orange-A400&quot;&gt;5. 4에 대해 2번 과정을 적용한다.&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219504-4be28d00-c276-11eb-9b40-07c5ea51cbd9.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;노드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;진입선&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;큐&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;4는 진출선이 없으므로 큐에만 추가된다.&lt;/p&gt;
&lt;p&gt;4의 건설시간은 &lt;code&gt;10(1) + 20(2) + 5(4)&lt;/code&gt;로 총 35초&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;span class=&quot;large orange-A400&quot;&gt;6. 5에 대해 2번 과정을 적용한다.&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219509-4edd7d80-c276-11eb-9c5f-fc17d373bf50.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;노드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;진입선&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;큐&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;7이 5와 6에 연결되어 있으므로, 7의 진입선은 1이 된다. 아직 7을 건설할 수 없다.&lt;/p&gt;
&lt;p&gt;5의 건설시간은 &lt;code&gt;10(1) + 20(2) + 8(5)&lt;/code&gt;로 총 38초&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;span class=&quot;large orange-A400&quot;&gt;7. 6에 대해 2번 과정을 적용한다.&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219520-53099b00-c276-11eb-9c99-060dcd2039d8.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;노드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;진입선&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;큐&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;7의 진입선이 0이 된다. 7을 건설할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;6의 건설시간은 &lt;code&gt;10(1) + 1(3) + 7(6)&lt;/code&gt;으로 총 18초.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;span class=&quot;large orange-A400&quot;&gt;8. 7에 대해 2번 과정을 적용한다.&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219527-56048b80-c276-11eb-866b-9b411445b22b.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;노드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;진입선&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;큐&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;8의 진입선이 0이 된다.&lt;/p&gt;
&lt;p&gt;1 ~ 6까지는 요구 건물이 하나였지만, 7은 두개이다. 앞서 언급했듯이, 5와 6 중 건설시간이 더 긴 것을 기준으로 계산해야한다.&lt;/p&gt;
&lt;p&gt;즉, 7의 건설시간은 &lt;code&gt;10(1) + 20(2) + 8(5) + 1(7)&lt;/code&gt;로 총 39초&lt;/p&gt;
&lt;p&gt;5번을 기준으로 계산하므로, &lt;span class=&quot;red-A400&quot;&gt;6번과 중간인 3번은 계산에서 제외&lt;/span&gt;된다. 만약, 3의 건설시간을 1초에서 4초로 증가시켜도 결과에 영향을 미치지 않는다. 3의 건설시간을 무시하기 때문이다. 단, 3의 건설시간이 너무 커지게되면 5보다 6의 건설시간이 같이 커지게 되어 결과에 영향을 미치게 된다.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;span class=&quot;large orange-A400&quot;&gt;9. 8에 대해 2번 과정을 적용한다.&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://user-images.githubusercontent.com/50317129/120219535-58ff7c00-c276-11eb-907c-2a90cc84c596.png&quot; width=&quot;1024px&quot; /&gt;
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;노드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;진입선&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;큐&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;문제는 7에 대한 건설시간을 요구하고 있으므로 8은 무시해도 무방하다.
8의 건설시간은 &lt;code&gt;10(1) + 20(2) + 8(5) + 1(7) + 43(8)&lt;/code&gt;로 총 82초&lt;/p&gt;
&lt;h2&gt;전체 소스&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;time&lt;/code&gt;, &lt;code&gt;matrix&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;의 배열 크기가 &lt;code&gt;N + 1&lt;/code&gt;이다. 별다른 이유는 아니고, 건물은 1번부터 시작하는데 배열은 0번부터 시작한다. 이러한 차이에서 오는 혼란을 방지하기 위해 건물이 총 4개면 배열의 크기를 5로(0, 1, 2, 3, 4, 5)로 지정하여 0을 제외하고 1부터 사용한다.&lt;/p&gt;
&lt;div class=&quot;remark-highlight&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
 * 백준 전체 1005 문제 알고리즘 클래스
 *
 * &lt;span class=&quot;token keyword&quot;&gt;@author&lt;/span&gt; RWB
 * &lt;span class=&quot;token keyword&quot;&gt;@since&lt;/span&gt; 2021.05.31 Mon 19:11:58
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 메인 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;args&lt;/span&gt;: [String[]] 매개변수
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; scanner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;token class-name&quot;&gt;StringBuilder&lt;/span&gt; builder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;token comment&quot;&gt;// 케이스 갯수&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token comment&quot;&gt;// 건물 갯수&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token comment&quot;&gt;// 규칙(건설시간) 갯수&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token comment&quot;&gt;// 건물별 건설시간 배열&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; time &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token comment&quot;&gt;// 건물별 연결여부 배열&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; maxtrix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token comment&quot;&gt;// 건물별 연결 갯수 배열&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				time&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
			
			&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token comment&quot;&gt;// 하위 건물&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				
				&lt;span class=&quot;token comment&quot;&gt;// 상위 건물&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				
				maxtrix&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				link&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
			
			&lt;span class=&quot;token comment&quot;&gt;// 목표 건물&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;calcTopologicalSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maxtrix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		
		scanner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
	 * 위상정렬 결과 반환 함수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;time&lt;/span&gt;: [int[]] 건물별 건설시간
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;matrix&lt;/span&gt;: [boolean[][]] 건물별 연결여부
	 * &lt;span class=&quot;token keyword&quot;&gt;@param&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;link&lt;/span&gt;: [int[]] 건물별 연결 갯수
	 *
	 * &lt;span class=&quot;token keyword&quot;&gt;@return&lt;/span&gt; [int[]] 건물별 종 건설시간 배열
	 */&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calcTopologicalSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; matrix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#x3C;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token comment&quot;&gt;// 요구 건물이 없는 건물일 경우&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
				queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token comment&quot;&gt;// 하위 건물&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; prev &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;#x3C;&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token comment&quot;&gt;// 하위 건물 건설을 요구 하는 건물일 경우&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;matrix&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prev&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
					result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prev&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
					
					&lt;span class=&quot;token comment&quot;&gt;// 해당 건물의 요구 건물 갯수 1 감소&lt;/span&gt;
					&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
					
					&lt;span class=&quot;token comment&quot;&gt;// 요구 건물이 없는 건물일 경우&lt;/span&gt;
					&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
						queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
		<pubDate>2021-05-31T16:27:56.000Z</pubDate>
		<link>https://rwb0104.github.io/posts/2021/06/01/A1005/</link>
		<guid isPermaLink="true">https://rwb0104.github.io/posts/2021/06/01/A1005/</guid>
		<category>알고리즘</category>
		<category>알고리즘</category>
		<category>백준</category>
		<category>알고리즘</category>
		<category>JAVA(자바)</category>
		<category>위상정렬</category>
	</item>
</rss>