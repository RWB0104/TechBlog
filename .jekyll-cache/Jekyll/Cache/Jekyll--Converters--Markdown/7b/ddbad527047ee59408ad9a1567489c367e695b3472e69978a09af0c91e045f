I"-/<h2 id="개요">개요</h2>

<p>이 장에선 Jekyll 테마를 선택하고, 이를 관리하기 위한 방법에 대해 얘기한다. Github를 통해 Jekyll 블로그 소스를 관리할 저장소를 만들고, 이를 Git을 통해 관리한다.
<br />
물론 Github 페이지 자체에서 파일 생성 및 수정, 삭제가 가능하다. 이 경우 Git을 설치하는 과정은 굳이 필요하지 않으나, 보통 파일 관리는 시스템 상에서 이루어지는 게 여러모로 편리하므로 이와 같은 방법을 많이 사용한다.
<br />
Git도 Github도 많이 생소하여 처음 시작하는 분들껜 당혹스러울 수 있다. 정 이해가 안 된다면 그냥 그림보고 따라만 해도 좋다.</p>

<hr />
<h2 id="github-repository-만들기">Github Repository 만들기</h2>

<p>Jekyll 테마를 선택하고 적용하는 방법엔 여러가지가 있는데, 이 글에선 원하는 테마를 다운로드하고, Repository 하나를 생성하여 Git을 통해 Repository에 반영하는 방식으로 설명하고자 한다.
<br />
이 방법 외에도 원하는 테마의 Repository를 fork하는 방법도 있으니, 궁금하면 한 번 찾아보길 바란다.</p>

<center>
	<a href="https://github.com/" class="btn btn-info" target="_blank">Github 공식 홈페이지</a>
</center>

<p>우선 Github 공식 홈페이지로 접속하여 전 편에서 생성한 계정으로 로그인을 진행하자.</p>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90412420-0b9b8f00-e0e8-11ea-80a5-d28ff329a020.png">
		<img src="https://user-images.githubusercontent.com/50317129/90412420-0b9b8f00-e0e8-11ea-80a5-d28ff329a020.png" class="w6" />
	</a>
</figure>

<p>계정 생성 후 아직 별도의 활동을 하지 않았다면, 위 그림과 같이 페이지가 나타날 것이다. [Create Repository] 버튼을 눌러 새로운 Repository 하나를 생성하자.</p>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90422505-eada3600-e0f5-11ea-92f1-695a58f7f783.png">
		<img src="https://user-images.githubusercontent.com/50317129/90422505-eada3600-e0f5-11ea-92f1-695a58f7f783.png" class="w6" />
	</a>
</figure>

<p>이 때 주의할 점이 있는데, <span class="color-red">Repository의 이름은 반드시 {username}.github.io로 생성</span>해야 한다.</p>

<p class="notice">예를 들어, 회원가입 시 지정한 <strong>username이 test</strong>라면, 블로그를 호스팅하기위한 <strong>Repository의 이름은 test.github.io</strong>로 작성해야한다. 이러한 규칙에 맞지 않으면 호스팅이 되지 않으니 주의할 것.</p>

<p>한 계정에 동일한 이름의 Repository를 생성할 수 없으므로, <strong>계정 당 하나의 호스팅</strong> 기능이 주어지는 셈이다. 물론 이러한 제한은 계정을 여러개 만들어 적용하면 일정부분 해소가 가능하다.</p>

<ul>
  <li>Owner: 소유주. 본인으로 지정한다.</li>
  <li>Repository name: <strong>{username}.github.io</strong>로 지정한다.</li>
  <li>Public / Private: Repository의 공개, 비공개 여부. Jekyll 호스팅용 Repository는 반드시 <strong>Public</strong>으로 지정해야한다.</li>
</ul>

<p>나머지 옵션은 호스팅 과정에 아무런 영향을 주지 않으므로 건드리지 않고 넘어가도 무방하다.</p>

<p>입력이 완료되면 [<span class="color-green">Create Repository</span>]를 클릭하여 생성한다. 생성이 끝나면 Repository 목록에 추가된 것을 확인할 수 있다. 이 과정을 통해 Jekyll 블로그 소스를 보관하고 관리할 저장소를 생성했다.</p>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90917728-6bfb3b00-e41e-11ea-8313-0251fba0659f.png">
		<img src="https://user-images.githubusercontent.com/50317129/90917728-6bfb3b00-e41e-11ea-8313-0251fba0659f.png" class="w6" />
	</a>
</figure>

<p>생성된 저장소를 확인하면 위와 같은 화면이 나온다. 위 내용은 Git 명령어를 이용하여 로컬 환경에 저장소를 생성하고 이를 원격 저장소와 연결하여 소스관리를 하는 방법을 안내해주는 창으로, Repository를 처음 생성 시 출력되는 화면이다.</p>

<hr />
<h2 id="git-설치하기">Git 설치하기</h2>

<p>이제 Git이란 걸 설치해보자. Git은 소스코드를 효율적으로 관리할 수 있는 강력한 형상관리 툴로, 리눅스의 아버지인 리누스 토르발스가 개발했다. 넓은 의미에서 우리가 흔히 하는 백업 혹은 복사와 동일하지만, Git은 단순한 백업 이상으로 강력하다.</p>

<ul>
  <li>명령어 입력만으로 소스코드 백업이 가능하다.</li>
  <li>Git 저장소와 통신이 가능한 환경이면 어디서나 저장된 소스코드를 받아오거나, 수정하고 반영할 수 있다.</li>
  <li>일정 시점으로의 롤백이 필요할 경우, 얼마든지 과거의 특정 커밋 시점으로 돌아갈 수 있다.</li>
  <li>커밋별로 소스코드의 변경점을 비교할 수 있다.</li>
</ul>

<p>Jekyll 블로그의 소스코드는 Github를 통해 관리하므로, 소스코드를 수정하고 반영하기 위해선 Git의 사용이 필수적이다.</p>

<p>물론 별도의 Git 사용없이 Github 홈페이지 내부에서 글을 작성하듯이 파일을 추가하거나, 수정, 삭제할 수 있다. 그러나 이런 방법은 실서버에 즉시 배포되므로, 실수가 발생할 경우 그대로 노출되기 쉽다. 또한 오류가 발생했을 경우 컴파일 에러 트레이스를 확인할 수 없어 디버깅에도 문제가 생기므로, 능동적인 대처가 어렵다. 본인이 정말 Jekyll 배포 및 Markdown 작성 경험이 풍부한 것이 아니라면, Git을 통해 직접 로컬에서 수정하여 반영하는 방식을 취하기 바란다.</p>

<center>
	<a href="https://git-scm.com/" class="btn btn-info" target="_blank">Git 공식 홈페이지</a>
</center>

<p>Git은 위의 홈페이지에서 설치할 수 있다.</p>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90918409-90a3e280-e41f-11ea-846f-68332ffecdbe.png">
		<img src="https://user-images.githubusercontent.com/50317129/90918409-90a3e280-e41f-11ea-846f-68332ffecdbe.png" class="w6" />
	</a>
</figure>

<p>Git 홈페이지는 위와 같이 구성되어있다. 홈페이지에서 자체적으로 <strong>접속한 OS의 정보를 확인하고 가장 적합한 Git 버전을 추천</strong>한다. 페이지 좌측 상단의 모니터 오브젝트에서 현재 OS에 가장 적합한 Git 버전을 받아 설치한다.</p>

<h4 id="1-라이센스-동의">1. 라이센스 동의</h4>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90949816-b0222600-e486-11ea-95d7-7ee7150d4f4f.png">
		<img src="https://user-images.githubusercontent.com/50317129/90949816-b0222600-e486-11ea-95d7-7ee7150d4f4f.png" class="w3" />
	</a>
</figure>

<p>라이센스 동의 과정으로 [<span class="color-green">Next</span>] 버튼을 눌러 넘어간다.</p>

<h4 id="2-설치경로-선택">2. 설치경로 선택</h4>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90949836-f6778500-e486-11ea-8568-94fd7e13f358.png">
		<img src="https://user-images.githubusercontent.com/50317129/90949836-f6778500-e486-11ea-8568-94fd7e13f358.png" class="w3" />
	</a>
</figure>

<p>설치경로를 선택한다. 기본으로 지정하고 [<span class="color-green">Next</span>] 버튼을 누른다.</p>

<h4 id="3-설치옵션-선택">3. 설치옵션 선택</h4>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90949847-1e66e880-e487-11ea-82f3-18ede0e8660a.png">
		<img src="https://user-images.githubusercontent.com/50317129/90949847-1e66e880-e487-11ea-82f3-18ede0e8660a.png" class="w3" />
	</a>
</figure>

<p>설치 시 지정할 옵션을 선택한다. 각 옵션의 내용은 아래와 같다.</p>

<ul>
  <li>On the Desktop: 바탕화면 바로가기 만들기</li>
  <li><strong><span class="color-blue">Git Bash Here</span></strong>: 바탕화면에서 오른쪽 마우스 클릭 시 Git Bash 실행 컨텍스트 추가</li>
  <li><strong><span class="color-blue">Git GUI Here</span></strong>: 바탕화면에서 오른쪽 마우스 클릭 시 Git GUI 실행 컨텍스트 추가</li>
  <li>Git LFS: 대용량 파일 지원</li>
  <li>Associate .git* configuration files with the default text editor: git 설정파일을 기본 텍스트 편집기와 연결</li>
  <li>Associate .sh files to be run with Bash: [.sh] 파일을 Bash로 실행함.</li>
  <li>Use a TrueType font in console windows: 콘솔창의 폰트를 TrueType으로 사용</li>
  <li>Check daily for Git for Windows updates: 매일 Git 업데이트 확인</li>
</ul>

<p>원하거나, 원하지 않는 옵션을 확인하고 [<span class="color-green">Next</span>] 버튼을 누른다. 단, 파란색으로 하이라이팅 된 두 옵션 중 하나 이상은 활성화되어있는 것이 사용하기 편하다.</p>

<h4 id="4-시작메뉴-경로선택">4. 시작메뉴 경로선택</h4>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90952465-b6240100-e49e-11ea-9784-cb5a1695ffeb.png">
		<img src="https://user-images.githubusercontent.com/50317129/90952465-b6240100-e49e-11ea-9784-cb5a1695ffeb.png" class="w3" />
	</a>
</figure>

<p>시작 메뉴에 지정할 경로를 선택한다.</p>

<ul>
  <li>Don’t create a Start Menu folder: 시작 메뉴를 생성하지 않는다.</li>
</ul>

<p>원하거나, 원하지 않는 옵션을 확인하고 [<span class="color-green">Next</span>] 버튼을 누른다.</p>

<h4 id="5-git-편집기-선택">5. Git 편집기 선택</h4>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90952499-f97e6f80-e49e-11ea-95a0-818471fd3417.png">
		<img src="https://user-images.githubusercontent.com/50317129/90952499-f97e6f80-e49e-11ea-95a0-818471fd3417.png" class="w3" />
	</a>
</figure>

<p>Git을 사용하기 위한 기본 편집기를 선택한다. 기본 권장옵션은 Vim이며, 콤보박스를 통해 원하는 편집기를 선택할 수도 있다. 지원하는 편집기는 아래와 같다.</p>

<ul>
  <li>Nano Editor</li>
  <li><strong>Vim</strong></li>
  <li>Notepad++</li>
  <li>Visual Studio Code</li>
  <li>Visual Studio Code Insider</li>
  <li>Sublime</li>
  <li>Atom</li>
  <li>other</li>
</ul>

<p>편집기를 선택하고 [<span class="color-green">Next</span>] 버튼을 누른다. 처음이라면 기본값으로 두자.</p>

<h4 id="6-환경변수-지정">6. 환경변수 지정</h4>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90952606-f6d04a00-e49f-11ea-85d0-204d305f8f9b.png">
		<img src="https://user-images.githubusercontent.com/50317129/90952606-f6d04a00-e49f-11ea-85d0-204d305f8f9b.png" class="w3" />
	</a>
</figure>

<p>환경변수를 지정하는 옵션을 선택한다. 라디오버튼을 통해 원하는 옵션을 선택할 수 있다.</p>

<ul>
  <li>Use Git from Git Bash Only: Bash 환경에서만 Git 사용 가능 (환경변수 미변경)</li>
  <li><strong>Use Git from Windows Command Prompt</strong>: 윈도우 프롬프트에서 Git 사용 가능</li>
  <li>Use Git abnd optional Unix tools from the Windows Command Prompt: 윈도우 프롬프트에 Git 및 Linux 명령어 사용 가능</li>
</ul>

<p>환경변수 지정방법을 선택하고 [<span class="color-green">Next</span>] 버튼을 누른다. 처음이라면 기본값으로 두자.</p>

<h4 id="7-https-전송-방법-지정">7. HTTPS 전송 방법 지정</h4>

<figure>
	<a href="https://user-images.githubusercontent.com/50317129/90952734-0e5c0280-e4a1-11ea-8a9f-08a164f05b5e.png">
		<img src="https://user-images.githubusercontent.com/50317129/90952734-0e5c0280-e4a1-11ea-8a9f-08a164f05b5e.png" class="w3" />
	</a>
</figure>

<p>Git 사용 시 HTTPS 전송 방법을 선택한다.</p>

<ul>
  <li>Use The OpenSSH library: OpenSSH 라이브러리 사용</li>
  <li>Use The native Windows Secure Channel library: Wind</li>
</ul>
:ET